#include <a_samp>

#include <a_http>
native IsValidVehicle(vehicleid);
#include <a_mysql>
#define IZ_ENABLE_CASE_SENSITIVITY
#include <zcmd>
#include <sscanf2>
#include <streamer>
#include <regex>
#include <foreach>
#include <crashdetect>
#include <OPVD>// ON PLAYER VEHICLE DAMAGE
#include <GPDI>//ANTI DIALOG
#include <GetVehicleColor>
#include <timestamptodate>


forward UpdateSpeedo(playerid);
forward VehicleGasTimer(playerid);

#define ErrorMsg(%1,%2) SendClientMessage(%1,0xFF0000FF,%2)
//#define ErrorMsg(%1,%2) SendClientMessage(%1,0x9E0000FF,%2)
#define UsageMessage(%1,%2) SendClientMessage(%1, Bright_YELLOW, %2)

#define SLOTForHelmet 1
#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOTForHelmet, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));


stock IsABike(model)
{
    new result;
    switch(model)
    {
        case 509,481,510,462,448,581,522,461,521,523,463,586,468,471: result = 1;
        default: result = 0;
    }
    return result;
}
#define GELTONA 0xFFFF00AA
#define DGELTONA 0xE7BA21AA
#define ZALIA 0x33CC00AA
#define ZALIA2 0x90C695FF
#define PILKA 0xAFAFAFFF
#define Bright_YELLOW 0xe39300AA
#define DARK_YELLOW 0x897016AA
#define ORANGE 0xff9016FF
#define ZYDRA 0x33ccffAA
#define MELYNA 0x42a8beAA
#define RAUDONA 0xFF0000FF
#define BALTA 0xFFFFFFAA

#define CommandGuideColor 0xc68200FF

#define PLAYER_CLOTHES_DRABUZIAI 0
#define PLAYER_CLOTHES_UNIFORM 1
#define PLAYER_CLOTHES_KITI 2

#define NematomaPilka (PILKA & 0xFFFFFF00)
#define BMX  481
#define BIKE 509
#define BMXS 481
#define MTBIKE 510

#undef MAX_PLAYERS
#define MAX_PLAYERS 100

#define IsValidEmail(%1) \
    regex_match(%1, "[a-zA-Z0-9_.]+@([a-zA-Z0-9-]+.)+[a-zA-Z]{2,4}")

#define IsValidNickName(%1) \
    regex_match(%1, "([A-Z]{1,1})[a-z]{2,9}+_([A-Z]{1,1})[a-z]{2,9}")

#define PlusPlayerScore(%1,%2) \
    SetPlayerScore(%1, GetPlayerScore(%1) + %2)

#define PlusPVarInt(%1,%2,%3) \
    SetPVarInt(%1, %2, %3 + GetPVarInt(%1, %2))
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define f_public:%0(%1) 				forward %0(%1);		public %0(%1)

#define DIALOG_BASE_X   	75.0
#define DIALOG_BASE_Y   	130.0
#define DIALOG_WIDTH    	550.0
#define DIALOG_HEIGHT   	180.0
#define SPRITE_DIM_X    	60.0
#define SPRITE_DIM_Y    	70.0
#define ITEMS_PER_LINE		7
#define SELECTION_ITEMS		21

#define SAUGIU_ZONU_SKAICIUS 9
new SaugiosZonos[SAUGIU_ZONU_SKAICIUS];

#define KARO_ZONU_SKAICIUS 6
new KaroZonos[KARO_ZONU_SKAICIUS];

#define GREICIO_MATUOKLIU_SKAICIUS 23
new GreicioMatuokliai[GREICIO_MATUOKLIU_SKAICIUS];

new bool:PlayerWeaponsAreChanging[MAX_PLAYERS];
new PlayerWeapons[MAX_PLAYERS][13];//Naudosiu anti-cheatui..
new PlayerWeaponAmmo[MAX_PLAYERS][13];//Naudojama anti-cheat..

new PlayerModelsToShowNum[MAX_PLAYERS];
new PlayerModelsToShow[MAX_PLAYERS][312];
new PlayerText:PlayerSelectionItems[MAX_PLAYERS][SELECTION_ITEMS];
new PlayerSelectionItemsTag[MAX_PLAYERS][SELECTION_ITEMS];

new AdminsVartai1;
new bool:AdminsVartai1State;

new KMAVartai;
new bool:KMAVartaiState;
new KMAArea;


new AdminsVartai2;
new bool:AdminsVartai2State;

new AdminsVartai3;
new bool:AdminsVartai3State;

new TaksiFVartai;
new bool:TaksiFVartaiState;

new AfterUpdateEventCar,Text3D:AUEventCarLabel;
new AUEventCarColors[2];
new bool:AUEventCarStarted = false;
new AUEventCarsLeft = 0;
new DateAUEventStarts[5];
new AUEVentCarBought[5][24];
new Text3D:likovaistulabel;
new Text3D:detaliulabel;



new bool:RadistaiGarazas;

new SunkvTraileris;
new bool:SunkvTrailerisSpawned = false;


enum PoliceSettingsInfo{
	SKIN280_RANGAS,
	SKIN281_RANGAS,
	SKIN282_RANGAS,
	SKIN283_RANGAS,
	SKIN288_RANGAS,
	SKIN284_RANGAS,
	Vehicle497,
	Vehicle597,
	Vehicle523,
	Vehicle599,
	Vehicle430
}
new PoliceSettings[PoliceSettingsInfo];
enum HospitalSettingsInfo{
    VEHICLE416_RANGAS,
    VEHICLE490_RANGAS,
    VEHICLE487_RANGAS,
    VEHICLE452_RANGAS,
    SKIN274_RANGAS,
    SKIN275_RANGAS,
    SKIN70_RANGAS,
    HPArmourCost,
    vaistai
}
enum GamykluLikutis{
	trvaistai,
	detales,
}
new Gamyklos[GamykluLikutis];

new JailDoorsOut1,JailDoorsIn,KaleimoMaistas;
new HPSettings[HospitalSettingsInfo];


enum TaksiFSettingsInfo{
    SKIN240_RANGAS,
    SKIN187_RANGAS2F,
    Vehicle2F420,
    Vehicle2F560,
    Vehicle2F438,
    SKIN189_RANGAS,
    TaksiFKiloKaina
}
new TaksiFSettings[TaksiFSettingsInfo];

enum MechanikuSettingsInfo{
    Mech50SKIN_RANGAS,
    Mech8SKIN_RANGAS,
    Mech42SKIN_RANGAS,
    Mech525Vehicle_RANGAS,
    Mech602Vehicle_RANGAS
}
new MechanikuSettings[MechanikuSettingsInfo];

new MechanikuGVartai;
new bool:MechanikuGVState;
new Text3D:MechanikuGVText;

new MechanikuSVartai;
new bool:MechanikuSVState;
new Text3D:MechanikuSVText;

//FURISTAI
new FURISTAI_ISIDARBINIMAS;
enum FuristaiSettingsInfo{
    F435Vehicle_RANGAS,
    F591Vehicle_RANGAS,
    F515Vehicle_RANGAS,
    F443Vehicle_RANGAS,
    //F450Vehicle_RANGAS,
    F584Vehicle_RANGAS,
    F44SKIN_RANGAS,
    F73SKIN_RANGAS,
    F128SKIN_RANGAS,
    F183SKIN_RANGAS,
	Vaistu_Krovimas,
	Tr_Krovimas,
	Detaliu_Krovimas
}
new FURISTAISettings[FuristaiSettingsInfo];
new FuristaiPagrRG,FuristaiPagrLG,Text3D:FuristaiPagrGText,bool:FuristaiPagrGState;

new FuristaiLSGL,FuristaiLSGR,Text3D:FuristaiLSGText,bool:FuristaiLSGState;
new FuristaiLVGL,FuristaiLVGR,Text3D:FuristaiLVGText,bool:FuristaiLVGState;

//new MaistoPasikrovimoArea,MaistoIskrovimoArea;
//new SmelioPasikrovimoArea,SmelioIskrovimoArea;
new ElektronikosPasikrovimoArea,ElektronikosIskrovimoArea;
new DegaluPripildymoArea,DegaluPildymoArea;



//PASIEKIMAI ZONOS
/*new RedBridgeCableArea;
new OldCinemaArea;
new HighestSFBuildingArea;
new BaseBallArea;
new PyramidArea;
new HighestMountainArea;*/

//
enum LuccheseMafiaInfo{
    Lucchese124SKIN_RANGAS,
    Lucchese125SKIN_RANGAS,
    Lucchese126SKIN_RANGAS,
    Lucchese113SKIN_RANGAS,
    LuccheseVEHICLE405_RANGAS,
    LuccheseVEHICLE498_RANGAS,
    LuccheseVEHICLE508_RANGAS,
    LuccheseVEHICLE468_RANGAS,
    LuccheseVEHICLE452_RANGAS,
    LuccheseAmmoShotgun,
    LuccheseAmmoDeagle,
    LuccheseAmmoAK47,
    LuccheseAmmoSniper
}
new LuccheseMafiaSettings[LuccheseMafiaInfo];

new LuccheseMafijaGates;
new bool:LuccheseMafijaGatesState;
new Text3D:LuccheseMafijaGatesText;
new bool:LuccheseMafijaGarageDoorsState;
new LuccheseMafijaGarageDoors;

new bool:MafijuBendraRacijaOff;

//
new EnterPickupBoxGym,ExitPickupBoxGym;
new ClothesBoxGymRed,ClothesBoxGymBlue;

new EnterVaistine, ExitVaistine;

new EnterNTA, ExitNTA[2];
new NarkSlotas, NarkTalpa, NamoMokesciai;

new HealNaujokas;

new PickupBuyHelmet;

new AukotiFondasPickup;

new KioskaiPickup[6];

//
enum GenoveseMafiaInfo{
    Genovese121SKIN_RANGAS,
    Genovese122SKIN_RANGAS,
    Genovese123SKIN_RANGAS,
    Genovese98SKIN_RANGAS,
    GenoveseVEHICLE445_RANGAS,
    GenoveseVEHICLE498_RANGAS,
    GenoveseVEHICLE508_RANGAS,
    GenoveseVEHICLE468_RANGAS,
    GenoveseAmmoShotgun,
    GenoveseAmmoDeagle,
    GenoveseAmmoAK47,
    GenoveseAmmoSniper
}
new GenoveseMafiaSettings[GenoveseMafiaInfo];


new GenoveseMafijaGates;
new bool:GenoveseMafijaGatesState;
new Text3D:GenoveseMafijaGatesText;
new bool:GenoveseMafijaGarageDoorsState;
new GenoveseMafijaGarageDoors;


new bool:LuccheseGatesSideABroken = false;
new bool:LuccheseGatesSideAPlanting = false;
new bool:LuccheseGatesSideAPlanted = false;
new LuccheseGatesSideABombObject;
new LuccheseGatesSideBBombObject;
new bool:LuccheseGatesSideBBroken = false;
new bool:LuccheseGatesSideBPlanting = false;
new bool:LuccheseGatesSideBPlanted = false;
new bool:LuccheseGatesDown = false;

new LuccheseDoorsBombObject;
new bool:LuccheseDoorsPlanting = false;
new bool:LuccheseDoorsPlanted = false;
new bool:LuccheseDoorsDown = false;

new bool:GenoveseGatesSideABroken = false;
new bool:GenoveseGatesSideAPlanting = false;
new bool:GenoveseGatesSideAPlanted = false;
new GenoveseGatesSideABombObject;
new GenoveseGatesSideBBombObject;
new bool:GenoveseGatesSideBBroken = false;
new bool:GenoveseGatesSideBPlanting = false;
new bool:GenoveseGatesSideBPlanted = false;
new bool:GenoveseGatesDown = false;

new GenoveseDoorsBombObject;
new bool:GenoveseDoorsPlanting = false;
new bool:GenoveseDoorsPlanted = false;
new bool:GenoveseDoorsDown = false;
//
new EnterZIPClothingSalon,ExitZIPClothingSalon;
//
new EnterSFPoliceDep,ExitSFPoliceDep,PickupSFPoliceFinePayment;
//
new EnterSavivaldybePickup;
new ExitSavivaldybePickup;


new SavivaldybeAlgos;

//


new EnterCluckinBellPickup,ExitCluckinBellPickup;
new CluckinBell_Maistas;


new EnterWellPicaPickup1,ExitWellPicaPickup1;
new WellPica_Maistas;

new EnterBurgerShotPickup1,ExitBurgerShotPickup1;
new BurgerStKurjeris_ISIDARBINIMAS;
new BurgerShot_Maistas;
new EnterBurgerShotPickup2,ExitBurgerShotPickup2;
new BurgerSt2Kurjeris_ISIDARBINIMAS;
//
new Valytojai_ISIDARBINIMAS;

enum ValytojaiMisijosInfo
{
    bool:MisijaRuns,
    MisijaGavesValytojas,
    MisijosObjektas1,
    MisijosObjektas2,
    MisijosObjektas3,
    MisijosObjektas4,
    MisijosObjektas1M,
    MisijosObjektas2M,
    MisijosObjektas3M,
    MisijosObjektas4M,
    Float:MisijosObjektas1X,
    Float:MisijosObjektas2X,
    Float:MisijosObjektas3X,
    Float:MisijosObjektas4X,
    Float:MisijosObjektas1Y,
    Float:MisijosObjektas2Y,
    Float:MisijosObjektas3Y,
    Float:MisijosObjektas4Y,
    Float:MisijosObjektas1Z,
    Float:MisijosObjektas2Z,
    Float:MisijosObjektas3Z,
    Float:MisijosObjektas4Z,


    Float:MisijosObjektas1RX,
    Float:MisijosObjektas2RX,
    Float:MisijosObjektas3RX,
    Float:MisijosObjektas4RX,
    Float:MisijosObjektas1RY,
    Float:MisijosObjektas2RY,
    Float:MisijosObjektas3RY,
    Float:MisijosObjektas4RY,
    Float:MisijosObjektas1RZ,
    Float:MisijosObjektas2RZ,
    Float:MisijosObjektas3RZ,
    Float:MisijosObjektas4RZ,

    Float:MisijosCP_X,
    Float:MisijosCP_Y,
    Float:MisijosCP_Z,
    MisijosCPD
}
#define VALYTOJAI_MISIJU_SKAICIUS 29
new ValytojaiMisijos[VALYTOJAI_MISIJU_SKAICIUS][ValytojaiMisijosInfo];

new AutoBus_ISIDARBINIMAS;
new AutobusoNr[5];
new Lektuvas[8];
new Laivas[8];
new Lektuvu_ISIDARBINIMAS;
new Gaisrine_ISIDARBINIMAS;
new Gaisrine_Gesintuvas;
new GaisrineVartai[4];
new bool:GaisrineVartaiState[4];
//
enum RadistaiInfo{
    RadistaiVEHICLE488_RANGAS,
    RadistaiVEHICLE516_RANGAS,
    RadistaiVEHICLE582_RANGAS,
    RadistaiSKIN184_RANGAS,
    RadistaiSKIN185_RANGAS,
    RadistaiSKIN289_RANGAS
}
new RadistaiSettings[RadistaiInfo];
new Radistai_ISIDARBINIMAS;

new RadistaiPickupGaraze,RadistaiPickupLauke,RadistaiPickupAntStogo;

new Eteris_LPavadinimas[49];
new Eteris_LastUpdateTime;
new Eteris_LStarter[24];

new RadistaiVartai,Text3D:RadistaiText;
new bool:RadistaiVartaiState = false;
//
enum SPDInfo{
    SPDVEHICLE411_RANGAS,
    SPDVEHICLE451_RANGAS,
    SPDVEHICLE402_RANGAS,
    SPDVEHICLE415_RANGAS,
    SPDVEHICLE522_RANGAS,
    SPDVEHICLE579_RANGAS,
    SPDVEHICLE560_RANGAS,
    SPDVEHICLE426_RANGAS,
    SPDSKIN164_RANGAS,
    SPDSKIN165_RANGAS,
    SPDSKIN294_RANGAS,
    SPDSKIN303_RANGAS,
    SPDSKIN304_RANGAS,
    SPDSKIN305_RANGAS
}
new SPDSettings[SPDInfo];
new SPD_ISIDARBINIMAS;
new SPD_GINKLAI;
new SPDGateObject[2];
new bool:SPDGateState;
new SPDGarageGates,bool:SPDGarageGatesState;
new SPDDoors1,SPDDoors2,bool:SPDDoors2State,bool:SPDDoors1State;
//
enum ARASInfo{
    ARASVEHICLE601_RANGAS,
    ARASVEHICLE541_RANGAS,
    ARASVEHICLE427_RANGAS,
    ARASVEHICLE528_RANGAS,
    ARASVEHICLE497_RANGAS
}
new ARASSettings[ARASInfo];
new ARAS_ISIDARBINIMAS;
new ARAS_AMUNICIJA;
new ARASPagrindiniaiVartai,bool:ARASPagrindiniaiVartaiState,Text3D:ARASPagrindiniaiVartaiText;

//


new A51_GINKLAI;
new A51_UZIMTA = 0;
new A52_UZIMTA = 0;
new Text3D:A51ZonaText,Text3D:A52ZonaText;
new A51ZonaPick,A52ZonaPick;

enum SviesaforaiData
{
    SfMirksintiRaud,
    SfRaudona,
    SfGeltona,
    SfZalia,
    SfMirksintiZalia,
    bool:SfRedOn
}
new Sviesaforai[12][SviesaforaiData];
new Sviesaforas1Area,Sviesaforas2Area,Sviesaforas3Area,Sviesaforas4Area;
new Sviesaforas5Area,Sviesaforas6Area,Sviesaforas7Area,Sviesaforas8Area;
new Sviesaforas9Area,Sviesaforas10Area,Sviesaforas11Area,Sviesaforas12Area;

enum PlayerInformation{
	SQLID,
	Loaded,
	LoggedIn,
	WrongPasswordAttempts,
	WrongVeritifyAttemps,
	Sex,
	PatvirtinimoKodas,
	Newbie,
	PlayedMinuteTimer,
	MoneyInPocket,
	MoneyInBank,
	Credits,
	JailTime,
	WantedLevel,
	Job,
	Club,
	DrivingTheory,
	DrivingTheoryMistakes,
	AutoLicense,
	AutoParkDriving,
	MotoLicense,
	MotoParkDriving,
	PilotoLicense,
	LostDLicenses,
	WeaponsLicense,
	PhoneBalance,
	PhoneState,
	TalkingWithPhone,
	PlayerTalkingWith,
	NeedToAnswer,
	PhoneCallTaxTimer,
	IsPlayerCalling,
	adminlvl,
	AdminLaikoPabaiga,
	VIP,
	VIPLaikoPabaiga,
	SeatBelt,
	Uzdarbis,
	LastDrivedCar,
	RaceCheckPointID,
	BEGA,
	AdminWeaponsCD,
    Cmd_S_CD,
    Cmd_V_CD,
	JobInvitation,
	JobInvitationTime,
	Direktorius,
	Pavaduotojas,
	DarboSutartiesPabaiga,
	DarboPradziosData[20],
	UniformosID,
	AprangosTipas,
	Drabuziai,
	Rangas,
	Vaistineles,
	bool:RecentlyDied,
	DeathSkin,
	LigoninesLaikas,
	bool:GavesBaudosPasiulyma,
	BaudaSkyresPlayeris,
	JobWarnings,
	AdminWarnings,
	VIPWarnings,
	LawWarnings,
	Kanapes,
	Kokainas,
	Heroinas,
	bool:PlacedKliutis1,
	Kliutis1Object,
	Text3D:Kliutis1ObjectLabel,
	bool:PlacedKliutis2,
	Kliutis2Object,
	Text3D:Kliutis2ObjectLabel,
	LogInSkin,
	OwnedVehicle1,
	OwnedVehicle2,
    NegaliRukytiKanapiu,
    HeroinoPriklausomybesLygis,
    KokainoPriklausomybesLygis,
    NegaliVartotiHeroino,
    NegaliVartotiKokaino,
    bool:GaliSuveiktiNark,
    bool:LeidziaTeleportacijaTo,
    bool:LeidziaTeleportacijaGet,
    bool:PlayerSpectatesOther,
    PlayerSpectatingTarget,
    Float:BeforeSpectatingX,
    Float:BeforeSpectatingY,
    Float:BeforeSpectatingZ,
    BeforeSpectatingPlayerSkin,
    BeforeSpectatingPlayerInterior,
    BeforeSpectatingPlayerWorld,
    bool:PlayerSpectatingAtPed,
    bool:PlayerSpectatingAtVehicle,
    PlayerWantedVehicleID,
    NegaliVIPGinklu,
    LastTimePlayerShotWithDeagle,
    DeagleShotsCount,
    LastTimePlayerShotWithSG,
    SGShotsCount,
    LastTimePlayerShotWithSniper,
    SniperShotsCount,
    MasinosKuriosBagazineID,
    LastTimePlayerFought,
    bool:CantPlayBecouseOfBan,
    BlokavimoTipas,
    bool:PlayerGetsBan,
    UzdarbisSiandien,
    SuSkydu,
    UnBanPriziuretojas,
    bool:SekimoBusena,
    SekimoTaikinys,
    bool:PlayerNeedToSpawn,
    bool:AfkState,
    AfkTime,
    AfkPoints,
    Float:PositionX,
    Float:PositionY,
    Float:PositionZ,
    Float:CameraPosX,
    Float:CameraPosY,
    Float:CameraPosZ,
    bool:ImamiPinigai,
    Float:PaslauguAtskaitosX,
    Float:PaslauguAtskaitosY,
    Float:PaslauguAtskaitosZ,
    bool:PlacedSpygliai,
    SpygliaiObject,
    BegaLaiko,
    BegaUzdejesPareigunas[24],
    bool:Surakintas,
    AtvykimaiTotal,
    BaudosTotal,
    SiandienZaista,
    PrisijungimoData[25],
    bool:Apklausineja,
    LastSentCommandTime,
    DirektoriuPriziuretojas,
    LyderiuPriziuretojas,
    bool:Suristas,
    bool:TazerioBusena,
    bool:GavoElektrosSoka,
    ElektrosSokasGalioja,
    bool:TuriDeze,
    Job1XP,
    Job2XP,
    Job4XP,
    Job5XP,
    Job7XP,
    Job8XP,
    Job9XP,
    Job10XP,
    Job21XP,
    TuriBankoSaskaita,
    BankoSaskaitosPin,
    bool:LigoninesKlientas,
    KicksForRapidShots,
    bool:MoneyStackOnBack,
    bool:RadijosPasnekovas,
    NuobaudosUzGreicioVirsijima,
    bool:SuSalmu,
    SunkvParkDriving,
    SunkvLicense,
    MutedPlayer,
    VehiclePlayerExitedLastTime,
    GasStationTimerOrl,
    bool:GasStationTimerRunsOrl,
    Float:PiltaDegalu,
    Float:SumaUzDegalus,
    DegaluTipasKuriPila,
    Float:CostOfLitreFuel,
    HousePlayerIsLookingAt,
    PlayerOfferHouseTo,
    PlayerOfferHouseCost,
    HouseWasOffered,
    bool:PrivateMode,
    GautosZinutes,
    ZaistaTotal,
    bool:Patrulis,
    Salmas18645,
    PlayerWhoGaveMute[24],
    Text3D:PlayerMuteLabel,
    MatuokliuBalai,
    Float:PlayerHealthAC,
    bool:PlayerHealthACStop,
    Float:PlayerArmourAC,
    bool:PlayerArmourACStop,
    bool:ACLoaded,
    Emigruotas,
    bool:PasiekimaiLoaded,
    Pasiekimas1,
    Pasiekimas2,
    Pasiekimas3,
    Pasiekimas4,
    Pasiekimas5,
    Pasiekimas6,
    Pasiekimas7,
    Pasiekimas8,
    Pasiekimas9,
    Pasiekimas10,
    Pasiekimas11,
    Pasiekimas12,
    Pasiekimas13,
    Pasiekimas14,
    Pasiekimas15,
    Pasiekimas16,
    Pasiekimas17,
    Pasiekimas18,
    Pasiekimas19,
    Pasiekimas20,
    Pasiekimas21,
    Pasiekimas22,
    Pasiekimas23,
    Pasiekimas24,
    Pasiekimas25,
    Pasiekimas26,
    Pasiekimas27,
    Pasiekimas28,
    Pasiekimas29,
    Pasiekimas30,
    Pasiekimas31,
    Pasiekimas32,
    Pasiekimas33,
    Pasiekimas34,
    Pasiekimas35,
    Pasiekimas36,
    Pasiekimas37,
    Pasiekimas38,
    Pasiekimas39,
    Pasiekimas40,
    Pasiekimas41,
    Pasiekimas42,
    bool:GalimaVykdytiPasiekimus,
    LaikoMasinosTeisesKartu,
    AlgosBonusas,
    PrivPriziuretojas,
    DayOfRegistration[14],
    GarageNumber,
    DarboPalikimoPriezastis[90],
    TargettedPlayerID,
    SelectedCost,
    Text3D:PlayerAfkLabel,
    PagydimaiTotal,
    ClothesBeforeJail,
    AprangaBeforeJail,
    NuveztiKroviniai,
    bool:VykdoVeiksma,
    TimeWorkedWithCarToday,
    TimeWorkedWithCarTotal,
    SelectionListItemAukos,
    LastTimePressedKey,
    bool:ReceivedWeaponsOffer,
    WeaponsOfferGiverID,
    WeaponsOfferSCode[6],
    WeaponsOfferWeaponID,
    WeaponsOfferAmmo,
    WeaponsOfferSum,
    WeaponsOfferCanGetAt,
    DrugsOfferSCode[6],
    DrugsOfferGiverID,
    DrugsOfferDrugID,
    DrugsOfferAmount,
    DrugsOfferSum,
    bool:ReceivedDrugsOffer,
    DrugsOfferCanGetAt,
    ArmourOfferCanGetAt,
    ArmourOfferSCode[6],
    ArmourOfferGiverID,
    ArmourOfferSum,
    bool:ReceivedArmourOffer,
    VaistuOfferCanGetAt,
    VaistuOfferSCode[6],
    VaistuOfferGiverID,
    VaistuOfferSum,
    bool:ReceivedVaistuOffer,
    DatePlayerBecameDir[12],
    DatePlayerBecamePav[12],
    DirWarnings,
    PavWarnings,
    Float:Hunger,
    SelectedMGVItem,
    SelectedFoodItem,
    FirstOwnedVehicleID,
    SecondOwnedVehicleID,
    SellVehToServerSCode[6],
    BuyVehicleFPlayerSCode1[6],
    bool:ReceivedOfferTBV1,
    OfferExpiresAtTBV1,
    OfferTBV1GiverID,
    OfferTBV1GiverSQLID,
    OfferTBV1Sum,
    BuyVehicleFPlayerSCode2[6],
    bool:ReceivedOfferTBV2,
    OfferExpiresAtTBV2,
    OfferTBV2GiverID,
    OfferTBV2GiverSQLID,
    OfferTBV2Sum,
    MoneyFromBussines,
    TimesHelped,
    PlayerAskedHelpAt,
    bool:PlayerNeedAnswer,
    PlayerCanAskAt,
    RestrictedUseOfV,
    BoughtRareSabre,
    PlayerCanWVIPAt,
    bool:RecKauliukaiOffer,
    RecKauliukaiOfferTill,
    SentKauliukaiOfferUntill,
    bool:SentKauliukaiOffer,
    KauliukaiMoney,
    KauliukaiOfferIniciatorID,
    KauliukaiCode[6],
    SelectedVerslasID,
    Avietes,
    Bruknes,
    Zemuoges,
    Melynes,
    Braskes,
    Krepselis,
    bool:SuKrepsiuAntRanku,
    KrepsioObjektas,
    UogosToday,
    UogosTotal,
    MathToday,
    MathTotal,
    bool:RodoAlki,
    bool:RodoItarima,
    bool:RodoLaikrodi,
    KartingaiTicket,
    bool:ZaidziaKartingais,
    bool:ReceivedKartsOffer,
    KartsOfferExpiresAt,
    KartOfferSenderSQLid,
    KartsOfferMoney,
    KartsRatai,
    KartsCode[6],
    KartsGameID,
    ReceivedXPFromAFK,
    ReceivedMoneyFromAFK,
    SpentTimeInAFKArea,
    IPAddress[24],
    IPApsauga,
    SecurityCodeCheck,
    Password[36],
    SecondaryPassword[36],
    FirstBusinessSlot,
    SecondBusinessSlotBought,
    SecondBusinessSlot,
    KartsLaimejoSiandien,
    KrovimoLaikas,
    VaistuLaikas,
    bool: Kraunasi,
    bool: KraunuTr,
    bool: LaukiuVaistu,
    bool: KraunasiDetales,
    furistams,
    KartsLaimejoTotal,
    VerslininkoLicenzija,
    LektuvuCP,
    LaivuCP,
    bool: VaziuotiToliau,
    TuriuNamoVaistu,
    bool: TuriuMaisa,
	TuriuNama,
	AtidariauSlota
}
new PlayerDB[MAX_PLAYERS][PlayerInformation];
new PlayerText:WantedDraw1[MAX_PLAYERS];
new PlayerText:WantedDraw2[MAX_PLAYERS];

new LeidimasVersluiPick;

new InformacijaNaujokui[3];

new bool:CartsGameDrawIsVisible[MAX_PLAYERS];

new PlayerText:KartsStatsDraw[MAX_PLAYERS][6];

//
new AFKZonaRoomArea[2];
//
new bool:ArLektuvuCP;
new bool:ArLaivuCP;
//
new DienosVarzybos;
new DienosPrizas;
#define TOP_BY_TIME 0
#define TOP_BY_Uzdarbis 1
#define TOP_BY_Math 2
#define TOP_BY_Fruits 3
#define TOP_BY_Carts 4
#define XP_PRIZE 0
#define EUR_PRIZE 1
#define CRED_PRIZE 2

//

enum CartsGamesInfo
{
    CGI_P1_SQLID,
    CGI_P2_SQLID,
    CGI_Laps,
    CGI_Money,
    bool:CGI_GameInProgress,
    CGI_P1_Points,
    CGI_P2_Points,
    CGI_Cart1,
    CGI_Cart2,
    CGI_P1_Name[24],
    CGI_P2_Name[24]
}
new CartGamesDB[MAX_PLAYERS][CartsGamesInfo];
new CartGamesRunning = 0;

new KartingaiKasa;
new NamoVaistuPirkimas;
//


new UogosShop;
new Text3D:UogosStats;
new Stats_Avietes, Stats_Bruknes, Stats_Zemuoges, Stats_Melynes, Stats_Braskes, Stats_Total,Stats_TotalToday;


new KrepseliaiSkaicius = 0;
new KiekKrumu = 0;
new Float:KrumuPos[20][3];
new Float:LastKrumuPos[MAX_PLAYERS][3];


new bool:MathProblemWaiting = false;
new MathProblemsAnswer = 0;
new MathProblemsBounty = 0;



#define VERSLU_SKAICIUS 50
enum VERSLU_INFORMACIJA
{
    VDB_SQLID,
    VDB_Pavadinimas[42],
    Float:VDB_X,
    Float:VDB_Y,
    Float:VDB_Z,
    VDB_WorldID,
    VDB_InteriorID,
    VDB_Nupirktas,
    VDB_SavininkoVardas[24],
    VDB_SavininkoSQLID,
    VDB_Kaina,
    VDB_Pajamos,
    VDB_VersloPelnas,
    VDB_Lygis,
    VDB_Parduodamas,
    VDB_PardavimoKaina,
    VDB_RinkosKaina,
    Text3D:VDB_Label,
    VDB_Pickup,
    VDB_Valdymas,
    VDB_StopsGivingIncomeAt,
    VDB_PinigaiUzdirbtiSiandien
}
new VerslaiDB[VERSLU_SKAICIUS][VERSLU_INFORMACIJA];
new VerslaiPoolSize = 0;

new Text:WaterMarkLogo[3];

new PlayerAchievementTimerRunsTill[MAX_PLAYERS];
new PlayerAchievementTimer[MAX_PLAYERS];
new PlayerText:PlayerAchievementDraw[MAX_PLAYERS];
new Text:pasiekimu_td_g[11];

new PlayerText:SekimasTD1[MAX_PLAYERS];
new PlayerText:SekimasTD2[MAX_PLAYERS];
new PlayerText:SekimasTD3[MAX_PLAYERS];
new PlayerText:SekimasTD4[MAX_PLAYERS];
new PlayerText:SekimasTD5[MAX_PLAYERS];
new PlayerText:SekimasTD6[MAX_PLAYERS];
new PlayerText:SekimasTD7[MAX_PLAYERS];


new PlayerText:Alkis[MAX_PLAYERS][5];
new UpdateHungerTimer[MAX_PLAYERS];
new MGVMeniuItemsIDS[MAX_PLAYERS][20];

new TimeZoneNum = 3;//Laiko zona 3 vasara,2 - ziema.

new
    SpeedoTimer [ MAX_PLAYERS ],
    TimerForGas [ MAX_PLAYERS ],
    Text:SpeedoTD [ 6 ],
    PlayerText:SpeedoPlayerTD [ MAX_PLAYERS ] [ 4 ]
;
new CantCallT[MAX_PLAYERS][9];

enum IskvietimaiInfo
{
    bool:Iskviesta,
    TarnybosNumeris,
    KvieciantisID,
    KvieciantisVP[24],
    bool:IskvietimasPriimtas,
    VaziuojantisID,
    IskvietimoLaikas
}

new Iskvietimas[MAX_PLAYERS*9][IskvietimaiInfo];

new playersOnline = 0;
new bool:EveryMinuteTimerCreated = false;


enum GarazaiInformacija
{
    GarazasNupirktas,
    GarazasNupirktasIki,
    GarazoSavininkas[24],
    GarazoVartai,
    Text3D:GarazoLabel,
    bool:GarazasAtidarytas,
    Float:GCordsX,
    Float:GCordsY,
    Float:GCordsZ,
    Float:GCordsRX,
    Float:GCordsRY,
    Float:GCordsRZ
}
#define GARAZU_SKAICIUS 32
new GarazaiInfo[GARAZU_SKAICIUS][GarazaiInformacija];
new GarazaiArea1;//Ligonines
new GarazaiArea2;//PRIE VM

new Garazai1Pirkimas;
new Garazai2Pirkimas;



#define MAX_HOUSES 2000

enum HousesInformation{
    HouseID,
    HouseBought,
    HousePickupID,
    HouseCost,
    Text3D:HouseLabel,
    Float:HousePosX,
    Float:HousePosY,
    Float:HousePosZ,
    HouseOwner[24],
    HouseVirtualWorld,
    HouseInteriorNumber,
    HouseForCredits,
    HouseDoorsLocked,
    HouseOfferedCost,
    HouseOfferReceiver,
    HouseOfferExpiresAt,
    HouseMoneyInside,
    kieknamie,
    VaistaiNamie,
    NamoRaktas,
    Siuksles,
	NarkSlotState,
	KiekTelpaNarku,
	NarkHome,
	NarkHomeHeroinas,
	NarkHomeKokainas,
	SviesaIjungta,
	HouseMokesciai
}

new HouseInfo[MAX_HOUSES][HousesInformation];
new LoadedHouses = 0;
new HousesWithOwners = 0;
new ExitFromHouse[10];

enum SpygliuInfo{
    Float:SpygliaiX,
    Float:SpygliaiY,
    Float:SpygliaiZ,
    bool:SpygliaiPadeti,
    SpygliuObjektas,
    Text3D:SpygliuLabel
}
new SpygliaiInfo[MAX_PLAYERS][SpygliuInfo];

new bool:GalimaPaleistiSkaiciavima = true;
new SERVERIO_ORAS = 0;

new Text3D:Tmp3DTextLabels[MAX_3DTEXT_GLOBAL];
new bool:Tmp3DTextLabelsExists[MAX_3DTEXT_GLOBAL];
new Tmp3DTextLabelsExistsTill[MAX_3DTEXT_GLOBAL];

#define SKINSELECT_TYPE_UNIFORMS 1
#define SKINSELECT_TYPE_CLOTHESFCreds 2
#define SKINSELECT_TYPE_PAPLUDIMIO 3
//---------PARDUODAMØ TRANSPORTO PRIEM.TALPOS DEGALU
new const DegaluTalpa[212] = {
        70, // Landstalker.
        45, // Bravura.
        57, // Buffalo.
        115, // Linerunner.
        51, // Perrenial.
        63, // Sentinel.
        247, // Dumper.
        115, // Firetruck.
        157, // Trashmaster.
        70, // Stretch.
        50, // Manana.
        80, // Infernus.
        66, // Voodoo.
        95, // Pony.
        110, // Mule.
        50, // Cheetah.
        60, // Ambulance.
        158, // Leviathan.
        80, // Moonbeam.
        76, // Esperanto.
        70, // Taxi.
        73, // Washington.
        80, // Bobcat.
        35, // Mr Whoopee.
        89, // BF Injection.
        368, // Hunter.
        72, // Premier.
        115, // Enforcer.
        105, // Securicar.
        60, // Banshee.
        115, // Predator.
        185, // Bus.
        458, // Rhino.
        177, // Barracks.
        87, // Hotknife.
        0, // Trailer 1.
        65, // Previon.
        155, // Coach.
        90, // Cabbie.
        68, // Stallion.
        85, // Rumpo.
        10, // RC Bandit.
        90, // Romero.
        210, // Packer.
        150, // Monster.
        63, // Admiral.
        155, // Squallo.
        87, // Seasparrow.
        15, // Pizzaboy.
        100, // Tram.
        0, // Trailer 2.
        78, // Turismo.
        110, // Speeder.
        125, // Reefer.
        140, // Tropic.
        195, // Flatbed.
        80, // Yankee.
        59, // Caddy.
        71, // Solair.
        65, // Berkley's RC Van.
        75, // Skimmer.
        25, // PCJ-600
        27, // Faggio.
        30, // Freeway.
        10, // RC Baron.
        10, // RC Raider.
        55, // Glendale.
        65, // Oceanic.
        25, // Sanchez.
        75, // Sparrow.
        155, // Patriot.
        30, // Quad.
        60, // Coastguard.
        40, // Dinghy.
        45, // Hermes.
        80, // Sabre.
        85, // Rustler.
        185, // ZR-350.
        80, // Walton.
        40, // Regina.
        60, // Comet.
        0, // BMX.
        79, // Burrito.
        82, // Camper.
        258, // Marquis.
        175, // Baggage.
        250, // Dozer.
        180, // Maverick.
        165, // News Chopper.
        87, // Rancher.
        98, // FBI Rancher.
        66, // Virgo.
        55, // Greenwood.
        240, // Jetmax.
        180, // Hotring.
        175, // Sandking.
        61, // Blista Compact.
        254, // Police Maverick.
        150, // Boxville.
        125, // Benson.
        70, // Mesa.
        10, // RC Goblin.
        100, // Hotring Racer A.
        100, // Hotring Racer B.
        50, // Bloodring Banger.
        140, // Rancher.
        70, // Super GT.
        75, // Elegant.
        115, // Journey.
        0, // Bike.
        0, // Mountain Bike.
        190, // Beagle.
        120, // Cropdust.
        150, // Stunt.
        200, // Tanker.
        252, // Roadtrain.
        56, // Nebula.
        49, // Majestic.
        80, // Buccaneer.
        450, // Shamal.
        300, // Hydra.
        30, // FCR-900.
        45, // NRG-500.
        75, // HPV-1000.
        160, // Cement Truck.
        120, // Tow Truck.
        45, // Fortune.
        60, // Cadrona.
        210, // FBI Truck.
        80, // Willard.
        20, // Forklift.
        40, // Tractor.
        150, // Combine.
        70, // Feltzer.
        85, // Remington.
        60, // Slamvan.
        55, // Blade.
        500, // Freight.
        554, // Streak.
        100, // Vortex.
        50, // Vincent.
        70, // Bullet.
        60, // Clover.
        95, // Sadler.
        80, // Firetruck LA.
        65, // Hustler.
        42, // Intruder.
        45, // Primo.
        388, // Cargobob.
        40, // Tampa.
        166, // Sunrise.
        157, // Merit.
        98, // Utility.
        59, // Nevada.
        144, // Yosemite.
        158, // Windsor.
        150, // Monster A.
        150, // Monster B.
        64, // Uranus.
        67, // Jester.
        65, // Sultan.
        66, // Stratum.
        51, // Elegy.
        354, // Raindance.
        10, // RC Tiger.
        49, // Flash.
        45, // Tahoma.
        166, // Savanna.
        55, // Bandito.
        0, // Freight Flat Trailer.
        0, // Streak Trailer.
        15, // Kart.
        20, // Mower.
        75, // Duneride.
        35, // Sweeper.
        70, // Broadway.
        80, // Tornado.
        890, // AT-400.
        185, // DFT-30.
        80, // Huntley.
        75, // Stafford.
        50, // BF-400.
        80, // Newsvan.
        30, // Tug.
        0, // Trailer 3.
        60, // Emperor.
        50, // Wayfarer.
        64, // Euros.
        82, // Hotdog.
        62, // Club.
        0, // Freight Box trailer Carriage.
        0, // Trailer 3.
        547, // Andromada.
        150, // Dodo.
        5, // RC Cam.
        150, // Launch.
        87, // LSPD.
        90, // SFPD.
        115, // LVPD.
        130, // Police Ranger.
        55, // Picador.
        115, // S.W.A.T. Van.
        58, // Alpha.
        67, // Pheonix.
        50, // Glendale.
        42, // Sadler shit.
        0, // Luggage Trailer A.
        0, // Luggage Trailer B.
        0, // Stair Trailer.
        85, // Boxville.
        0, // Farm Plow.
        0 // Utility Trailer.
};
//---------PARDUODAMØ TRANSPORTO Greitis
new const MaxGreitis[212] = {
        157, // Landstalker.
        0, // Bravura.
        184, // Buffalo.
        0, // Linerunner.
        0, // Perrenial.
        163, // Sentinel.
        0, // Dumper.
        0, // Firetruck.
        0, // Transhmaster.
        0, // Stretch.
        0, // Manana.
        221, // Infernus.
        166, // Voodoo.
        0, // Pony.
        0, // Mule.
        191, // Cheetah.
        0, // Ambulance.
        0, // Leviathan.
        115, // Moonbeam.
        166, // Esperanto.
        0, // Taxi.
        153, // Washington.
        0, // Bobcat.
        0, // Mr Whoopee.
        0, // BF Injection.
        0, // Hunter.
        172, // Premier.
        0, // Enforcer.
        0, // Securicar.
        200, // Banshee.
        0, // Predator.
        0, // Bus.
        0, // Rhino.
        0, // Barracks.
        0, // Hotknife.
        0, // Trailer 1.
        0, // Previon.
        0, // Coach.
        0, // Cabbie.
        168, // Stallion.
        0, // Rumpo.
        0, // RC Bandit.
        0, // Romero.
        0, // Packer.
        0, // Monster.
        163, // Admiral.
        0, // Squalo.
        0, // Seasparrow.
        0, // Pizzaboy.
        0, // Tram.
        0, // Trailer 2.
        193, // Turismo.
        0, // Speeder.
        0, // Reefer.
        0, // Tropic.
        0, // Flatbed.
        0, // Yankee.
        0, // Caddy.
        171, // Solair.
        0, // Berkley's RC Van.
        0, // Skimmer.
        0, // PCJ-600
        0, // Faggio.
        0, // Freeway.
        0, // RC Baron.
        0, // RC Raider.
        0, // Glendale.
        0, // Oceanic.
        0, // Sanchez.
        0, // Sparrow.
        0, // Patriot.
        0, // Quad.
        0, // Coastguard.
        0, // Dinghy.
        0, // Hermes.
        0, // Sabre.
        0, // Rustler.
        185, // ZR-350.
        0, // Walton.
        140, // Regina.
        183, // Comet.
        0, // BMX.
        0, // Burrito.
        122, // Camper.
        0, // Marquis.
        0, // Baggage.
        0, // Dozer.
        0, // Maverick.
        0, // News Chopper.
        140, // Rancher.
        0, // FBI Rancher.
        166, // Virgo.
        0, // Greenwood.
        0, // Jetmax.
        0, // Hotring.
        175, // Sandking.
        162, // Blista Compact.
        0, // Police Maverick.
        0, // Boxville.
        0, // Benson.
        166, // Mesa.
        0, // RC Goblin.
        0, // Hotring Racer A.
        0, // Hotring Racer B.
        0, // Bloodring Banger.
        140, // Rancher.
        179, // Super GT.
        175, // Elegant.
        115, // Journey.
        0, // Bike.
        0, // Mountain Bike.
        0, // Beagle.
        0, // Cropdust.
        0, // Stunt.
        0, // Tanker.
        0, // Roadtrain.
        157, // Nebula.
        156, // Majestic.
        0, // Buccaneer.
        0, // Shamal.
        0, // Hydra.
        0, // FCR-900.
        0, // NRG-500.
        0, // HPV-1000.
        0, // Cement Truck.
        0, // Tow Truck.
        166, // Fortune.
        166, // Cadrona.
        0, // FBI Truck.
        0, // Willard.
        0, // Forklift.
        0, // Tractor.
        0, // Combine.
        166, // Feltzer.
        168, // Remington.
        166, // Slamvan.
        0, // Blade.
        0, // Freight.
        0, // Streak.
        0, // Vortex.
        0, // Vincent.
        202, // Bullet.
        170, // Clover.
        0, // Sadler.
        0, // Firetruck LA.
        0, // Hustler.
        0, // Intruder.
        0, // Primo.
        0, // Cargobob.
        0, // Tampa.
        166, // Sunrise.
        157, // Merit.
        0, // Utility.
        0, // Nevada.
        144, // Yosemite.
        158, // Windsor.
        0, // Monster A.
        0, // Monster B.
        156, // Uranus.
        176, // Jester.
        168, // Sultan.
        154, // Stratum.
        176, // Elegy.
        0, // Raindance.
        0, // RC Tiger.
        164, // Flash.
        0, // Tahoma.
        166, // Savanna.
        0, // Bandito.
        0, // Freight Flat.
        0, // Streak Carriage.
        0, // Kart.
        0, // Mower.
        0, // Duneride.
        0, // Sweeper.
        0, // Broadway.
        0, // Tornado.
        0, // AT-400.
        0, // DFT-30.
        157, // Huntley.
        0, // Stafford.
        0, // BF-400.
        0, // Newsvan.
        0, // Tug.
        0, // Trailer 3.
        0, // Emperor.
        0, // Wayfarer.
        164, // Euros.
        0, // Hotdog.
        162, // Club.
        0, // Freight Carriage.
        0, // Trailer 3.
        0, // Andromada.
        0, // Dodo.
        0, // RC Cam.
        0, // Launch.
        0, // LSPD.
        0, // SFPD.
        0, // LVPD.
        0, // Police Ranger.
        0, // Picador.
        0, // S.W.A.T. Van.
        168, // Alpha.
        170, // Phoenix.
        0, // Glendale.
        0, // Sadler.
        0, // Luggage Trailer A.
        0, // Luggage Trailer B.
        0, // Stair Trailer.
        0, // Boxville.
        0, // Farm Plow.
        0 // Utility Trailer.
};
//---------Bagazines talpa
new const VehicleBagazines[212] = {
        8800, // Landstalker.
        0, // Bravura.
        8433, // Buffalo.
        0, // Linerunner.
        0, // Perrenial.
        8300, // Sentinel.
        0, // Dumper.
        0, // Firetruck.
        0, // Transhmaster.
        0, // Stretch.
        0, // Manana.
        7900, // Infernus.
        7966, // Voodoo.
        0, // Pony.
        0, // Mule.
        7133, // Cheetah.
        0, // Ambulance.
        0, // Leviathan.
        10466, // Moonbeam.
        8033, // Esperanto.
        0, // Taxi.
        7900, // Washington.
        0, // Bobcat.
        0, // Mr Whoopee.
        0, // BF Injection.
        0, // Hunter.
        9233, // Premier.
        0, // Enforcer.
        0, // Securicar.
        7600, // Banshee.
        0, // Predator.
        0, // Bus.
        0, // Rhino.
        0, // Barracks.
        0, // Hotknife.
        0, // Trailer 1.
        0, // Previon.
        0, // Coach.
        0, // Cabbie.
        8233, // Stallion.
        0, // Rumpo.
        0, // RC Bandit.
        0, // Romero.
        0, // Packer.
        0, // Monster.
        9166, // Admiral.
        16666, // Squalo.
        0, // Seasparrow.
        0, // Pizzaboy.
        0, // Tram.
        0, // Trailer 2.
        7400, // Turismo.
        14300, // Speeder.
        14646, // Reefer.
        16666, // Tropic.
        0, // Flatbed.
        0, // Yankee.
        0, // Caddy.
        8233, // Solair.
        0, // Berkley's RC Van.
        0, // Skimmer.
        0, // PCJ-600
        0, // Faggio.
        0, // Freeway.
        0, // RC Baron.
        0, // RC Raider.
        0, // Glendale.
        0, // Oceanic.
        0, // Sanchez.
        0, // Sparrow.
        0, // Patriot.
        0, // Quad.
        16666, // Coastguard.
        10773, // Dinghy.
        0, // Hermes.
        7000, // Sabre.
        0, // Rustler.
        8000, // ZR-350.
        0, // Walton.
        9966, // Regina.
        8066, // Comet.
        0, // BMX.
        0, // Burrito.
        10366, // Camper.
        16666, // Marquis.
        0, // Baggage.
        0, // Dozer.
        0, // Maverick.
        0, // News Chopper.
        10466, // Rancher.
        0, // FBI Rancher.
        7633, // Virgo.
        0, // Greenwood.
        16166, // Jetmax.
        0, // Hotring.
        15000, // Sandking.
        9300, // Blista Compact.
        0, // Police Maverick.
        0, // Boxville.
        0, // Benson.
        9500, // Mesa.
        0, // RC Goblin.
        0, // Hotring Racer A.
        0, // Hotring Racer B.
        0, // Bloodring Banger.
        10466, // Rancher.
        7233, // Super GT.
        8733, // Elegant.
        14446, // Journey.
        0, // Bike.
        0, // Mountain Bike.
        0, // Beagle.
        0, // Cropdust.
        0, // Stunt.
        0, // Tanker.
        0, // Roadtrain.
        9033, // Nebula.
        8833, // Majestic.
        0, // Buccaneer.
        0, // Shamal.
        0, // Hydra.
        0, // FCR-900.
        0, // NRG-500.
        0, // HPV-1000.
        0, // Cement Truck.
        0, // Tow Truck.
        7533, // Fortune.
        9133, // Cadrona.
        0, // FBI Truck.
        0, // Willard.
        0, // Forklift.
        0, // Tractor.
        0, // Combine.
        8300, // Feltzer.
        7200, // Remington.
        8600, // Slamvan.
        0, // Blade.
        0, // Freight.
        0, // Streak.
        0, // Vortex.
        0, // Vincent.
        7400, // Bullet.
        170, // Clover.
        0, // Sadler.
        0, // Firetruck LA.
        0, // Hustler.
        0, // Intruder.
        0, // Primo.
        0, // Cargobob.
        0, // Tampa.
        8466, // Sunrise.
        9233, // Merit.
        0, // Utility.
        0, // Nevada.
        10300, // Yosemite.
        8066, // Windsor.
        0, // Monster A.
        0, // Monster B.
        9166, // Uranus.
        8000, // Jester.
        8733, // Sultan.
        9300, // Stratum.
        8366, // Elegy.
        0, // Raindance.
        0, // RC Tiger.
        8333, // Flash.
        0, // Tahoma.
        8600, // Savanna.
        0, // Bandito.
        0, // Freight Flat.
        0, // Streak Carriage.
        0, // Kart.
        0, // Mower.
        0, // Duneride.
        0, // Sweeper.
        0, // Broadway.
        0, // Tornado.
        0, // AT-400.
        0, // DFT-30.
        11866, // Huntley.
        0, // Stafford.
        0, // BF-400.
        0, // Newsvan.
        0, // Tug.
        0, // Trailer 3.
        0, // Emperor.
        0, // Wayfarer.
        8166, // Euros.
        0, // Hotdog.
        10400, // Club.
        0, // Freight Carriage.
        0, // Trailer 3.
        0, // Andromada.
        0, // Dodo.
        0, // RC Cam.
        0, // Launch.
        0, // LSPD.
        0, // SFPD.
        0, // LVPD.
        0, // Police Ranger.
        0, // Picador.
        0, // S.W.A.T. Van.
        7633, // Alpha.
        8100, // Phoenix.
        0, // Glendale.
        0, // Sadler.
        0, // Luggage Trailer A.
        0, // Luggage Trailer B.
        0, // Stair Trailer.
        0, // Boxville.
        0, // Farm Plow.
        0 // Utility Trailer.
};
//---------Degalu Sanaudos
new const DegaluSanaudos[212] = {
        35, // Landstalker.
        23, // Bravura.
        24, // Buffalo.
        58, // Linerunner.
        25, // Perrenial.
        31, // Sentinel.
        131, // Dumper.
        57, // Firetruck.
        78, // Trashmaster.
        35, // Stretch.
        25, // Manana.
        40, // Infernus.
        33, // Voodoo.
        47, // Pony.
        55, // Mule.
        25, // Cheetah.
        25, // Ambulance.
        85, // Leviathan.
        70, // Moonbeam.
        46, // Esperanto.
        45, // Taxi.
        36, // Washington.
        35, // Bobcat.
        30, // Mr Whoopee.
        76, // BF Injection.
        245, // Hunter.
        57, // Premier.
        89, // Enforcer.
        67, // Securicar.
        37, // Banshee.
        55, // Predator.
        85, // Bus.
        340, // Rhino.
        472, // Barracks.
        80, // Hotknife.
        0, // Trailer 1.
        95, // Previon.
        169, // Coach.
        100, // Cabbie.
        98, // Stallion.
        90, // Rumpo.
        200, // RC Bandit.
        190, // Romero.
        110, // Packer.
        44, // Monster.
        79, // Admiral.
        152, // Squallo.
        99, // Seasparrow.
        50, // Pizzaboy.
        200, // Tram.
        0, // Trailer 2.
        105, // Turismo.
        95, // Speeder.
        97, // Reefer.
        100, // Tropic.
        165, // Flatbed.
        60, // Yankee.
        69, // Caddy.
        91, // Solair.
        95, // Berkley's RC Van.
        69, // Skimmer.
        55, // PCJ-600
        37, // Faggio.
        50, // Freeway.
        30, // RC Baron.
        30, // RC Raider.
        105, // Glendale.
        105, // Oceanic.
        55, // Sanchez.
        45, // Sparrow.
        100, // Patriot.
        20, // Quad.
        90, // Coastguard.
        60, // Dinghy.
        65, // Hermes.
        50, // Sabre.
        60, // Rustler.
        100, // ZR-350.
        60, // Walton.
        35, // Regina.
        60, // Comet.
        0, // BMX.
        69, // Burrito.
        62, // Camper.
        158, // Marquis.
        75, // Baggage.
        100, // Dozer.
        80, // Maverick.
        65, // News Chopper.
        48, // Rancher.
        65, // FBI Rancher.
        42, // Virgo.
        66, // Greenwood.
        80, // Jetmax.
        60, // Hotring.
        75, // Sandking.
        61, // Blista Compact.
        95, // Police Maverick.
        50, // Boxville.
        25, // Benson.
        50, // Mesa.
        90, // RC Goblin.
        50, // Hotring Racer A.
        25, // Hotring Racer B.
        25, // Bloodring Banger.
        60, // Rancher.
        40, // Super GT.
        35, // Elegant.
        65, // Journey.
        0, // Bike.
        0, // Mountain Bike.
        90, // Beagle.
        62, // Cropdust.
        50, // Stunt.
        100, // Tanker.
        102, // Roadtrain.
        46, // Nebula.
        47, // Majestic.
        69, // Buccaneer.
        27, // Shamal.
        105, // Hydra.
        20, // FCR-900.
        29, // NRG-500.
        35, // HPV-1000.
        60, // Cement Truck.
        55, // Tow Truck.
        55, // Fortune.
        30, // Cadrona.
        90, // FBI Truck.
        60, // Willard.
        10, // Forklift.
        15, // Tractor.
        50, // Combine.
        30, // Feltzer.
        45, // Remington.
        35, // Slamvan.
        35, // Blade.
        150, // Freight.
        154, // Streak.
        150, // Vortex.
        65, // Vincent.
        65, // Bullet.
        70, // Clover.
        62, // Sadler.
        50, // Firetruck LA.
        55, // Hustler.
        32, // Intruder.
        50, // Primo.
        150, // Cargobob.
        30, // Tampa.
        66, // Sunrise.
        57, // Merit.
        68, // Utility.
        39, // Nevada.
        44, // Yosemite.
        58, // Windsor.
        50, // Monster A.
        50, // Monster B.
        36, // Uranus.
        52, // Jester.
        60, // Sultan.
        60, // Stratum.
        48, // Elegy.
        154, // Raindance.
        50, // RC Tiger.
        39, // Flash.
        40, // Tahoma.
        66, // Savanna.
        25, // Bandito.
        0, // Freight Flat Trailer.
        0, // Streak Trailer.
        15, // Kart.
        20, // Mower.
        55, // Duneride.
        25, // Sweeper.
        50, // Broadway.
        60, // Tornado.
        600, // AT-400.
        85, // DFT-30.
        60, // Huntley.
        70, // Stafford.
        40, // BF-400.
        70, // Newsvan.
        30, // Tug.
        0, // Trailer 3.
        20, // Emperor.
        40, // Wayfarer.
        34, // Euros.
        52, // Hotdog.
        52, // Club.
        0, // Freight Box trailer Carriage.
        0, // Trailer 3.
        367, // Andromada.
        50, // Dodo.
        5, // RC Cam.
        75, // Launch.
        68, // LSPD.
        70, // SFPD.
        95, // LVPD.
        90, // Police Ranger.
        45, // Picador.
        105, // S.W.A.T. Van.
        48, // Alpha.
        57, // Pheonix.
        40, // Glendale.
        25, // Sadler shit.
        0, // Luggage Trailer A.
        0, // Luggage Trailer B.
        0, // Stair Trailer.
        120, // Boxville.
        0, // Farm Plow.
        0 // Utility Trailer.
};
//---------PARDUODAMØ TRANSPORTO KAINOS
new const aKaina[212] = {
        40000, // Landstalker.
        15000, // Bravura.
        180000, // Buffalo.
        10, // Linerunner.
        10, // Perrenial.
        120000, // Sentinel.
        10, // Dumper.
        10, // Firetruck.
        10, // Transhmaster.
        2500000, // Stretch.
        13000, // Manana.
        5000000, // Infernus.
        15000, // Voodoo.
        17000, // Pony.
        11000, // Mule.
        440000, // Cheetah.
        10, // Ambulance.
        10, // Leviathan.
        20000, // Moonbeam.
        10000, // Esperanto.
        10, // Taxi.
        150000, // Washington.
        10, // Bobcat.
        10, // Mr Whoopee.
        10, // BF Injection.
        10, // Hunter.
        38000, // Premier.
        10, // Enforcer.
        10, // Securicar.
        320000, // Banshee.
        10, // Predator.
        10, // Bus.
        10, // Rhino.
        10, // Barracks.
        50000000, // Hotknife.
        10, // Trailer 1.
        15000, // Previon.
        10, // Coach.
        10, // Cabbie.
        50000, // Stallion.
        10, // Rumpo.
        10, // RC Bandit.
        10, // Romero.
        10, // Packer.
        10, // Monster.
        18000, // Admiral.
        3000000, // Squalo.
        10, // Seasparrow.
        10, // Pizzaboy.
        10, // Tram.
        10, // Trailer 2.
        3000000, // Turismo.
        4000000, // Speeder.
        650000, // Reefer.
        7000000, // Tropic.
        10, // Flatbed.
        10, // Yankee.
        10, // Caddy.
        32000, // Solair.
        10, // Berkley's RC Van.
        10, // Skimmer.
        70000, // PCJ-600
        3000, // Faggio.
        45000, // Freeway.
        10, // RC Baron.
        10, // RC Raider.
        25000, // Glendale.
        23000, // Oceanic.
        10000, // Sanchez.
        10, // Sparrow.
        10, // Patriot.
        6000, // Quad.
        300000, // Coastguard.
        20000, // Dinghy.
        16000, // Hermes.
        18000, // Sabre.
        10, // Rustler.
        120000, // ZR-350.
        10, // Walton.
        3000, // Regina.
        220000, // Comet.
        5000, // BMX.
        30000, // Burrito.
        25000, // Camper.
        6000000, // Marquis.
        10, // Baggage.
        10, // Dozer.
        10, // Maverick.
        10, // News Chopper.
        16000, // Rancher.
        10, // FBI Rancher.
        7000, // Virgo.
        45000, // Greenwood.
        5000000, // Jetmax.
        500000, // Hotring.
        5000000, // Sandking.
        22000, // Blista Compact.
        10, // Police Maverick.
        10, // Boxville.
        80000, // Benson.
        25000, // Mesa.
        10, // RC Goblin.
        500000, // Hotring Racer A.
        500000, // Hotring Racer B.
        10, // Bloodring Banger.
        7000, // Rancher.
        130000, // Super GT.
        25000, // Elegant.
        400000, // Journey.
        5000, // Bike.
        7000, // Mountain Bike.
        10, // Beagle.
        10, // Cropdust.
        10, // Stunt.
        10, // Tanker.
        10, // Roadtrain.
        30000, // Nebula.
        25000, // Majestic.
        35000, // Buccaneer.
        10, // Shamal.
        10, // Hydra.
        80000, // FCR-900.
        150000, // NRG-500.
        10, // HPV-1000.
        10, // Cement Truck.
        10, // Tow Truck.
        36000, // Fortune.
        32000, // Cadrona.
        10, // FBI Truck.
        17000, // Willard.
        10, // Forklift.
        10, // Tractor.
        10, // Combine.
        6000, // Feltzer.
        9000, // Remington.
        30000, // Slamvan.
        45000, // Blade.
        10, // Freight.
        10, // Streak.
        10, // Vortex.
        35000, // Vincent.
        990000, // Bullet.
        2000, // Clover.
        10000, // Sadler.
        10, // Firetruck LA.
        20000, // Hustler.
        15000, // Intruder.
        14000, // Primo.
        10, // Cargobob.
        5000, // Tampa.
        30000, // Sunrise.
        20000, // Merit.
        10, // Utility.
        10, // Nevada.
        35000, // Yosemite.
        12000, // Windsor.
        500000, // Monster A.
        500000, // Monster B.
        30000, // Uranus.
        80000, // Jester.
        200000, // Sultan.
        38000, // Stratum.
        150000, // Elegy.
        10, // Raindance.
        10, // RC Tiger.
        32000, // Flash.
        13000, // Tahoma.
        13000, // Savanna.
        10, // Bandito.
        10, // Freight Flat.
        10, // Streak Carriage.
        10, // Kart.
        10, // Mower.
        10, // Duneride.
        10, // Sweeper.
        20000, // Broadway.
        30000, // Tornado.
        10, // AT-400.
        10, // DFT-30.
        500000, // Huntley.
        10000, // Stafford.
        200000, // BF-400.
        10, // Newsvan.
        10, // Tug.
        10, // Trailer 3.
        15000, // Emperor.
        20000, // Wayfarer.
        40000, // Euros.
        25000, // Hotdog.
        100000, // Club.
        10, // Freight Carriage.
        10, // Trailer 3.
        10, // Andromada.
        10, // Dodo.
        10, // RC Cam.
        350000, // Launch.
        10, // LSPD.
        10, // SFPD.
        10, // LVPD.
        10, // Police Ranger.
        20000, // Picador.
        10, // S.W.A.T. Van.
        45000, // Alpha.
        620000, // Phoenix.
        20000, // Glendale.
        10, // Sadler.
        10, // Luggage Trailer A.
        10, // Luggage Trailer B.
        10, // Stair Trailer.
        10, // Boxville.
        10, // Farm Plow.
        10 // Utility Trailer.
};

new ChatValymoCiklas = 0;
enum VehiclesInformation{
	VehicleEngineState,
	VehicleLights,
	VRibotuvas,
	LastDriverName[24],
	VehicleDedicatedForEvent,
	TURGUS,
	Float:Rida,
	Float:Bendzinas,
	Float:Dujos,
	FuelType,
	VMMasina,
	bool:DARBOMASINA,
	DARBOID,
	VehicleOwnerID,
	VehicleNumbers[8],
	VehicleNumReg,
	VehicleColor1,
	VehicleColor2,
	VehicleDatabaseID,
	bool:VehicleWithOwner,
	VehicleLocked,
	VehicleDauztumas,
    DujuIranga,
    bool:AdminMasina,
    bool:VIPMasina,
    WeaponSlot1WeaponModel,
    WeaponSlot1WeaponBullets,
    WeaponSlot2WeaponModel,
    WeaponSlot2WeaponBullets,
    WeaponSlot3WeaponModel,
    WeaponSlot3WeaponBullets,
    WeaponSlot4WeaponModel,
    WeaponSlot4WeaponBullets,
    WeaponSlot5WeaponModel,
    WeaponSlot5WeaponBullets,
    WeaponSlot6WeaponModel,
    WeaponSlot6WeaponBullets,
    DrugsSlot1,
    DrugsSlot2,
    DrugsSlot3,
    bool:VehicleWithTaxometer,
    VehicleTaxometerObjectID,
    VehicleDezesObjectID,
    bool:Pardavinejama,
    PardavimoKaina,
    Text3D:PardavimoLabel,
    MirgalkesObjektas,
    PakrautuDeziuSkaicius,
    bool:SuSvitureliais,
    SvitureliuObjektas,
    bool:PakrautasMaistas,
    bool:PakrautasSmelis,
    bool:PakrautosDetales,
    bool:PakrautaElektronika,
    PakrautaMasina,
    bool:PripildytaDegalu,
    bool:VehicleForRent,
    VehicleRentingCost,
    Text3D:BoxesInCarLabel,
    RadijasStotis,
    bool:VehicleDedicatedForAdmin,
    bool:Kartingas
}
new VehicleDB[MAX_VEHICLES][VehiclesInformation];

enum BySlotInfoE
{
    ModelBySlot,
    BrokenBySlot,
    BrokenTimesBySlot,
    Float:RidaBySlot,
    DujuIrangaBySlot,
    DateOfBuyingBySlot[12],
    VehicleNumbersBySlot[8],
    PardavinejamaBySlot
}
new VehicleBySlotInfo[MAX_PLAYERS][2][BySlotInfoE];

//DEGLAINES

new OrlenDegaline[16];
new EnterOrlenDegaline,ExitOrlenDegaline;
new OrlenDegalineShop;
//
new XoomerDegaline[4];
new EnterXoomerDegaline,ExitXoomerDegaline;
new XoomerDegalineShop;
//
new Xoomer2Degaline[8];
new EnterXoomer2Degaline,ExitXoomer2Degaline;

new Xoomer3Degaline[6];
new EnterXoomer3Degaline,ExitXoomer3Degaline;



//

new SalesVehiclesInStock[212];
new Text3D:SalesVehiclesLabels[212];
new Float:VehicleSpawnCords[MAX_VEHICLES][3];
new NascarMode = 0;
new NascarVehicle[9];

new RaceMode = 0;
new RaceVehicle[12];

stock GetVehicleSpeed(vehicleid) // remade from getplayerspeed
{
	new Float:ST[4];
	GetVehicleVelocity(vehicleid,ST[0],ST[1],ST[2]);
	ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
	return floatround(ST[3]);
}

//LAIKRODIS IR DATA
new Text:Laikrodis;
new Text:Datarodis;
//SAUGI ZONA TEXTDRAWS
new Text:SAUGIZONA1;
new Text:SAUGIZONA2;
//KARO ZONA TEXTDRAWS
new Text:KAROZONA1;
new Text:KAROZONA2;
//Namie tamsu
new Text:blackTD;

//
//BANKU SISTEMA
new BankInteriorArea;
new BankoSecurityDurys;
new BankoSeifas;
new BankBomb[11];
new BankMoneyStack[10];
new bool:BankMoneyStackTaken[10];
new bool:BankSafePlanted;
new bool:BankSafeOpen;
new bool:BankoSeifasSprogo;
new BankExplosionTimer;
new Text3D:TakeStackLabel;
new BankExplodesAt = 0;

new BankCantBeRobbedTill = 0;

new bool:BankSecurityDoorsOpen;
new bool:BankSecurityDoorsDestroyed;
new bool:BankSecurityDoorsBeingPlanted;
new BankSecurityDoorsTimeLock;
new BankDoorsBomb;
new EnterBankPickup;
new ExitBankPickup;
new CreateBankAccountPickup[2];
new CashPointPickup[42];
new CashPointsCount = 0;
new BankRealPin;
//MYSQL DATABASE CONNECTIONHANDLE..
new connectionHandle;

//PICKUPABLE PICKUPS
new PoliceKaleimoPick,ARASKaleimoPick;


new LuccheseTookHeroino,LuccheseTookCoco;
new GenoveseTookHeroino,GenoveseTookCoco;
new LawTookHeroino,LawTookCoco;

new bool:FactoryEventInProgress = false;
new FactoryEventNextStart = 0;
new PickupToEnterDrugsFactory,PickupToExitDrugsFactory;
new DrugHeroinas,DrugKokainas;
new Text3D:DrugHeroinasText3D;
new Text3D:DrugKokainasText3D;
new HeroineInFactory = 0;
new KokaineInFactory = 0;
#define FactoryCapacity 500
#define DrugsTakingSpeed 3
#define DrugsDestroyingSpeed 3
new KonfiskuotasKokainas = 0;
new KonfiskuotasHeroinas = 0;
new KonfiskuotosKanapes = 0;
//
//ÞOLYTES
#define WEED_OBJECTS_COUNT 68
enum WeedObjectInfo
{
    WeedObjectID,
    WeedObjectModel,
    Float:WeedObjectX,
    Float:WeedObjectY,
    Float:WeedObjectZ,
    Float:WeedObjectRX,
    Float:WeedObjectRY,
    Float:WeedObjectRZ,
    bool:WeedObjectHarvested
}
new WeedObject[WEED_OBJECTS_COUNT][WeedObjectInfo];
new WeedObjectsCreated = 0;
new bool:WeedEventInProgress = false;
new const WEED_EVENT_TIME_GIVEN = 20;
new WeedEventTimeLeft = 0;//In minutes;
new WeedEventArea;

//
//
new NelegalusGinklaiPick,NaikintiGinklusPick,NGLastTimeTook,NGSuspiciousLevel;
new LuccheseGinklai,GenoveseGinklai;


new InfoAboutDrivingSchool,PickupToEnterIntoDrivingSchool,PickupToExitDrivingSchool,DrivingTheoryPickup;

new PickupToEnterMedicsGarage,PickupToExitMedicsGarage;

new PickupToEnterTaksiFGarage,PickupToExitTaksiFGarage;

new PickupLiftToRoofOfMedicsA,PickupLiftToRoofOfMedicsB;

new PickupToWeaponsShop;
new PickupOutWeaponsShop;
new PickupWeaponsShopBuyWeps;
new WeaponsShopSideA;
new WeaponsShopSideB;

new WeaponsLicensePickupA;
new WeaponsLicensePickupB;

new MasinosAtkelimoPickup;
new TechPaslauguPickup;

new TPKalnasParasiutas;
new VIPVartaiA,VIPVartaiB;
new bool:VIPVartaiState;

new LuccheseGangZone,GenoveseGangZone;
new bool:LuccheseGangZoneU,bool:GenoveseGangZoneU;

new LuccheseGangZoneArea,GenoveseGangZoneArea;


new LuccheseMafia_ISIDARBINIMAS;
new GenoveseMafia_ISIDARBINIMAS;
new GenoveseMafia_PiniguPlovimas,LuccheseMafia_PiniguPlovimas;

new MECHANIKAS_ISIDARBINIMAS;
new POLICE_WEAPONS;
new POLICE_ISIDARBINIMAS;
new POLICEDoors;
new PoliceIronDoors;
new PoliceGarageDoors;
new PoliceVartai1,PoliceVartai2;
new bool:PoliceVartai1State;
new bool:PoliceVartai2State;

new Text3D:PoliceGarageText;
new Text3D:PoliceVartai1Text;
new Text3D:PoliceVartai2Text;

new Text3D:TaksiFText;

new bool:PoliceGarageDoorsState;
new bool:PoliceIronDoorsState;
new bool:POLICEDoorsState;
new MEDIKAI_ISIDARBINIMAS;
new LigonineUzPinigusPickup;
////
new TaksiF_ISIDARBINIMAS;


//
new PlayerText:SelectionsTextDrawHead[MAX_PLAYERS];
new PlayerText:SelectionsTextDrawBG[MAX_PLAYERS];
new PlayerText:SelectionsTextDrawPage[MAX_PLAYERS];
new PlayerText:SelectionsTextDrawNext[MAX_PLAYERS];
new PlayerText:SelectionsTextDrawPrev[MAX_PLAYERS];
//
new Text:Taksometras1,Text:Taksometras2,Text:Taksometras3,Text:Taksometras4[MAX_PLAYERS],Text:Taksometras5[MAX_PLAYERS];
//
new MedikuGVartai1,MedikuGVartai2;
new bool:MedikuGVartai1State,bool:MedikuGVartai2State;
new Text3D:MedikuVartai1Label;
new Text3D:MedikuVartai2Label;

new MedikuUzkarda1,MedikuUzkarda2;
new bool:MedikuUzkarda1State,bool:MedikuUzkarda2State;

new bool:MedikuGarazas;
new bool:TaksiFGarazas;

new HospitalInterioras;


new AutoPZona[6];
new Text3D:AutoPStatsLabel;
enum AutoPStats{
    NickPS[24],
    TrPS[32],
    DataPS[17]
}
new AutoPStatistics[6][AutoPStats];

new AutoPVehiclesSold = 0;

new A51Zona;
new JailVidusZona;
new JailISORESZona;

//
new HospitalInterExitPickup;
new HospitalInterEnterPickup;

//Verslo sistema
//
#define DARBU_SKAICIUS 21
#define RANGU_SKAICIUS 8

enum DarboInformacijosList
{
	Rango1Pavadinimas[30],
	Rango2Pavadinimas[30],
	Rango3Pavadinimas[30],
	Rango4Pavadinimas[30],
	Rango5Pavadinimas[30],
	Rango6Pavadinimas[30],
	Rango7Pavadinimas[30],
	Rango8Pavadinimas[30],
	DarboFondas,
	Pirmadienis[100],
	Antradienis[100],
	Treciadienis[100],
	Ketvirtadienis[100],
	Penktadienis[100],
	Sestadienis[100],
	Sekmadienis[100]
}
new DarboInformacija[DARBU_SKAICIUS+1][DarboInformacijosList];
new TimerForRespawnGoes[DARBU_SKAICIUS+1];

enum PavaduotojaiInfo{
    PavRightToInvite,
    PavRightToKickFromJob,
    PavRightToWrite,
    PavRightToWarn,
    PavRightToGiveBonuses,
    PavRightToLockGarage,
    PavRightToAdministrateFund,
    PavRightToSetARank,
    PavRightToAdministrateRanks,
    bool:PavIsLoaded
}
new PavaduotojaiNustatymai[DARBU_SKAICIUS+1][PavaduotojaiInfo];


new vNames[212][] =
    {
        "Landstalker", "Bravura", "Buffalo", "Linerunner", "Pereniel", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
        "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection",
        "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
        "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
        "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider",
        "Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina",
        "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood",
        "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B",
        "Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt", "Tanker", "RoadTrain",
        "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune", "Cadrona", "FBI Truck",
        "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover",
        "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster A",
        "Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight", "Trailer",
        "Kart", "Mower", "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "Newsvan", "Tug", "Trailer A", "Emperor",
        "Wayfarer", "Euros", "Hotdog", "Club", "Trailer B", "Trailer C", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LSPD)", "Police Car (SFPD)",
        "Police Car (LVPD)", "Police Ranger", "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer A", "Luggage Trailer B",
        "Stair Trailer", "Boxville", "Farm Plow", "Utility Trailer"
    }
;
ReturnVehicleModelID(vName[])
{
	new returnas = strval(vName);
    if (400 <= returnas <= 611)
    {
        return returnas;
    }
    for(new x; x != 211; x++) if(strfind(vNames[x], vName, true) != -1) return x + 400;
    return 0;
}
stock ClearAndResetPlayerData(playerid)
{
	PlayerDB[playerid][SQLID] = -1;
	PlayerDB[playerid][Loaded] = 0;
	PlayerDB[playerid][LoggedIn] = 0;
	PlayerDB[playerid][WrongPasswordAttempts] = 0;
	PlayerDB[playerid][WrongVeritifyAttemps] = 0;
	PlayerDB[playerid][Sex] = 0;
	PlayerDB[playerid][Newbie] = 0;
	PlayerDB[playerid][PlayedMinuteTimer] = -1;
	PlayerDB[playerid][MoneyInPocket] = 0;
	PlayerDB[playerid][MoneyInBank] = 0;
	PlayerDB[playerid][Credits] = 0;
	PlayerDB[playerid][JailTime] = 0;
	PlayerDB[playerid][WantedLevel] = 0;
	PlayerDB[playerid][Job] = 0;
	PlayerDB[playerid][Club] = 0;
	PlayerDB[playerid][DrivingTheory] = 0;
	PlayerDB[playerid][DrivingTheoryMistakes] = 0;
	PlayerDB[playerid][AutoLicense] = 0;
	PlayerDB[playerid][AutoParkDriving] = 0;
	PlayerDB[playerid][MotoLicense] = 0;
	PlayerDB[playerid][PilotoLicense] = 0;
	PlayerDB[playerid][LostDLicenses] = 0;
	PlayerDB[playerid][WeaponsLicense] = 0;
	PlayerDB[playerid][PhoneBalance] = 0;
	PlayerDB[playerid][PhoneState] = 0;
	PlayerDB[playerid][TalkingWithPhone] = 0;
	PlayerDB[playerid][PlayerTalkingWith] = -1;
	PlayerDB[playerid][NeedToAnswer] = -1;
	PlayerDB[playerid][PhoneCallTaxTimer] = -1;
	PlayerDB[playerid][IsPlayerCalling] = 0;
	PlayerDB[playerid][adminlvl] = 0;
	PlayerDB[playerid][AdminLaikoPabaiga] = 0;
	PlayerDB[playerid][LastDrivedCar] = -1;
	PlayerDB[playerid][RaceCheckPointID] = 0;
	PlayerDB[playerid][BEGA] = 0;
	PlayerDB[playerid][AdminWeaponsCD] = 0;
    PlayerDB[playerid][Cmd_S_CD] = 0;
    PlayerDB[playerid][Cmd_V_CD] = 0;
	PlayerDB[playerid][JobInvitation] = 0;
	PlayerDB[playerid][JobInvitationTime] = 0;
	PlayerDB[playerid][Direktorius] = 0;
	PlayerDB[playerid][Pavaduotojas] = 0;
	PlayerDB[playerid][DarboSutartiesPabaiga] = 0;
	format(PlayerDB[playerid][DarboPradziosData], 12, "0000-00-00", "");
	PlayerDB[playerid][UniformosID] = -1;
	PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
	PlayerDB[playerid][Drabuziai] = 28;
	PlayerDB[playerid][Rangas] = 1;
	PlayerDB[playerid][Vaistineles] = 0;
	PlayerDB[playerid][RecentlyDied] = false;
	PlayerDB[playerid][DeathSkin] = 0;
	PlayerDB[playerid][LigoninesLaikas] = 0;
	PlayerDB[playerid][GavesBaudosPasiulyma] = false;
	PlayerDB[playerid][BaudaSkyresPlayeris] = -1;
	PlayerDB[playerid][JobWarnings] = 0;
	PlayerDB[playerid][AdminWarnings] = 0;
	PlayerDB[playerid][VIPWarnings] = 0;
	PlayerDB[playerid][LawWarnings] = 0;
	PlayerDB[playerid][Kanapes] = 0;
	PlayerDB[playerid][Kokainas] = 0;
	PlayerDB[playerid][Heroinas] = 0;
	PlayerDB[playerid][PlacedKliutis1] = false;
	PlayerDB[playerid][Kliutis1Object] = 0;
	PlayerDB[playerid][Kliutis1ObjectLabel] = Text3D:INVALID_3DTEXT_ID;
	PlayerDB[playerid][PlacedKliutis2] = false;
	PlayerDB[playerid][Kliutis2Object] = 0;
	PlayerDB[playerid][Kliutis2ObjectLabel] = Text3D:INVALID_3DTEXT_ID;
	PlayerDB[playerid][LogInSkin] = -1;
	PlayerDB[playerid][OwnedVehicle1] = -1;
	PlayerDB[playerid][OwnedVehicle2] = -1;
    PlayerDB[playerid][NegaliRukytiKanapiu] = 0;
    PlayerDB[playerid][NegaliVartotiKokaino] = 0;
    PlayerDB[playerid][NegaliVartotiHeroino] = 0;
    PlayerDB[playerid][LeidziaTeleportacijaTo] = true;
    PlayerDB[playerid][LeidziaTeleportacijaGet] = true;
    PlayerDB[playerid][GaliSuveiktiNark] = false;
    PlayerDB[playerid][PlayerSpectatesOther] = false;
    PlayerDB[playerid][PlayerSpectatingTarget] = -1;
    PlayerDB[playerid][BeforeSpectatingX] = 0;
    PlayerDB[playerid][BeforeSpectatingY] = 0;
    PlayerDB[playerid][BeforeSpectatingZ] = 0;
    PlayerDB[playerid][BeforeSpectatingPlayerSkin] = 8;
    PlayerDB[playerid][BeforeSpectatingPlayerInterior] = 0;
    PlayerDB[playerid][BeforeSpectatingPlayerWorld] = 0;
    PlayerDB[playerid][PlayerSpectatingAtPed] = true;
    PlayerDB[playerid][PlayerSpectatingAtVehicle] = false;
    PlayerDB[playerid][PlayerWantedVehicleID] = -1;
    PlayerDB[playerid][NegaliVIPGinklu] = 0;
    PlayerDB[playerid][LastTimePlayerShotWithDeagle] = 0;
    PlayerDB[playerid][DeagleShotsCount] = 0;
    PlayerDB[playerid][LastTimePlayerShotWithSG] = 0;
    PlayerDB[playerid][SGShotsCount] = 0;
    PlayerDB[playerid][LastTimePlayerShotWithSniper] = 0;
    PlayerDB[playerid][SniperShotsCount] = 0;
    PlayerDB[playerid][MasinosKuriosBagazineID] = 0;
    PlayerDB[playerid][LastTimePlayerFought] = 0;
    PlayerDB[playerid][CantPlayBecouseOfBan] = false;
    PlayerDB[playerid][BlokavimoTipas] = -1;
    PlayerDB[playerid][PlayerGetsBan] = false;
    PlayerDB[playerid][UzdarbisSiandien] = 0;
    PlayerDB[playerid][SuSkydu] = 0;
    PlayerDB[playerid][SekimoBusena] = false;
    PlayerDB[playerid][PlayerNeedToSpawn] = true;
    PlayerDB[playerid][AfkState] = false;
    PlayerDB[playerid][AfkTime] = 0;
    PlayerDB[playerid][AfkPoints] = 0;
    PlayerDB[playerid][ImamiPinigai] = false;
    PlayerDB[playerid][PaslauguAtskaitosX] = 0.0;
    PlayerDB[playerid][PaslauguAtskaitosY] = 0.0;
    PlayerDB[playerid][PaslauguAtskaitosZ] = 0.0;
    PlayerDB[playerid][PlacedSpygliai] = false;
    PlayerDB[playerid][SpygliaiObject] = -1;
    PlayerDB[playerid][BegaLaiko] = 0;
    PlayerDB[playerid][Surakintas] = false;
    PlayerDB[playerid][AtvykimaiTotal] = 0;
    PlayerDB[playerid][BaudosTotal] = 0;
    PlayerDB[playerid][SiandienZaista] = 0;
    PlayerDB[playerid][Apklausineja] = false;
    PlayerDB[playerid][DirektoriuPriziuretojas] = false;
    PlayerDB[playerid][Suristas] = false;
    PlayerDB[playerid][TazerioBusena] = false;
    PlayerDB[playerid][ElektrosSokasGalioja] = 0;
    PlayerDB[playerid][GavoElektrosSoka] = false;
    PlayerDB[playerid][Job1XP] = 0;
    PlayerDB[playerid][Job2XP] = 0;
    PlayerDB[playerid][Job4XP] = 0;
    PlayerDB[playerid][Job5XP] = 0;
    PlayerDB[playerid][Job7XP] = 0;
    PlayerDB[playerid][Job8XP] = 0;
    PlayerDB[playerid][Job9XP] = 0;
    PlayerDB[playerid][Job10XP] = 0;
    PlayerDB[playerid][Job21XP] = 0;
    PlayerDB[playerid][TuriBankoSaskaita] = 0;
    PlayerDB[playerid][BankoSaskaitosPin] = 0;
    PlayerDB[playerid][LigoninesKlientas] = false;
    PlayerDB[playerid][MoneyStackOnBack] = false;
    PlayerDB[playerid][RadijosPasnekovas] = false;
    PlayerDB[playerid][NuobaudosUzGreicioVirsijima] = 0;
    PlayerDB[playerid][SuSalmu] = false;
    PlayerDB[playerid][SunkvLicense] = 0;
    PlayerDB[playerid][SunkvParkDriving] = 0;
    PlayerDB[playerid][MutedPlayer] = 0;
    PlayerDB[playerid][VehiclePlayerExitedLastTime] = INVALID_VEHICLE_ID;
    PlayerDB[playerid][GasStationTimerOrl] = -9;
    PlayerDB[playerid][GasStationTimerRunsOrl] = false;
    PlayerDB[playerid][PiltaDegalu] = 0.0;
    PlayerDB[playerid][SumaUzDegalus] = 0.0;
    PlayerDB[playerid][DegaluTipasKuriPila] = -1;
    PlayerDB[playerid][CostOfLitreFuel] = 0.0;
    PlayerDB[playerid][HousePlayerIsLookingAt] = -1;
    PlayerDB[playerid][PlayerOfferHouseTo] = -1;
    PlayerDB[playerid][PlayerOfferHouseCost] = -1;
    PlayerDB[playerid][HouseWasOffered] = -1;
    PlayerDB[playerid][PrivateMode] = false;
    PlayerDB[playerid][GautosZinutes] = 0;
    PlayerDB[playerid][ZaistaTotal] = 0;
    PlayerDB[playerid][Patrulis] = false;
    PlayerDB[playerid][PlayerHealthAC] = 100;
    PlayerDB[playerid][PlayerHealthACStop] = true;
    PlayerDB[playerid][PlayerArmourAC] = 0;
    PlayerDB[playerid][PlayerArmourACStop] = true;
    PlayerDB[playerid][ACLoaded] = false;
    PlayerDB[playerid][PasiekimaiLoaded] = false;
    PlayerDB[playerid][Pasiekimas1] = 0;
    PlayerDB[playerid][Pasiekimas2] = 0;
    PlayerDB[playerid][Pasiekimas3] = 0;
    PlayerDB[playerid][Pasiekimas4] = 0;
    PlayerDB[playerid][Pasiekimas5] = 0;
    PlayerDB[playerid][Pasiekimas6] = 0;
    PlayerDB[playerid][Pasiekimas7] = 0;
    PlayerDB[playerid][Pasiekimas8] = 0;
    PlayerDB[playerid][Pasiekimas9] = 0;
    PlayerDB[playerid][Pasiekimas10] = 0;
    PlayerDB[playerid][Pasiekimas11] = 0;
    PlayerDB[playerid][Pasiekimas12] = 0;
    PlayerDB[playerid][Pasiekimas13] = 0;
    PlayerDB[playerid][Pasiekimas14] = 0;
    PlayerDB[playerid][Pasiekimas15] = 0;
    PlayerDB[playerid][Pasiekimas16] = 0;
    PlayerDB[playerid][Pasiekimas17] = 0;
    PlayerDB[playerid][Pasiekimas18] = 0;
    PlayerDB[playerid][Pasiekimas19] = 0;
    PlayerDB[playerid][Pasiekimas20] = 0;
    PlayerDB[playerid][Pasiekimas21] = 0;
    PlayerDB[playerid][Pasiekimas22] = 0;
    PlayerDB[playerid][Pasiekimas23] = 0;
    PlayerDB[playerid][Pasiekimas24] = 0;
    PlayerDB[playerid][Pasiekimas25] = 0;
    PlayerDB[playerid][Pasiekimas26] = 0;
    PlayerDB[playerid][Pasiekimas27] = 0;
    PlayerDB[playerid][Pasiekimas28] = 0;
    PlayerDB[playerid][Pasiekimas29] = 0;
    PlayerDB[playerid][Pasiekimas30] = 0;
    PlayerDB[playerid][Pasiekimas31] = 0;
    PlayerDB[playerid][Pasiekimas32] = 0;
    PlayerDB[playerid][Pasiekimas33] = 0;
    PlayerDB[playerid][Pasiekimas34] = 0;
    PlayerDB[playerid][Pasiekimas35] = 0;
    PlayerDB[playerid][Pasiekimas36] = 0;
    PlayerDB[playerid][Pasiekimas37] = 0;
    PlayerDB[playerid][Pasiekimas38] = 0;
    PlayerDB[playerid][Pasiekimas39] = 0;
    PlayerDB[playerid][Pasiekimas40] = 0;
    PlayerDB[playerid][Pasiekimas41] = 0;
    PlayerDB[playerid][Pasiekimas42] = 0;
    PlayerDB[playerid][GalimaVykdytiPasiekimus] = false;
    PlayerDB[playerid][LaikoMasinosTeisesKartu] = 0;
    PlayerDB[playerid][AlgosBonusas] = 0;
    PlayerDB[playerid][GarageNumber] = -1;
    format(PlayerDB[playerid][DarboPalikimoPriezastis], 90, "Nenurodyta");
    PlayerDB[playerid][TargettedPlayerID] = -1;
    PlayerDB[playerid][SelectedCost] = 999999999;
    PlayerDB[playerid][PagydimaiTotal] = 0;
    PlayerDB[playerid][NuveztiKroviniai] = 0;
    PlayerDB[playerid][ClothesBeforeJail] = -1;
    PlayerDB[playerid][AprangaBeforeJail] = PLAYER_CLOTHES_DRABUZIAI;
    PlayerDB[playerid][LyderiuPriziuretojas] = 0;
    PlayerDB[playerid][VykdoVeiksma] = false;
    PlayerDB[playerid][TimeWorkedWithCarToday] = 0;
    PlayerDB[playerid][TimeWorkedWithCarTotal] = 0;
    PlayerDB[playerid][SelectionListItemAukos] = -1;
    PlayerDB[playerid][LastTimePressedKey] = gettime();
    PlayerDB[playerid][ReceivedWeaponsOffer] = false;
    PlayerDB[playerid][WeaponsOfferGiverID] = -1;
    PlayerDB[playerid][WeaponsOfferWeaponID] = -1;
    PlayerDB[playerid][WeaponsOfferAmmo] = 0;
    PlayerDB[playerid][WeaponsOfferSum] = 0;
    PlayerDB[playerid][WeaponsOfferCanGetAt] = 0;
    PlayerDB[playerid][DrugsOfferGiverID] = -1;
    PlayerDB[playerid][DrugsOfferDrugID] = 0;
    PlayerDB[playerid][DrugsOfferAmount] = 0;
    PlayerDB[playerid][DrugsOfferSum] = 0;
    PlayerDB[playerid][ReceivedDrugsOffer] = false;
    PlayerDB[playerid][DrugsOfferCanGetAt] = 0;
    PlayerDB[playerid][ArmourOfferCanGetAt] = 0;
    PlayerDB[playerid][ArmourOfferGiverID] = -1;
    PlayerDB[playerid][ArmourOfferSum] = 0;
    PlayerDB[playerid][ReceivedArmourOffer] = false;
    PlayerDB[playerid][VaistuOfferCanGetAt] = 0;
    PlayerDB[playerid][VaistuOfferGiverID] = -1;
    PlayerDB[playerid][VaistuOfferSum] = 0;
    PlayerDB[playerid][ReceivedVaistuOffer] = false;
    PlayerDB[playerid][DirWarnings] = 0;
    PlayerDB[playerid][PavWarnings] = 0;
    PlayerDB[playerid][Hunger] = 0;
    PlayerDB[playerid][SelectedMGVItem] = -1;
    PlayerDB[playerid][FirstOwnedVehicleID] = -1;
    PlayerDB[playerid][SecondOwnedVehicleID] = -1;
    PlayerDB[playerid][TimesHelped] = 0;
    PlayerDB[playerid][TuriuNama] = 0;
    PlayerDB[playerid][AtidariauSlota] = 0;


    PlayerDB[playerid][MoneyFromBussines] = 0;
    PlayerDB[playerid][PlayerAskedHelpAt] = 0;
    PlayerDB[playerid][PlayerNeedAnswer] = false;
    PlayerDB[playerid][PlayerCanAskAt] = 0;
    PlayerDB[playerid][RestrictedUseOfV] = 0;
    PlayerDB[playerid][BoughtRareSabre] = 0;
    PlayerDB[playerid][PlayerCanWVIPAt] = 0;

    PlayerDB[playerid][Avietes] = 0;
    PlayerDB[playerid][Braskes] = 0;
    PlayerDB[playerid][Krepselis] = 0;
    PlayerDB[playerid][UogosToday] = 0;
    PlayerDB[playerid][UogosTotal] = 0;


    PlayerDB[playerid][MathToday] = 0;
    PlayerDB[playerid][MathTotal] = 0;
    PlayerDB[playerid][KartingaiTicket] = 0;

    PlayerDB[playerid][Bruknes] = 0;
    PlayerDB[playerid][Zemuoges] = 0;
    PlayerDB[playerid][Melynes] = 0;

    PlayerDB[playerid][SuKrepsiuAntRanku] = false;

    PlayerDB[playerid][SelectedVerslasID] = -1;

    PlayerDB[playerid][RodoAlki] = true;
    PlayerDB[playerid][RodoItarima] = true;
    PlayerDB[playerid][RodoLaikrodi] = true;
    PlayerDB[playerid][ZaidziaKartingais] = false;

    PlayerDB[playerid][ReceivedKartsOffer] = false;
    PlayerDB[playerid][KartsOfferExpiresAt] = 0;
    PlayerDB[playerid][KartOfferSenderSQLid] = -1;


    PlayerDB[playerid][KartsGameID] = -1;
    PlayerDB[playerid][ReceivedXPFromAFK] = 0;
    PlayerDB[playerid][ReceivedMoneyFromAFK] = 0;
    PlayerDB[playerid][SpentTimeInAFKArea] = 0;
    PlayerDB[playerid][IPApsauga] = 0;
    PlayerDB[playerid][SecurityCodeCheck] = 0;

    PlayerDB[playerid][FirstBusinessSlot] = -1;
    PlayerDB[playerid][SecondBusinessSlotBought] = 0;
    PlayerDB[playerid][SecondBusinessSlot] = -1;


    PlayerDB[playerid][KartsLaimejoSiandien] = 0;
    PlayerDB[playerid][KartsLaimejoTotal] = 0;

    PlayerDB[playerid][VerslininkoLicenzija] = 0;
    PlayerDB[playerid][KrovimoLaikas] = 0;
    PlayerDB[playerid][VaistuLaikas] = 0;

    for(new t = 0;t<9;t++)
    {
        CantCallT[playerid][t] = 0;
        new INumeris = CheckIsPlayerCallingT(playerid,t);
        if(INumeris >= 0)
        {
            if(Iskvietimas[INumeris][IskvietimasPriimtas] == false)
            {
                DeleteIskvietimas(INumeris);
            }
        }
    }
    for(new p = 0;p<VALYTOJAI_MISIJU_SKAICIUS;p++)
    {
        TogglePlayerDynamicCP(playerid, ValytojaiMisijos[p][MisijosCPD], false);
    }
    KillTimer(UpdateHungerTimer[playerid]);
    PlayerTextDrawDestroy(playerid, Alkis[playerid][0]);
    PlayerTextDrawDestroy(playerid, Alkis[playerid][1]);
    PlayerTextDrawDestroy(playerid, Alkis[playerid][2]);
    PlayerTextDrawDestroy(playerid, Alkis[playerid][3]);
    PlayerTextDrawDestroy(playerid, Alkis[playerid][4]);

}
new
    Float:g_fSpeedCap[ MAX_PLAYERS ] = { 0.0, ... }
;

#include data/objektai.txt
#include data/naikinti.txt
main()
{
	print("\n----------------------------------");
	print(" san-andreas.lt - SAN ANDREAS VIRTUAL LIFE");
	print("----------------------------------n");
}
stock MySQLprisijungimas()
{
	#define MySQL_HOST  "localhost"
	#define MySQL_USER  "root"
	#define MySQL_DB    "sanan"
	#define MySQL_PASS  ""
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_TEXT);
 	connectionHandle = mysql_connect(MySQL_HOST,MySQL_USER,MySQL_DB,MySQL_PASS);
    if(mysql_errno() == 0) print("Prisijungimas prie MYSQL sekmingas");
    else
    {
        printf("* Prisijungti prie MYSQL nepavyko: %i", mysql_errno());
    }
 	mysql_set_charset("cp1257");
	return 1;
}
new TicksTillServerUnlocked = 6;
new ServerUnlockerTimer;
forward ServerUnlocker();
public ServerUnlocker()
{
    TicksTillServerUnlocked--;
    if(TicksTillServerUnlocked == 0)
    {
        KillTimer(ServerUnlockerTimer);

        SendRconCommand("hostname San-Andreas.LT | Reikalingas 0.3.7 klientas");
        SendRconCommand("password 0");

    }
    else
    {
        new string[64];
        format(string, 64, "hostname Serveris kraunasi.. Prasome palaukti dar %i sek.", TicksTillServerUnlocked);
        SendRconCommand(string);
    }
}
public OnGameModeInit()
{
    SendRconCommand("password 89q541q3d21dq2dqqdkqldwdl");
    ServerUnlockerTimer = SetTimer("ServerUnlocker", 1000, true);


	SetGameModeText("SAN-ANDREAS 0.8");
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	SetNameTagDrawDistance(30.0);
	MySQLprisijungimas();
	ManualVehicleEngineAndLights();
	Objektai();
	SetTimer("SecondsTimer", 1000, true);
    SetTimer("TemporarilyLabelsRemover", 1000, true);
    SetTimer("VehicleSecondTimer", 1000, true);

    SetTimer("AntiWeaponHack", 3000, true);
    SetTimer("AutoCheckForFactoryEvent", 16000, true);
    SetTimer("MathProblems", 540000, true);


    SetTimer("VerslaiPayLVL0", 9000000, true);
    SetTimer("VerslaiPayLVL1", 7200000, true);
    SetTimer("VerslaiPayLVL2", 5400000, true);
    SetTimer("VerslaiPayLVL3", 3600000, true);
    SetTimer("VerslaiPayLVL4", 1800000, true);
    SetTimer("VerslaiPayLVL5", 900000, true);
    SetTimer("VidTrPasipyldimai", 900000, true);
    SetTimer("ViskoGamykla", 900000, true);
    SetTimer("SaveAllOfVerslai", 1000, true);
    SetTimer("SaveHouses", 1000, true);
    SetTimer("BustoMokesciai", 1000, true);

    VarzybosConstruction();

    CreateDynamic3DTextLabel("Verslo valdymas", 0xFFFFFFFF, -2024.1086,-92.0590,620.4189, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 7);


    //
    KartingaiKasa = CreateDynamicPickup(1274, 2, -1900.6110,-879.1024,32.0234, 0, 0);
    CreateDynamic3DTextLabel("Bilietø pirkimas", 0xFFFFFFFF, -1900.6110,-879.1024,32.0234, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateKartingas(571, -1896.5974, -878.5974, 31.4276, 90.0000, -1, -1);
    CreateKartingas(571, -1896.5974, -876.0724, 31.4276, 90.0000, -1, -1);
    CreateKartingas(571, -1896.5974, -871.5544, 31.4276, 90.0000, -1, -1);
    CreateKartingas(571, -1907.3932, -872.9743, 31.4276, -90.0000, -1, -1);
    CreateKartingas(571, -1907.3932, -875.4843, 31.4276, -90.0000, -1, -1);
    CreateKartingas(571, -1907.3932, -878.2453, 31.4276, -90.0000, -1, -1);
    CreateKartingas(571, -1903.7010, -866.1266, 31.4276, 0.0000, -1, -1);
    CreateKartingas(571, -1896.5974, -873.8134, 31.4276, 90.0000, -1, -1);
    CreateKartingas(571, -1896.5974, -869.0444, 31.4276, 90.0000, -1, -1);
    CreateKartingas(571, -1907.3932, -870.2133, 31.4276, -90.0000, -1, -1);
    CreateKartingas(571, -1900.2690, -866.1266, 31.4276, 0.0000, -1, -1);
    CreateKartingas(571, -1907.1331, -866.1266, 31.4276, 0.0000, -1, -1);


    //Uogos
    CreateActor(14, -1667.6588,-931.2664,75.8621,90.0411); // AKTORIUS, KURIS STOVI PRIE PARDAVIMO UOGU(vaizdo irase jo nera)

    KrepseliaiSkaicius = 100 + random(10) + random(30) + random(300);
    UogosShop = CreateDynamicPickup(1274, 2, -1669.5621,-931.0356,75.8621,0,0);
    CreateDynamic3DTextLabel("Uogø supirkimas", -1, -1669.5621,-931.0356,75.8621, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0); 
    new UogosText[400];

    strcat(UogosText,"„San-Fierro parduotø uogø statistika“\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Iðviso parduota: {99CCFF}0 {FFFFFF}uogø.\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Parduota avieèiø: {99CCFF}0\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Parduota brukniø: {99CCFF}0\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Parduota þemuogiø: {99CCFF}0\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Parduota melyniø: {99CCFF}0\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Parduota braðkiø: {99CCFF}0\n");
    strcat(UogosText,"{99CCFF}• {FFFFFF}Ðiandien parduota: {99CCFF}0 {FFFFFF}uogø.");
    UogosStats = CreateDynamic3DTextLabel(UogosText, 0x99CCFFFF, -1672.7782,-928.5750,75.8621, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -2742.3623,378.8387,4.3672, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -2742.4998,386.4443,4.3672, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1989.6338,168.8923,27.5391, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1989.4579,157.8235,27.5391, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1989.1379,135.7163,27.5391, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1989.3558,124.8488,27.5391, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1609.6279,721.2693,12.7124, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Taksistø budëjimo vieta\n{FFFFFF}Budëdamas gausite {ad2dfc}100€ {FFFFFF}ir {ad2dfc}5 XP á minutæ\n{FFFFFF}Pelnà gausite á algà", 0xFFFF00AA, -1599.4982,721.2233,10.8774, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    SukurtiKruma(821, -1688.39343, -962.51245, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1699.04468, -968.95447, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1679.68774, -978.98657, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1704.05286, -958.29681, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1712.70825, -956.97333, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1713.87976, -947.25574, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1715.94080, -938.59875, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1701.00208, -941.62109, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1692.56042, -945.57385, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1690.67273, -916.67102, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1686.72644, -905.32837, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1704.44006, -915.02991, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1700.29590, -906.48126, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1684.58179, -902.35077, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1700.37024, -890.72247, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1691.77673, -886.92041, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1712.39453, -901.55713, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1728.37549, -911.49054, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1719.20776, -917.19592, 74.93660,   0.00000, 0.00000, 0.00000);
    SukurtiKruma(821, -1680.56470, -917.14337, 74.93660,   0.00000, 0.00000, 0.00000);
    //

    DateAUEventStarts[0] = 2016;
    DateAUEventStarts[1] = 5;
    DateAUEventStarts[2] = 21;
    DateAUEventStarts[3] = 19;
    DateAUEventStarts[4] = 00;

    BankRealPin = (random(9)+1) * 1000 + (random(10) * 100) + (random(10) * 10) + random(10);
    Eteris_LastUpdateTime = gettime();
    Eteris_LPavadinimas = "Nera pavadinimo";
    Eteris_LStarter = "Serveris";
    HPSettings[HPArmourCost] = 500;
	for(new cpoint=0;cpoint<sizeof(CashPointPickup);cpoint++)
	{
		CashPointPickup[cpoint] = 777;
	}
	for(new player = 0;player<MAX_PLAYERS;player++)
	{
		ClearAndResetPlayerData(player);
	}
	for(new vehicleid = 0;vehicleid<MAX_VEHICLES;vehicleid++)
	{
		format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
        VehicleDB[vehicleid][VehicleEngineState] = 0;
        VehicleDB[vehicleid][VehicleLights] = 0;
        VehicleDB[vehicleid][VRibotuvas] = 0;
        VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;
        VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
        VehicleDB[vehicleid][TURGUS] = 0;
        VehicleDB[vehicleid][Rida] = 0;
        VehicleDB[vehicleid][Bendzinas] = 0;
        VehicleDB[vehicleid][Dujos] = 0;
        VehicleDB[vehicleid][FuelType] = 0;
        VehicleDB[vehicleid][VMMasina] = 0;
        VehicleDB[vehicleid][DARBOMASINA] = false;
        VehicleDB[vehicleid][DARBOID] = 0;
        VehicleDB[vehicleid][VehicleOwnerID] = -1;
        format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
        VehicleDB[vehicleid][VehicleNumReg] = 0;
        VehicleDB[vehicleid][VehicleColor1] = 0;
        VehicleDB[vehicleid][VehicleColor2] = 0;
        VehicleDB[vehicleid][VehicleDatabaseID] = -1;
        VehicleDB[vehicleid][VehicleWithOwner] = false;
        VehicleDB[vehicleid][VehicleLocked] = 0;
        VehicleDB[vehicleid][VehicleDauztumas] = 0;
        VehicleDB[vehicleid][DujuIranga] = 0;
        VehicleDB[vehicleid][AdminMasina] = false;
        VehicleDB[vehicleid][VIPMasina] = false;
        VehicleDB[vehicleid][PakrautasMaistas] = false;
        VehicleDB[vehicleid][PakrautasSmelis] = false;
        VehicleDB[vehicleid][PakrautosDetales] = false;
        VehicleDB[vehicleid][PakrautaMasina] = -1;
        VehicleDB[vehicleid][PakrautaElektronika] = false;
        VehicleDB[vehicleid][PripildytaDegalu] = false;
	}

    WaterMarkLogo[0] = TextDrawCreate(34.000000, 420.000000, "~y~S~w~an-~y~A~w~ndreas.~y~LT");
    TextDrawBackgroundColor(WaterMarkLogo[0], 255);
    TextDrawFont(WaterMarkLogo[0], 2);
    TextDrawLetterSize(WaterMarkLogo[0], 0.339998, 1.899999);
    TextDrawColor(WaterMarkLogo[0], -1);
    TextDrawSetOutline(WaterMarkLogo[0], 0);
    TextDrawSetProportional(WaterMarkLogo[0], 1);
    TextDrawSetShadow(WaterMarkLogo[0], 1);
    TextDrawSetSelectable(WaterMarkLogo[0], 0);

    WaterMarkLogo[1] = TextDrawCreate(32.000000, 435.000000, "Jusu zaidimas - musu likimas !");
    TextDrawBackgroundColor(WaterMarkLogo[1], 255);
    TextDrawFont(WaterMarkLogo[1], 2);
    TextDrawLetterSize(WaterMarkLogo[1], 0.179997, 1.099998);
    TextDrawColor(WaterMarkLogo[1], -1);
    TextDrawSetOutline(WaterMarkLogo[1], 0);
    TextDrawSetProportional(WaterMarkLogo[1], 1);
    TextDrawSetShadow(WaterMarkLogo[1], 1);
    TextDrawSetSelectable(WaterMarkLogo[1], 0);

    WaterMarkLogo[2] = TextDrawCreate(-45.000000, 388.000000, ",");
    TextDrawBackgroundColor(WaterMarkLogo[2], 0);
    TextDrawFont(WaterMarkLogo[2], 5);
    TextDrawLetterSize(WaterMarkLogo[2], 0.500000, 1.000000);
    TextDrawColor(WaterMarkLogo[2], -1);
    TextDrawSetOutline(WaterMarkLogo[2], 0);
    TextDrawSetProportional(WaterMarkLogo[2], 1);
    TextDrawSetShadow(WaterMarkLogo[2], 1);
    TextDrawUseBox(WaterMarkLogo[2], 1);
    TextDrawBoxColor(WaterMarkLogo[2], 255);
    TextDrawTextSize(WaterMarkLogo[2], 132.000000, 110.000000);
    TextDrawSetSelectable(WaterMarkLogo[2], 0);


    pasiekimu_td_g[0] = TextDrawCreate(211.298614, 157.388885, "ld_pool:ball");
    TextDrawLetterSize(pasiekimu_td_g[0], 0.000000, 0.000000);
    TextDrawTextSize(pasiekimu_td_g[0], 33.000000, 36.000000);
    TextDrawAlignment(pasiekimu_td_g[0], 1);
    TextDrawColor(pasiekimu_td_g[0], 589506815);
    TextDrawSetShadow(pasiekimu_td_g[0], 0);
    TextDrawSetOutline(pasiekimu_td_g[0], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[0], 255);
    TextDrawFont(pasiekimu_td_g[0], 4);
    TextDrawSetProportional(pasiekimu_td_g[0], 0);
    TextDrawSetShadow(pasiekimu_td_g[0], 0);

    pasiekimu_td_g[1] = TextDrawCreate(369.798614, 157.388885, "ld_pool:ball");
    TextDrawLetterSize(pasiekimu_td_g[1], 0.000000, 0.000000);
    TextDrawTextSize(pasiekimu_td_g[1], 33.000000, 36.000000);
    TextDrawAlignment(pasiekimu_td_g[1], 1);
    TextDrawColor(pasiekimu_td_g[1], 589506815);
    TextDrawSetShadow(pasiekimu_td_g[1], 0);
    TextDrawSetOutline(pasiekimu_td_g[1], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[1], 255);
    TextDrawFont(pasiekimu_td_g[1], 4);
    TextDrawSetProportional(pasiekimu_td_g[1], 0);
    TextDrawSetShadow(pasiekimu_td_g[1], 0);

    pasiekimu_td_g[2] = TextDrawCreate(229.000000, 160.133300, "box");
    TextDrawLetterSize(pasiekimu_td_g[2], 0.000000, 3.299998);
    TextDrawTextSize(pasiekimu_td_g[2], 385.000000, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[2], 1);
    TextDrawColor(pasiekimu_td_g[2], -1);
    TextDrawUseBox(pasiekimu_td_g[2], 1);
    TextDrawBoxColor(pasiekimu_td_g[2], 589506815);
    TextDrawSetShadow(pasiekimu_td_g[2], 0);
    TextDrawSetOutline(pasiekimu_td_g[2], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[2], 255);
    TextDrawFont(pasiekimu_td_g[2], 1);
    TextDrawSetProportional(pasiekimu_td_g[2], 1);
    TextDrawSetShadow(pasiekimu_td_g[2], 0);

    pasiekimu_td_g[3] = TextDrawCreate(261.000000, 143.955505, "box");
    TextDrawLetterSize(pasiekimu_td_g[3], 0.000000, 2.750000);
    TextDrawTextSize(pasiekimu_td_g[3], 368.000000, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[3], 1);
    TextDrawColor(pasiekimu_td_g[3], -1);
    TextDrawUseBox(pasiekimu_td_g[3], 1);
    TextDrawBoxColor(pasiekimu_td_g[3], 589506815);
    TextDrawSetShadow(pasiekimu_td_g[3], 0);
    TextDrawSetOutline(pasiekimu_td_g[3], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[3], 255);
    TextDrawFont(pasiekimu_td_g[3], 1);
    TextDrawSetProportional(pasiekimu_td_g[3], 1);
    TextDrawSetShadow(pasiekimu_td_g[3], 0);

    pasiekimu_td_g[4] = TextDrawCreate(272.500000, 144.577743, "~P~[ ~W~Pasiekimas ivykdytas! ~r~ [");
    TextDrawLetterSize(pasiekimu_td_g[4], 0.146999, 0.909333);
    TextDrawAlignment(pasiekimu_td_g[4], 1);
    TextDrawColor(pasiekimu_td_g[4], -1);
    TextDrawSetShadow(pasiekimu_td_g[4], 0);
    TextDrawSetOutline(pasiekimu_td_g[4], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[4], 255);
    TextDrawFont(pasiekimu_td_g[4], 2);
    TextDrawSetProportional(pasiekimu_td_g[4], 1);
    TextDrawSetShadow(pasiekimu_td_g[4], 0);

    pasiekimu_td_g[5] = TextDrawCreate(251.500000, 142.711090, "[]");
    TextDrawLetterSize(pasiekimu_td_g[5], 0.400000, 1.600000);
    TextDrawAlignment(pasiekimu_td_g[5], 1);
    TextDrawColor(pasiekimu_td_g[5], 646140671);
    TextDrawSetShadow(pasiekimu_td_g[5], 0);
    TextDrawSetOutline(pasiekimu_td_g[5], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[5], 255);
    TextDrawFont(pasiekimu_td_g[5], 2);
    TextDrawSetProportional(pasiekimu_td_g[5], 1);
    TextDrawSetShadow(pasiekimu_td_g[5], 0);

    pasiekimu_td_g[6] = TextDrawCreate(342.000000, 141.466644, "[]");
    TextDrawLetterSize(pasiekimu_td_g[6], 0.400000, 1.600000);
    TextDrawAlignment(pasiekimu_td_g[6], 1);
    TextDrawColor(pasiekimu_td_g[6], 646140671);
    TextDrawSetShadow(pasiekimu_td_g[6], 0);
    TextDrawSetOutline(pasiekimu_td_g[6], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[6], 255);
    TextDrawFont(pasiekimu_td_g[6], 2);
    TextDrawSetProportional(pasiekimu_td_g[6], 1);
    TextDrawSetShadow(pasiekimu_td_g[6], 0);

    pasiekimu_td_g[7] = TextDrawCreate(233.500000, 163.866638, "box");
    TextDrawLetterSize(pasiekimu_td_g[7], 0.000000, 2.500000);
    TextDrawTextSize(pasiekimu_td_g[7], 381.000000, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[7], 1);
    TextDrawColor(pasiekimu_td_g[7], -1);
    TextDrawUseBox(pasiekimu_td_g[7], 1);
    TextDrawBoxColor(pasiekimu_td_g[7], 255);
    TextDrawSetShadow(pasiekimu_td_g[7], 0);
    TextDrawSetOutline(pasiekimu_td_g[7], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[7], 255);
    TextDrawFont(pasiekimu_td_g[7], 1);
    TextDrawSetProportional(pasiekimu_td_g[7], 1);
    TextDrawSetShadow(pasiekimu_td_g[7], 0);

    pasiekimu_td_g[8] = TextDrawCreate(233.900024, 164.366668, "box");
    TextDrawLetterSize(pasiekimu_td_g[8], 0.000000, 2.389008);
    TextDrawTextSize(pasiekimu_td_g[8], 380.348999, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[8], 1);
    TextDrawColor(pasiekimu_td_g[8], -1);
    TextDrawUseBox(pasiekimu_td_g[8], 1);
    TextDrawBoxColor(pasiekimu_td_g[8], 589506815);
    TextDrawSetShadow(pasiekimu_td_g[8], 0);
    TextDrawSetOutline(pasiekimu_td_g[8], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[8], 255);
    TextDrawFont(pasiekimu_td_g[8], 1);
    TextDrawSetProportional(pasiekimu_td_g[8], 1);
    TextDrawSetShadow(pasiekimu_td_g[8], 0);

    pasiekimu_td_g[9] = TextDrawCreate(-13.000000, -16.577777, "box");
    TextDrawLetterSize(pasiekimu_td_g[9], 0.000000, 15.300004);
    TextDrawTextSize(pasiekimu_td_g[9], 763.000000, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[9], 1);
    TextDrawColor(pasiekimu_td_g[9], -1);
    TextDrawUseBox(pasiekimu_td_g[9], 1);
    TextDrawBoxColor(pasiekimu_td_g[9], 255);
    TextDrawSetShadow(pasiekimu_td_g[9], 0);
    TextDrawSetOutline(pasiekimu_td_g[9], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[9], 255);
    TextDrawFont(pasiekimu_td_g[9], 1);
    TextDrawSetProportional(pasiekimu_td_g[9], 1);
    TextDrawSetShadow(pasiekimu_td_g[9], 0);

    pasiekimu_td_g[10] = TextDrawCreate(-24.000000, 310.711181, "box");
    TextDrawLetterSize(pasiekimu_td_g[10], 0.000000, 15.300004);
    TextDrawTextSize(pasiekimu_td_g[10], 757.000000, 0.000000);
    TextDrawAlignment(pasiekimu_td_g[10], 1);
    TextDrawColor(pasiekimu_td_g[10], -1);
    TextDrawUseBox(pasiekimu_td_g[10], 1);
    TextDrawBoxColor(pasiekimu_td_g[10], 255);
    TextDrawSetShadow(pasiekimu_td_g[10], 0);
    TextDrawSetOutline(pasiekimu_td_g[10], 0);
    TextDrawBackgroundColor(pasiekimu_td_g[10], 255);
    TextDrawFont(pasiekimu_td_g[10], 1);
    TextDrawSetProportional(pasiekimu_td_g[10], 1);
    TextDrawSetShadow(pasiekimu_td_g[10], 0);

    SpeedoTD [ 0 ] = TextDrawCreate(639.000000, 363.000000, "BG");
    TextDrawBackgroundColor(SpeedoTD [ 0 ], 255);
    TextDrawFont(SpeedoTD [ 0 ], 1);
    TextDrawLetterSize(SpeedoTD [ 0 ], 0.000000, 8.900003);
    TextDrawColor(SpeedoTD [ 0 ], -1);
    TextDrawSetOutline(SpeedoTD [ 0 ], 0);
    TextDrawSetProportional(SpeedoTD [ 0 ], 1);
    TextDrawSetShadow(SpeedoTD [ 0 ], 1);
    TextDrawUseBox(SpeedoTD [ 0 ], 1);
    TextDrawBoxColor(SpeedoTD [ 0 ], 656877567);
    TextDrawTextSize(SpeedoTD [ 0 ], 420.000000, 0.000000);
    TextDrawSetSelectable(SpeedoTD [ 0 ], 0);

    SpeedoTD [ 1 ] = TextDrawCreate(636.000000, 429.000000, "BG");
    TextDrawBackgroundColor(SpeedoTD [ 1 ], 255);
    TextDrawFont(SpeedoTD [ 1 ], 1);
    TextDrawLetterSize(SpeedoTD [ 1 ], 0.000000, 1.200000);
    TextDrawColor(SpeedoTD [ 1 ], -1);
    TextDrawSetOutline(SpeedoTD [ 1 ], 0);
    TextDrawSetProportional(SpeedoTD [ 1 ], 1);
    TextDrawSetShadow(SpeedoTD [ 1 ], 1);
    TextDrawUseBox(SpeedoTD [ 1 ], 1);
    TextDrawBoxColor(SpeedoTD [ 1 ], 303174399);
    TextDrawTextSize(SpeedoTD [ 1 ], 423.000000, 0.000000);
    TextDrawSetSelectable(SpeedoTD [ 1 ], 0);

    SpeedoTD [ 2 ] = TextDrawCreate(636.000000, 367.000000, "BG");
    TextDrawBackgroundColor(SpeedoTD [ 2 ], 255);
    TextDrawFont(SpeedoTD [ 2 ], 1);
    TextDrawLetterSize(SpeedoTD [ 2 ], 0.000000, 6.099999);
    TextDrawColor(SpeedoTD [ 2 ], -1);
    TextDrawSetOutline(SpeedoTD [ 2 ], 0);
    TextDrawSetProportional(SpeedoTD [ 2 ], 1);
    TextDrawSetShadow(SpeedoTD [ 2 ], 1);
    TextDrawUseBox(SpeedoTD [ 2 ], 1);
    TextDrawBoxColor(SpeedoTD [ 2 ], 269488383);
    TextDrawTextSize(SpeedoTD [ 2 ], 423.000000, 1.000000);
    TextDrawSetSelectable(SpeedoTD [ 2 ], 0);

    SpeedoTD [ 3 ] = TextDrawCreate(594.000000, 407.500000, "km/h");
    TextDrawBackgroundColor(SpeedoTD [ 3 ], 255);
    TextDrawFont(SpeedoTD [ 3 ], 2);
    TextDrawLetterSize(SpeedoTD [ 3 ], 0.170000, 1.000000);
    TextDrawColor(SpeedoTD [ 3 ], -1);
    TextDrawSetOutline(SpeedoTD [ 3 ], 1);
    TextDrawSetProportional(SpeedoTD [ 3 ], 1);
    TextDrawSetSelectable(SpeedoTD [ 3 ], 0);

    SpeedoTD [ 4 ] = TextDrawCreate(636.000000, 367.000000, "BG");
    TextDrawBackgroundColor(SpeedoTD [ 4 ], 255);
    TextDrawFont(SpeedoTD [ 4 ], 1);
    TextDrawLetterSize(SpeedoTD [ 4 ], 0.000000, 6.099998);
    TextDrawColor(SpeedoTD [ 4 ], -1);
    TextDrawSetOutline(SpeedoTD [ 4 ], 0);
    TextDrawSetProportional(SpeedoTD [ 4 ], 1);
    TextDrawSetShadow(SpeedoTD [ 4 ], 1);
    TextDrawUseBox(SpeedoTD [ 4 ], 1);
    TextDrawBoxColor(SpeedoTD [ 4 ], 151587327);
    TextDrawTextSize(SpeedoTD [ 4 ], 565.000000, 0.000000);
    TextDrawSetSelectable(SpeedoTD [ 4 ], 0);

    SpeedoTD [ 5 ] = TextDrawCreate(635.000000, 430.000000, "BG");
    TextDrawBackgroundColor(SpeedoTD [ 5 ], 255);
    TextDrawFont(SpeedoTD [ 5 ], 1);
    TextDrawLetterSize(SpeedoTD [ 5 ], 0.000000, 1.000000);
    TextDrawColor(SpeedoTD [ 5 ], -1);
    TextDrawSetOutline(SpeedoTD [ 5 ], 0);
    TextDrawSetProportional(SpeedoTD [ 5 ], 1);
    TextDrawSetShadow(SpeedoTD [ 5 ], 1);
    TextDrawUseBox(SpeedoTD [ 5 ], 1);
    TextDrawBoxColor(SpeedoTD [ 5 ], 1758419829);
    TextDrawTextSize(SpeedoTD [ 5 ], 424.000000, 0.000000);
    TextDrawSetSelectable(SpeedoTD [ 5 ], 0);
	//TEXTDRAWS
    Datarodis = TextDrawCreate(550.000000, 7.000000, "N/A");
    TextDrawLetterSize(Datarodis, 0.321000, 1.197499);
    TextDrawAlignment(Datarodis, 1);
    TextDrawColor(Datarodis, -1);
    TextDrawSetShadow(Datarodis, 0);
    TextDrawSetOutline(Datarodis, 1);
    TextDrawBackgroundColor(Datarodis, 255);
    TextDrawFont(Datarodis, 3);
    TextDrawSetProportional(Datarodis, 1);

    Laikrodis = TextDrawCreate(557.000000, 20.999990, "N/A");
    TextDrawLetterSize(Laikrodis, 0.449999, 1.600000);
    TextDrawAlignment(Laikrodis, 1);
    TextDrawColor(Laikrodis, -1);
    TextDrawSetShadow(Laikrodis, 0);
    TextDrawSetOutline(Laikrodis, 1);
    TextDrawBackgroundColor(Laikrodis, 255);
    TextDrawFont(Laikrodis, 3);
    TextDrawSetProportional(Laikrodis, 1);
    //
    SAUGIZONA1 = TextDrawCreate(58.000000, 323.000000, "~r~Saugi zona");
    TextDrawBackgroundColor(SAUGIZONA1, 255);
    TextDrawFont(SAUGIZONA1, 3);
    TextDrawLetterSize(SAUGIZONA1, 0.279998, 1.399999);
    TextDrawColor(SAUGIZONA2, -16776961);
    TextDrawSetOutline(SAUGIZONA1, 1);
    TextDrawSetProportional(SAUGIZONA1, 1);
    TextDrawSetSelectable(SAUGIZONA1, 0);

    SAUGIZONA2 = TextDrawCreate(44.000000, 324.000000, "hud:radar_girlfriend");
    TextDrawBackgroundColor(SAUGIZONA2, 255);
    TextDrawFont(SAUGIZONA2, 4);
    TextDrawLetterSize(SAUGIZONA2, 0.539999, 1.000000);
    TextDrawColor(SAUGIZONA2, -1);
    TextDrawSetOutline(SAUGIZONA2, 0);
    TextDrawSetProportional(SAUGIZONA2, 1);
    TextDrawSetShadow(SAUGIZONA2, 1);
    TextDrawUseBox(SAUGIZONA2, 1);
    TextDrawBoxColor(SAUGIZONA2, 255);
    TextDrawTextSize(SAUGIZONA2, 12.000000, 12.000000);
    TextDrawSetSelectable(SAUGIZONA2, 0);

    KAROZONA1 = TextDrawCreate(58.000000, 306.000000, "~g~Karo zona");
    TextDrawBackgroundColor(KAROZONA1, 255);
    TextDrawFont(KAROZONA1, 3);
    TextDrawLetterSize(KAROZONA1, 0.279998, 1.399999);
    TextDrawColor(KAROZONA2, 10027263);
    TextDrawSetOutline(KAROZONA1, 1);
    TextDrawSetProportional(KAROZONA1, 1);
    TextDrawSetSelectable(KAROZONA1, 0);

    KAROZONA2 = TextDrawCreate(44.000000, 307.000000, "hud:radar_emmetgun");
    TextDrawBackgroundColor(KAROZONA2, 255);
    TextDrawFont(KAROZONA2, 4);
    TextDrawLetterSize(KAROZONA2, 0.539999, 1.000000);
    TextDrawColor(KAROZONA2, -1);
    TextDrawSetOutline(KAROZONA2, 0);
    TextDrawSetProportional(KAROZONA2, 1);
    TextDrawSetShadow(KAROZONA2, 1);
    TextDrawUseBox(KAROZONA2, 1);
    TextDrawBoxColor(KAROZONA2, 255);
    TextDrawTextSize(KAROZONA2, 12.000000, 12.000000);
    TextDrawSetSelectable(KAROZONA2, 0);
    
    blackTD = TextDrawCreate(-20.000000,2.000000,"|");
    TextDrawUseBox(blackTD,1);
    TextDrawBoxColor(blackTD,0x000000ff); //xx
    TextDrawTextSize(blackTD,660.000000,22.000000);
    TextDrawAlignment(blackTD,0);
    TextDrawBackgroundColor(blackTD,0x000000ff); //xx
    TextDrawFont(blackTD,3);
    TextDrawLetterSize(blackTD,1.000000,52.200000);
	TextDrawColor(blackTD,0x000000ff);//xx
 	TextDrawSetOutline(blackTD,1);
	TextDrawSetProportional(blackTD,1);
 	TextDrawSetShadow(blackTD,1);

    Taksometras1 = TextDrawCreate(20.000000, 120.000000, "TAKSOMETRAS");
    TextDrawBackgroundColor(Taksometras1, 255);
    TextDrawFont(Taksometras1, 2);
    TextDrawLetterSize(Taksometras1, 0.310000, 1.000000);
    TextDrawColor(Taksometras1, -1);
    TextDrawSetOutline(Taksometras1, 0);
    TextDrawSetProportional(Taksometras1, 1);
    TextDrawSetShadow(Taksometras1, 1);
    TextDrawSetSelectable(Taksometras1, 0);

    Taksometras2 = TextDrawCreate(18.000000, 120.000000, "~n~  ~n~");
    TextDrawBackgroundColor(Taksometras2, 255);
    TextDrawFont(Taksometras2, 1);
    TextDrawLetterSize(Taksometras2, 0.400000, 3.000000);
    TextDrawColor(Taksometras2, -1);
    TextDrawSetOutline(Taksometras2, 0);
    TextDrawSetProportional(Taksometras2, 1);
    TextDrawSetShadow(Taksometras2, 1);
    TextDrawUseBox(Taksometras2, 1);
    TextDrawBoxColor(Taksometras2, 80);
    TextDrawTextSize(Taksometras2, 130.000000, 0.000000);
    TextDrawSetSelectable(Taksometras2, 0);

    Taksometras3 = TextDrawCreate(23.000000, 137.000000, "NUO PRADINIO TASKO");
    TextDrawBackgroundColor(Taksometras3, 255);
    TextDrawFont(Taksometras3, 1);
    TextDrawLetterSize(Taksometras3, 0.230000, 1.000000);
    TextDrawColor(Taksometras3, -3394561);
    TextDrawSetOutline(Taksometras3, 1);
    TextDrawSetProportional(Taksometras3, 1);
    TextDrawSetSelectable(Taksometras3, 0);

	for(new playerid=0;playerid <MAX_PLAYERS;playerid++)
	{
        //Taksometras

        Taksometras4[playerid] = TextDrawCreate(23.000000, 146.000000, "NUTOLTA 0.00 KM");
        TextDrawBackgroundColor(Taksometras4[playerid], 255);
        TextDrawFont(Taksometras4[playerid], 1);
        TextDrawLetterSize(Taksometras4[playerid], 0.230000, 1.000000);
        TextDrawColor(Taksometras4[playerid], -3394561);
        TextDrawSetOutline(Taksometras4[playerid], 1);
        TextDrawSetProportional(Taksometras4[playerid], 1);
        TextDrawSetSelectable(Taksometras4[playerid], 0);

        Taksometras5[playerid] = TextDrawCreate(23.000000, 157.000000, "SUMA: 0EUR");
        TextDrawBackgroundColor(Taksometras5[playerid], 255);
        TextDrawFont(Taksometras5[playerid], 1);
        TextDrawLetterSize(Taksometras5[playerid], 0.319999, 1.000000);
        TextDrawColor(Taksometras5[playerid], -3394561);
        TextDrawSetOutline(Taksometras5[playerid], 1);
        TextDrawSetProportional(Taksometras5[playerid], 1);
        TextDrawSetSelectable(Taksometras5[playerid], 0);
	}
	//PICKUP'AI
	InfoAboutDrivingSchool = CreateDynamicPickup(1239, 2, -2021.3765,-101.4122,35.1641, 0);
	PickupToEnterIntoDrivingSchool = CreateDynamicPickup(19198, 2, -2026.6554,-102.0630,35.1641, 0);
	PickupToExitDrivingSchool = CreateDynamicPickup(19198, 2, -2029.7317,-119.6216,1035.1719, 1);
	PickupToEnterMedicsGarage = CreateDynamicPickup(19198, 1, -2558.3374,663.2217,14.4531, 0);
	PickupToExitMedicsGarage = CreateDynamicPickup(19198, 1, -2584.8271,683.2264,-0.7252, 0);
	PickupLiftToRoofOfMedicsA = CreateDynamicPickup(19198, 1, -2695.4905,640.1628,14.4531, 0);
	PickupLiftToRoofOfMedicsB = CreateDynamicPickup(19198, 1, -2682.3125,686.3080,66.1759, 0);
	HospitalInterEnterPickup = CreateDynamicPickup(19198, 1, -2643.2402,639.3808,14.4531, 0);
	HospitalInterExitPickup = CreateDynamicPickup(19198, 1, -2675.1377,669.7626,244.3842, 0);
	DrivingTheoryPickup = CreateDynamicPickup(1274, 2, -2032.6508,-116.8060,1035.1719, 1);

	NamoVaistuPirkimas = CreateDynamicPickup(1274, 2, -552.7928,-1049.4883, 3.7920, 0);
	CreateDynamic3DTextLabel("Namo vaistø pirkimas", -1, -552.7928,-1049.4883, 3.7920, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	POLICE_WEAPONS = CreateDynamicPickup(3014, 1, -1615.9482,683.1028,7.1875, 0);

    PickupBuyHelmet = CreateDynamicPickup(18645, 2, -1962.2915,298.5051,35.4739,0,0);


    EnterPickupBoxGym = CreateDynamicPickup(19198, 1, -2172.4617,252.0443,35.3394, 0,0);
    ExitPickupBoxGym = CreateDynamicPickup(19198, 1, 772.2577,-5.2209,1000.7285, 1,5);
    
    EnterVaistine = CreateDynamicPickup(19198, 1, -1858.2648,487.0911,35.1719, 0,0);
    CreateDynamic3DTextLabel("Áëjimas á iRoad.LT vaistinæ", -1, -1858.2648,487.0911,35.1719, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

    HealNaujokas = CreateDynamicPickup(1240, 1, -557.0852,-1049.5930,3.7920, 0, 0);
    CreateDynamic3DTextLabel("• Gyvybiø suteikimas •\n Kaina: 1000€ (naujokams nemokamai)", -1, -557.0852,-1049.5930,3.7920, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	ExitVaistine = CreateDynamicPickup(19198, 1, -552.8538,-1039.5245,3.7920, 0,0);

	//=======NTA PICKUPAI=============
	EnterNTA = CreateDynamicPickup(19198, 1, -2649.5066,376.0516,6.1593, 0,0);
	CreateDynamic3DTextLabel("Nekilnojamo Turto Agentûra", -1,-2649.5066,376.0516,6.1593, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);
	
	ExitNTA[0] =  CreateDynamicPickup(19198, 1, 709.5391,376.2930,1023.5939, 0);
	CreateDynamic3DTextLabel("Iðëjimas", -1,709.5391,376.2930,1023.5939, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	ExitNTA[1] =  CreateDynamicPickup(19198, 1, 707.2839,376.2930,1023.5939, 0);
	CreateDynamic3DTextLabel("Iðëjimas", -1,707.2839,376.2930,1023.5939, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	NarkSlotas = CreateDynamicPickup(19134, 2, 719.1918,396.6980,1023.5790, 0);
	CreateDynamic3DTextLabel("Narkotikø sloto atidarymas \n Kaina: {FFFFFF}100 {ff9016}krd.", ORANGE,719.1918,396.6980,1023.5790, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	NarkTalpa = CreateDynamicPickup(19134, 2, 714.3847,396.6466,1023.57900, 0);
	CreateDynamic3DTextLabel("Narkotikø sloto talpos didinimas \n Kaina: {FFFFFF}25 {ff9016}krd.", ORANGE,714.3847,396.6466,1023.57900, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);

	NamoMokesciai = CreateDynamicPickup(19134, 2, 702.9410,396.6552,1023.5790, 0);
	CreateDynamic3DTextLabel("Bûsto mokesèiø apmokëjimas", ORANGE, 702.9410,396.6552,1023.5790, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);
	//=======NTA PICKUPAI END=============
	
    ClothesBoxGymRed = CreateDynamicPickup(1275, 2, 756.5340,4.5110,1000.6987, 1,5);
    CreateDynamic3DTextLabel("Boksininko apranga", RAUDONA, 756.5340,4.5110,1000.6987, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,1,5);

    ClothesBoxGymBlue = CreateDynamicPickup(1275, 2, 756.2958,6.5063,1000.6992, 1,5);
    CreateDynamic3DTextLabel("Boksininko apranga", MELYNA, 756.2958,6.5063,1000.6992, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,1,5);

    KioskaiPickup[0] = CreateDynamicPickup(1274, 2, -1991.1688,210.6771,27.6799, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, -1991.1688,210.6771,27.6799, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    KioskaiPickup[1] = CreateDynamicPickup(1274, 2, -1898.8187,413.5897,35.1719, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, -1898.8187,413.5897,35.1719, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    KioskaiPickup[2] = CreateDynamicPickup(1274, 2, 380.4637,-1882.4126,7.8301, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, 380.4637,-1882.4126,7.8301, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    KioskaiPickup[3] = CreateDynamicPickup(1274, 2, 1847.3425,-1871.6924,13.5781, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, 1847.3425,-1871.6924,13.5781, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    KioskaiPickup[4] = CreateDynamicPickup(1274, 2, 2117.4956,896.8467,11.1797, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, 2117.4956,896.8467,11.1797, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    KioskaiPickup[5] = CreateDynamicPickup(1274, 2, 2637.3447,1129.0919,11.1797, 0,0);
    CreateDynamic3DTextLabel("Kioskas", PILKA, 2637.3447,1129.0919,11.1797, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, 0);

    EnterBankPickup = CreateDynamicPickup(19198, 1, -2765.9082,375.5172,6.3347, 0);
    ExitBankPickup = CreateDynamicPickup(19198, 1, 1343.7122,-955.0992,200.9860, 1);
    CreateBankAccountPickup[0] = CreateDynamicPickup(1274, 2, 1379.3232,-955.2318,200.9860, 1);
    CreateBankAccountPickup[1] = CreateDynamicPickup(1274, 2, 1379.3184,-958.8515,200.9860, 1);
    CreateDynamic3DTextLabel("Banko sàskaitos atidarymas", PILKA, 1379.3232,-955.2318,200.9860, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 1);
    CreateDynamic3DTextLabel("Banko sàskaitos atidarymas", PILKA, 1379.3184,-958.8515,200.9860, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 1);
    CreateDynamicMapIcon(-2765.9082,375.5172,6.3347, 52, 0, 0, 0, -1, 99999.0, MAPICON_GLOBAL);//Bankas

	MEDIKAI_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -2593.7734,642.9541,14.4531, 0);
	POLICE_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -1611.9440,686.3973,17.8559, 0);
    TaksiF_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -2571.3018,495.6080,14.6739, 0);
    MECHANIKAS_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -1706.8668,-110.5637,7.9540, 0);
    LigonineUzPinigusPickup = CreateDynamicPickup(19197, 2, -2678.8936,658.3125,244.3842, -1, 1);
    CreateDynamic3DTextLabel("Iðëjimas ið ligoninës nepraëjus laikui, kaina 500€.", PILKA, -2678.8936,658.3125,244.3842, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 1);

    LuccheseMafia_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -694.0878,952.3386,13.9838, 0);
    CreateDynamic3DTextLabel("Lucchese Mafija\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -694.0878,952.3386,13.9838, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    GenoveseMafia_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -1086.3219,-1284.1973,130.7798, 0);
    CreateDynamic3DTextLabel("Genovese Mafija\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -1086.3219,-1284.1973,130.7798, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    LuccheseMafia_PiniguPlovimas = CreateDynamicPickup(1550, 1, -687.0162,949.9537,13.9838, 0);
    CreateDynamic3DTextLabel("Lucchese Mafija\n {00FF00}Pinigø plovimas rinkoje",PILKA, -687.0162,949.9537,13.9838, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    GenoveseMafia_PiniguPlovimas = CreateDynamicPickup(1550, 1, -1088.9373,-1275.7826,130.7798, 0);
    CreateDynamic3DTextLabel("Genovese Mafija\n {00FF00}Pinigø plovimas rinkoje",PILKA, -1088.9373,-1275.7826,130.7798, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    LuccheseGangZone = GangZoneCreate(-725.2324,909.8508,-651.4316,1023.4786);
    GenoveseGangZone = GangZoneCreate(-1125.3457,-1312.7350,-1044.1890,-1204.5802);

    LuccheseGangZoneArea = CreateDynamicRectangle(-725.2324,909.8508,-651.4316,1023.4786,0,0);
    GenoveseGangZoneArea = CreateDynamicRectangle(-1125.3457,-1312.7350,-1044.1890,-1204.5802,0,0);

    KMAArea = CreateDynamicCube(-2154.5649,-975.4974,30,-2113.4744, -745.0012, 38, 0, 0);





    //
    CreateDynamic3DTextLabel("Norëdami iðeiti á laukà spauskite {96A677}ENTER {FFFFFF}mygtukà", 0xFFFFFFFF, -2018.9481,-93.0429,620.3799, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, 7);

    ///

    Radistai_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -2193.7864,-114.0688,35.3749, 0);
    CreateDynamic3DTextLabel("Nacionalinë serverio radijos kompanija\n„Radistai“\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -2193.7864,-114.0688,35.3749, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    RadistaiPickupGaraze = CreateDynamicPickup(19198, 1, -2238.7549,-88.9378,-16.8022, 0,0);
    RadistaiPickupLauke = CreateDynamicPickup(19198, 1, -2197.0591,-115.7566,35.3749, 0,0);

    RadistaiPickupAntStogo = CreateDynamicPickup(19198, 1, -2193.0488,-115.7497,46.9190, 0,0);


    SPD_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -2072.9246,-65.8456,24.7100, 0);
    CreateDynamic3DTextLabel("Slaptoji policija\n„SPD“\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -2072.9246,-65.8456,24.7100, 20,  INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    SPD_GINKLAI = CreateDynamicPickup(3014, 1, -2074.4600,-54.7044,24.7100, 0);

    //ORLEN DEGALINE
    OrlenDegaline[0] = CreateDynamicPickup(1274,2,-1687.2740,410.6149,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[1] = CreateDynamicPickup(1274,2,-1683.1315,414.9847,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[2] = CreateDynamicPickup(1274,2,-1677.3738,420.1858,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[3] = CreateDynamicPickup(1274,2,-1673.0405,424.2165,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[4] = CreateDynamicPickup(1274,2,-1671.0872,422.6507,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[5] = CreateDynamicPickup(1274,2,-1675.5852,418.4264,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[6] = CreateDynamicPickup(1274,2,-1680.7870,412.9579,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[7] = CreateDynamicPickup(1274,2,-1685.1903,408.8134,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[8] = CreateDynamicPickup(1274,2,-1680.7192,404.1921,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[9] = CreateDynamicPickup(1274,2,-1678.2654,402.1480,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[10] = CreateDynamicPickup(1274,2,-1674.5585,406.3056,7.1797,0); // DegalinesCP orlen ........
    OrlenDegaline[11] = CreateDynamicPickup(1274,2,-1676.0118,408.1057,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[12] = CreateDynamicPickup(1274,2,-1671.1411,413.2444,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[13] = CreateDynamicPickup(1274,2,-1666.5258,417.3791,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[14] = CreateDynamicPickup(1274,2,-1664.5662,415.8872,7.1797,0); // DegalinesC orlen ........ P
    OrlenDegaline[15] = CreateDynamicPickup(1274,2,-1669.1448,411.7256,7.1797,0); // DegalinesC orlen ........ P

    CreateDynamic3DTextLabel("Degalinëje galioja ðios {47AB3F}degalø kainos:\n\n{FFFFFF}Benzinas - {47AB3F}12€/1l.\n{FFFFFF}Dujos - {47AB3F}10€/1l.", 0xFFFFFFFF, -1636.037,437.165,10.673, 60, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

    EnterOrlenDegaline = CreateDynamicPickup(19198, 1, -1676.1337,432.5108,7.1797, 0);
    ExitOrlenDegaline = CreateDynamicPickup(19198, 1, -27.2617,-58.2684,1003.5469, 2);
    OrlenDegalineShop = CreateDynamicPickup(1274, 2, -23.2113,-55.6432,1003.5469, 2);
    new OrlenActor = CreateActor(93,-22.6097,-57.3664,1003.5469,353.1800);//Orlen actorius kasininke
    SetActorVirtualWorld(OrlenActor, 2);
    //Xoomer DEGALINE (1)
    XoomerDegaline[0] = CreateDynamicPickup(1274,2,-2027.9808,151.9107,27.6790,0); // DegalinesC Xoomer ........ P
    XoomerDegaline[1] = CreateDynamicPickup(1274,2,-2027.9822,158.8247,27.6790,0); // DegalinesC Xoomer ........ P
    XoomerDegaline[2] = CreateDynamicPickup(1274,2,-2025.8201,158.8692,27.6790,0); // DegalinesC Xoomer ........ P
    XoomerDegaline[3] = CreateDynamicPickup(1274,2,-2025.8378,151.9895,27.6790,0); // DegalinesC Xoomer ........ P
    CreateDynamic3DTextLabel("Degalinëje galioja ðios {47AB3F}degalø kainos:\n\n{FFFFFF}Benzinas - {47AB3F}14€/1l.\n{FFFFFF}Dujos - {47AB3F}11€/1l.", 0xFFFFFFFF, -2016.7233,166.5316,31.6381, 60, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

    EnterXoomerDegaline = CreateDynamicPickup(19198, 1, -2039.9376,151.8776,27.6790, 0);
    ExitXoomerDegaline = CreateDynamicPickup(19198, 1, -27.4103,-31.7660,1003.5573, 2);
    XoomerDegalineShop = CreateDynamicPickup(1274, 2, -30.4566,-28.9859,1003.5573, -1);
    new XoomerActor = CreateActor(192,-30.0050,-30.6455,1003.5573,358.2862);//Xoomer actorius kasininke
    SetActorVirtualWorld(XoomerActor, 2);
    //

    ExitFromHouse[0] = CreateDynamicPickup(19198, 2, 235.2431,1186.6798,1080.257,-1); // NAMAS 0 ISEJIMAS
    ExitFromHouse[1] = CreateDynamicPickup(19198, 2, 226.7874,1239.9193,1082.140,-1); // NAMAS 1 ISEJIMAS
    ExitFromHouse[2] = CreateDynamicPickup(19198, 2, 223.1513,1287.0786,1082.140,-1); // NAMAS 2 ISEJIMAS
    ExitFromHouse[3] = CreateDynamicPickup(19198, 2, 226.2983,1114.1876,1080.992,-1);// NAMAS 3 ISEJIMAS
    ExitFromHouse[4] = CreateDynamicPickup(19198, 2, 295.0839,1472.2554,1080.257,-1); // NAMAS 4 ISEJIMAS
    ExitFromHouse[5] = CreateDynamicPickup(19198, 2, 260.9762,1284.2954,1080.257,-1); // NAMAS 5 ISEJIMAS
    ExitFromHouse[6] = CreateDynamicPickup(19198, 2, 23.9294,1340.1608,1084.3750,-1);// NAMAS 6 ISEJIMAS
    ExitFromHouse[7] = CreateDynamicPickup(19198, 2, -42.7165,1405.4713,1084.429,-1); // NAMAS 7 ISEJIMAS
    ExitFromHouse[8] = CreateDynamicPickup(19198, 2, 83.0465,1322.2819,1083.8662,-1);// NAMAS 8 ISEJIMAS
    ExitFromHouse[9] = CreateDynamicPickup(19198, 2, 260.8151,1237.2357,1084.257,-1); // NAMAS 9 ISEJIMAS


    //Xoomer DEGALINE (2)
    Xoomer2Degaline[0] = CreateDynamicPickup(1274,2,-2249.4275,537.9686,35.1792,0); // Xommer2
    Xoomer2Degaline[1] = CreateDynamicPickup(1274,2,-2249.4172,530.0086,35.1792,0); // Xommer2
    Xoomer2Degaline[2] = CreateDynamicPickup(1274,2,-2251.3743,530.2885,35.1792,0); // Xommer2
    Xoomer2Degaline[3] = CreateDynamicPickup(1274,2,-2251.3293,537.9596,35.3902,0); // Xommer2
    Xoomer2Degaline[4] = CreateDynamicPickup(1274,2,-2260.7559,538.2252,35.1770,0); // Xommer2
    Xoomer2Degaline[5] = CreateDynamicPickup(1274,2,-2260.8164,530.2094,35.1792,0); // Xommer2
    Xoomer2Degaline[6] = CreateDynamicPickup(1274,2,-2258.8230,530.1666,35.1792,0); // Xommer2
    Xoomer2Degaline[7] = CreateDynamicPickup(1274,2,-2258.7803,538.3014,35.1770,0); // Xommer2
    CreateDynamic3DTextLabel("Degalinëje galioja ðios {47AB3F}degalø kainos:\n\n{FFFFFF}Benzinas - {47AB3F}14€/1l.\n{FFFFFF}Dujos - {47AB3F}11€/1l.", 0xFFFFFFFF, -2240.7654,516.0673,35.1719, 60, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);
    CreateDynamic3DTextLabel("Degalinëje galioja ðios {47AB3F}degalø kainos:\n\n{FFFFFF}Benzinas - {47AB3F}14€/1l.\n{FFFFFF}Dujos - {47AB3F}11€/1l.", 0xFFFFFFFF, -2277.6492,551.4303,35.1755, 60, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

    EnterXoomer2Degaline = CreateDynamicPickup(19198, 1,-2268.9907,547.2795,35.1771, 0);
    ExitXoomer2Degaline = CreateDynamicPickup(19198, 1, -27.4103,-31.7660,1003.5573, 3);
    new Xoomer2Actor = CreateActor(192,-30.0050,-30.6455,1003.5573,358.2862);//Xoomer2 actorius kasininke
    SetActorVirtualWorld(Xoomer2Actor, 3);

    //
    //
    //Xoomer DEGALINE (3)
    Xoomer3Degaline[0] = CreateDynamicPickup(1274,2,-2411.7649,970.8486,45.4580,0); // PILTI
    Xoomer3Degaline[1] = CreateDynamicPickup(1274,2,-2410.0364,971.0410,45.4253,0); // PILTI
    Xoomer3Degaline[2] = CreateDynamicPickup(1274,2,-2410.0371,976.3035,45.4255,0); // PILTI
    Xoomer3Degaline[3] = CreateDynamicPickup(1274,2,-2411.5710,976.1427,45.4609,0); // PILTI
    Xoomer3Degaline[4] = CreateDynamicPickup(1274,2,-2411.5908,981.6881,45.4609,0); // PILTI
    Xoomer3Degaline[5] = CreateDynamicPickup(1274,2,-2410.0313,981.5530,45.4238,0); // PILTI
    CreateDynamic3DTextLabel("Degalinëje galioja ðios {47AB3F}degalø kainos:\n\n{FFFFFF}Benzinas - {47AB3F}13€/1l.\n{FFFFFF}Dujos - {47AB3F}10€/1l.", 0xFFFFFFFF, -2400.9614,965.5435,45.2969, 60, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0,0);

    EnterXoomer3Degaline = CreateDynamicPickup(19198, 1,-2420.1545,969.7742,45.2969, 0);
    ExitXoomer3Degaline = CreateDynamicPickup(19198, 1, -27.4103,-31.7660,1003.5573, 4);
    new Xoomer3Actor = CreateActor(233,-30.0050,-30.6455,1003.5573,358.2862);//Xoomer3 actorius kasininke
    SetActorVirtualWorld(Xoomer3Actor, 4);

    //FURISTU SISTEMOS

    //CreateDynamic3DTextLabel("[!] Maisto pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautimaista", PILKA, 953.6377,2112.2312,11.8269, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    //CreateDynamic3DTextLabel("[!] Maisto iðkrovimo punktas\nNorëdami iðkrauti prekes ið sunkveþimio priekabos naudokite komandà /iskrautimaista", PILKA, -2460.2605,779.5452,35.1719, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);

    //MaistoPasikrovimoArea = CreateDynamicRectangle(938.3235, 2104.0781, 958.0476, 2120.1235, 0,0);
    //MaistoIskrovimoArea = CreateDynamicRectangle(938.3235, -2457.1130,-2469.9089,788.5029, 0,0);


    likovaistulabel = CreateDynamic3DTextLabel("[!] Vaistinëliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautivaistus\nLiko 50 vnt.", PILKA, 1576.7886,1762.9585,10.7022, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    CreateDynamic3DTextLabel("[!] Vaistinëliø iðkrovimo punktas\nNorëdami iðkrauti ið sunkveþimio priekabos vaistus naudokite komandà /iskrautivaistus", PILKA, -2649.2520,698.4496,27.9229, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    
	detaliulabel = CreateDynamic3DTextLabel("[!] Detaliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautidetales\nLiko 50 vnt.", PILKA, -1755.1108,-54.6416,3.5489, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
	CreateDynamic3DTextLabel("[!] Detaliø iðkrovimo punktas\nNorëdami iðkrauti ið sunkveþimio priekabos detales naudokite komandà /krautidetales", PILKA, -1692.0790,-87.7760,3.5686, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    //SmelioPasikrovimoArea = CreateDynamicRectangle(348.2257,860.0518, 374.9616,867.9117, 0,0);
    //SmelioPasikrovimoArea = CreateDynamicRectangle(1572.9568,1774.9152, 1576.8228, 1776.4531, 0,0);
    //SmelioIskrovimoArea = CreateDynamicRectangle(2482.0012,1861.1246,2493.6807,1888.4011, 0,0);

    //

    CreateDynamic3DTextLabel("[!] Elektronikos prekiø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautielektronika", PILKA, 283.3030,-238.0345,2.5910, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    CreateDynamic3DTextLabel("[!] Elektronikos prekiø iðkrovimo punktas\nNorëdami iðkrauti prekes ið sunkveþimio priekabos naudokite komandà /iskrautielektronika", PILKA, -2185.9336,359.0144,35.2287, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);

    ElektronikosPasikrovimoArea = CreateDynamicRectangle(275.6081,-243.6141,291.5820,-223.1774, 0,0);
    ElektronikosIskrovimoArea = CreateDynamicRectangle(-2170.0769,354.5720,-2192.9705,360.5302, 0,0);

    //

    CreateDynamic3DTextLabel("[!] Suskystintø degalø pildymo punktas\nNorëdami pripildyti sunkveþimio cisternà naudokite komandà /pildytidegalus", PILKA, 2655.2859,-2099.5149,13.5469, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
    CreateDynamic3DTextLabel("[!] Suskystintø degalø perpilimo punktas\nNorëdami perpilti degalus á degalinës saugyklà naudokite komandà /pristatytidegalus", PILKA, -1711.0665,389.3123,7.1797, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);

    DegaluPripildymoArea = CreateDynamicRectangle(2643.7134,-2110.1643,2667.9131,-2096.0547, 0,0);
    DegaluPildymoArea = CreateDynamicRectangle(-1712.4550,379.7912,-1708.1058,397.9397, 0,0);

    //END of FURISTAI SPOT
    /*RedBridgeCableArea = CreateDynamicCube(-2549.8740,1222.8704, 36.2749, -2537.3752,1233.9226, 42.5, 0, 0);

    OldCinemaArea = CreateDynamicCube(82.4157,1023.9606,11, 142.4510,1104.6726,16, 0, 0);

    HighestSFBuildingArea = CreateDynamicCube( -1756.1854,882.5373,295.8750,-1751.1249,886.1758,296.7521 , 0, 0);

    BaseBallArea = CreateDynamicCube(-1955.2290, 873.5107,37.5073,-1934.1233, 896.2585,42.6097, 0, 0);

    PyramidArea = CreateDynamicCube(2257.7163, 1217.3083,11.2242,  2389.4248, 1348.8768,114.2513, 0, 0);
    HighestMountainArea = CreateDynamicCube(-2461.6394,-1633.1036,521.0575,-2400.5327,-1606.9528,527.8073, 0, 0);

    WeedEventArea = CreateDynamicCube(-205.0252,-171.5674,0.1172, 115.9797,133.2932,54.2497 ,0,0);*/

    //

    GarazaiArea1 = CreateDynamicCube(-2601.2627,617.2597,24.4694,-2537.1101,697.7700,37.8068, 0, 0);
    GarazaiArea2 = CreateDynamicCube(-2306.3662,-123.8114,32.7026,-2269.1497,-77.6884,48.1097, 0, 0);

    Garazai1Pirkimas = CreateDynamicPickup(1274, 2, -2548.4626,669.7663,27.8125, 0, 0);
    CreateDynamic3DTextLabel("Garaþø nuoma", PILKA, -2548.4626,669.7663,27.8125, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    Garazai2Pirkimas = CreateDynamicPickup(1274, 2, -2288.2751,-111.7049,35.2859, 0, 0);
    CreateDynamic3DTextLabel("Garaþø nuoma", PILKA, -2288.2751,-111.7049,35.2859, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
    //

    BurgerShot_Maistas = CreateDynamicPickup(1274, 2, 376.9601,-67.4346,1001.5078, -1);
    new BurgerShotActor1 = CreateActor(205, 376.6834,-65.8493,1001.5078,185.6526);//burgershot actorius
    new BurgerShotActor2 = CreateActor(205, 376.6834,-65.8493,1001.5078,185.6526);//burgershot actorius(2)
    SetActorVirtualWorld(BurgerShotActor1, 2);
    SetActorVirtualWorld(BurgerShotActor2, 3);


    CluckinBell_Maistas = CreateDynamicPickup(1274, 2, 368.9681,-6.0181,1001.8516, -1);
    new CluckinBellActor = CreateActor(167, 368.5154,-4.4927,1001.8516,185.9376);//CluckinBell actorius
    SetActorVirtualWorld(CluckinBellActor, 2);

    WellPica_Maistas = CreateDynamicPickup(1274, 2, 375.7751,-118.8065,1001.4995, 2);
    new WellPicaActor = CreateActor(155, 374.8698,-117.2772,1001.4922,182.7808);//CluckinBell actorius
    SetActorVirtualWorld(WellPicaActor, 2);

    BurgerStKurjeris_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,381.3333,-58.7022,1001.5078, 2);
    CreateDynamic3DTextLabel("Darbas be pakvietimo\n „BurgerShot“ maisto iðveþiotojas \n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA,381.3333,-58.7022,1001.5078, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1,10);
    BurgerSt2Kurjeris_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,381.3333,-58.7022,1001.5078, 3);

    Valytojai_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,-1978.0862,954.7313,45.4453, 0);
    CreateDynamic3DTextLabel("Darbas be pakvietimo\n Gatviø valytojai \n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA,-1978.0862,954.7313,45.4453, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

    AutoBus_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,-2189.6929,964.1044,80.0000, 0);
    CreateDynamic3DTextLabel("Darbas be pakvietimo\nAutobusø vairuotojai\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA,-2189.6929,964.1044,80.0000,20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

    Gaisrine_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,-2019.0043,93.0365,27.8431, 0);
    CreateDynamic3DTextLabel("Darbas be pakvietimo\nGaisrininkai\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA,-2019.0043,93.0365,27.8431,20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

	Lektuvu_ISIDARBINIMAS = CreateDynamicPickup(1275, 2,-1263.9423,157.2865,14.1484, 0);
    CreateDynamic3DTextLabel("Darbas be pakvietimo\nOro ir vandens kurjeriai\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA,-1263.9423,157.2865,14.1484,20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

	Gaisrine_Gesintuvas = CreateDynamicPickup(366, 1, -2039.3320,59.5655,28.3977, 0);

    ARAS_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, -2111.5908,-115.7207,35.3329, 0);
    CreateDynamic3DTextLabel("Spec. bûrys\n„Aras“\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -2111.5908,-115.7207,35.3329,20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

    ARAS_AMUNICIJA = CreateDynamicPickup(3014, 1, -2115.9199,-138.4573,35.3329, 0);
    PoliceKaleimoPick = CreateDynamicPickup(1247, 1, -1607.0464,732.5272,-5.2422,0);
    ARASKaleimoPick = CreateDynamicPickup(1247, 1, -2127.6169,-162.9845,35.3203,0);

    JailDoorsOut1 = CreateDynamicPickup(19198, 1, 1298.9482,1478.3331,1201.3860,-1);
    JailDoorsIn = CreateDynamicPickup(19198, 1, 2840.2593,982.0948,10.7500, 0);

    PickupToEnterDrugsFactory = CreateDynamicPickup(19198, 1, 577.3009,1223.2769,11.7113, 0);
    CreateDynamicMapIcon(577.3009,1223.2769,11.7113, 23, 0, 0, 0, -1, 99999.0, MAPICON_GLOBAL);//Narkotiku gamyklos kaukole
    PickupToExitDrugsFactory = CreateDynamicPickup(19198, 1, 965.3799,2107.8940,1011.0303, 1);

    DrugHeroinas = CreateDynamicPickup(1279,1,933.1180,2151.1873,1011.0234,1);
    DrugHeroinasText3D = CreateDynamic3DTextLabel("0g. heroino", 0xFFFFFFFF, 933.1180,2151.1873,1011.0234, 15,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);
    DrugKokainasText3D = CreateDynamic3DTextLabel("0g. kokaino", 0xFFFFFFFF, 964.9399,2160.0034,1011.0303, 15,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);

    DrugKokainas = CreateDynamicPickup(1279,1,964.9399,2160.0034,1011.0303,1);

    EnterZIPClothingSalon = CreateDynamicPickup(19198, 1, -1882.3185,866.5632,35.1719, 0);
    ExitZIPClothingSalon = CreateDynamicPickup(19198, 1, 161.3571,-97.1078,1001.8047, 2);

    EnterSFPoliceDep = CreateDynamicPickup(19198, 1, -1605.4860,710.2785,13.8672, 0,0);
    ExitSFPoliceDep = CreateDynamicPickup(19198, 1, 238.7399,138.6257,1003.0234, 2,3);
    PickupSFPoliceFinePayment = CreateDynamicPickup(1247, 2, 234.9520,165.4451,1003.0300, 2, 3);
    CreateDynamic3DTextLabel("Baudø mokëjimo punktas iki 40 gaudomumo lygio balø", 0xFFFFFFFF, 234.9520,165.4451,1003.0300, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 2, 3);

    EnterSavivaldybePickup = CreateDynamicPickup(19198, 1, -2717.6887,-317.4784,7.8438, 0);
    ExitSavivaldybePickup = CreateDynamicPickup(19198, 1, 390.7686,173.8295,1008.3828, 2);

    LeidimasVersluiPick = CreateDynamicPickup(1239,2,358.2402,186.9612,1008.3828,2); //

    AukotiFondasPickup = CreateDynamicPickup(1239,2,358.2362,181.5572,1008.3828,2); // AUKOS

    SavivaldybeAlgos = CreateDynamicPickup(1239,2,358.2362,178.0222,1008.3828,2); // ALGOS
    CreateDynamic3DTextLabel("Verslininko licenzija", 0xFFFFFFFF, 358.2402,186.9612,1008.3828, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 2, 3);
    CreateDynamic3DTextLabel("Aukojimas darbø fondams", 0xd1bd39FF, 358.2362,181.5572,1008.3828, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 2, 3);
    CreateDynamic3DTextLabel("Algos atsiëmimo punktas", 0xFFFFFFFF, 358.2362,178.0222,1008.3828, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 2, 3);


    EnterWellPicaPickup1 = CreateDynamicPickup(19198, 1, -1720.9401,1359.8199,7.1853, 0);
    ExitWellPicaPickup1 = CreateDynamicPickup(19198, 1, 372.3715,-133.5235,1001.4922, 2);

    EnterCluckinBellPickup = CreateDynamicPickup(19198, 1, -1816.5690,618.6814,35.1719, 0);
    ExitCluckinBellPickup = CreateDynamicPickup(19198, 1, 365.0193,-11.8434,1001.8516, 2);

    EnterBurgerShotPickup1 = CreateDynamicPickup(19198, 1, -2336.8643,-166.8943,35.5547, 0);
    ExitBurgerShotPickup1 = CreateDynamicPickup(19198, 1, 362.8008,-75.0933,1001.5078, 2);

    EnterBurgerShotPickup2 = CreateDynamicPickup(19198, 1, -2355.8171,1008.1506,50.8984, 0);
    ExitBurgerShotPickup2 = CreateDynamicPickup(19198, 1, 362.8008,-75.0933,1001.5078, 3);

    PickupToEnterTaksiFGarage = CreateDynamicPickup(19198, 1, -2568.0461,494.2262,14.6184, 0);
    PickupToExitTaksiFGarage = CreateDynamicPickup(19198, 1, -2363.2729,-78.0893,10.5438, 0);

    TPKalnasParasiutas = CreateDynamicPickup(371, 2, -2238.8003,-1743.8640,480.8413, 0);
    CreateDynamic3DTextLabel("Paraðiutas - 100€\n (VIPams nemokamai)",0x00FF00FF,-2238.8003,-1743.8640,480.8413, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

	PickupToWeaponsShop = CreateDynamicPickup(19198, 1, -2625.9390,208.4530,4.8125, 0);
    CreateDynamic3DTextLabel("Ginklø parduotuvë",PILKA,-2625.9390,208.4530,4.8125, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

	PickupOutWeaponsShop = CreateDynamicPickup(19198, 1, 285.4623,-41.8053,1001.5156, 0);
    CreateDynamic3DTextLabel("Iðëjimas",PILKA,285.4623,-41.8053,1001.5156, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);


	PickupWeaponsShopBuyWeps = CreateDynamicPickup(1274, 2,295.1063,-38.0743,1001.5156, 0);
    CreateDynamic3DTextLabel("Ginklø pirkimas, reikia licenzijos",PILKA,295.1063,-38.0743,1001.5156, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);

	WeaponsShopSideA = CreateDynamicPickup(19198, 1, 285.9079,-30.3122,1001.5156, 0);
    CreateDynamic3DTextLabel("Gauk ginklø licenzijà!",PILKA, 285.9079,-30.3122,1001.5156, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);

	WeaponsShopSideB = CreateDynamicPickup(19198, 1, 286.0722,-28.1952,1001.5156, 0);
    CreateDynamic3DTextLabel("Iðëjimas",PILKA, 286.0722,-28.1952,1001.5156, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);

	WeaponsLicensePickupA = CreateDynamicPickup(1274, 2, 292.1250,-24.8230,1001.5156, 0);
    CreateDynamic3DTextLabel("Ginklø licenzija",PILKA, 292.1250,-24.8230,1001.5156, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);


	WeaponsLicensePickupB = CreateDynamicPickup(1274, 2, 296.7852,-24.8646,1001.5156, 0);
    CreateDynamic3DTextLabel("Ginklø licenzija",PILKA, 296.7852,-24.8646,1001.5156, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 1, 1);


	MasinosAtkelimoPickup = CreateDynamicPickup(1274, 2, -2665.0325,-1.9616,6.1328, 0);
    CreateDynamic3DTextLabel("Nuosavos tr. priemonës atveþimas á aikðtelæ\nKaina: 500€",PILKA, -2665.0325,-1.9616,6.1328, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);


	TechPaslauguPickup = CreateDynamicPickup(1274, 2, -1982.0056,884.2750,45.2031, 0);
    CreateDynamic3DTextLabel("Paslaugos",PILKA, -1982.0056,884.2750,45.2031, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    NelegalusGinklaiPick = CreateDynamicPickup(2358, 1, 2735.9255,-2550.1677,13.6464, 0);
    CreateDynamic3DTextLabel("Kontrobandiniai ginklai(Mafijoms)",PILKA, 2735.9255,-2550.1677,13.6464, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    NaikintiGinklusPick = CreateDynamicPickup(2358, 1, 255.9309,1802.0636,7.4995, 0);
    CreateDynamic3DTextLabel("Kontrobandos naikinimas(Teisësaugai)",PILKA, 255.9309,1802.0636,7.4995, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    CreateDynamicMapIcon(2735.9255,-2550.1677,13.6464, 18, 0, 0, 0, -1, 99999.0, MAPICON_GLOBAL);//Nelegalus ginklai icon
    LuccheseGinklai = CreateDynamicPickup(2358, 1, -673.5742,941.9951,12.6619, 0);
    GenoveseGinklai = CreateDynamicPickup(2358, 1, -1068.5254,-1288.2084,129.3689, 0);

    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2581.4502,662.1776,14.6075, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//MEDIKAI
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2575.4153,663.1802,-0.7331, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//MEDIKAI GARAZE

    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2353.0427,-98.0781,10.6148, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//TAXI POEMINIAME
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2562.8074,495.3473,14.6184, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//VIRSUJE TAXI
    //
    //A51 A 52
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 345.4811,1796.6949,18.3269, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 343.5734,1799.6780,18.3304, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 289.2649,1821.6365,17.3460, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 282.5333,1821.2195,17.3454, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 135.0996,1938.8584,18.9981, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, 134.8042,1945.1489,19.0521, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    //RADISTAI
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2189.7065,-110.2756,35.3460, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//RADISTAI laukas
    CreateDynamic3DTextLabel("Spausk {FF0000}„+“",PILKA, -2226.7324,-110.0541,-16.7952, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//RADISTAI garaze
    
    //Ðiukðlës ið namø
	CreateDynamic3DTextLabel("{FFFFFF}Spausk {FF0000}„N“ {FFFFFF}mygtukà",PILKA, -2017.9205,346.8866,35.1810, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);//RADISTAI laukas

	A51_GINKLAI = CreateDynamicPickup(3014, 1, 222.6283,1921.5957,17.6406, 0);
    A51ZonaText = CreateDynamic3DTextLabel("A51 zona laisva",0x00FF00FF, 125.0315,1933.5562,19.2567, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    A51ZonaPick = CreateDynamicPickup(1314, 2, 125.0315,1933.5562,19.2567, 0);

    A52ZonaText = CreateDynamic3DTextLabel("A52 zona laisva",0x00FF00FF, 292.2294,1812.5024,17.6406, 7, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    A52ZonaPick = CreateDynamicPickup(1314, 2, 292.2294,1812.5024,17.6406, 0);
    //
    CreateDynamic3DTextLabel("Konfiskuotø maðinø aikðtelë\nVartø atidarymas uþ 1000€\nSpausk „N“",PILKA, -2150.3799,-749.4695,32.0234, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateCashPoint(-1968.3691,291.8841,35.1719); // bankomatas1
    CreateCashPoint(-2021.8544,-41.2910,35.3522); // bankomatas2
    CreateCashPoint(-2674.2361,633.8906,14.4531); // bankomatas3
    CreateCashPoint(386.5094,-1823.3145,7.8359); // bankomatas4
    CreateCashPoint(-1992.6855,697.6870,45.4453); // 1
    CreateCashPoint(-1968.6650,557.9432,35.1930); // 2
    CreateCashPoint(-2055.5571,477.9941,35.172); // 3
    CreateCashPoint(-2345.6941,-140.5870,35.5547); // 4
    CreateCashPoint(1210.6016,-1821.0698,13.59); // 5
    CreateCashPoint(-2709.0618,-307.9013,7.1692); // 6
    CreateCashPoint(-2647.2080,-23.1294,6.13); // 9
    CreateCashPoint(-2717.1453,189.6100,4.335); // 10
    CreateCashPoint(-2718.9570,326.8750,4.3695); // 12
    CreateCashPoint(-2450.0464,755.0610,35.17); // 13
    CreateCashPoint(-2217.3687,549.4638,35.1719); // 14
    CreateCashPoint(-1614.9724,714.8843,13.685); // 15
    CreateCashPoint(-1675.6118,434.7194,7.1797); // 16
    CreateCashPoint(-1245.5398,50.0336,14.134); // 17
    CreateCashPoint(-1403.7009,-305.2089,14.1484); // 18
    CreateCashPoint(-2094.1062,-742.9879,32.1719); // 19
    CreateCashPoint(-2242.9993,113.1766,35.3203); // 20
    CreateCashPoint(-2242.9551,233.7008,35.3203); // 21
    CreateCashPoint(-2221.8877,286.7039,35.3203); // 22
    CreateCashPoint(439.5138,-1732.7783,9.4489); // 23
    CreateCashPoint(813.0384,-1801.3215,13.023); // 24
    CreateCashPoint(1832.5728,-1846.4186,13.5781); // 27
    CreateCashPoint(1366.9508,-1275.5128,13.5469); // 28
    CreateCashPoint(1988.8501,-1282.8263,23.9703); // 29
    CreateCashPoint(2323.7007,-1645.6024,14.82); // 30
    CreateCashPoint(2019.9694,1000.5956,10.820); // 31
    CreateCashPoint(2238.3967,1290.0309,10.8203); // 33
    CreateCashPoint(2097.7988,1451.5291,10.82); // 34
    CreateCashPoint(2027.5801,1935.8124,12.2406); // 35
    CreateCashPoint(2188.3542,2464.7041,11.242); // 37
    CreateCashPoint(2299.6204,2431.7339,10.82); // 38
    CreateCashPoint(2538.8884,2086.6355,10.8203); // 39
    CreateCashPoint(2638.6484,1079.3517,10.8203); // 40
    CreateCashPoint(-1647.7634,1214.8003,7.1797); // 41
    CreateCashPoint(-2147.7446,-752.5378,32.0234); // 42


	HospitalInterioras = CreateDynamicCube(-2616.7698, 629.8638, 229.8020, -2693.3877,682.3509, 259.8020, 0, 1, -1);
    SaugiosZonos[0] = HospitalInterioras;
    SaugiosZonos[1] = CreateDynamicRectangle(-2000.6079,71.7602,-1922.7422,218.6330,0,0);
    SaugiosZonos[2] = CreateDynamicRectangle(-2741.1016,578.2950,-2536.3372,698.5930,0,0);
    SaugiosZonos[3] = CreateDynamicRectangle(307.8287,-1842.4059,409.0320,-1785.0045,0,0);
    SaugiosZonos[4] = CreateDynamicRectangle(2015.5878,1861.0974,2083.9250,1986.5919,0,0);
    SaugiosZonos[5] = CreateDynamicRectangle(-2096.9873,-281.2687,-2017.0969,-80.2486,0,0);
    SaugiosZonos[6] = CreateDynamicRectangle(-2241.9841,235.9535,-2156.5039,310.6263,0,0);
    SaugiosZonos[7] = CreateDynamicRectangle(-52.6393,1586.1205,57.2884,1625.6653,0,0);
    SaugiosZonos[8] = CreateDynamicCube(-2699.4443,224.3380, 0, -2655.1016,281.1365, 18, 0, 0);//AFKZona;

    AFKZonaRoomArea[0] = CreateDynamicCube(-2696.3401, 263.3127, 2.064, -2676.2737, 277.8787, 6.19, 0,0);
    AFKZonaRoomArea[1] = CreateDynamicCube(-2696.3467,228.1453,2.2609,-2676.2800,254.8753,6.0591, 0,0);




    new AFKZonaLabelText[400];

    strcat(AFKZonaLabelText, "AFK bûsenoje esantys þaidëjai ðioje patalpoje gauna:\n\n");
    strcat(AFKZonaLabelText, "{96A677}2 XP{FFFFFF} ir {96A677}2€{FFFFFF} per minutæ\n");
    strcat(AFKZonaLabelText, "VIP nariai papildomai gauna {96A677}1 XP{FFFFFF} ir {96A677}1 €{FFFFFF}\n");
    strcat(AFKZonaLabelText, "Administratoriai papildomai gauna {96A677}1 XP{FFFFFF} ir {96A677}1 €{FFFFFF}");

    CreateDynamic3DTextLabel(AFKZonaLabelText, 0xFFFFFFFF, -2686.2942,242.5623,4.3959, 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel(AFKZonaLabelText, 0xFFFFFFFF, -2685.8777,269.9043,4.3959, 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

    //


    GreicioMatuokliai[0] = CreateDynamicRectangle(-1799.0364,-135.1879,-1792.8766,-134.6855,0,0);
    GreicioMatuokliai[1] = CreateDynamicRectangle(-1792.5288,-237.7058,-1792.2988,-231.7321,0,0);
    GreicioMatuokliai[2] = CreateDynamicRectangle(-2164.8804,-496.8207,-2158.5706,-490.5335,0,0);
    GreicioMatuokliai[3] = CreateDynamicRectangle(-2102.5522,-545.8166,-2096.1489,-539.8187,0,0);
    GreicioMatuokliai[4] = CreateDynamicRectangle(-2003.4010,386.6588,-1996.4247,386.7937,0,0);
    GreicioMatuokliai[5] = CreateDynamicRectangle(-2012.0228,466.8535,-2004.9762,466.9183,0,0);
    GreicioMatuokliai[6] = CreateDynamicRectangle(-2004.0148,657.7313,-1996.3254,658.0689,0,0);
    GreicioMatuokliai[7] = CreateDynamicRectangle(-2146.6821,348.6333,-2140.9329,348.6535,0,0);
    GreicioMatuokliai[8] = CreateDynamicRectangle(-2568.0051,-70.3884,-2567.6904,-65.1039,0,0);
    GreicioMatuokliai[9] = CreateDynamicRectangle(-2352.8516,-70.4064,-2352.7175,-64.8196,0,0);
    GreicioMatuokliai[10] = CreateDynamicRectangle(-2205.6353,-75.7452,-2205.5837,-70.2437,0,0);
    GreicioMatuokliai[11] = CreateDynamicRectangle(-2431.9641,565.9894,-2431.4211,573.8498,0,0);
    GreicioMatuokliai[12] = CreateDynamicRectangle(-2579.3401,557.9434,-2579.2520,565.8915,0,0);
    GreicioMatuokliai[13] = CreateDynamicRectangle(-2711.2451,249.3312,-2706.4292,249.3966,0,0);
    GreicioMatuokliai[14] = CreateDynamicRectangle(-2645.1926,34.1886,-2645.0674,39.5254,0,0);
    GreicioMatuokliai[15] = CreateDynamicRectangle(-2258.1187,113.4513,-2251.9019,113.5419,0,0);
    GreicioMatuokliai[16] = CreateDynamicRectangle(-1734.8424,323.3939,-1729.5370,329.2722,0,0);
    GreicioMatuokliai[17] = CreateDynamicRectangle(-1558.9519,646.9295,-1551.7095,646.9991,0,0);
    GreicioMatuokliai[18] = CreateDynamicRectangle(-2225.1260,566.1698,-2225.0239,574.0497,0,0);
    GreicioMatuokliai[19] = CreateDynamicRectangle(790.8669,-1789.3131,791.0168,-1778.6205,0,0);
    GreicioMatuokliai[20] = CreateDynamicRectangle(1485.9417,-1877.7369,1486.1667,-1867.2657,0,0);
    GreicioMatuokliai[21] = CreateDynamicRectangle(2051.9263,1726.9082,2066.8440,1733.4213,0,0);
    GreicioMatuokliai[22] = CreateDynamicRectangle(2059.4980,1493.5718,2077.9619,1493.6648,0,0);


    BankInteriorArea = CreateDynamicCube(1343, -940, 190, 1390, -970, 210, 1, 20, -1);


    AutoPZona[0] = CreateDynamicRectangle(-2094.9094,1366.4276, -2080.4348,1374.3264, 0, 0);
    AutoPZona[1] = CreateDynamicRectangle(-2093.9351,1374.6656,-2080.4348,1385.3148, 0, 0);
    AutoPZona[2] = CreateDynamicRectangle(-2094.8042,1392.5571,-2080.6191,1400.5903, 0, 0);
    AutoPZona[3] = CreateDynamicRectangle(-2094.4146,1410.0697,-2080.3994,1419.0513, 0, 0);
    AutoPZona[4] = CreateDynamicRectangle(-2093.7183,1419.7681,-2080.3982,1428.7177, 0, 0);
    AutoPZona[5] = CreateDynamicRectangle(-2094.0073,1429.1584,-2080.3989,1436.5685, 0, 0);

    AutoPStatsLabel = CreateDynamic3DTextLabel("Paskutiniai {61210B}ðeði{FFFFFF} þmonës pardavæ transporto priemonæ serveriui:\n\n{61210B}Nëra", 0xFFFFFFFF, -2073.4490,1359.4208,7.1007, 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);


    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}pirmasis{FFFFFF} sektorius", 0xB43104FF, -2079.4146,1370.3650,7.1016, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);
    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}antrasis{FFFFFF} sektorius", 0xB43104FF, -2079.3994,1379.4823,7.1016, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);
    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}treèiasis{FFFFFF} sektorius", 0xB43104FF, -2079.1516,1397.2925,7.1007, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);
    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}ketvirtasis{FFFFFF} sektorius", 0xB43104FF, -2079.0916,1415.3391,7.1007, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);
    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}penktasis{FFFFFF} sektorius", 0xB43104FF, -2079.1213,1424.1698,7.1007, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);
    CreateDynamic3DTextLabel("• {FFFFFF}Transporto priemoniø pardavinëjimo serveriui {B43104}ðeðtasis{FFFFFF} sektorius", 0xB43104FF, -2079.0986,1433.1321,7.1016, 28, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,0, 0);

    CreateDynamic3DTextLabel("• {585858}Toliau yra transporto priemoniø pardavinimas serveriui - {FF4000}tr.priemoniø sektoriai{585858} kuriuose galësite parduoti savo valdomà{FF4000} tr.priemone\n{585858}Transporto pardavimui ávaþiavus á betkoká pardavimo sektoriø naudokite - {FF4000}/mvaldymas ir parduoti automobilá serveriui.", 0xFF4000FF, -2068.1528,1349.7654,7.1007, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0 );


    A51Zona = CreateDynamicRectangle(95.1561, 1780.3317, 390.7669, 2120.2866, 0, 0, -1);
    JailISORESZona = CreateDynamicRectangle(2784.5566, 952.9991, 2841.2832, 1016.3308, 0, 0);
    JailVidusZona = CreateDynamicCube(1279.6882, 1438.4199, 1198.0862, 1320.1332, 1480.7296, 1221.3018, 0, 1);

    InformacijaNaujokui[0] = CreateDynamicPickup(1239 ,2,-1970.9337,143.5113,28.2710,0,0); //Emigracija
    //pagalb
    InformacijaNaujokui[1] = CreateDynamicPickup(1239 ,2,-1965.3137,143.5383,28.2715,0,0); // Informacija
    //atnauj
    InformacijaNaujokui[2] = CreateDynamicPickup(1239 ,2,-1970.4109,150.1783,28.2710,0,0); //Atnaujinimai

    CreateDynamic3DTextLabel("Informacija naujokui\n {AFAFAF}ATNAUJINIMAI!", 0xFFB700FF, -1970.6982,143.3994,28.2710, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Informacija naujokui\n{AFAFAF}SERVERIS!", 0xFFB700FF, -1965.3137,143.5383,28.2715, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Informacija naujokui\n{AFAFAF}EMIGRACIJA!", 0xFFB700FF, -1970.4109,150.1783,28.2710, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);


	//3DTextLabels
	CreateDynamic3DTextLabel("Visos serverio komandos - {AFAFAF}/komandos\n{FFB700}Daþniausios lankytinos vietos - {AFAFAF}/gps",0xFFB700FF, -1973.7461,146.7388,28.2710, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Informacija apie {33AA33}teisiø laikymà",0xFFFFFFFF, -2021.3765,-101.4122,35.1641, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Policijos ginklai\nNemokamai",PILKA, -1615.9482,683.1028,7.1875, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

	CreateDynamic3DTextLabel("Medikas\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -2593.7734,642.9541,14.4531, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

	CreateDynamic3DTextLabel("Policininkas\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -1611.9440,686.3973,17.8559, 20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    CreateDynamic3DTextLabel("Taksistas\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -2571.3018,495.6080,14.6739, 20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamic3DTextLabel("Mechanikas\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, -1706.8668,-110.5637,7.9540, 20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    CreateDynamic3DTextLabel("Automobiliø sutaisymas vos uþ {d1bd39}300 €{FFFFFF}, darbinëms - {d1bd39}nemokamai {FFFFFF}!\n{FFFFFF}Automobilá galite susitaisyti tik pasiekus tr.priemonëje {d1bd39}50%{FFFFFF} bûklës !\n\n{FFFFFF}Sutaisyti galite privaþiavus èia ir paspaudus - {d1bd39}Y{FFFFFF} mygtukà !",0xFFFFFFFF, -1736.3324,-135.5733,3.5489, 20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);


    FURISTAI_ISIDARBINIMAS = CreateDynamicPickup(1275, 2, 149.9245,1439.1383,11.6652, 0);
    CreateDynamic3DTextLabel("Fûristai\n {00FF00}Sunaikinti darbinæ maðinà - /sunaikinti",PILKA, 149.9245,1439.1383,11.6652, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);


    CreateDynamic3DTextLabel("Tingi eiti?\nIðsikviesk tarnybà /kviesti > taksi",PILKA, -2660.9861,632.6305,14.4531, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Tingi eiti?\nIðsikviesk tarnybà /kviesti > taksi",PILKA, -2645.5232,632.9277,14.4545, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Tingi eiti?\nIðsikviesk tarnybà /kviesti > taksi",PILKA, -1606.0660,717.6995,12.0764, 20, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);


	CreateDynamic3DTextLabel("Nuosavø automobiliø TA, registravimas, dujø árangos montavimas",PILKA, -1993.4332,884.8113,45.4453, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

	CreateDynamic3DTextLabel("Jûsø maðina turi stovëti èia",PILKA, -1976.9523,887.3963,45.9097, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Jûsø maðina turi stovëti èia",PILKA, -1977.5437,880.6337,45.9114, 15, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 1, 0, 0);

    //ADMIN VEHICLES
    CreateAdminVehicles(563,-2023.4500,-837.6921,35.2519,0.0021,1,1); // TP-ADMIN Raindance
    CreateAdminVehicles(563,-2022.4200,-883.5392,35.2639,359.9989,1,1); // TP-ADMIN Raindance
    CreateAdminVehicles(405,-1950.4584,-861.9543,31.9146,271.3625,1,1); // TP-ADMIN MASINA
    CreateAdminVehicles(405,-1950.3446,-855.7797,31.9293,270.5544,1,1); // TP-ADMIN MASINA
    CreateAdminVehicles(521,-1941.0189,-855.2930,31.5852,268.8750,1,1); // TP-ADMIN MASINA
    CreateAdminVehicles(521,-1943.7786,-862.6804,31.5940,273.5974,1,1); // TP-ADMIN MASINA

    //VIP VEHICLES
    CreateVIPVehicles(487,-2226.2966,2319.8711,7.6904,90.0058,6,6); // VIP-HELIKAS
    CreateVIPVehicles(487,-2226.3733,2333.5093,7.6875,90.0062,6,6); // VIP-HELIKAS
    CreateVIPVehicles(534,-2271.6001000,2285.6001000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.5000000,2291.5000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.5000000,2297.5000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.3999000,2303.5000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.3000000,2309.2000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.2000000,2315.2000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.6001000,2321.5000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.7000000,2327.3000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(534,-2271.6001000,2333.3000000,4.6000000,270.0000000,6,6); //Remington
    CreateVIPVehicles(492,-2252.1001000,2336.1001000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2323.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.3000000,2329.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2317.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2311.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2305.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2299.8999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2294.1001000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(492,-2252.1001000,2288.3999000,4.7000000,90.0000000,6,6); //Greenwood
    CreateVIPVehicles(446,-2255.1001000,2431.1001000,0.0000000,226.0000000,6,6); //Squalo
    CreateVIPVehicles(446,-2235.6001000,2451.3999000,0.0000000,226.0000000,6,6); //Squalo
    CreateVIPVehicles(446,-2204.3000000,2419.8000000,0.0000000,48.0000000,6,6); //Squalo
    CreateVIPVehicles(446,-2223.2000000,2398.7000000,0.0000000,45.9990000,6,6); //Squalo

	//DRIVING VEHICLES
	CreateDrivingSchoolVehicle(565,-2064.3738,-83.9797,34.7896,179.2118,103,103); // VM-MASINA
	CreateDrivingSchoolVehicle(565,-2068.5718,-84.0476,34.7886,180.9500,103,103); // VM-MASINA
	CreateDrivingSchoolVehicle(565,-2072.9285,-84.1897,34.7866,181.3254,103,103); // VM-MASINA
	CreateDrivingSchoolVehicle(565,-2077.2495,-84.0046,34.7863,178.0401,103,103); // VM-MASINA
	CreateDrivingSchoolVehicle(461,-2081.2881,-84.0445,34.7373,181.4553,103,103); // VM-MOCAS
	CreateDrivingSchoolVehicle(461,-2085.5669,-84.6590,34.7720,181.4559,103,103); // VM-MOCAS
	CreateDrivingSchoolVehicle(461,-2089.7292,-84.9600,34.7676,181.4562,103,103); // VM-MOCAS
	CreateDrivingSchoolVehicle(461,-2094.1323,-84.9173,34.7616,181.4562,103,103); // VM-MOCAS
	CreateDrivingSchoolVehicle(469,-2032.3053,-110.5621,38.9335,357.9913,103,103); // VM-HELICOPTERIS
	CreateDrivingSchoolVehicle(469,-2023.8796,-110.5451,38.9336,357.9924,103,103); // VM-HELICOPTERIS-2
    CreateDrivingSchoolVehicle(403,-2090.5381,-99.1331,35.7700,270,103,103); // VM FURA
    //NUOMOS TRPriemones
    CreateVehicleForRent(462,-1995.3049,203.3338,27.2866,269.9598,-1,-1,60); // faggio (nuomai, centre) 60 euru
    CreateVehicleForRent(462,-1995.2787,206.1999,27.2876,272.1530,-1,-1,60); // faggio (nuomai, centre) 60 euru
    CreateVehicleForRent(462,-1995.3882,208.5582,27.2858,270.8996,-1,-1,60); // faggio (nuomai, centre) 60 euru
    CreateVehicleForRent(602,-1963.3425,198.1813,27.4893,90.2862,-1,-1,100); // alpha (nuomai, centre) 100 euru
    CreateVehicleForRent(602,-1963.4006,204.5580,27.4890,90.3980,-1,-1,100); // alpha (nuomai, centre) 100 euru
    CreateVehicleForRent(602,-1963.5264,210.4497,27.4891,90.6953,-1,-1,100); // alpha (nuomai, centre) 100 euru
    CreateVehicleForRent(602,-1968.1674,214.9669,27.4887,178.5793,-1,-1,100); // alpha (nuomai, centre) 100 euru
    CreateVehicleForRent(602,-1975.2966,215.1443,27.4894,179.2136,-1,-1,100); // alpha (nuomai, centre) 100 euru
    CreateVehicleForRent(481,-1983.5007,139.3715,27.2048,89.0391,-1,-1,30); // bmx nuomai (centre) 30 euru
    CreateVehicleForRent(481,-1983.3452,137.2573,27.1154,91.8396,-1,-1,30); // bmx nuomai (centre) 30 euru
    CreateVehicleForRent(481,-1983.3029,135.2695,27.1985,88.3302,-1,-1,30); // bmx nuomai (centre) 30 euru
    CreateVehicleForRent(481,-1983.2461,133.4876,27.2014,89.5835,-1,-1,30); // bmx nuomai (centre) 30 euru
    CreateVehicleForRent(602,-1959.3829,586.2335,34.9109,179.3101,-1,-1,100); // alpha (nuomai, link pd) 100 euru
    CreateVehicleForRent(602,-1947.3910,585.6656,34.9247,180.2990,-1,-1,100); // alpha (nuomai, link pd) 100 euru
    CreateVehicleForRent(602,-1935.2513,585.6749,34.9231,179.2459,-1,-1,100); // alpha (nuomai, link pd) 100 euru
    CreateVehicleForRent(481,-1880.2233,508.2759,34.6881,1.2314,-1,-1,25); // bmx nuomai 25 eurai
    CreateVehicleForRent(481,-1878.3162,508.3754,34.6874,0.3438,-1,-1,25); // bmx nuomai 25 eurai
    CreateVehicleForRent(481,-1875.9993,508.3588,34.6875,0.4401,-1,-1,25); // bmx nuomai 25 eurai
    CreateVehicleForRent(481,-1873.5701,508.4348,34.6772,0.4825,-1,-1,25); // bmx nuomai 25 eurai

	//JOBS VEHICLES
        //DARBAS ID 19 Maisto kurjeriai "Burgershot"
    CreateDarboCar(448, -2318.2114, 996.4464, 50.2295, 119.7441, -1, -1, 19);
    CreateDarboCar(448, -2318.1648, 994.8558, 50.2295, 119.7441, -1, -1, 19);
    CreateDarboCar(448, -2318.1882, 993.1917, 50.2295, 119.7441, -1, -1, 19);
    CreateDarboCar(448, -2318.1858, 991.5629, 50.2295, 119.7441, -1, -1, 19);
    CreateDarboCar(448, -2317.8362, 989.8515, 50.2295, 119.7441, -1, -1, 19);
    CreateDarboCar(448, -2331.0291, 994.3716, 50.4295, 180.0000, -1, -1, 19);
    CreateDarboCar(448, -2337.5500, 994.4082, 50.4295, 180.0000, -1, -1, 19);
    CreateDarboCar(448, -2343.3342, 994.4138, 50.4295, 180.0000, -1, -1, 19);
    CreateDarboCar(448,-2302.4822,-147.7734,34.9205,118.4093,-1,-1,19); // Pizza
    CreateDarboCar(448,-2302.2527,-149.8116,34.9259,114.2323,-1,-1,19); // Pizza
    CreateDarboCar(448,-2302.4524,-151.9476,34.9193,123.2223,-1,-1,19); // Pizza
    CreateDarboCar(448,-2302.2996,-153.8224,34.9162,115.3980,-1,-1,19); // Pizza
    CreateDarboCar(448,-2302.6106,-155.9737,34.9195,119.5083,-1,-1,19); // Pizza


        //DARBAS 14 Gaisrine
    CreateDarboCar(407, -2029.8873, 89.6785, 28.5807, 270.0000, -1, -1, 14);
    CreateDarboCar(407, -2029.8873, 82.7649, 28.5676, 270.0000, -1, -1, 14);
    CreateDarboCar(407, -2029.8873, 71.8536, 28.5807, 270.0000, -1, -1, 14);
    CreateDarboCar(407, -2029.8873, 65.4177, 28.5807, 270.0000, -1, -1, 14);
    CreateDarboCar(544, -2040.9225, 89.5097, 28.5885, 90.0000, -1, -1, 14);
    CreateDarboCar(544, -2040.9225, 65.2258, 28.5885, 90.0000, -1, -1, 14);
    CreateDarboCar(544, -2040.9225, 82.6873, 28.5885, 90.0000, -1, -1, 14);
    CreateDarboCar(544, -2040.9225, 71.7533, 28.5885, 90.0000, -1, -1, 14);
        //15 ID Darbas Valytojai
    CreateDarboCar(574,-1978.5771,948.8115,45.1705,91.2468,100,100,15); // Car
    CreateDarboCar(574,-1978.6558,945.9142,45.1705,89.9827,100,100,15); // Car
    CreateDarboCar(574,-1985.0238,956.8818,45.1669,179.8493,100,100,15); // Car
    CreateDarboCar(574,-1987.2314,956.8448,45.1705,179.6829,100,100,15); // Car
    CreateDarboCar(574,-1989.6647,956.8131,45.1705,180.2511,100,100,15); // Car
        //13 ID darbas AutoBussininkai
    AutobusoNr[0] = CreateDarboCar(437,-2197.7603,972.4716,80.1334,359.9422,87,7,13); // autobusas 1
    AutobusoNr[1] = CreateDarboCar(437,-2197.7590,997.1872,80.1333,0.1046,98,20,13); // autobusas 2
    AutobusoNr[2] = CreateDarboCar(437,-2181.7188,1004.2982,80.1339,0.4933,105,20,13); // autobusas 3
    AutobusoNr[3] = CreateDarboCar(437,-2181.6165,989.0236,80.1352,0.5703,95,16,13); // autobusas 4
    AutobusoNr[4] = CreateDarboCar(437,-2181.5591,971.0676,80.1334,359.8617,79,7,13); // autobusas 5
        //16 ID darbas
    Lektuvas[0] = CreateDarboCar(476, -1198.4054, 180.8759, 15.1845, 100.0000, -1, -1, 16);
    Lektuvas[1] = CreateDarboCar(476, -1211.7941, 167.6103, 15.1845, 100.0000, -1, -1, 16);
    Lektuvas[2] = CreateDarboCar(476, -1224.3519, 155.8173, 15.1845, 100.0000, -1, -1, 16);
    Lektuvas[3] = CreateDarboCar(476, -1212.6503, 196.1622, 15.1845, 135.0000, -1, -1, 16);
    Lektuvas[4] = CreateDarboCar(476, -1224.4012, 207.7182, 15.1845, 135.0000, -1, -1, 16);
   	Lektuvas[5] = CreateDarboCar(593, -1238.5575, 217.4994, 14.7216, -193.0000, -1, -1, 16);
	Lektuvas[6] = CreateDarboCar(593, -1251.7185, 204.9804, 14.7216, -193.0000, -1, -1, 16);
	Lektuvas[7] = CreateDarboCar(593, -1263.9165, 192.1404, 14.7216, -193.0000, -1, -1, 16);
	Laivas[0] = CreateDarboCar(453, -1178.6774, 154.4238, 0.9285, -45.0000, 1, 1, 16);
	Laivas[1] = CreateDarboCar(453, -1173.2834, 149.0828, 0.9285, -45.0000, 1, 1, 16);
	Laivas[2] = CreateDarboCar(453, -1167.8894, 143.6888, 0.9285, -45.0000, 1, 1, 16);
	Laivas[3] = CreateDarboCar(472, -1189.6091, 143.6090, 0.4383, 135.0000, 1, 1, 16);
	Laivas[4] = CreateDarboCar(472, -1184.2731, 138.0410, 0.4383, 135.0000, 1, 1, 16);
	Laivas[5] = CreateDarboCar(472, -1178.9371, 132.7050, 0.4383, 135.0000, 1, 1, 16);
	Laivas[6] = CreateDarboCar(484, -1205.4275, 120.9040, 0.4509, -135.0000, 1, 1, 16);
	Laivas[7] = CreateDarboCar(484, -1197.0754, 129.4880, 0.4509, -135.0000, 1, 1, 16);


        //SPD
    CreateDarboCar(411,-2054.1138,-57.9509,24.4371,270.0961,0,0,11); // infernus1
    CreateDarboCar(411,-2054.0388,-51.3138,24.4371,270.0657,0,0,11); // infernus2
    CreateDarboCar(522,-2054.1772,-54.5833,24.2826,271.1186,0,0,11); // nrg
    CreateDarboCar(522,-2054.3142,-48.2478,24.2830,272.0811,0,0,11); // nrg2
    CreateDarboCar(451,-2054.0093,-44.8469,24.4167,269.4894,0,0,11); // turismo1
    CreateDarboCar(451,-2054.0691,-41.5145,24.4169,269.0114,0,0,11); // turismo2
    CreateDarboCar(415,-2039.7900,-41.5427,24.4815,89.7357,0,0,11); // cheetah
    CreateDarboCar(402,-2040.0862,-44.8994,24.5412,91.0228,0,0,11); // buffalo
    CreateDarboCar(579,-2040.2590,-48.2804,24.6462,89.3405,0,0,11); // huntley
    CreateDarboCar(560,-2039.7076,-58.0624,24.4143,89.8367,0,0,11); // sultan1
    CreateDarboCar(560,-2039.6752,-54.7644,24.4147,89.9219,0,0,11); // sultan2
    CreateDarboCar(426,-2040.1804,-51.4606,24.4536,89.2609,0,0,11); // premier
        //RADISTAI
    CreateDarboCar(488,-2195.1528,-107.5173,47.0979,269.2234,246,246,10); // News chopper
    CreateDarboCar(488,-2204.9109,-118.1611,47.0968,269.4530,246,246,10); // News chopper
    CreateDarboCar(582,-2203.1135,-95.3121,35.4004,268.4766,246,246,10); // newsvan
    CreateDarboCar(516,-2211.5581,-95.2709,35.1739,271.2565,246,246,10); // nebula
    CreateDarboCar(516,-2193.2461,-95.5358,35.1767,270.0441,246,246,10); // nebula
    CreateDarboCar(582,-2183.1375,-95.5056,35.3991,268.7417,246,246,10); // newsvan
    CreateDarboCar(582,-2212.1921,-85.9537,35.3992,270.2886,246,246,10); // newsvan
    CreateDarboCar(516,-2203.5740,-85.8645,35.1773,270.4629,246,246,10); // nebula
    CreateDarboCar(582,-2193.4812,-85.7521,35.3982,270.0974,246,246,10); // newsvan
    CreateDarboCar(516,-2185.0085,-86.0614,35.1769,269.1657,246,246,10); // nebula
        //ARAS
    CreateDarboCar(528, -2101.4692, -103.3319, 35.5383, 0.0000, 79, 79, 9);
    CreateDarboCar(528, -2104.7256, -103.3319, 35.5383, 0.0000, 79, 79, 9);
    CreateDarboCar(528, -2108.6123, -103.3319, 35.5383, 0.0000, 79, 79, 9);
    CreateDarboCar(528, -2111.8025, -103.3319, 35.5383, 0.0000, 79, 79, 9);
    CreateDarboCar(528, -2114.7949, -103.3319, 35.5383, 0.0000, 79, 79, 9);
    CreateDarboCar(528, -2101.4397, -87.3986, 35.5383, 180.0000, 79, 79, 9);
    CreateDarboCar(528, -2104.9275, -87.3986, 35.5383, 180.0000, 79, 79, 9);
    CreateDarboCar(528, -2108.3711, -87.3986, 35.5383, 180.0000, 79, 79, 9);
    CreateDarboCar(528, -2111.7512, -87.3986, 35.5383, 180.0000, 79, 79, 9);
    CreateDarboCar(528, -2115.1697, -87.3986, 35.5383, 180.0000, 79, 79, 9);
    CreateDarboCar(427, -2101.6289, -151.5483, 35.2167, 179.5800, 79, 79, 9);
    CreateDarboCar(427, -2109.5615, -151.5483, 35.2167, 179.5800, 79, 79, 9);
    CreateDarboCar(601, -2114.5764, -151.4225, 35.0796, 180.5400, 79, 79, 9);
    CreateDarboCar(601, -2105.3096, -151.4225, 35.0796, 180.5400, 79, 79, 9);
    CreateDarboCar(541, -2101.4980, -163.6135, 34.8657, 0.0000, 79, 79, 9);
    CreateDarboCar(541, -2105.3918, -163.6888, 34.8657, 0.0000, 79, 79, 9);
    CreateDarboCar(541, -2109.7158, -163.6888, 34.8657, 0.0000, 79, 79, 9);
    CreateDarboCar(541, -2114.9109, -163.6888, 34.8657, 0.0000, 79, 79, 9);
    CreateDarboCar(497, -2105.7969, -137.1010, 39.1254, 90.0000, 79, 79, 9);
    CreateDarboCar(497, -2105.9309, -116.4915, 39.1254, 90.0000, 79, 79, 9);

        //Genovese
    CreateDarboCar(445,-1071.7373,-1246.7484,129.1770,90.2369,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1071.4758,-1243.0187,129.1770,89.3385,1,1,8); // Genovese-Vehicle
    CreateDarboCar(508,-1070.8839,-1234.9144,129.6769,180.7450,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1075.8198,-1233.6115,129.1771,181.3919,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1080.4512,-1233.5540,129.1770,178.8845,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1085.2864,-1233.6851,129.1770,178.5639,1,1,8); // Genovese-Vehicle
    CreateDarboCar(498,-1095.9020,-1233.0494,129.3722,270.3421,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.4242,-1237.4580,129.1770,270.6428,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.6146,-1242.2218,129.1770,269.6138,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.3851,-1246.5648,129.1770,270.4056,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.3435,-1250.8177,129.1770,270.6659,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.2649,-1255.0375,129.1770,272.4761,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.5627,-1259.6569,129.1770,270.2346,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.4867,-1263.7064,129.1770,270.1545,1,1,8); // Genovese-Vehicle
    CreateDarboCar(445,-1096.3533,-1267.7024,129.1770,271.9157,1,1,8); // Genovese-Vehicle
    CreateDarboCar(498,-1063.3455,-1272.3811,129.3714,89.0478,1,1,8); // boxville genovese
    CreateDarboCar(498,-1097.0759,-1271.7040,129.3696,269.4369,1,1,8); // Boxville genovese 2
    CreateDarboCar(468,-1076.1177,-1272.9503,128.9646,122.5567,1,1,8); // Genovese-Vehicle
    CreateDarboCar(468,-1078.6245,-1272.5452,128.9711,134.7321,1,1,8); // Genovese-Vehicle
    CreateDarboCar(468,-1080.9044,-1272.1624,128.9698,143.3101,1,1,8); // Genovese-Vehicle
    CreateDarboCar(468,-1073.4407,-1273.0452,128.9698,129.6692,1,1,8); // Genovese-Vehicle
        //Lucchese
    CreateDarboCar(405,-711.6485,993.0340,12.4290,178.6407,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-707.4581,993.8668,12.4298,181.4324,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-702.8311,993.3506,12.4290,181.8724,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-698.6694,993.2922,12.4290,178.7508,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-694.3074,993.7822,12.4290,174.9261,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-689.4678,993.3741,12.4290,180.8119,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-685.1569,993.3340,12.4290,183.2743,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-681.2153,993.8588,12.4290,177.6524,0,0,7); // Lucchese maðina
    CreateDarboCar(498,-676.9506,993.4064,12.6246,179.1029,0,0,7); // Lucchese maðina
    CreateDarboCar(508,-709.7826,964.3882,12.9291,272.1678,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.5380,982.9236,12.4290,90.0123,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.6750,978.2784,12.4290,90.5958,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.3161,973.8708,12.4290,90.7415,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.2818,969.7689,12.4290,90.5661,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.4940,964.9596,12.4289,89.7786,0,0,7); // Lucchese maðina
    CreateDarboCar(405,-677.4084,960.6443,12.4290,88.1811,0,0,7); // Lucchese maðina
    CreateDarboCar(468,-675.2410,954.5811,12.1532,89.8685,0,0,7); // Lucchese maðina
    CreateDarboCar(468,-678.2908,954.6169,12.1587,90.2504,0,0,7); // Lucchese maðina
    CreateDarboCar(468,-681.7882,954.9368,12.1571,86.3231,0,0,7); // Lucchese maðina
    CreateDarboCar(468,-685.1974,954.8119,12.1551,92.2969,0,0,7); // Lucchese maðina
    CreateDarboCar(452,-647.0526,866.5103,-0.4901,228.0734,0,0,7); // Lucchese maðina
    CreateDarboCar(498,-710.7941,983.3177,12.6221,1.4771,0,0,7); // Boxvilis lucchese
    CreateDarboCar(498,-710.9965,956.3107,12.6240,269.4633,0,0,7); // Boxvilis2 lucchese

        //FURISTAI
    CreateDarboCar(435,151.9953,1402.4847,11.2212,271.7344,-1,-1,21);
    CreateDarboCar(435,197.6394,1383.5660,11.2212,359.6302,-1,-1,21); // priekaba maistui 2
    CreateDarboCar(435,221.8669,1383.4795,11.2183,0.0994,-1,-1,21); // priekaba maistui 3
    CreateDarboCar(435,245.4360,1383.1788,11.2212,0.8173,-1,-1,21); // priekaba maistui 4
    CreateDarboCar(591,244.8991,1435.6270,11.2202,180.1950,-1,-1,21); // priekaba buitinei technikai 1
    CreateDarboCar(591,221.9572,1435.6565,11.2199,179.9143,-1,-1,21); // priekaba buitinei technikai 2
    CreateDarboCar(591,198.4190,1435.4951,11.2199,179.0402,-1,-1,21); // priekaba buitinei technikai 3
    CreateDarboCar(591,152.4056,1423.2725,11.2264,267.6537,-1,-1,21); // priekaba buitinei technikai 4
    CreateDarboCar(515,189.8149,1464.1523,11.6093,0.2072,-1,-1,21); // fura 1
    CreateDarboCar(515,195.5050,1464.1390,11.6063,0.5102,-1,-1,21); // fura 2
    CreateDarboCar(515,201.2301,1464.2710,11.6050,359.9214,-1,-1,21); // fura 3
    CreateDarboCar(515,206.7007,1464.1687,11.6073,0.3346,-1,-1,21); // fura 4
    CreateDarboCar(515,212.4841,1464.1670,11.6071,0.3225,-1,-1,21); // fura 5
    CreateDarboCar(515,219.1363,1354.2876,11.6045,178.7367,-1,-1,21); // fura 6
    CreateDarboCar(515,224.2155,1354.4703,11.6070,179.0477,-1,-1,21); // fura 7
    CreateDarboCar(515,229.2437,1354.5352,11.5992,178.7634,-1,-1,21); // fura 8
    CreateDarboCar(515,233.9994,1354.5200,11.6083,178.5304,-1,-1,21); // fura 9
    CreateDarboCar(515,239.5613,1354.6650,11.6071,179.1393,-1,-1,21); // fura 10
    /*CreateDarboCar(450,237.4139,1482.9618,11.2162,270.2145,-1,-1,21); priekaba smel 1
    CreateDarboCar(450,257.4061,1483.0171,11.2160,270.0572,-1,-1,21);  priekaba smel 2
    CreateDarboCar(450,280.2947,1453.5239,11.2165,178.0465,-1,-1,21);  priekaba smel 3
    CreateDarboCar(450,153.7437,1368.3386,11.2162,270.8447,-1,-1,21);  priekaba smel 4
    CreateDarboCar(450,188.1595,1356.6792,11.2161,90.4150,-1,-1,21);*/ //priekaba smel 5
    CreateDarboCar(443, 125.5191, 1472.2283, 11.1311, 270.0000, -1, -1, 21); // tralas 1
	CreateDarboCar(443, 125.5191, 1451.1343, 11.1311, 270.0000, -1, -1, 21); // tralas 2
	CreateDarboCar(443, 146.6131, 1472.2283, 11.1311, 270.0000, -1, -1, 21); // tralas 3
	CreateDarboCar(443, 163.3291, 1482.9742, 11.1311, 270.0000, -1, -1, 21); // tralas 4
	CreateDarboCar(443, 178.3898, 1429.7520, 11.1311, 0.0000, -1, -1, 21); // tralas 5

    CreateDarboCar(584,130.9382,1361.1343,11.7471,269.5438,-1,-1,21); // cisterna1
    CreateDarboCar(584,131.0141,1354.7897,11.7398,270.3866,-1,-1,21); // cisterna2
    CreateDarboCar(584,131.3117,1348.7383,11.7445,269.9827,-1,-1,21); // cisterna3
    CreateDarboCar(584,184.2971,1338.7892,11.7405,271.1429,-1,-1,21); // cisterna4
    CreateDarboCar(584,285.4404,1354.2318,11.7394,1.2285,-1,-1,21); // cisterna5
        //MECHANIKAI
    CreateDarboCar(525, -1764.8800, -129.9312, 3.4567, 269.0525, -1, -1, 5);
    CreateDarboCar(525, -1764.9280, -134.6974, 3.2544, -90.0000, -1, -1, 5);
    CreateDarboCar(525, -1764.9379, -139.8163, 3.3634, -90.0000, -1, -1, 5);
    CreateDarboCar(525, -1764.8658, -144.8554, 3.2536, -90.0000, -1, -1, 5);
    CreateDarboCar(525, -1765.0769, -149.5965, 3.3567, -90.0000, -1, -1, 5);
    CreateDarboCar(525, -1764.5541, -154.8035, 3.3513, -90.0000, -1, -1, 5);
    CreateDarboCar(602, -1764.7053, -160.0661, 3.1504, -90.0000, -1, -1, 5);
    CreateDarboCar(602, -1764.4645, -164.7256, 3.2567, -90.0000, -1, -1, 5);
    CreateDarboCar(602, -1764.7490, -169.8621, 3.2545, -90.0000, -1, -1, 5);
    CreateDarboCar(602, -1764.8574, -174.6719, 3.1533, -90.0000, -1, -1, 5);
    CreateDarboCar(602, -1764.5673, -179.7647, 3.3588, -90.0000, -1, -1, 5);

		//POLICIJA
	CreateDarboCar(497,-1680.2391000,705.5634000,30.7668000,0.0882000,79,79,1); //Vehicle number 0  HELICOPTERIS
	CreateDarboCar(523,-1573.5753000,714.2606000,-5.6988000,95.6179000,1,86,1); //Vehicle number 0
	CreateDarboCar(597,-1573.5277000,722.4555000,-5.4445000,91.9683000,1,86,1); //Vehicle number 1
	CreateDarboCar(599,-1572.6144000,730.7058000,-5.3211000,92.0643000,1,86,1); //Vehicle number 2
	CreateDarboCar(599,-1572.7617000,738.4691000,-5.3215000,90.0045000,1,86,1); //Vehicle number 3
	CreateDarboCar(597,-1580.3669000,748.8919000,-5.4310000,181.9502000,1,86,1); //Vehicle number 4
	CreateDarboCar(523,-1584.4698000,749.6953000,-5.6811000,189.8381000,1,86,1); //Vehicle number 5
	CreateDarboCar(523,-1587.8500000,749.6027000,-5.6643000,180.0000000,1,86,1); //Vehicle number 6
	CreateDarboCar(597,-1592.3445000,749.0735000,-5.4685000,180.8980000,1,86,1); //Vehicle number 7
	CreateDarboCar(597,-1596.4070000,749.4529000,-5.4530000,181.5698000,1,86,1); //Vehicle number 8
	CreateDarboCar(599,-1604.3821000,749.4294000,-5.3084000,181.2694000,1,86,1); //Vehicle number 9
	CreateDarboCar(599,-1582.1079000,673.8250000,7.1087000,179.7601000,1,86,1); //Vehicle number 10
	CreateDarboCar(599,-1588.1362000,673.8080000,7.1051000,180.1613000,1,86,1); //Vehicle number 11
	CreateDarboCar(599,-1600.1680000,673.7314000,7.0567000,180.1190000,1,86,1); //Vehicle number 12
	CreateDarboCar(523,-1605.9429000,673.4406000,6.7623000,178.5343000,1,86,1); //Vehicle number 13
	CreateDarboCar(523,-1611.7800000,673.4180000,6.7559000,180.0000000,1,86,1); //Vehicle number 14
	CreateDarboCar(597,-1581.9025000,651.8198000,6.9926000,359.0474000,1,86,1); //Vehicle number 15
	CreateDarboCar(597,-1587.9727000,651.8511000,6.9936000,357.9581000,1,86,1); //Vehicle number 16
	CreateDarboCar(597,-1599.4606000,651.7706000,6.9667000,359.9902000,1,86,1); //Vehicle number 17
	CreateDarboCar(597,-1616.6007000,651.7585000,6.9694000,359.9952000,1,86,1); //Vehicle number 18
	CreateDarboCar(597,-1622.5353000,651.7563000,6.9905000,0.0102000,1,86,1); //Vehicle number 19
	CreateDarboCar(597,-1639.1208000,651.7454000,6.9616000,359.9945000,1,86,1); //Vehicle number 20
    CreateDarboCar(430, -1451.0750, 711.9039, 0.2875, 0.0000, -1, -1, 1);
    CreateDarboCar(430, -1465.4305, 711.6619, 0.2875, 0.0000, -1, -1, 1);
    CreateDarboCar(430, -1474.6658, 668.9994, 0.2875, 180.0000, -1, -1, 1);
    CreateDarboCar(430, -1460.9519, 669.6058, 0.2875, 180.0000, -1, -1, 1);
		//MEDIKAI
	CreateDarboCar(416,-2588.7087000,622.3604000,14.6312000,270.1569000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2571.6499000,632.5970000,14.6436000,270.2496000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2588.9929000,653.2220000,14.6425000,271.0374000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2588.9912000,658.3262000,14.6377000,270.5001000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2571.6506000,657.6873000,14.6377000,270.0018000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3801000,658.0830000,14.6475000,89.7385000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3804000,652.8336000,14.6472000,89.7005000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3904000,647.6492000,14.6465000,89.1423000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3887000,642.3325000,14.6411000,90.0013000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3884000,637.6095000,14.6411000,90.1221000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2546.3906000,632.3902000,14.6374000,89.9146000,1,3,2); //AMBULANCE
	CreateDarboCar(416,-2548.5449000,626.2508000,14.5947000,92.1267000,1,3,2); //AMBULANCE
	CreateDarboCar(490,-2543.7795000,586.9993000,14.5454000,90.0339000,1,1,2); //FBI RANCHER
	CreateDarboCar(490,-2543.7778000,592.9049000,14.5473000,89.7469000,1,1,2); //FBI RANCHER
	CreateDarboCar(490,-2543.7930000,598.8989000,14.6184000,90.0018000,1,1,2); //FBI RANCHER
	CreateDarboCar(490,-2543.7903000,604.7990000,14.5992000,90.0019000,1,1,2); //FBI RANCHER
	CreateDarboCar(490,-2543.6409000,610.7858000,14.5797000,90.7138000,1,1,2); // FBI RANCHER
	CreateDarboCar(452,-2884.1060,517.1747,-0.5075,58.9074,3,1,2); // MEDIKU-LAIVAS
	CreateDarboCar(452,-2881.6731,512.4131,-0.6823,87.0055,3,1,2); // MEDIKU-LAIVAS
	CreateDarboCar(487,-2679.4846,645.1400,66.2668,90.0039,1,3,2); // MEDIKU-HELICOPTER
	CreateDarboCar(487,-2663.0146,645.3202,66.2666,90.0770,1,3,2); // MEDIKU-HELICOPTER
	CreateDarboCar(487,-2663.0154,624.3464,66.2779,90.0020,1,3,2); // MEDIKU-HELICOPTER
	CreateDarboCar(487,-2679.4832,624.3219,66.2759,90.4905,1,3,2); // MEDIKU-HELICOPTER
        //TAKSI FIRMA
    CreateDarboCar(420,-2551.7510,540.6813,14.3628,91.8170,6,1,4); // Taxi car
    CreateDarboCar(420,-2551.9617,535.5839,14.3639,90.2601,6,1,4); // Taxi car
    CreateDarboCar(420,-2551.7688,530.5817,14.3842,90.6594,6,1,4); // Taxi car
    CreateDarboCar(560,-2551.2351,525.6463,14.3114,91.8854,6,1,4); // Sultan
    CreateDarboCar(560,-2551.5127,520.5718,14.3114,90.3518,6,1,4); // Sultan
    CreateDarboCar(560,-2551.1094,515.3963,14.3110,88.7751,6,1,4); // Sultan
    CreateDarboCar(560,-2551.3845,510.5205,14.3048,89.3713,6,1,4); // Sultan
    CreateDarboCar(420,-2551.5994,505.5441,14.3796,90.8954,6,1,4); // Taxi car
    CreateDarboCar(420,-2582.5447,505.0816,14.3911,270.0223,6,1,4); // Taxi car
    CreateDarboCar(438,-2581.7134,510.2964,14.3922,270.3414,6,1,4); // Cabbie
    CreateDarboCar(438,-2581.5784,515.3307,14.3986,270.0486,6,1,4); // Cabbie
    CreateDarboCar(438,-2581.8013,520.4079,14.4002,270.1287,6,1,4); // Cabbie
    CreateDarboCar(420,-2581.3835,525.2678,14.3989,270.1242,6,1,4); // Taxi
    CreateDarboCar(438,-2582.0320,540.3571,14.3639,269.8929,6,1,4); // Cabbie
    CreateDarboCar(560,-2582.5120,530.6207,14.3247,269.3287,6,1,4); // sultan
    CreateDarboCar(560,-2582.5037,535.4664,14.2883,269.4415,6,1,4); // sultan

	////////////////////////////////////////////////////////////////////////////////////////
    mysql_function_query(connectionHandle,"SELECT * FROM `darbuinformacija`;",true,"OnLoadJobsInformation","");
	mysql_function_query(connectionHandle,"SELECT * FROM `pdnustatymai`;",true,"OnLoadPoliceSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `hpnustatymai`;",true,"OnLoadHospitalSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `taksifnustatymai`;",true,"OnLoadTaksiFSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `mechanikainustatymai`;",true,"OnLoadMechanikuSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `lucchesenustatymai`;",true,"OnLoadLuccheseSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `genovesenustatymai`;",true,"OnLoadGenoveseSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `arasnustatymai`;",true,"OnLoadArasSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `spdnustatymai`;",true,"OnLoadSPDSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `radistainustatymai`;",true,"OnLoadRadistaiSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `furistainustatymai`;",true,"OnLoadFuristaiSettings","");
    mysql_function_query(connectionHandle,"SELECT * FROM `gamyklulikutis`;",true,"OnLoadGamykluLikutis","");

    mysql_function_query(connectionHandle,"SELECT * FROM `masinuturguskiekiai`;",true,"OnLoadSalesVehicles","");
    mysql_function_query(connectionHandle,"SELECT * FROM `pavaduotojunustatymai`;",true,"OnLoadPavaduotojai","");
	SetWeather(10);
    SERVERIO_ORAS = 10;
    for(new LastActionVehicleID = 0;LastActionVehicleID <= GetVehiclePoolSize();LastActionVehicleID++)
    {
        SetVehicleToRespawn(LastActionVehicleID);
    }

    //Verslai
    mysql_function_query(connectionHandle,"SELECT * FROM `Verslai`;",true,"OnLoadVerslai","");
    //Namai
    mysql_function_query(connectionHandle,"SELECT * FROM `houses`;",true,"OnLoadHousesList","");

    /////VALYTOJAI MISIJOS

    ValytojaiMisijos[0][MisijosObjektas1] = CreateDynamicObject(11280, -1710.17065, 331.93961, 6.03280,   0.00000, 0.00000, 124.55240);
    ValytojaiMisijos[0][MisijosObjektas1M] = 11280;
    ValytojaiMisijos[0][MisijosObjektas2] = CreateDynamicObject(19898, -1704.77124, 334.64557, 6.20540,   0.00000, 0.00000, 112.74005);
    ValytojaiMisijos[0][MisijosObjektas2M] = 19898;
    ValytojaiMisijos[0][MisijosObjektas3] = CreateDynamicObject(19898, -1706.09631, 334.27750, 6.20540,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[0][MisijosObjektas3M] = 19898;
    SetValytojaiMisijosCP(0,-1705.9725,334.7679,6.9146);
    ValytojaiMisijos[0][MisijaRuns] = true;

    ValytojaiMisijos[1][MisijosObjektas1] = CreateDynamicObject(19898, -1732.01660, 1295.79590, 6.00794,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[1][MisijosObjektas1M] = 19898;
    ValytojaiMisijos[1][MisijosObjektas2] = CreateDynamicObject(19835, -1732.60828, 1295.65161, 6.06650,   0.00000, 86.00000, 0.00000);
    ValytojaiMisijos[1][MisijosObjektas2M] = 19835;
    SetValytojaiMisijosCP(1,-1732.1477,1295.6075,6.7552);
    ValytojaiMisijos[1][MisijaRuns] = true;

    ValytojaiMisijos[2][MisijosObjektas1] = CreateDynamicObject(19820, -1611.29993, 1121.38000, 6.07560,   0.00000, 90.00000, 44.82200);
    ValytojaiMisijos[2][MisijosObjektas1M] = 19820;
    ValytojaiMisijos[2][MisijosObjektas2] = CreateDynamicObject(2647, -1611.21863, 1121.02234, 6.12630,   0.00000, 85.00000, 10.00000);
    ValytojaiMisijos[2][MisijosObjektas2M] = 2647;
    SetValytojaiMisijosCP(2,-1611.1193,1121.4587,6.8379); // cp
    ValytojaiMisijos[2][MisijaRuns] = true;


    ValytojaiMisijos[3][MisijosObjektas1] = CreateDynamicObject(19898, -2366.16504, -168.99110, 34.18420,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[3][MisijosObjektas1M] = 19898;
    SetValytojaiMisijosCP(3,-2366.2251,-168.9720,34.8990); //  cp
    ValytojaiMisijos[3][MisijaRuns] = true;


    ValytojaiMisijos[4][MisijosObjektas1] = CreateDynamicObject(11280, -2700.38794, 138.05409, 3.17891,   0.00000, 0.00000, 167.77451);
    ValytojaiMisijos[4][MisijosObjektas1M] = 11280;
    ValytojaiMisijos[4][MisijosObjektas2] = CreateDynamicObject(19898, -2700.67871, 140.01379, 3.33890,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[4][MisijosObjektas2M] = 19898;
    SetValytojaiMisijosCP(4,-2700.8655,139.7580,4.0212); // cp
    ValytojaiMisijos[4][MisijaRuns] = true;


    ValytojaiMisijos[5][MisijosObjektas1] = CreateDynamicObject(1644, -2521.90625, 669.19128, 26.95410,   0.00000, 0.00000, 299.69446);
    ValytojaiMisijos[5][MisijosObjektas1M] = 1644;
    ValytojaiMisijos[5][MisijosObjektas2] = CreateDynamicObject(19835, -2521.99756, 669.40649, 26.97410,   0.00000, 90.00000, 45.37023);
    ValytojaiMisijos[5][MisijosObjektas2M] = 19835;
    ValytojaiMisijos[5][MisijosObjektas3] = CreateDynamicObject(19820, -2521.81372, 668.46124, 26.98720,   0.00000, 90.00000, 134.13782);
    ValytojaiMisijos[5][MisijosObjektas3M] = 19820;
    ValytojaiMisijos[5][MisijosObjektas4] = CreateDynamicObject(19898, -2522.21582, 669.08789, 26.96690,   0.00000, 0.00000, 292.33890);
    ValytojaiMisijos[5][MisijosObjektas4M] = 19898;
    SetValytojaiMisijosCP(5,-2522.1550,668.9919,27.7014); // cp
    ValytojaiMisijos[5][MisijaRuns] = true;


    ValytojaiMisijos[6][MisijosObjektas1] = CreateDynamicObject(2702, -2858.44019, 406.15021, 3.35110,   0.00000, -97.96000, 279.83801);
    ValytojaiMisijos[6][MisijosObjektas1M] = 2702;
    ValytojaiMisijos[6][MisijosObjektas2] = CreateDynamicObject(2647, -2858.50073, 405.62521, 3.37910,   0.00000, 90.00000, 70.00000);
    ValytojaiMisijos[6][MisijosObjektas2M] = 2647;
    SetValytojaiMisijosCP(6,-2858.4351,405.7275,4.1505); // cp
    ValytojaiMisijos[6][MisijaRuns] = true;


    ValytojaiMisijos[7][MisijosObjektas1] = CreateDynamicObject(19898, -2813.15430, -167.95198, 6.05480,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[7][MisijosObjektas1M] = 19898;
    SetValytojaiMisijosCP(7,-2813.1306,-168.1491,6.8380); // cp1
    ValytojaiMisijos[7][MisijaRuns] = true;

    ValytojaiMisijos[8][MisijosObjektas1] = CreateDynamicObject(19898, -2066.67871, -347.23181, 34.31810,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[8][MisijosObjektas1M] = 19898;
    SetValytojaiMisijosCP(8,-2066.3196,-347.3164,35.0318); // cp
    ValytojaiMisijos[8][MisijaRuns] = true;

    ValytojaiMisijos[9][MisijosObjektas1] = CreateDynamicObject(19835, -2624.19849, 703.18866, 27.04590,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[9][MisijosObjektas1M] = 19835;
    ValytojaiMisijos[9][MisijosObjektas2] = CreateDynamicObject(2647, -2624.50684, 703.15967, 27.09090,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[9][MisijosObjektas2M] = 2647;
    SetValytojaiMisijosCP(9,-2624.9275,704.3137,27.5334); // cp
    ValytojaiMisijos[9][MisijaRuns] = true;

    ValytojaiMisijos[10][MisijosObjektas1] = CreateDynamicObject(19835, -2227.28833, 722.75568, 48.47980,   0.00000, 83.00000, 0.00000);
    ValytojaiMisijos[10][MisijosObjektas1M] = 19835;
    ValytojaiMisijos[10][MisijosObjektas2] = CreateDynamicObject(19898, -2226.83862, 722.97400, 48.42220,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[10][MisijosObjektas2M] = 19898;
    SetValytojaiMisijosCP(10,-2226.9502,722.8552,49.1411); // cp
    ValytojaiMisijos[10][MisijaRuns] = true;


    ValytojaiMisijos[11][MisijosObjektas1] = CreateDynamicObject(2839, -2151.36377, 267.01559, 34.16355,   0.00000, 0.00000, 83.98859);
    ValytojaiMisijos[11][MisijosObjektas1M] = 2839;
    SetValytojaiMisijosCP(11,-2151.4846,267.2964,34.9708); // cp
    ValytojaiMisijos[0][MisijaRuns] = true;


    ValytojaiMisijos[12][MisijosObjektas1] = CreateDynamicObject(2857, -2108.02466, 24.55180, 34.31510,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[12][MisijosObjektas1M] = 2857;
    SetValytojaiMisijosCP(12,-2107.9045,24.4544,35.0067); // cp
    ValytojaiMisijos[12][MisijaRuns] = true;


    ValytojaiMisijos[13][MisijosObjektas1] = CreateDynamicObject(2840, -1875.18811, -154.06940, 10.89143,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[13][MisijosObjektas1M] = 2840;
    ValytojaiMisijos[13][MisijosObjektas2] = CreateDynamicObject(2860, -1876.56653, -154.14894, 10.89143,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[13][MisijosObjektas2M] = 2860;
    ValytojaiMisijos[13][MisijosObjektas3] = CreateDynamicObject(2857, -1875.67114, -152.67650, 10.88750,   0.00000, 0.00000, 146.68269);
    ValytojaiMisijos[13][MisijosObjektas3M] = 2857;
    SetValytojaiMisijosCP(13,-1875.7494,-153.6101,11.6255); // cp
    ValytojaiMisijos[13][MisijaRuns] = true;


    ValytojaiMisijos[14][MisijosObjektas1] = CreateDynamicObject(2839, -1755.31433, -121.09106, 2.55562,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[14][MisijosObjektas1M] = 2839;
    SetValytojaiMisijosCP(14,-1755.5936,-121.1619,3.2870); // cp
    ValytojaiMisijos[14][MisijaRuns] = true;


    ValytojaiMisijos[15][MisijosObjektas1] = CreateDynamicObject(2860, -1775.54358, -588.58124, 15.32598,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[15][MisijosObjektas1M] = 2860;
    SetValytojaiMisijosCP(15,-1775.3964,-588.5407,16.1349); // cp
    ValytojaiMisijos[15][MisijaRuns] = true;


    ValytojaiMisijos[16][MisijosObjektas1] = CreateDynamicObject(2840, -1639.76807, -530.87433, 10.35937,   0.00000, 0.00000, 207.86224);
    ValytojaiMisijos[16][MisijosObjektas1M] = 2840;
    SetValytojaiMisijosCP(16,-1639.7478,-531.0355,11.0711); // cp
    ValytojaiMisijos[16][MisijaRuns] = true;


    ValytojaiMisijos[17][MisijosObjektas1] = CreateDynamicObject(19898, -1383.65576, -395.20490, 13.15650,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[17][MisijosObjektas1M] = 19898;
    ValytojaiMisijos[17][MisijosObjektas2] = CreateDynamicObject(19835, -1383.34875, -395.22021, 13.21400,   0.00000, 90.00000, 265.32471);
    ValytojaiMisijos[17][MisijosObjektas2M] = 19835;
    SetValytojaiMisijosCP(17,-1383.6946,-395.4431,13.8755); // cp
    ValytojaiMisijos[17][MisijaRuns] = true;


    ValytojaiMisijos[18][MisijosObjektas1] = CreateDynamicObject(2857, -1729.21423, 1354.55603, 6.17930,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[18][MisijosObjektas1M] = 2857;
    SetValytojaiMisijosCP(18,-1729.2917,1354.3749,6.9146); // cp
    ValytojaiMisijos[18][MisijaRuns] = true;


    ValytojaiMisijos[19][MisijosObjektas1] = CreateDynamicObject(2839, -1890.79407, 1153.43848, 44.29315,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[19][MisijosObjektas1M] = 2839;
    SetValytojaiMisijosCP(19,-1890.6819,1153.6779,45.0240); // cp
    ValytojaiMisijos[19][MisijaRuns] = true;


    ValytojaiMisijos[20][MisijosObjektas1] = CreateDynamicObject(19898, -1954.12842, 1187.26025, 44.46350,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[20][MisijosObjektas1M] = 19898;
    ValytojaiMisijos[20][MisijosObjektas2] = CreateDynamicObject(19820, -1953.63562, 1187.81677, 44.50250,   0.00000, 90.00000, -99.00000);
    ValytojaiMisijos[20][MisijosObjektas2M] = 19820;
    SetValytojaiMisijosCP(20,-1954.0145,1187.1960,45.1724); // cp
    ValytojaiMisijos[20][MisijaRuns] = true;


    ValytojaiMisijos[21][MisijosObjektas1] = CreateDynamicObject(2702, -2232.59473, 325.08701, 34.16290,   0.00000, -90.00000, 0.00000);
    ValytojaiMisijos[21][MisijosObjektas1M] = 2702;
    ValytojaiMisijos[21][MisijosObjektas2] = CreateDynamicObject(2702, -2232.34058, 324.88126, 34.16290,   0.00000, -90.00000, 0.00000);
    ValytojaiMisijos[21][MisijosObjektas2M] = 2702;
    SetValytojaiMisijosCP(21,-2232.2820,324.8553,34.9708); // cp
    ValytojaiMisijos[21][MisijaRuns] = true;


    ValytojaiMisijos[22][MisijosObjektas1] = CreateDynamicObject(2857, -2048.07886, -710.27057, 31.01852,   0.00000, 0.00000, 81.06364);
    ValytojaiMisijos[13][MisijosObjektas1M] = 2857;
    SetValytojaiMisijosCP(22,-2047.7401,-710.5276,31.8223); // cp
    ValytojaiMisijos[22][MisijaRuns] = true;


    ValytojaiMisijos[23][MisijosObjektas1] = CreateDynamicObject(2840, -2385.95020, -583.98083, 131.11121,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[23][MisijosObjektas1M] = 2840;
    SetValytojaiMisijosCP(23,-2386.3235,-584.0475,131.8443); // cp
    ValytojaiMisijos[23][MisijaRuns] = true;


    ValytojaiMisijos[24][MisijosObjektas1] = CreateDynamicObject(19898, -2483.37354, -181.73430, 24.63510,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[24][MisijosObjektas1M] = 19898;
    SetValytojaiMisijosCP(24,-2483.5706,-182.0257,25.3443); // cp
    ValytojaiMisijos[24][MisijaRuns] = true;


    ValytojaiMisijos[25][MisijosObjektas1] = CreateDynamicObject(2860, -1903.80493, -569.58881, 23.62120,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[25][MisijosObjektas1M] = 2860;
    SetValytojaiMisijosCP(25,-1903.9236,-569.5941,24.3208); // cp
    ValytojaiMisijos[25][MisijaRuns] = true;


    ValytojaiMisijos[26][MisijosObjektas1] = CreateDynamicObject(2839, -1998.28296, -194.87970, 34.85470,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[26][MisijosObjektas1M] = 2839;
    SetValytojaiMisijosCP(26,-1998.2758,-194.8731,35.5934); // cp
    ValytojaiMisijos[26][MisijaRuns] = true;


    ValytojaiMisijos[27][MisijosObjektas1] = CreateDynamicObject(11280, -2092.28101, -11.98500, 34.18350,   0.00000, 0.00000, 346.56479);
    ValytojaiMisijos[27][MisijosObjektas1M] = 11280;
    ValytojaiMisijos[27][MisijosObjektas2] = CreateDynamicObject(19898, -2093.47314, -15.46310, 34.33460,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[27][MisijosObjektas2M] = 19898;
    SetValytojaiMisijosCP(27,-2093.4734,-15.7063,35.0490); // cp
    ValytojaiMisijos[27][MisijaRuns] = true;

    ValytojaiMisijos[28][MisijosObjektas1] = CreateDynamicObject(2860, -2395.27026, 947.29388, 44.47240,   0.00000, 0.00000, 0.00000);
    ValytojaiMisijos[28][MisijosObjektas1M] = 2860;
    SetValytojaiMisijosCP(28,-2395.5337,947.4213,45.1724); // cp
    ValytojaiMisijos[28][MisijaRuns] = true;


    //Sviesaforai proto
    StartSviesaforaiVM();
    StartSviesaforaiTPSF();
    StartSviesaforaiTPSFA();
    Sviesaforas1Area = CreateDynamicRectangle(-2013.6847,-70.1831, -2016.2191,-75.1064, -1, 0);
    Sviesaforas3Area = CreateDynamicRectangle(-1997.3794,-65.3710, -2000.0398,-70.1594, -1, 0);


    Sviesaforas2Area = CreateDynamicRectangle(-2007.5299,-60.5578,-2012.4126,-62.9407, -1, 0);
    Sviesaforas4Area = CreateDynamicRectangle(-2001.7817,-77.9135,-2006.5156,-80.1710, -1, 0);


//PRIE tpSF
    Sviesaforas5Area = CreateDynamicRectangle(-2154.5911,315.3865,-2156.2393,320.2379, -1, 0);
    Sviesaforas7Area = CreateDynamicRectangle(-2146.9238,328.5482,-2151.6738,329.7055, -1, 0);


    Sviesaforas6Area = CreateDynamicRectangle(-2136.8596,320.4271,-2138.9004,325.1046, -1, 0);
    Sviesaforas8Area = CreateDynamicRectangle(-2141.8972,310.4681,-2146.6484,312.0558, -1, 0);

//PRIE tpSF lefft
    Sviesaforas9Area = CreateDynamicRectangle(-2241.8906,320.4791,-2243.5205,325.1378, -1, 0);
    Sviesaforas11Area = CreateDynamicRectangle(-2247.0974,310.5620,-2251.4790,311.8427, -1, 0);


    Sviesaforas10Area = CreateDynamicRectangle(-2260.4578,315.5765,-2261.6785,320.4575, -1, 0);
    Sviesaforas12Area = CreateDynamicRectangle(-2251.7893,328.8459,-2257.1934,329.9482, -1, 0);
    //KAROZONOS
    KaroZonos[0] = WeedEventArea;

    KaroZonos[1] = CreateDynamicCube(549.5854,1130.9928,5.5, 654.4568,1350.2931,54.5, 0, 0);//KARO ZONA PRIE NARK GAMYKLOS ISOREJE
    KaroZonos[2] = CreateDynamicCube(929.1354,2093.9194,1004.8762, 972.5754,2188.9104,1027.8534, 1, 1); //Karo zona interjiere Nark.gamyklos
    KaroZonos[3] = CreateDynamicCube(-784.8577,892.2090,-15.4770,-652.2908,1047.2736,54.7434, 0, 0);//Lucchese Karo Zona
    KaroZonos[4] = CreateDynamicCube(-1153.6132, -1342.6536,98.6036, -1009.0385,-1178.1649, 159.1327, 0, 0);//Genovese Karo Zona

    KaroZonos[5] = CreateDynamicCube(2666.1824,-2565.7080,-12.6397,2811.9153,-2400.8384,39.9649, 0, 0);//Karo Zona ginklø

    LoadGaragesSystem();
	return 1;
}
forward OnLoadJobsInformation();
public OnLoadJobsInformation()
{
	if(cache_get_row_count() > 0)
	{
		for(new row = 0;row<cache_get_row_count();row++)
		{
			new DarboNumeris = cache_get_row_int(row, 0);
			new TMPstr[30];
			new darblaik[100];
			cache_get_row(row, 1, TMPstr,1,30);
			printf("Pirmas rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango1Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 2, TMPstr,1,30);
			printf("2 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango2Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 3, TMPstr,1,30);
			printf("3 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango3Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 4, TMPstr,1,30);
			printf("4 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango4Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 5, TMPstr,1,30);
			printf("5 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango5Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 6, TMPstr,1,30);
			printf("6 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango6Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 7, TMPstr,1,30);
			printf("7 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango7Pavadinimas], 30, "%s", TMPstr);
			cache_get_row(row, 8, TMPstr,1,30);
			printf("8 rangas:%s", TMPstr);
			format(DarboInformacija[DarboNumeris][Rango8Pavadinimas], 30, "%s", TMPstr);
			DarboInformacija[DarboNumeris][DarboFondas] = cache_get_row_int(row, 9);
			printf("Darbo fondas: %d eur.",DarboInformacija[DarboNumeris][DarboFondas]);

			cache_get_row(row, 10, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Pirmadienis], 100, "%s", darblaik);
			cache_get_row(row, 11, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Antradienis], 100, "%s", darblaik);
			cache_get_row(row, 12, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Treciadienis], 100, "%s", darblaik);
			cache_get_row(row, 13, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Ketvirtadienis], 100, "%s", darblaik);
			cache_get_row(row, 14, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Penktadienis], 100, "%s", darblaik);
			cache_get_row(row, 15, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Sestadienis], 100, "%s", darblaik);
			cache_get_row(row, 16, darblaik,1,100);
			format(DarboInformacija[DarboNumeris][Sekmadienis], 100, "%s", darblaik);
		}
	}
	return 1;
}
stock CreateKartingas(Model, Float:X, Float:Y,Float:Z, Float:A ,Color1,Color2)
{
    new vehicleid = CreateVehicle(Model, X, Y, Z, A, Color1, Color2, 30);
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleEngineState] = 0;
    VehicleDB[vehicleid][VehicleLights] = 0;
    VehicleDB[vehicleid][VRibotuvas] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;

    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
    VehicleDB[vehicleid][TURGUS] = 0;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = 15;
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = 0;
    VehicleDB[vehicleid][DARBOMASINA] = false;
    VehicleDB[vehicleid][DARBOID] = 0;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
    VehicleDB[vehicleid][VehicleNumReg] = 0;
    VehicleDB[vehicleid][VehicleColor1] = 0;
    VehicleDB[vehicleid][VehicleColor2] = 0;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = 0;
    VehicleDB[vehicleid][AdminMasina] = false;
    VehicleDB[vehicleid][VIPMasina] = false;
    VehicleDB[vehicleid][Kartingas] = true;
}
stock CreateDrivingSchoolVehicle(Model,Float:X,Float:Y,Float:Z,Float:A,Color1,Color2)
{
	new vehicleid = CreateVehicle(Model, X, Y, Z, A, Color1, Color2, 30);
    CreateDynamic3DTextLabel("Mokinys", PILKA, 0,0,0, 15, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleEngineState] = 0;
    VehicleDB[vehicleid][VehicleLights] = 0;
    VehicleDB[vehicleid][VRibotuvas] = 1;
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;

    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
    VehicleDB[vehicleid][TURGUS] = 0;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[Model-400];
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = 1;
    VehicleDB[vehicleid][DARBOMASINA] = false;
    VehicleDB[vehicleid][DARBOID] = 0;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
    VehicleDB[vehicleid][VehicleNumReg] = 0;
    VehicleDB[vehicleid][VehicleColor1] = 0;
    VehicleDB[vehicleid][VehicleColor2] = 0;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = 0;
    VehicleDB[vehicleid][AdminMasina] = false;
    VehicleDB[vehicleid][VIPMasina] = false;
}
stock CreateAdminVehicles(Model,Float:X,Float:Y,Float:Z,Float:A,Color1,Color2)
{
    new vehicleid = CreateVehicle(Model, X, Y, Z, A, Color1, Color2, 300);
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleEngineState] = 0;
    VehicleDB[vehicleid][VehicleLights] = 0;
    VehicleDB[vehicleid][VRibotuvas] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;

    VehicleDB[vehicleid][TURGUS] = 0;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[Model-400];
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = 0;
    VehicleDB[vehicleid][DARBOMASINA] = false;
    VehicleDB[vehicleid][DARBOID] = 0;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
    VehicleDB[vehicleid][VehicleNumReg] = 0;
    VehicleDB[vehicleid][VehicleColor1] = 0;
    VehicleDB[vehicleid][VehicleColor2] = 0;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = 0;
    VehicleDB[vehicleid][AdminMasina] = true;
    VehicleDB[vehicleid][VIPMasina] = false;
}
stock CreateVIPVehicles(Model,Float:X,Float:Y,Float:Z,Float:A,Color1,Color2)
{
    new vehicleid = CreateVehicle(Model, X, Y, Z, A, Color1, Color2, 300);
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleEngineState] = 0;
    VehicleDB[vehicleid][VehicleLights] = 0;
    VehicleDB[vehicleid][VRibotuvas] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;

    VehicleDB[vehicleid][TURGUS] = 0;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[Model-400];
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = 0;
    VehicleDB[vehicleid][DARBOMASINA] = false;
    VehicleDB[vehicleid][DARBOID] = 0;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
    VehicleDB[vehicleid][VehicleNumReg] = 0;
    VehicleDB[vehicleid][VehicleColor1] = 0;
    VehicleDB[vehicleid][VehicleColor2] = 0;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = 0;
    VehicleDB[vehicleid][AdminMasina] = false;
    VehicleDB[vehicleid][VIPMasina] = true;
}
forward SecondsTimer();
public SecondsTimer()
{
	new h,m,s;
	gettime(h, m,s);
    if(s == 0 && EveryMinuteTimerCreated == false)
    {
        EveryMinuteTimerCreated = true;
        SetTimer("EveryMinute", 60000, true);
    }
	new Metai,Menuo,Diena;
	getdate(Metai, Menuo, Diena);
	new LaikrodzioString[30];
	format(LaikrodzioString, 10, "%02d:%02d", h,m);
	TextDrawSetString(Laikrodis, LaikrodzioString);
	format(LaikrodzioString,30,"%d.%02d.%02d", Metai,Menuo,Diena);
	TextDrawSetString(Datarodis, LaikrodzioString);
	new vaistustring[144];
	format(vaistustring,sizeof(vaistustring),"[!] Vaistinëliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautivaistus\nLiko %i vnt.", Gamyklos[trvaistai]);
    UpdateDynamic3DTextLabelText(likovaistulabel, PILKA, vaistustring);
    
    new detaliustring[144];
	format(detaliustring,sizeof(detaliustring),"[!] Detaliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautidetales\nLiko %i vnt.", Gamyklos[detales]);
    UpdateDynamic3DTextLabelText(detaliulabel, PILKA, detaliustring);

	ChatValymoCiklas++;
	if(ChatValymoCiklas == 15)
	{
        foreach(new i : Player)
        {
            if(IsPlayerConnected(i) && (PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1) && PlayerDB[i][AfkState] == false)
            {
                SendClientMessage(i, -1, "");
            }
        }
		ChatValymoCiklas = 0;
	}
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1)
			{
				if(GetPlayerPing(i) > 400 && PlayerDB[i][adminlvl] < 4)
				{
					new stringas[128];
					format(stringas, 128, "[Serveris] %s[ID:%i] iðmestas dël per didelio PING (Max PING:400)", Vardas(i),i);
					SendClientMessageToAll(RAUDONA, stringas);
					SetTimerEx("DelayedKick", 500, false, "d", i);
					continue;
				}

                if(PlayerDB[i][ACLoaded] == true && GetPlayerState(i) != PLAYER_STATE_SPECTATING && PlayerDB[i][PlayerNeedToSpawn] == false)
                {
                    new Float:Health;
                    GetPlayerHealth(i, Health);
                    if(Health < 0)
                    {
                        SetPlayerHealthEx(i,1);
                    }
                    if(Health != PlayerDB[i][PlayerHealthAC] && PlayerDB[i][PlayerHealthACStop] == false)
                    {
                        CallLocalFunction("OnPlayerHealthChange", "df", i,Health);
                    }
                    new Float:Armour;
                    GetPlayerArmour(i, Armour);
                    if(Armour != PlayerDB[i][PlayerArmourAC] && PlayerDB[i][PlayerArmourACStop] == false)
                    {
                        CallLocalFunction("OnPlayerArmourChange", "df", i,Armour);
                    }
                }
				if(GetPlayerMoney(i) != PlayerDB[i][MoneyInPocket])
				{
					ResetPlayerMoney(i);
					GivePlayerMoney(i,PlayerDB[i][MoneyInPocket]);
				}
                if(PlayerDB[i][RodoItarima] == true)
                {
                    if(PlayerDB[i][WantedLevel] < 16)
                    {
                        new string[50];
                        format(string, sizeof(string), "~g~%d ~w~lygis", PlayerDB[i][WantedLevel]);
                        PlayerTextDrawSetString(i, WantedDraw2[i], string);
                    }
                    else
                    {
                        new string[50];
                        format(string, sizeof(string), "~r~%d ~w~lygis", PlayerDB[i][WantedLevel]);
                        PlayerTextDrawSetString(i, WantedDraw2[i], string);
                    }
                }
                if(PlayerDB[i][Patrulis] == true)
                {
                    for(new p = 0;p <= GetPlayerPoolSize();p++)
                    {
                        if(p != i)
                        {
                            if(PlayerDB[p][WantedLevel] == 0)
                            {
                                SetPlayerMarkerForPlayer(i, p, GetPlayerColor(p));
                            }
                            else
                            {
                                SetPlayerMarkerForPlayer(i, p,( GetPlayerColor(p) | MELYNA));
                            }
                        }
                    }
                }
                if(PlayerDB[i][Cmd_S_CD] > 0)
                {
                    PlayerDB[i][Cmd_S_CD]--;
                }
                if(PlayerDB[i][Cmd_V_CD] > 0)
                {
                    PlayerDB[i][Cmd_V_CD]--;
                }
				if(PlayerDB[i][LigoninesLaikas] > 0)
				{
					if(PlayerDB[i][LigoninesLaikas] == 1)
					{
						PlayerDB[i][LigoninesLaikas] = 0;
						GameTextForPlayer(i, "~y~JUS PALEISTAS IS LIGONINES", 3000, 5);
						SetPlayerPos(i, -2666.0913,638.1700,14.4531);
						SetPlayerFacingAngle(i, 173.5226);
						SetPlayerVirtualWorld(i, 0);
						SetPlayerInterior(i, 0);
					}
					else
					{
						PlayerDB[i][LigoninesLaikas]--;
						new string[15];
						format(string, 15, "~y~%.0d", PlayerDB[i][LigoninesLaikas]);
						GameTextForPlayer(i, string, 1000, 5);
					}
                    /*
                    if(PlayerDB[i][LigoninesKlientas] == false)
                    {
                        if(PlayerDB[i][LigoninesLaikas] > 0)
                        {
                            SetPlayerPos(i, -2672.5867,667.0590,244.3842);
                            SetPlayerFacingAngle(i, 100);
                            SetPlayerInterior(i, 1);
                            SetPlayerVirtualWorld(i, 0);
                        }
                    }
                    */
     			}
     			if(PlayerDB[i][LaukiuVaistu] == true)
     			{
     				new String[160];
     				if(PlayerDB[i][VaistuLaikas] > gettime()) // Krovinys dar kraunasi
					{
						format(String, 128, "~g~Minutele...~n~~g~");
						GameTextForPlayer(i, String, 1000, 4);
						TogglePlayerControllable(i, false);
					}
					else
					{
						PlayerDB[i][LaukiuVaistu] = false;
						TogglePlayerControllable(i, true);
						PlayerDB[i][MoneyInPocket] -=5000;
					    PlayerDB[i][TuriuNamoVaistu] +=5;
					    SendClientMessage(i, ZALIA, "• Nusipirkote 5 vnt. medikamentø, dabar pristatykite juos namo ir iðkraukite su komanda /pmedikamentus.");
					    SendClientMessage(i, ZALIA, "• Gydytis galite namie per bûsto valdymà.");
					}
				}
        		new String[160];
        		new query[400];
     			new VehicleID = GetPlayerVehicleID(i);
     			new TrailerID = GetVehicleTrailer(VehicleID);
     			if(PlayerDB[i][Kraunasi] == true)
     			{
					if(PlayerDB[i][KrovimoLaikas] > gettime()) // Krovinys dar kraunasi
					{
						format(String, 128, "~g~Krovinys kraunasi!~n~~g~Liko: ~r~%s", ConvertSeconds(PlayerDB[i][KrovimoLaikas] - gettime()));
						GameTextForPlayer(i, String, 1000, 4);
						TogglePlayerControllable(i, false);
					}
					else// Krovinys pakrautas
					{
						cmd_r(i,"Pasikroviau pilnà priekabà vaistinëliø medikams.");
						VehicleDB[TrailerID][PakrautasSmelis] = true;
						SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
	   					SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
	      				SendClientMessage(i, PILKA, "• Vaistinëles sëkmingai pakrautos.");
						SendClientMessage(i, GELTONA, "• Jûsø uþduotis yra nuveþti vaistinëlës á medicinos centrà, kuris yra paþymëtas raudonu taðku þemëlapyje.");
						PlayerDB[i][Kraunasi] = false;
						TogglePlayerControllable(i, true);
						//stob snimala dengi
						Gamyklos[trvaistai]-=15;
						format(String,sizeof(String),"[!] Vaistinëliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautivaistus\nLiko %i vnt.", Gamyklos[trvaistai]);
    					UpdateDynamic3DTextLabelText(likovaistulabel, PILKA, String);
    					SaveGamykluLikutis();
                        new Years,Months,Days,Hours,Minutes;
			            getdate(Years, Months, Days);
			            gettime(Hours, Minutes);
            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë vaistinëles.');", Vardas(i),Years,Months,Days,Hours,Minutes);
            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
					}
				}
    			if(PlayerDB[i][KraunasiDetales] == true)
     			{
					if(PlayerDB[i][KrovimoLaikas] > gettime()) // Krovinys dar kraunasi
					{
						format(String, 128, "~g~Krovinys kraunasi!~n~~g~Liko: ~r~%s", ConvertSeconds(PlayerDB[i][KrovimoLaikas] - gettime()));
						GameTextForPlayer(i, String, 1000, 4);
						TogglePlayerControllable(i, false);
					}
					else
					{
						cmd_r(i,"• Pasikroviau pilnà priekabà detaliø mechanikams.");
						VehicleDB[TrailerID][PakrautosDetales] = true;
						SetPlayerCheckpoint(i, -1692.0790,-87.7760,3.5686, 3); 
	   					SetPlayerMapIcon(i, 97, -1692.0790,-87.7760,3.56869, 41, -1, MAPICON_GLOBAL); 
	      				SendClientMessage(i, PILKA, "• Detalës sëkmingai pakrautos.");
						SendClientMessage(i, GELTONA, "• Jûsø uþduotis yra nuveþti detales á mechanikø sandelá, kuris yra paþymëtas raudonu taðku þemëlapyje.");
						PlayerDB[i][KraunasiDetales] = false;
						TogglePlayerControllable(i, true);
						//stob snimala dengi
						Gamyklos[detales]-= 15; //paka sto piatnasce
						format(String,sizeof(String),"[!] Detaliø pasikrovimo punktas\nNorëdami pakrauti sunkveþimio priekabà naudokite komandà /krautidetales\nLiko %i vnt.", Gamyklos[detales]);
    					UpdateDynamic3DTextLabelText(detaliulabel, PILKA, String);
    					SaveGamykluLikutis(); //dobavit

						new Years,Months,Days,Hours,Minutes;
			            getdate(Years, Months, Days);
			            gettime(Hours, Minutes);
            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë dëtales.');", Vardas(i),Years,Months,Days,Hours,Minutes);
            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
					}
				}
     			if(PlayerDB[i][KraunuTr] == true)
     			{
					if(PlayerDB[i][KrovimoLaikas] > gettime()) // Krovinys dar kraunasi
					{
						format(String, 128, "~g~Krovinys kraunasi!~n~~g~Liko: ~r~%s", ConvertSeconds(PlayerDB[i][KrovimoLaikas] - gettime()));
						GameTextForPlayer(i, String, 1000, 4);
						TogglePlayerControllable(i, false);
					}
					else// Krovinys pakrautas
					{
					    if(VehicleDB[VehicleID][PakrautaMasina] == 479)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Regina“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Regina“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 500€");
	      					PlayerDB[i][MoneyInPocket] -= 500;

							new Years,Months,Days,Hours,Minutes;
							getdate(Years, Months, Days);
           					gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Regina“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 489)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Rancher“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Rancher“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 590€");
	      					PlayerDB[i][MoneyInPocket] -= 590;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Rancher“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 419)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Esperanto“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Esperanto“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 650€");
	      					PlayerDB[i][MoneyInPocket] -= 650;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Esperanto“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 491)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Virgo“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Virgo“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 680€");
	      					PlayerDB[i][MoneyInPocket] -= 680;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Virgo“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 534)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Remington“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Remington“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 700€");
	      					PlayerDB[i][MoneyInPocket] -= 700;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Remington“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 533)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Feltzer“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Feltzer“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 720€");
	      					PlayerDB[i][MoneyInPocket] -= 720;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Feltzer“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 567)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Savanna“, kurià pristatysiu á pigiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Savanna“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 750€");
	      					PlayerDB[i][MoneyInPocket] -= 750;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Savanna“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 558)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Uranus“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Uranus“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 800€");
	      					PlayerDB[i][MoneyInPocket] -= 800;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Uranus“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 587)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Euros“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Euros“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 830€");
	      					PlayerDB[i][MoneyInPocket] -= 830;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Euros“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 602)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Alpha“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Alpha“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 860€");
	      					PlayerDB[i][MoneyInPocket] -= 860;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Alpha“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 477)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „ZR-350“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „ZR-350“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 900€");
	      					PlayerDB[i][MoneyInPocket] -= 900;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „ZR-350“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 562)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Elegy“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Elegy“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 920€");
	      					PlayerDB[i][MoneyInPocket] -= 920;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Elegy“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 559)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Jester“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Jester“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 930€");
	      					PlayerDB[i][MoneyInPocket] -= 930;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Jester“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 560)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Sultan“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Sultan“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 960€");
	      					PlayerDB[i][MoneyInPocket] -= 960;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Sultan“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 506)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Super-GT“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Super-GT“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 990€");
	      					PlayerDB[i][MoneyInPocket] -= 990;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Super-GT“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
                        if(VehicleDB[VehicleID][PakrautaMasina] == 480)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Comet“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Comet“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1000€");
	      					PlayerDB[i][MoneyInPocket] -= 1000;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Comet“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 589)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Club“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Club“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1050€");
	      					PlayerDB[i][MoneyInPocket] -= 1050;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Club“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 405)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Sentinel“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Sentinel“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1100€");
	      					PlayerDB[i][MoneyInPocket] -= 1100;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Sentinel“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 402)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Buffalo“, kurià pristatysiu á vidutinës klasës maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Buffalo“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1150€");
	      					PlayerDB[i][MoneyInPocket] -= 1150;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Buffalo“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 579)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Huntley“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Huntley“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1200€");
	      					PlayerDB[i][MoneyInPocket] -= 1200;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Huntley“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 429)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Banshee“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Banshee“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1300€");
	      					PlayerDB[i][MoneyInPocket] -= 1300;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Banshee“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 421)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Washington“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Washington“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1400€");
	      					PlayerDB[i][MoneyInPocket] -= 1400;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Washington“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 415)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Cheetah“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Cheetah“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1500€");
	      					PlayerDB[i][MoneyInPocket] -= 1500;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Cheetah“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 603)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Phoenix“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Phoenix“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1600€");
	      					PlayerDB[i][MoneyInPocket] -= 1600;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Phoenix“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
               			if(VehicleDB[VehicleID][PakrautaMasina] == 541)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Bullet“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Bullet“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1700€");
	      					PlayerDB[i][MoneyInPocket] -= 1700;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Bullet“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 451)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Turismo“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Turismo“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 1800€");
	      					PlayerDB[i][MoneyInPocket] -= 1800;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Turismo“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			if(VehicleDB[VehicleID][PakrautaMasina] == 411)
					    {
							cmd_r(i,"Pasikroviau tr. priemonæ „Infernus“, kurià pristatysiu á prabangiø maðinø salonà.");
							//SetPlayerCheckpoint(i, -2649.2520,698.4496,27.9229, 3);
		   					//SetPlayerMapIcon(i, 97, -2649.2520,698.4496,27.9229, 41, -1, MAPICON_GLOBAL);
		      				SendClientMessage(i, PILKA, "• Tr. priemonë „Infernus“ sëkmingai pakrauta.");
	      					SendClientMessage(i, PILKA, "• Uþ kroviná sumokëjote 2000€");
	      					PlayerDB[i][MoneyInPocket] -= 2000;

							new Years,Months,Days,Hours,Minutes;
				            getdate(Years, Months, Days);
				            gettime(Hours, Minutes);
	            			mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Pasikrovë tr. priemonæ „Infernus“.');", Vardas(i),Years,Months,Days,Hours,Minutes);
	            			mysql_function_query(connectionHandle,query,false,"SendQuery","");
            			}
            			PlayerDB[i][KraunuTr] = false;
						TogglePlayerControllable(i, true);
						VehicleDB[VehicleID][VehicleDezesObjectID] = CreateObject(3571, 5000, 5000, 5000, 0, 0, 0);
      					AttachObjectToVehicle(VehicleDB[VehicleID][VehicleDezesObjectID], VehicleID, 0.000000, -3.070022, 1.795998, -0.885001, 15.074999, -90.00000); //Object Model: 19308 |
      					SendClientMessage(i, GELTONA, "• Jûsø uþduotis yra pristatyti ðià tr. priemonæ á maðinø salonà, kuris yra paþymëtas þemelapyje.");
					}
				}
                if(PlayerDB[i][MutedPlayer] > 0)
                {
                    PlayerDB[i][MutedPlayer]--;
                    if(PlayerDB[i][MutedPlayer] == 0)
                    {
                        if(IsValidDynamic3DTextLabel(PlayerDB[i][PlayerMuteLabel]))
                        {
                            DestroyDynamic3DTextLabel(PlayerDB[i][PlayerMuteLabel]);
                        }
                    }
                    else
                    {
                        if(!IsValidDynamic3DTextLabel(PlayerDB[i][PlayerMuteLabel]))
                        {
                            new muteText[24];
                            format(muteText, 24, "Mute: %s", AddSpaces(PlayerDB[i][MutedPlayer]));
                            PlayerDB[i][PlayerMuteLabel] = CreateDynamic3DTextLabelEx(muteText, 0x00FF00FF, 0, 0, 0.8, 10, i, INVALID_VEHICLE_ID, 1);
                        }
                        else
                        {
                            new muteText[24];
                            format(muteText, 24, "Mute: %s", AddSpaces(PlayerDB[i][MutedPlayer]));
                            UpdateDynamic3DTextLabelText(PlayerDB[i][PlayerMuteLabel], 0x00FF00FF, muteText);
                        }
                    }
                }
                if(PlayerDB[i][JailTime] > 0)
                {
                    new string[90];
                    new valandos,minutes,sekundes;
                    sekundes = PlayerDB[i][JailTime];
                    while(sekundes >= 60)
                    {
                        minutes++;
                        sekundes-=60;
                    }
                    while(minutes >= 60)
                    {
                        valandos++;
                        minutes-=60;
                    }
                    format(string, 70, "~n~ ~n~ ~n~ ~n~ ~n~ ~w~LIKO SEDETI %02d:%02d:%02d", valandos,minutes,sekundes);
                    GameTextForPlayer(i, string, 2000, 5);
                    PlayerDB[i][JailTime]--;
                    if(PlayerDB[i][JailTime] == 0)
                    {

                        SetPlayerSkinEx(i,PlayerDB[i][ClothesBeforeJail]);
                        PlayerDB[i][AprangosTipas] = PlayerDB[i][AprangaBeforeJail];
                        SetPlayerPos(i, -1606.1304,716.3344,12.0897);
                        SetPlayerFacingAngle(i, random(290));
                        SetPlayerVirtualWorld(i, 0);
                        SetPlayerInterior(i, 0);
                        PlayerDB[i][BEGA] = 0;
                        PlayerDB[i][BegaLaiko] = 0;
                        SetPlayerColor(i, NematomaPilka);
                    }
                    else
                    {
                        if(IsPlayerInDynamicArea(i, JailISORESZona, 1) == 0 && IsPlayerInDynamicArea(i, JailVidusZona, 1) == 0 && PlayerDB[i][ACLoaded] == true && PlayerDB[i][PlayerSpectatesOther] == false)
                        {
                            TeleportPlayerInToJail(i);
                            format(string, 90, "[ITARIAMAS SUKÈIAVIMAS] %s(%i) pabëgo ið kalëjimo.", Vardas(i),i);
                            foreach(new iv : Player)
                            {
                                if(PlayerDB[iv][adminlvl] > 0 && iv != i)
                                {
                                    SendClientMessage(iv, -1, string);
                                }
                            }
                        }
                    }
                }
				if(GetPVarInt(i, "PreventPickuping") > 0)
				{
					PlusPVarInt(i,"PreventPickuping",-1);
				}
                if(PlayerDB[i][NegaliRukytiKanapiu] > 0)
                {
                    PlayerDB[i][NegaliRukytiKanapiu]--;
                }
                if(PlayerDB[i][NegaliVartotiHeroino] > 0)
                {
                    PlayerDB[i][NegaliVartotiHeroino]--;
                }
                if(PlayerDB[i][NegaliVartotiKokaino] > 0)
                {
                    PlayerDB[i][NegaliVartotiKokaino]--;
                }
                if(GetPVarInt(i, "WaitTillNextSPW") > 0)
                {
                    PlusPVarInt(i,"WaitTillNextSPW",-1);
                }
                if(PlayerDB[i][AfkState] == true)
                {
                    PlayerDB[i][AfkTime]++;
                    if(IsPlayerInDynamicArea(i, AFKZonaRoomArea[0], 1) || IsPlayerInDynamicArea(i, AFKZonaRoomArea[1], 1))
                    {
                        PlayerDB[i][SpentTimeInAFKArea]+=1;
                        if(PlayerDB[i][SpentTimeInAFKArea] % 60 == 0)
                        {
                            PlayerDB[i][MoneyInPocket]+=2;
                            PlayerDB[i][ReceivedXPFromAFK]+=2;
                            PlayerDB[i][ReceivedMoneyFromAFK]+=2;

                            PlusPlayerScore(i,2);
                            if(PlayerDB[i][adminlvl] > 0)
                            {
                                PlayerDB[i][MoneyInPocket]+=1;
                                PlayerDB[i][ReceivedXPFromAFK]+=1;
                                PlayerDB[i][ReceivedMoneyFromAFK]+=1;
                                PlusPlayerScore(i,1);
                            }
                            if(PlayerDB[i][VIP] == 1)
                            {
                                PlayerDB[i][MoneyInPocket]+=1;
                                PlayerDB[i][ReceivedXPFromAFK]+=1;
                                PlayerDB[i][ReceivedMoneyFromAFK]+=1;
                                PlusPlayerScore(i,1);
                            }
                        }
                    }
                    if(PlayerDB[i][AfkTime] % 3 == 0)
                    {
                        ShowPlayerDialog(i, 78, DIALOG_STYLE_MSGBOX, "{AFAFAF}AFK", "Jûs esate AFK bûsenoje. Ar jau norite gráþti á þaidimà?", "Ne", "Taip");
                    }
                    if(PlayerDB[i][AfkTime] == 600)
                    {
                        if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                        {
                            new vid = GetPlayerVehicleID(i);

                            if(VehicleDB[vid][VehicleEngineState] == 1)
                            {
                                SetVehicleEngineState(vid,false);
                                SendClientMessage(i, RAUDONA, "• Sistema uþfikasavo jog buvote AFK reþime transporto priemonëje, todël automobilis uþgeso.");
                            }
                        }
                    }
                    if(PlayerDB[i][AfkTime] == 1)
                    {
                    	new vehicleid = GetPlayerVehicleID(i);
                        if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleDB[vehicleid][TURGUS] == 1)
                        {
							RemovePlayerFromVehicle(i);
       						SendClientMessage(i, RAUDONA, "• Sistema uþfikasavo jog buvote AFK reþime turgaus maðinoje, todël buvote iðlaipintas.");
                        }
                    }
                    if(!IsValidDynamic3DTextLabel(PlayerDB[i][PlayerAfkLabel]))
                    {
                        new AfkText[40];
                        new hourz,minz,sekz;
                        sekz = PlayerDB[i][AfkTime];
                        while(sekz >= 60)
                        {
                            minz+=1;
                            sekz-=60;
                        }
                        while(minz>= 60)
                        {
                            hourz++;
                            minz-=60;
                        }
                        format(AfkText, 40, "AFK: %i val. %i min. %i sek.", hourz,minz,sekz);
                        PlayerDB[i][PlayerAfkLabel] = CreateDynamic3DTextLabelEx(AfkText, 0x00FF00FF, 0, 0, 0.6, 10, i, INVALID_VEHICLE_ID, 1);
                    }
                    else
                    {
                        new AfkText[40];
                        new hourz,minz,sekz;
                        sekz = PlayerDB[i][AfkTime];
                        while(sekz >= 60)
                        {
                            minz+=1;
                            sekz-=60;
                        }
                        while(minz>= 60)
                        {
                            hourz++;
                            minz-=60;
                        }
                        format(AfkText, 40, "AFK: %i val. %i min. %i sek.", hourz,minz,sekz);
                        UpdateDynamic3DTextLabelText(PlayerDB[i][PlayerAfkLabel], 0x00FF00FF, AfkText);
                    }
                }
                else
                {
                    new Float:PlayerPos[3],Float:CPos[3];
                    GetPlayerPos(i, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
                    GetPlayerCameraPos(i, CPos[0], CPos[1], CPos[2]);
                    if((PlayerPos[0] == PlayerDB[i][PositionX] && PlayerPos[1] == PlayerDB[i][PositionY] && PlayerDB[i][PositionZ]) || (PlayerDB[i][CameraPosX] == CPos[0] && PlayerDB[i][CameraPosY] == CPos[1] && PlayerDB[i][CameraPosZ] == CPos[2]))
                    {
                        PlayerDB[i][AfkPoints]++;
                    }
                    else if(PlayerDB[i][LastTimePressedKey]+60 <= gettime())
                    {
                        PlayerDB[i][AfkPoints]+=1;
                    }
                    else
                    {
                        PlayerDB[i][PositionX] = PlayerPos[0];
                        PlayerDB[i][PositionY] = PlayerPos[1];
                        PlayerDB[i][PositionZ] = PlayerPos[2];
                        PlayerDB[i][CameraPosX] = CPos[0];
                        PlayerDB[i][CameraPosY] = CPos[1];
                        PlayerDB[i][CameraPosZ] = CPos[2];
                        PlayerDB[i][AfkPoints] = 0;
                    }
                    if(PlayerDB[i][AfkPoints] >= 80)
                    {
                        PlayerDB[i][AfkState] = true;
                        ShowPlayerDialog(i, 78, DIALOG_STYLE_MSGBOX, "{AFAFAF}AFK", "Jûs esate AFK bûsenoje. Ar jau norite gráþti á þaidimà?", "Ne", "Taip");
                    }
                }
                if(PlayerDB[i][VIP] == 1 && PlayerDB[i][VIPLaikoPabaiga] <= gettime())
                {
                    PlayerDB[i][VIP] = 0;
                    PlayerDB[i][VIPLaikoPabaiga] = 0;
                    SendClientMessage(i, -1, "");
                    SendClientMessage(i, RAUDONA, "• Jûsø VIP statuso galiojimo laikas baigësi. VIP statusà galite ásigyti uþ 100 kreditø su komanda /kreditai.");
                    SendClientMessage(i, -1, "");
                }
                if(PlayerDB[i][adminlvl] > 0 && PlayerDB[i][AdminLaikoPabaiga] <= gettime())
                {
                    PlayerDB[i][adminlvl] = 0;
                    PlayerDB[i][AdminLaikoPabaiga] = 0;
                    SendClientMessage(i, -1, "");
                    SendClientMessage(i, RAUDONA, "• Jûsø Administratoriaus statuso galiojimo laikas baigësi. Norëdami uþsisakyti ðá statusà vël naudokite komanda /valiuta.");
                    SendClientMessage(i, -1, "");
                    SetPlayerColor(i, NematomaPilka);
                }
                if(PlayerDB[i][ImamiPinigai] == true)
                {
                    new string[30];
                    new Float:Atstumas = (GetPlayerDistanceFromPoint(i, PlayerDB[i][PaslauguAtskaitosX], PlayerDB[i][PaslauguAtskaitosY], PlayerDB[i][PaslauguAtskaitosZ]) / 1000);
                    format(string, 30, "NUTOLTA %0.001f KM", Atstumas);
                    TextDrawSetString(Taksometras4[i], string);
                    new KelionesKaina;
                    KelionesKaina = floatround(Atstumas * TaksiFSettings[TaksiFKiloKaina], floatround_ceil);
                    format(string, 30, "SUMA: %dEUR", KelionesKaina);
                    TextDrawSetString(Taksometras5[i], string);
                }
                else if(PlayerDB[i][SekimoBusena] == true)
                {
                    if(IsPlayerConnected(PlayerDB[i][SekimoTaikinys]))
                    {
                        PlayerTextDrawHide(i, SekimasTD1[i]);
                        PlayerTextDrawHide(i, SekimasTD2[i]);
                        PlayerTextDrawHide(i, SekimasTD3[i]);
                        PlayerTextDrawHide(i, SekimasTD4[i]);
                        PlayerTextDrawHide(i, SekimasTD5[i]);
                        PlayerTextDrawHide(i, SekimasTD6[i]);
                        PlayerTextDrawHide(i, SekimasTD7[i]);

                        new id = PlayerDB[i][SekimoTaikinys];
                        new string[60];
                        format(string, 60, "%s (%i)", Vardas(id),id);
                        PlayerTextDrawSetString(i,SekimasTD4[i], string);
                        new Float:Cords[3];
                        new PlayerInterior = GetPlayerInterior(id);
                        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
                        {
                            new PlayerVW = GetPlayerVirtualWorld(id);
                            if(PlayerVW >= 3)
                            {
                                if(HouseInfo[PlayerVW-3][HouseID] >= 0)
                                {
                                    Cords[0] = HouseInfo[PlayerVW-3][HousePosX];
                                    Cords[1] = HouseInfo[PlayerVW-3][HousePosY];
                                    Cords[2] = HouseInfo[PlayerVW-3][HousePosZ];
                                }
                            }
                            else
                            {
                                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                            }
                        }
                        else
                        {
                            GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                        }
                        new Float:Atstumas = (GetPlayerDistanceFromPoint(i,Cords[0],Cords[1],Cords[2]) / 1000);

                        format(string,60,"- Yra uz %0.2f KM nuo jusu",Atstumas);
                        PlayerTextDrawSetString(i,SekimasTD5[i],string);

                        new Float:TeleportoNuotolis[9];
                        TeleportoNuotolis[0] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -2160.6648,259.0298,35.3203); // /tpsf
                        TeleportoNuotolis[1] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], 384.0842,-1806.2002,7.8303); // /tpls
                        TeleportoNuotolis[2] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], 2025.4919,1912.2144,12.3028); // /tplv
                        TeleportoNuotolis[3] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -462.9702,2053.1118,61.2009); // /tpdm
                        TeleportoNuotolis[4] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -1683.2429,-191.3140,14.1440); // /tpdrag
                        TeleportoNuotolis[5] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -2415.3484,-590.9892,132.6484); // /tpdrift
                        TeleportoNuotolis[6] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -308.2501,1538.6022,75.5625); // /tpdrift2
                        TeleportoNuotolis[7] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], -2333.1250,-1624.9332,483.7070); // /tpkalnas
                        TeleportoNuotolis[8] = GetDistanceBTWTwoPoints(Cords[0],Cords[1],Cords[2], 7.7958,1596.7192,27.9184); // /tpbull

                        new Float:MaziausiasAtstumas = 9000000000;
                        for(new TelePort = 0;TelePort < 9;TelePort++)
                        {
                            if(MaziausiasAtstumas > TeleportoNuotolis[TelePort])
                            {
                                MaziausiasAtstumas = TeleportoNuotolis[TelePort];
                            }
                        }
                        if(MaziausiasAtstumas == TeleportoNuotolis[0])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpsf");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[1])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpls");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[2])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tplv");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[3])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpdm");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[4])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpdrag");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[5])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpdrift");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[6])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpdrift2");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[7])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpkalnas");
                        }
                        else if(MaziausiasAtstumas == TeleportoNuotolis[8])
                        {
                            PlayerTextDrawSetString(i,SekimasTD7[i],"/tpbull");
                        }
                        PlayerTextDrawShow(i, SekimasTD1[i]);
                        PlayerTextDrawShow(i, SekimasTD2[i]);
                        PlayerTextDrawShow(i, SekimasTD3[i]);
                        PlayerTextDrawShow(i, SekimasTD4[i]);
                        PlayerTextDrawShow(i, SekimasTD5[i]);
                        PlayerTextDrawShow(i, SekimasTD6[i]);
                        PlayerTextDrawShow(i, SekimasTD7[i]);

                        SetPlayerCheckpoint(i, Cords[0],Cords[1],Cords[2], 1.5);
                        SetPlayerMapIcon(i, 90, Cords[0], Cords[1], Cords[2], 41, -1, MAPICON_GLOBAL);
                        if(Atstumas <= 0.01)
                        {
                            new TNumeris;
                            switch(PlayerDB[i][Job])
                            {
                                case 1:
                                {
                                    TNumeris = 0;
                                }
                                case 2:
                                {
                                    TNumeris = 1;
                                }
                                case 3..4:
                                {
                                    TNumeris = 2;
                                }
                                case 5:
                                {
                                    TNumeris = 3;
                                }
                                case 7..8:
                                {
                                    TNumeris = 4;
                                }
                                case 10:
                                {
                                    TNumeris = 5;
                                }
                                case 16..17:
                                {
                                    TNumeris = 6;
                                }
                                case 18:
                                {
                                    TNumeris = 7;
                                }
                                case 19:
                                {
                                    TNumeris = 8;
                                }
                                default:
                                {
                                    TNumeris = -1;
                                }
                            }
                            if(TNumeris >= 0)
                            {
                                new targetID = PlayerDB[i][SekimoTaikinys];
                                new INumeris = CheckIsPlayerCallingT(targetID,TNumeris);
                                if(INumeris > -1)
                                {
                                    if(Iskvietimas[INumeris][VaziuojantisID] == i)
                                    {
                                        new str[128];
                                        new vals,mins,seks;
                                        seks = gettime() - Iskvietimas[INumeris][IskvietimoLaikas];
                                        while(seks >= 60)
                                        {
                                            seks-=60;
                                            mins++;
                                        }
                                        while(mins >= 60)
                                        {
                                            mins-=60;
                                            vals++;
                                        }
                                        PlayerDB[i][AtvykimaiTotal]+=1;
                                        format(str, 128, "[racija] Darbuotojas %s: atvykau pas klientà %s per %02d val, %02d min, %02dsek.", Vardas(i),Vardas(targetID),vals,mins,seks);
                                        switch(TNumeris)
                                        {
                                            case 0:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 1)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 1:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 2)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 2:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 4)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 3:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 5)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 5:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 7 || PlayerDB[i][Job] == 8)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 4:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 10)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 7:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 16 || PlayerDB[i][Job] == 17)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 8:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 18)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                            case 6:
                                            {
                                                for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
                                                {
                                                    if(PlayerDB[ix][Job] == 19)
                                                    {
                                                        SendClientMessage(ix, 0x0099CCFF, str);
                                                    }
                                                }
                                            }
                                        }
                                        format(str,128,"[IÐKVIETIMAS]: {ffca16}Iðkviestos firmos darbuotojas %s atvyko pas jus per %02d val, %02dmin, %02dsek.",Vardas(i),vals,mins,seks);
                                        SendClientMessage(targetID,0xf99c00FF, str);
                                        PlayerDB[i][SekimoBusena] = false;
                                        DestroySekimoTD(i);
                                        RemovePlayerMapIcon(i, 90);
                                        DisablePlayerCheckpoint(i);
                                        DeleteIskvietimas(INumeris);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        new TNumeris;
                        switch(PlayerDB[i][Job])
                        {
                            case 1:
                            {
                                TNumeris = 0;
                            }
                            case 2:
                            {
                                TNumeris = 1;
                            }
                            case 3..4:
                            {
                                TNumeris = 2;
                            }
                            case 5:
                            {
                                TNumeris = 3;
                            }
                            case 7..8:
                            {
                                TNumeris = 4;
                            }
                            case 10:
                            {
                                TNumeris = 5;
                            }
                            case 16..17:
                            {
                                TNumeris = 6;
                            }
                            case 18:
                            {
                                TNumeris = 7;
                            }
                            case 19:
                            {
                                TNumeris = 8;
                            }
                            default:
                            {
                                TNumeris = -1;
                            }
                        }
                        if(TNumeris >= 0)
                        {
                            new targetID = PlayerDB[i][SekimoTaikinys];
                            new INumeris = CheckIsPlayerCallingT(targetID,TNumeris);
                            if(INumeris > -1)
                            {
                                if(Iskvietimas[INumeris][VaziuojantisID] == i)
                                {
                                    new str[128];
                                    format(str,128,"[IÐKVIETIMAS]: {ffca16}Iðkvietëjas %s atsijungë, todël iðkvietimas nutrauktas.",Iskvietimas[INumeris][KvieciantisVP]);
                                    SendClientMessage(i, 0xffca16FF, str);
                                    DeleteIskvietimas(INumeris);
                                }
                                else
                                {
                                    ErrorMsg(i,"• Sekamas þaidëjas atsijungë. Sekimas nutrauktas.");
                                }
                            }
                            else
                            {
                                ErrorMsg(i,"• Sekamas þaidëjas atsijungë. Sekimas nutrauktas.");
                            }
                        }
                        PlayerDB[i][SekimoBusena] = false;
                        DestroySekimoTD(i);
                        RemovePlayerMapIcon(i, 90);
                        DisablePlayerCheckpoint(i);
                    }
                }
			}
		}
	}
    foreach(new i : Player)
    {
        if(PlayerDB[i][PlayerSpectatesOther] == true)
        {
            if(IsPlayerConnected(PlayerDB[i][PlayerSpectatingTarget]))
            {
                new id = PlayerDB[i][PlayerSpectatingTarget];
                if(GetPlayerInterior(id) != GetPlayerInterior(i))
                {
                    SetPlayerInterior(i, GetPlayerInterior(id));
                }
                if(GetPlayerVirtualWorld(id) != GetPlayerVirtualWorld(i))
                {
                    SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(id));
                }
                if(IsPlayerInAnyVehicle(id) && PlayerDB[i][PlayerSpectatingAtPed] == true)
                {
                    PlayerSpectateVehicle(i, GetPlayerVehicleID(id));
                    PlayerDB[i][PlayerSpectatingAtPed] = false;
                    PlayerDB[i][PlayerSpectatingAtVehicle] = true;
                }
                else if(!IsPlayerInAnyVehicle(id) && PlayerDB[i][PlayerSpectatingAtVehicle] == true)
                {
                    PlayerSpectatePlayer(i, id);
                    PlayerDB[i][PlayerSpectatingAtPed] = true;
                    PlayerDB[i][PlayerSpectatingAtVehicle] = false;
                }
            }
            else
            {

                PlayerDB[i][PlayerSpectatesOther] = false;
                ErrorMsg(i,"• Jûsø stebëtas þaidëjas atsijungë.");
                SetPlayerVirtualWorld(i, PlayerDB[i][BeforeSpectatingPlayerWorld]);
                SetPlayerInterior(i, PlayerDB[i][BeforeSpectatingPlayerInterior]);
                SetSpawnInfoEx(i, NO_TEAM, PlayerDB[i][BeforeSpectatingPlayerSkin], PlayerDB[i][BeforeSpectatingX], PlayerDB[i][BeforeSpectatingY], PlayerDB[i][BeforeSpectatingZ], 0, 0, 0, 0, 0, 0, 0);
                SpawnPlayer(i);
            }
        }
    }
	return 1;
}
stock SaveJobsFunds()
{
	new string[300];
	mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '1';", DarboInformacija[1][DarboFondas]);
	mysql_function_query(connectionHandle,string,false,"SendQuery","");
	mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '2';", DarboInformacija[2][DarboFondas]);
	mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '4';", DarboInformacija[4][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '5';", DarboInformacija[5][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '6';", DarboInformacija[6][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '7';", DarboInformacija[7][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '8';", DarboInformacija[8][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '9';", DarboInformacija[9][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '10';", DarboInformacija[10][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '11';", DarboInformacija[11][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
    mysql_format(connectionHandle, string, 300, "UPDATE `darbuinformacija` SET `DarboFondas` = '%i' WHERE `DarboID` = '21';", DarboInformacija[21][DarboFondas]);
    mysql_function_query(connectionHandle,string,false,"SendQuery","");
}
public OnGameModeExit()
{
	SaveJobsFunds();
    SaveVehiclesInStocks();
    SavePavaduotojai();
	foreach(new i : Player)
	{
		if(PlayerDB[i][Loaded] == 1)
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				SetVehicleVelocity(GetPlayerVehicleID(i), 0, 0, 0);
			}
			SavePlayerData(i);
            if(PlayerDB[i][GasStationTimerRunsOrl] == true)
            {
                KillTimer(PlayerDB[i][GasStationTimerOrl]);
                PlayerDB[i][GasStationTimerRunsOrl] = false;
            }
			if(PlayerDB[i][PlayedMinuteTimer] > 0)
			{
				KillTimer(PlayerDB[i][PlayedMinuteTimer]);
				PlayerDB[i][PlayedMinuteTimer] = -1;
			}
			if(PlayerDB[i][PlacedKliutis1] == true)
			{
				DestroyDynamicObject(PlayerDB[i][Kliutis1Object]);
				DestroyDynamic3DTextLabel(PlayerDB[i][Kliutis1ObjectLabel]);
				PlayerDB[i][PlacedKliutis1] = false;
			}
			if(PlayerDB[i][PlacedKliutis2] == true)
			{
				DestroyDynamicObject(PlayerDB[i][Kliutis2Object]);
				DestroyDynamic3DTextLabel(PlayerDB[i][Kliutis2ObjectLabel]);
				PlayerDB[i][PlacedKliutis2] = false;
			}
			if(PlayerDB[i][OwnedVehicle1] > 0)
			{
				SaveOwnedVehicle(PlayerDB[i][OwnedVehicle1]);
				DestroyVehicle(PlayerDB[i][OwnedVehicle1]);
			}
			if(PlayerDB[i][OwnedVehicle2] > 0)
			{
				SaveOwnedVehicle(PlayerDB[i][OwnedVehicle2]);
				DestroyVehicle(PlayerDB[i][OwnedVehicle2]);
			}
		}
	}
    SaveLuccheseSettings();
    SaveGenoveseSettings();
	mysql_close(connectionHandle);
	return 1;
}
stock SaveVehiclesInStocks()
{
    new query[100];
    for(new i = 400;i< 612;i++)
    {
        mysql_format(connectionHandle, query, 100, "UPDATE `masinuturguskiekiai` SET `Kiekis` = '%i' WHERE `ModelID` = '%i' LIMIT 1;", SalesVehiclesInStock[i-400],i);
        mysql_function_query(connectionHandle,query,false,"SendQuery","");
    }
    print("* SaveVehiclesInStocks completed");
}
stock ConvertSeconds(sekundes) // by Johurt
{
	new str[37], msg[10], minutes, valandos, dienos;
	while(sekundes > 59) { sekundes -= 60; minutes ++; }
	while(minutes > 59) { minutes -= 60; valandos ++; }
	while(valandos > 23) { valandos -= 24; dienos ++; }
	if(dienos > 0) { format(msg, 7, "%d d. ", dienos); strcat(str, msg); }
	if(valandos > 0) { format(msg, 10, "%d val. ", valandos); strcat(str, msg); }
	if(minutes > 0) { format(msg, 10, "%d min. ", minutes); strcat(str, msg); }
	if(sekundes > 0)
	{
		if(minutes < 1 && valandos < 1 && dienos < 1)
		{
			format(msg, 9, "%d sek.", sekundes);
			strcat(str, msg);
		}
		else
		{
			format(msg, 9, "%d sek.", sekundes);
			strcat(str, msg);
		}
	}

	return str;
}
public OnPlayerRequestClass(playerid, classid)
{
	if(PlayerDB[playerid][LoggedIn] == 0)
	{
        SetPlayerCameraPos(playerid, -2627.03, -189.85, 149.24);
        SetPlayerCameraLookAt(playerid, -2626.10, -194.76, 149.52);
        new query[200];
        new PlayerIP[16];
        GetPlayerIp(playerid, PlayerIP, 16);
        mysql_format(connectionHandle, query, 200, "SELECT NULL FROM `ipbans` WHERE `IP-Adress` = '%e' LIMIT 1;", PlayerIP);
        mysql_function_query(connectionHandle,query,true,"OnPlayerTryConnect","d",playerid);
		return 0;
	}
    else
    {
        SpawnPlayer(playerid);
    }
	return 1;
}
forward OnPlayerTryConnect(playerid);
public OnPlayerTryConnect(playerid)
{
    if(cache_get_row_count() == 1)
    {
        new string[128];
        new PlayerIP[16];
        GetPlayerIp(playerid, PlayerIP, 16);
        format(string, 128, "Siûskite SMS þinutæ su tekstu: {E39300}SANUNBANIP %s {AFAFAF}numeriu 1398,kaina 1.5€ (5.19Lt)", PlayerIP);
        SendClientMessage(playerid, PILKA, "Jûsø IP adresas uþdraustas.");
        SendClientMessage(playerid, PILKA, string);
        SendClientMessage(playerid, PILKA, "Iðsiuntus ðià þinutæ jums bus nuimtas IP uþdraudimas, paskyra vis dar bus uþdrausta.");
        SetTimerEx("DelayedKick", 1000, false, "d", playerid);
    }
    else
    {
        new MYSQLAccountChecking[100];
        mysql_format(connectionHandle, MYSQLAccountChecking, 100, "SELECT `id`,`Skin`,`IPApsauga`,`IPAddress` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
        mysql_function_query(connectionHandle,MYSQLAccountChecking,true,"OnPlayerAccountCheck","d",playerid);
    }
}
forward DelayedKick(playerid);
public DelayedKick(playerid)
{
	Kick(playerid);
	return 1;
}
public OnPlayerConnect(playerid)
{
    playersOnline++;
	PlayerDB[playerid][LoggedIn] = 0;
	g_fSpeedCap[ playerid ] = 0.43;
    switch(random(5))
    {
        case 0:
        {
            SetPlayerCameraPos(playerid, -1458.690673, 505.030639, 32.330989);
            SetPlayerCameraLookAt(playerid, -1454.844238, 508.215301, 32.081092);
        }
        case 1:
        {
            SetPlayerCameraPos(playerid, -1099.791137, 1278.831909, 57.090385);
            SetPlayerCameraLookAt(playerid, -1104.453613, 1277.105346, 56.560653);
        }
        case 2:
        {
            SetPlayerCameraPos(playerid, -2216.839355, -370.626434, 78.744201);
            SetPlayerCameraLookAt(playerid, -2212.912597, -373.341400, 77.258056);
        }

        case 3:
        {
            SetPlayerCameraPos(playerid, -2566.790283, -428.231536, 104.494232);
            SetPlayerCameraLookAt(playerid, -2568.155517, -423.605895, 103.175392);
        }
        case 4:
        {
            SetPlayerCameraPos(playerid, -1584.627929, -471.819610, 43.355117);
            SetPlayerCameraLookAt(playerid, -1581.162963, -468.224456, 43.092475);
        }
    }

	SetPlayerColor(playerid, (PILKA & 0xFFFFFF00));
    ClearAndResetPlayerData(playerid);
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"RAPPING");
    PreloadAnimLib(playerid,"SHOP");
    PreloadAnimLib(playerid,"BEACH");
    PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"CRACK");
    PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"COP_AMBIENT");
    PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"PED" );
	if(!IsValidNickName(Vardas(playerid)))
	{
		SendClientMessage(playerid, 0xE3B924FF,"• [Serveris]: Jûsø slapyvardis netinkamas dël: (didþiosios raidës arba skaièiai pavardës viduryje)");
		SendClientMessage(playerid, 0xE3B924FF,"• [Serveris]: Teisinga slapyvardþio forma yra:");
		SendClientMessage(playerid, 0xE3B924FF,"• [Serveris]: Vardas_Pavarde");
		SetTimerEx("DelayedKick", 500, false, "d", playerid);
		return 1;
	}
    SendClientMessage(playerid, 0x47AB3FFF, "- {ffffff}» Sveikas atvykæs á {7bae39}www.San-Andreas.LT {ffffff}serverá. «");
    SendClientMessage(playerid, -1, "");
    SendClientMessage(playerid, 0x47AB3FFF, "- {ffffff}» Linkime gerai praleisti laikà ir pabûti su draugais. «");
    new info[106];
    format(info, 106, "- {ffffff}» Ðiuo metu serveryje þaidþia: {7bae39}%i{ffffff}/{7bae39}%i {ffffff}þaidëjai. «", playersOnline,MAX_PLAYERS);
    SendClientMessage(playerid, 0x47AB3FFF, info);
    SendClientMessage(playerid, 0x47AB3FFF, "- {ffffff}» Prireikus pagalbos, kreipkitës /admin [ kokia pagalba reikalinga ]. «");
    SendClientMessage(playerid, 0x47AB3FFF, "- {ffffff}» Sëkmës þaidime, jums linki {7bae39}San-Andreas.LT {ffffff}administracija! «");
    GangZoneShowForPlayer(playerid,LuccheseGangZone, 0x20BF1AAA);
    GangZoneShowForPlayer(playerid,GenoveseGangZone, 0x20BF1AAA);

    if(GenoveseGangZoneU == true)
    {
        GangZoneFlashForPlayer(playerid, GenoveseGangZone, 0xFF0000AA);
    }
    if(LuccheseGangZoneU == true)
    {
        GangZoneFlashForPlayer(playerid, LuccheseGangZone, 0xFF0000AA);
    }

    TextDrawShowForPlayer(playerid, WaterMarkLogo[0]);
    TextDrawShowForPlayer(playerid, WaterMarkLogo[1]);
    TextDrawShowForPlayer(playerid, WaterMarkLogo[2]);

    Alkis[playerid][0] = CreatePlayerTextDraw(playerid,610.000000, 137.000000, "BG");
    PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][0], 255);
    PlayerTextDrawFont(playerid,Alkis[playerid][0], 1);
    PlayerTextDrawLetterSize(playerid,Alkis[playerid][0], 0.000000, 0.099999);
    PlayerTextDrawColor(playerid,Alkis[playerid][0], -1);
    PlayerTextDrawSetOutline(playerid,Alkis[playerid][0], 0);
    PlayerTextDrawSetProportional(playerid,Alkis[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid,Alkis[playerid][0], 1);
    PlayerTextDrawUseBox(playerid,Alkis[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid,Alkis[playerid][0], 255);
    PlayerTextDrawTextSize(playerid,Alkis[playerid][0], 496.000000, 0.000000);
    PlayerTextDrawSetSelectable(playerid,Alkis[playerid][0], 0);

    Alkis[playerid][1] = CreatePlayerTextDraw(playerid,608.500000, 138.500000, "BG");
    PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][1], 255);
    PlayerTextDrawFont(playerid,Alkis[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid,Alkis[playerid][1], 0.000000, -0.200000);
    PlayerTextDrawColor(playerid,Alkis[playerid][1], -1);
    PlayerTextDrawSetOutline(playerid,Alkis[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid,Alkis[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid,Alkis[playerid][1], 1);
    PlayerTextDrawUseBox(playerid,Alkis[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid,Alkis[playerid][1], -238809227);
    PlayerTextDrawTextSize(playerid,Alkis[playerid][1], 497.000000, 0.000000);
    PlayerTextDrawSetSelectable(playerid,Alkis[playerid][1], 0);

    Alkis[playerid][2] = CreatePlayerTextDraw(playerid,500.500000, 138.500000, "BAR");
    PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][2], 255);
    PlayerTextDrawFont(playerid,Alkis[playerid][2], 1);
    PlayerTextDrawLetterSize(playerid,Alkis[playerid][2], 0.000000, -0.200000);
    PlayerTextDrawColor(playerid,Alkis[playerid][2], -1);
    PlayerTextDrawSetOutline(playerid,Alkis[playerid][2], 0);
    PlayerTextDrawSetProportional(playerid,Alkis[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid,Alkis[playerid][2], 1);
    PlayerTextDrawUseBox(playerid,Alkis[playerid][2], 1);
    PlayerTextDrawBoxColor(playerid,Alkis[playerid][2], -238809089);
    PlayerTextDrawTextSize(playerid,Alkis[playerid][2], 500.500000, 0.000000);
    PlayerTextDrawSetSelectable(playerid,Alkis[playerid][2], 0);

    Alkis[playerid][3] = CreatePlayerTextDraw(playerid,510.000000, 124.500000, "Alkis:");
    PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][3], 255);
    PlayerTextDrawFont(playerid,Alkis[playerid][3], 2);
    PlayerTextDrawLetterSize(playerid,Alkis[playerid][3], 0.200000, 1.000000);
    PlayerTextDrawColor(playerid,Alkis[playerid][3], -1);
    PlayerTextDrawSetOutline(playerid,Alkis[playerid][3], 1);
    PlayerTextDrawSetProportional(playerid,Alkis[playerid][3], 1);
    PlayerTextDrawSetSelectable(playerid,Alkis[playerid][3], 0);

    Alkis[playerid][4] = CreatePlayerTextDraw(playerid,498.000000, 124.000000, "hud:radar_burgerShot");
    PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][4], 255);
    PlayerTextDrawFont(playerid,Alkis[playerid][4], 4);
    PlayerTextDrawLetterSize(playerid,Alkis[playerid][4], 0.500000, 1.000000);
    PlayerTextDrawColor(playerid,Alkis[playerid][4], -1);
    PlayerTextDrawSetOutline(playerid,Alkis[playerid][4], 0);
    PlayerTextDrawSetProportional(playerid,Alkis[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid,Alkis[playerid][4], 1);
    PlayerTextDrawUseBox(playerid,Alkis[playerid][4], 1);
    PlayerTextDrawBoxColor(playerid,Alkis[playerid][4], 255);
    PlayerTextDrawTextSize(playerid,Alkis[playerid][4], 10.000000, 10.000000);
    PlayerTextDrawSetSelectable(playerid,Alkis[playerid][4], 0);



    SpeedoPlayerTD [ playerid ] [ 0 ] = CreatePlayerTextDraw(playerid, 432.000000, 371.500000, "~w~pavadinimas: ~p~infernus~n~~w~bukle: ~g~75.2%~n~~w~Degalai: ~y~75L~n~~w~Radijas: ~g~ZIP FM~n~~w~Dirzas: ~r~atsegtas");
    PlayerTextDrawBackgroundColor(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 255);
    PlayerTextDrawFont(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 2);
    PlayerTextDrawLetterSize(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 0.170000, 1.000000);
    PlayerTextDrawColor(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], -1);
    PlayerTextDrawSetOutline(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 1);
    PlayerTextDrawSetProportional(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 1);
    PlayerTextDrawSetSelectable(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], 0);

    SpeedoPlayerTD [ playerid ] [ 1 ] = CreatePlayerTextDraw(playerid, 427.500000, 430.000000, "progress");
    PlayerTextDrawBackgroundColor(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 255);
    PlayerTextDrawFont(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 1);
    PlayerTextDrawLetterSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 0.000000, 1.000000);
    PlayerTextDrawColor(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], -1);
    PlayerTextDrawSetOutline(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 0);
    PlayerTextDrawSetProportional(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 1);
    PlayerTextDrawSetShadow(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 1);
    PlayerTextDrawUseBox(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 1);
    PlayerTextDrawBoxColor(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 1758419829);
    PlayerTextDrawTextSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 601.000000, 0.000000);
    PlayerTextDrawSetSelectable(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 0);

    SpeedoPlayerTD [ playerid ] [ 2 ] = CreatePlayerTextDraw(playerid, 531.000000, 430.000000, "DEGALAI: 64L/80L");
    PlayerTextDrawAlignment(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 2);
    PlayerTextDrawBackgroundColor(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 255);
    PlayerTextDrawFont(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 2);
    PlayerTextDrawLetterSize(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 0.139999, 0.899999);
    PlayerTextDrawColor(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], -1);
    PlayerTextDrawSetOutline(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 0);
    PlayerTextDrawSetProportional(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 1);
    PlayerTextDrawSetShadow(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 0);
    PlayerTextDrawSetSelectable(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], 0);

    SpeedoPlayerTD [ playerid ] [ 3 ] = CreatePlayerTextDraw(playerid, 603.000000, 383.000000, "259");
    PlayerTextDrawAlignment(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 2);
    PlayerTextDrawBackgroundColor(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 255);
    PlayerTextDrawFont(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 3);
    PlayerTextDrawLetterSize(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 0.639998, 2.299998);
    PlayerTextDrawColor(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], -1);
    PlayerTextDrawSetOutline(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 1);
    PlayerTextDrawSetProportional(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 1);
    PlayerTextDrawSetSelectable(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], 0);
    TimerForGas [ playerid ] = SetTimerEx("VehicleGasTimer", 60000, 1, "i", playerid);
	return 1;
}
forward OnCheckHowManyAcc(playerid);
public OnCheckHowManyAcc(playerid)
{
    if(cache_get_row_count() < 3)
    {
        new info[400];
        format(info, 400, "{ffffff}Sveikas(-a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n", Vardas(playerid));
        strcat(info,"{ffffff}Mûsø serverio administracija dþiaugiasi jog pasirinkote bûtent mus, manome jog mûsø serveryje apsiprasite, ir jums patiks èia þaisti !\n");
        strcat(info,"{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá privalësite naudoti kiekvienà kartà {7bae39}prisijungiant{ffffff}.");
        ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "{AFAFAF}Registracija", info, "Registruotis", "Iðeiti");
    }
    else
    {
        SendClientMessage(playerid,0xee5555FF,"» Negalite priregistruoti naujo vartotojo, nes ant ðio IP adreso yra uþregistruoti 3 vartotojai.");
        SendClientMessage(playerid, 0xee5555FF,"» {ffffff}Dël platesnës informacijos kreiptis el.paðtu: {ee5555}info@san-andreas.lt.");
        SetTimerEx("DelayedKick", 500, false, "d", playerid);
    }
    return 1;
}
forward OnPlayerAccountCheck(playerid);
public OnPlayerAccountCheck(playerid)
{
    switch(random(5))
    {
        case 0:
        {
            SetPlayerCameraPos(playerid, -1458.690673, 505.030639, 32.330989);
            SetPlayerCameraLookAt(playerid, -1454.844238, 508.215301, 32.081092);
        }
        case 1:
        {
            SetPlayerCameraPos(playerid, -1099.791137, 1278.831909, 57.090385);
            SetPlayerCameraLookAt(playerid, -1104.453613, 1277.105346, 56.560653);
        }
        case 2:
        {
            SetPlayerCameraPos(playerid, -2216.839355, -370.626434, 78.744201);
            SetPlayerCameraLookAt(playerid, -2212.912597, -373.341400, 77.258056);
        }

        case 3:
        {
            SetPlayerCameraPos(playerid, -2566.790283, -428.231536, 104.494232);
            SetPlayerCameraLookAt(playerid, -2568.155517, -423.605895, 103.175392);
        }
        case 4:
        {
            SetPlayerCameraPos(playerid, -1584.627929, -471.819610, 43.355117);
            SetPlayerCameraLookAt(playerid, -1581.162963, -468.224456, 43.092475);
        }
    }
	if(cache_get_row_count(connectionHandle) == 0)
	{
        new QueryString[128];
        new IPT[20];
        GetPlayerIp(playerid, IPT, 20);
        mysql_format(connectionHandle, QueryString, 128, "SELECT NULL FROM `players` WHERE `IPAddress` = '%e' LIMIT 3;", IPT);

        mysql_function_query( connectionHandle, QueryString, true, "OnCheckHowManyAcc", "d", playerid);
	}
	else
	{
		PlayerDB[playerid][SQLID] = cache_get_row_int(0, 0,connectionHandle);
		PlayerDB[playerid][LogInSkin] = cache_get_row_int(0, 1, connectionHandle);

        if(cache_get_row_int(0, 2) == 1)
        {
            new trIP[24];
            new tmpIP[24];
            cache_get_row(0, 3, trIP);
            GetPlayerIp(playerid, tmpIP, 24);
            if(strcmp(trIP, tmpIP, true) != 0)
            {
                ErrorMsg(playerid,"• Ðis vartotojas yra apsaugotas IP apsauga, todël prisijungimas galimas tik ið IP ið kurio buvo registruotas vartotojas.");
                SetTimerEx("DelayedKick", 500, false, "d", playerid);
                return 1;
            }
        }
        new info[400];
        format(info,400,"{ffffff}Sveikas - (a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n",Vardas(playerid));
        strcat(info,"{ffffff}Mûsø duomenø bazë aptiko jog ðis vartotojas - (a) jau yra registruotas mûsø serveryje.\n");
        strcat(info,"{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá naudojote paskyros {7bae39}registracijoje{ffffff}.");
		ShowPlayerDialog(playerid, 4, DIALOG_STYLE_PASSWORD, "Prisijungimas", info, "Prisijungti","Iðeiti");
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    playersOnline--;
	if(PlayerDB[playerid][Loaded] == 1)
	{

        PlayerTextDrawDestroy(playerid, WantedDraw2[playerid]);
        PlayerTextDrawDestroy(playerid, WantedDraw1[playerid]);
        new PlayerInterior = GetPlayerInterior(playerid);
    	if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(PlayerDB[playerid][GasStationTimerRunsOrl] == true)
        {
            KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
            PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        }
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0, 0);
		}
		if(PlayerDB[playerid][PlayedMinuteTimer] > 0)
		{
			KillTimer(PlayerDB[playerid][PlayedMinuteTimer]);
			PlayerDB[playerid][PlayedMinuteTimer] = -1;
		}

		if(PlayerDB[playerid][PlacedKliutis1] == true)
		{
			DestroyDynamicObject(PlayerDB[playerid][Kliutis1Object]);
			DestroyDynamic3DTextLabel(PlayerDB[playerid][Kliutis1ObjectLabel]);
			PlayerDB[playerid][PlacedKliutis1] = false;
		}
		if(PlayerDB[playerid][PlacedKliutis2] == true)
		{
			DestroyDynamicObject(PlayerDB[playerid][Kliutis2Object]);
			DestroyDynamic3DTextLabel(PlayerDB[playerid][Kliutis2ObjectLabel]);
			PlayerDB[playerid][PlacedKliutis2] = false;
		}
        if(SpygliaiInfo[playerid][SpygliaiPadeti] == true)
        {
            DestroyDynamicObject(SpygliaiInfo[playerid][SpygliuObjektas]);
            DestroyDynamic3DTextLabel(SpygliaiInfo[playerid][SpygliuLabel]);
            SpygliaiInfo[playerid][SpygliaiPadeti] = false;
        }
        if(PlayerDB[playerid][SuKrepsiuAntRanku] == true)
        {
            DestroyDynamicObject(PlayerDB[playerid][KrepsioObjektas]);
            PlayerDB[playerid][SuKrepsiuAntRanku] = false;
        }
		if(PlayerDB[playerid][OwnedVehicle1] > 0)
		{
			new x = PlayerDB[playerid][OwnedVehicle1];
            SaveOwnedVehicle(x);
			DestroyVehicle(x);
            if(VehicleDB[x][VehicleWithTaxometer] == true)
            {
                DestroyObject(VehicleDB[x][VehicleTaxometerObjectID]);
                VehicleDB[x][VehicleWithTaxometer] = false;
            }
            if(IsValidDynamic3DTextLabel(VehicleDB[x][PardavimoLabel]))
            {
                DestroyDynamic3DTextLabel(VehicleDB[x][PardavimoLabel]);
            }
		}
		if(PlayerDB[playerid][OwnedVehicle2] > 0)
		{
			new x = PlayerDB[playerid][OwnedVehicle2];
            SaveOwnedVehicle(x);
			DestroyVehicle(x);
            if(VehicleDB[x][VehicleWithTaxometer] == true)
            {
                DestroyObject(VehicleDB[x][VehicleTaxometerObjectID]);
                VehicleDB[x][VehicleWithTaxometer] = false;
            }
            if(IsValidDynamic3DTextLabel(VehicleDB[x][PardavimoLabel]))
            {
                DestroyDynamic3DTextLabel(VehicleDB[x][PardavimoLabel]);
            }
		}
        if(PlayerDB[playerid][GasStationTimerRunsOrl] == true)
        {
            KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
            PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        }
        if(PlayerDB[playerid][Surakintas] == true)
        {
            PlayerDB[playerid][JailTime] = PlayerDB[playerid][WantedLevel] * 60 + 1800;
            new Years,Months,Days,Hours,Minutes;
            getdate(Years, Months, Days);
            gettime(Hours, Minutes);
            new query[400];
            mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', '[%d-%d-%.0d %02d:%02d] Atsijungëte,nors buvote surakintas, todël keliaujate tiesiai á kalëjimà.', '60');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
        }
        if(PlayerDB[playerid][WantedLevel] > 0 && PlayerDB[playerid][BEGA] == 0)
        {
            switch(reason)
            {
                case 0:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë dël techniniø problemø. Buvo gaudomas/ieðkomas %i lygiø.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 1:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë savo noru. Buvo gaudomas/ieðkomas %i lygiø.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 2:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë nes buvo iðmestas. Buvo gaudomas/ieðkomas %i lygiø.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
            }
        }
        else if(PlayerDB[playerid][WantedLevel] > 0 && PlayerDB[playerid][BEGA] == 1)
        {
            switch(reason)
            {
                case 0:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë dël techniniø problemø. Buvo gaudomas/ieðkomas %i lygiø,taip pat bëglys.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 1:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë savo noru. Buvo gaudomas/ieðkomas %i lygiø,taip pat bëglys.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 2:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë nes buvo iðmestas. Buvo gaudomas/ieðkomas %i lygiø,taip pat bëglys.",Vardas(playerid),PlayerDB[playerid][WantedLevel]);
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
            }
        }
        else if(PlayerDB[playerid][WantedLevel] == 0 && PlayerDB[playerid][BEGA] == 1)
        {
            switch(reason)
            {
                case 0:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë dël techniniø problemø. Bëgo nuo teisësaugos.",Vardas(playerid));
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 1:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë savo noru. Bëgo nuo teisësaugos.",Vardas(playerid));
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
                case 2:
                {
                    new string[128];
                    format(string, 128, "• %s atsijungë nes buvo iðmestas. Bëgo nuo teisësaugos.",Vardas(playerid));
                    SendClientMessageToLaw(0xAFAFAFFF,string);
                }
            }
        }
        SavePlayerData(playerid);
	}
    if(IsValidDynamic3DTextLabel(PlayerDB[playerid][PlayerMuteLabel]))
    {
        DestroyDynamic3DTextLabel(PlayerDB[playerid][PlayerMuteLabel]);
    }
    if(PlayerDB[playerid][Job] > 0)
    {
        for(new x = 0;x<MAX_PLAYERS*9;x++)
        {
            if(Iskvietimas[x][IskvietimasPriimtas] == true)
            {
                if(Iskvietimas[x][VaziuojantisID] == playerid)
                {
                    Iskvietimas[x][IskvietimasPriimtas] = false;
                    Iskvietimas[x][VaziuojantisID] = -1;
                    new string[128];
                    format(string,128,"[IÐKVIETIMAS]: {ffca16}Iðkviestos tarnybos darbuotojas %s atsijungë.",Vardas(playerid));
                    SendClientMessage(Iskvietimas[x][KvieciantisID], 0xf99c00FF, string);
                    SendClientMessage(Iskvietimas[x][KvieciantisID], 0xffca16FF, "Kitas darbuotojas periims iðkvietimà.");
                    format(string,128,"[IÐKVIETIMAS]: {ffca16}%s atsijungë, todël perimkite jo iðkvietimà /vaziuoju %s.",Vardas(playerid),Iskvietimas[x][KvieciantisVP]);
                    switch(Iskvietimas[x][TarnybosNumeris])
                    {
                        case 0:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 1)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 1:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 2)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 2:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 3 || PlayerDB[i][Job] == 4)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 3:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 5)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 4:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 7 || PlayerDB[i][Job] == 8)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 5:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 10)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 6:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 16 || PlayerDB[i][Job] == 17)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 7:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 18)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                        case 8:
                        {
                            for(new i = 0;i<=GetPlayerPoolSize();i++)
                            {
                                if(PlayerDB[i][Job] == 19)
                                {
                                    SendClientMessage(i, 0xf99c00FF, string);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    new MsgTOAdmins[70];
    format(MsgTOAdmins, 70, "• {AFAFAF}Þaidëjas %s atsijungë ið serverio.", Vardas(playerid));
    for(new i = 0;i<GetPlayerPoolSize();i++)
    {
        if(PlayerDB[i][adminlvl] > 0)
        {
            SendClientMessage(i, 0xff0000FF, MsgTOAdmins);
        }
    }
    DestroySekimoTD(playerid);

    TextDrawHideForPlayer(playerid, WaterMarkLogo[0]);
    TextDrawHideForPlayer(playerid, WaterMarkLogo[1]);
    TextDrawHideForPlayer(playerid, WaterMarkLogo[2]);


    ClearAndResetPlayerData(playerid);
	return 1;
}
stock SavePlayerData(playerid)
{
	if(PlayerDB[playerid][Loaded] == 1)
	{
		new SQLstring[2048];
		new Float:Cords[4];
        new PlayerSkin,PlayerVirtualWorldas,PlayerInterioras;
        if(PlayerDB[playerid][PlayerSpectatesOther] == false)
        {
            GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
            GetPlayerFacingAngle(playerid, Cords[3]);
            PlayerSkin = GetPlayerSkin(playerid);
            PlayerVirtualWorldas = GetPlayerVirtualWorld(playerid);
            PlayerInterioras = GetPlayerInterior(playerid);
        }
        else
        {
            Cords[0] = PlayerDB[playerid][BeforeSpectatingX];
            Cords[1] = PlayerDB[playerid][BeforeSpectatingY];
            Cords[2] = PlayerDB[playerid][BeforeSpectatingZ];
            Cords[3] = 0;
            PlayerSkin = PlayerDB[playerid][BeforeSpectatingPlayerSkin];
            PlayerVirtualWorldas = PlayerDB[playerid][BeforeSpectatingPlayerWorld];
            PlayerInterioras = PlayerDB[playerid][BeforeSpectatingPlayerInterior];
        }
		new substring[500];

		mysql_format(connectionHandle, substring, 200, "UPDATE `players` SET `Sex` = '%i',`Skin` = '%i',`Newbie` = '%i',`VirtualWorld` = '%i',`Interior` = '%i',", PlayerDB[playerid][Sex],PlayerSkin,PlayerDB[playerid][Newbie],PlayerVirtualWorldas,PlayerInterioras);
		strcat(SQLstring, substring);
		mysql_format(connectionHandle, substring, 300, "`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f',`FacingAngle` = '%f' WHERE `Name` = '%e' LIMIT 1;",Cords[0],Cords[1],Cords[2],Cords[3],Vardas(playerid));
		strcat(SQLstring, substring);
		mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

	    for(new i = 0; i < 12; i++)
	    {
	      	mysql_format(connectionHandle,SQLstring,140,"UPDATE `players` SET `Weapon%d` = '%d', `Ammo%d` = '%d' WHERE `Name` = '%e' LIMIT 1;", i, PlayerWeapons[playerid][i], i, PlayerWeaponAmmo[playerid][i], Vardas(playerid));
	        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
	    }

	    mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `XP` = '%i',`MoneyInPocket` = '%i',`MoneyInBank` = '%i',`Credits` = '%i',",GetPlayerScore(playerid),PlayerDB[playerid][MoneyInPocket],PlayerDB[playerid][MoneyInBank],PlayerDB[playerid][Credits]);
	    mysql_format(connectionHandle, substring, 500, "`JailTime` = '%i',`WantedLevel` = '%i',`Health` = '%f',`Armour` = '%f',`Job` = '%i',",PlayerDB[playerid][JailTime],PlayerDB[playerid][WantedLevel],PlayerDB[playerid][PlayerHealthAC],PlayerDB[playerid][PlayerArmourAC],PlayerDB[playerid][Job]);
	    strcat(SQLstring, substring);
	    mysql_format(connectionHandle, substring, 500, "`Club` = '%i',`DrivingTheory` = '%i',`AutoLicense` = '%i',`AutoParkDriving` = '%i',`MotoLicense` = '%i',`MotoParkDriving` = '%i',", PlayerDB[playerid][Club],PlayerDB[playerid][DrivingTheory],PlayerDB[playerid][AutoLicense],PlayerDB[playerid][AutoParkDriving],PlayerDB[playerid][MotoLicense],PlayerDB[playerid][MotoParkDriving]);
	    strcat(SQLstring, substring);
	    mysql_format(connectionHandle, substring, 500, "`PilotoLicense` = '%i',`LostDLicenses` = '%i',`WeaponsLicense` = '%i',",PlayerDB[playerid][PilotoLicense],PlayerDB[playerid][LostDLicenses],PlayerDB[playerid][WeaponsLicense]);
	    strcat(SQLstring, substring);
	    mysql_format(connectionHandle, substring, 500, "`PhoneBalance` = '%i',`PhoneState` = '%i',`adminlvl` = '%i',`AdminLaikoPabaiga` = '%i',`Uzdarbis` = '%i',`VIP` = '%i',`VIPLaikoPabaiga` = '%i',",PlayerDB[playerid][PhoneBalance],PlayerDB[playerid][PhoneState],PlayerDB[playerid][adminlvl],PlayerDB[playerid][AdminLaikoPabaiga],PlayerDB[playerid][Uzdarbis],PlayerDB[playerid][VIP],PlayerDB[playerid][VIPLaikoPabaiga]);
	    strcat(SQLstring, substring);
	    mysql_format(connectionHandle, substring, 500, "`Direktorius` = '%i',`DarboSutartiesPabaiga` = '%i',`DarboPradziosData` = '%s',`UniformosID` = '%i',`AprangosTipas` = '%i',", PlayerDB[playerid][Direktorius],PlayerDB[playerid][DarboSutartiesPabaiga],PlayerDB[playerid][DarboPradziosData],PlayerDB[playerid][UniformosID],PlayerDB[playerid][AprangosTipas]);
	    strcat(SQLstring, substring);
	    mysql_format(connectionHandle, substring, 500, "`Drabuziai` = '%i',`Rangas` = '%i',`Vaistineles` = '%i',`LigoninesLaikas` = '%i',`JobWarnings` = '%i',`AdminWarnings` = '%i',`VIPWarnings` = '%i',`LawWarnings` = '%i',`Kanapes` = '%i',`Kokainas` = '%i',`Heroinas` = '%i' WHERE `Name` = '%e' LIMIT 1;",
	    	PlayerDB[playerid][Drabuziai],PlayerDB[playerid][Rangas],PlayerDB[playerid][Vaistineles],PlayerDB[playerid][LigoninesLaikas],PlayerDB[playerid][JobWarnings],PlayerDB[playerid][AdminWarnings],PlayerDB[playerid][VIPWarnings],PlayerDB[playerid][LawWarnings],PlayerDB[playerid][Kanapes],PlayerDB[playerid][Kokainas],PlayerDB[playerid][Heroinas],Vardas(playerid));
	    strcat(SQLstring, substring);
	    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `KokainoPriklausomybesLygis`  = '%i',`HeroinoPriklausomybesLygis` = '%i',`UzdarbisSiandien` = '%i',`UnBanPriziuretojas` = '%i',`DirektoriuPriziuretojas` = '%i' WHERE `name` = '%e' LIMIT 1;", PlayerDB[playerid][KokainoPriklausomybesLygis],PlayerDB[playerid][HeroinoPriklausomybesLygis],PlayerDB[playerid][UzdarbisSiandien],PlayerDB[playerid][UnBanPriziuretojas],PlayerDB[playerid][DirektoriuPriziuretojas],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        mysql_format(connectionHandle, SQLstring, 500, "UPDATE `players` SET `AtvykimaiTotal` = '%i',`BaudosTotal` = '%i',`SiandienZaista` = '%i',`ZaistaTotal` = '%i' WHERE `Name` = '%e' LIMIT 1;", PlayerDB[playerid][AtvykimaiTotal],PlayerDB[playerid][BaudosTotal],PlayerDB[playerid][SiandienZaista],PlayerDB[playerid][ZaistaTotal],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 500, "UPDATE `players` SET `Job1XP` = '%i',`Job2XP` = '%i',`Job4XP` = '%i',`Job5XP` = '%i',`Job7XP` = '%i',`Job8XP` = '%i',`Job9XP` = '%i',`Job10XP` = '%i',`Job21XP` = '%i',`KicksForRapidShots` = '%d',`TuriBankoSaskaita` = '%d', `BankoSaskaitosPin` = '%d' WHERE `Name` = '%e' LIMIT 1;",
            PlayerDB[playerid][Job1XP],PlayerDB[playerid][Job2XP],PlayerDB[playerid][Job4XP],PlayerDB[playerid][Job5XP],PlayerDB[playerid][Job7XP],PlayerDB[playerid][Job8XP],PlayerDB[playerid][Job9XP],PlayerDB[playerid][Job10XP],PlayerDB[playerid][Job21XP],PlayerDB[playerid][KicksForRapidShots],PlayerDB[playerid][TuriBankoSaskaita],PlayerDB[playerid][BankoSaskaitosPin],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `SunkvLicense`  = '%i',`SunkvParkDriving` = '%i',`MutedPlayer` = '%i',`Salmas18645` = '%i',`PlayerWhoGaveMute` = '%e',`MatuokliuBalai` = '%i' WHERE `name` = '%e' LIMIT 1;", PlayerDB[playerid][SunkvLicense],PlayerDB[playerid][SunkvParkDriving],PlayerDB[playerid][MutedPlayer],PlayerDB[playerid][Salmas18645],PlayerDB[playerid][PlayerWhoGaveMute],PlayerDB[playerid][MatuokliuBalai],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `Emigruotas` = '%i',`LaikoMasinosTeisesKartu` = '%i',`AlgosBonusas` = '%i',`PrivPriziuretojas` = '%i' WHERE `Name` = '%e' LIMIT 1;", PlayerDB[playerid][Emigruotas],PlayerDB[playerid][LaikoMasinosTeisesKartu],PlayerDB[playerid][AlgosBonusas],PlayerDB[playerid][PrivPriziuretojas],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `PagydimaiTotal` = %i,`ClothesBeforeJail` = '%i',`AprangaBeforeJail` = '%i',`NuveztiKroviniai` = '%i',`LyderiuPriziuretojas` = '%i' WHERE `Name` = '%e' LIMIT 1;", PlayerDB[playerid][PagydimaiTotal],PlayerDB[playerid][ClothesBeforeJail],PlayerDB[playerid][AprangaBeforeJail],PlayerDB[playerid][NuveztiKroviniai],PlayerDB[playerid][LyderiuPriziuretojas],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `TimeWorkedWithCarToday` = %i,`TimeWorkedWithCarTotal` = '%i',`Pavaduotojas` = '%i' WHERE `Name` = '%e' LIMIT 1;", PlayerDB[playerid][TimeWorkedWithCarToday],PlayerDB[playerid][TimeWorkedWithCarTotal],PlayerDB[playerid][Pavaduotojas],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `DirWarnings` = '%i',`PavWarnings` = '%i',`Hunger` = '%0.1f',`FirstOwnedVehicleID` = '%i',`SecondOwnedVehicleID` = '%i' WHERE `Name` = '%s' LIMIT 1;", PlayerDB[playerid][DirWarnings],PlayerDB[playerid][PavWarnings],PlayerDB[playerid][Hunger],PlayerDB[playerid][FirstOwnedVehicleID],PlayerDB[playerid][SecondOwnedVehicleID],Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, 2048, "UPDATE `players` SET `MoneyFromBussines` = '%i',`TimesHelped` = '%i',`RestrictedUseOfV` = '%i',`BoughtRareSabre` = '%i' WHERE `id` = '%i' LIMIT 1;", PlayerDB[playerid][MoneyFromBussines],PlayerDB[playerid][TimesHelped],PlayerDB[playerid][RestrictedUseOfV],PlayerDB[playerid][BoughtRareSabre],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `Avietes` = '%i',`Braskes` = '%i',`Krepselis` = '%i',`Zemuoges` = '%i',`Bruknes` = '%i',`Melynes` = '%i' WHERE `id` = '%i' LIMIT 1;",PlayerDB[playerid][Avietes],PlayerDB[playerid][Braskes],PlayerDB[playerid][Krepselis],PlayerDB[playerid][Zemuoges],PlayerDB[playerid][Bruknes],PlayerDB[playerid][Melynes],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `KartingaiTicket` = '%i',`UogosToday`='%i',`UogosTotal`='%i',`MathToday`='%i',`MathTotal`='%i'  WHERE `id` = '%i' LIMIT 1;", PlayerDB[playerid][KartingaiTicket],PlayerDB[playerid][UogosToday],PlayerDB[playerid][UogosTotal],PlayerDB[playerid][MathToday],PlayerDB[playerid][MathTotal],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `IPApsauga` = '%i',`SecurityCodeCheck` = '%i',`SecondaryPassword` = '%e' WHERE `id` = '%i' LIMIT 1;", PlayerDB[playerid][IPApsauga],PlayerDB[playerid][SecurityCodeCheck],PlayerDB[playerid][SecondaryPassword],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `FirstBusinessSlot`= '%i',`SecondBusinessSlotBought` = '%i',`SecondBusinessSlot` = '%i',`KartsLaimejoTotal`='%i',`KartsLaimejoSiandien`='%i' WHERE `id` = '%i' LIMIT 1;",PlayerDB[playerid][FirstBusinessSlot],PlayerDB[playerid][SecondBusinessSlotBought],PlayerDB[playerid][SecondBusinessSlot],PlayerDB[playerid][KartsLaimejoTotal],PlayerDB[playerid][KartsLaimejoSiandien],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `VerslininkoLicenzija` = '%i', `TuriuNamoVaistu` = '%i',`TuriuNama` = '%i', `AtidariauSlota` = '%i' WHERE `id` = '%i' LIMIT 1;",PlayerDB[playerid][VerslininkoLicenzija],PlayerDB[playerid][TuriuNamoVaistu],PlayerDB[playerid][TuriuNama],PlayerDB[playerid][AtidariauSlota],PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        SavePasiekimai(playerid);

	}
}
public OnPlayerSpawn(playerid)
{
	if(PlayerDB[playerid][Loaded] == 0)
	{
        TogglePlayerControllable(playerid, false);
        PlayerWeaponsAreChanging[playerid] = true;
        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
		Naikinam(playerid);
		ResetPlayerWeaponsEx(playerid);
		new SQLstring[86];
		mysql_format(connectionHandle, SQLstring, 86, "SELECT * FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
		mysql_function_query(connectionHandle,SQLstring,true,"OnLoadPlayerData","d",playerid);
        mysql_format(connectionHandle, SQLstring, 86, "SELECT * FROM `pasiekimai` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,true,"OnLoadPlayerPasiekimai","d",playerid);

        new MsgTOAdmins[70];
        format(MsgTOAdmins, 70, "• {AFAFAF}Þaidëjas %s jungiasi á serverá.", Vardas(playerid));
        for(new i = 0;i<GetPlayerPoolSize();i++)
        {
            if(PlayerDB[i][adminlvl] > 0)
            {
                SendClientMessage(i, 0x33cc33FF, MsgTOAdmins);
            }
        }
	}
    else if(PlayerDB[playerid][LigoninesLaikas] > 0)
    {
        ClearAnimations(playerid);
        if(PlayerDB[playerid][LigoninesLaikas] >= 25)
        {
            SetPlayerHealthEx(playerid, 100);
        }
        if(GetPlayerSkin(playerid) != PlayerDB[playerid][DeathSkin])
        {
            SetPlayerSkinEx(playerid, PlayerDB[playerid][DeathSkin]);
        }
        TogglePlayerControllable(playerid, 0);
        SetTimerEx("UntillLetsPlayerPlay", 1500, false, "d", playerid);
        SetPlayerWeather(playerid, SERVERIO_ORAS);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 1);
        ClearAnimations(playerid, 1);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    ClearAnimations(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    PlayerDB[playerid][PlayerNeedToSpawn] = false;
    Streamer_Update(playerid);
	return 1;
}
forward OnLoadPlayerData(playerid);
public OnLoadPlayerData(playerid)
{
    TogglePlayerControllable(playerid, false);
	new codd[8];
    cache_get_field_content(0, "VeritifyCode", codd);
    format(PlayerDB[playerid][PatvirtinimoKodas], 8, "%e", codd);
    //PlayerDB[playerid][PatvirtinimoKodas] = cache_get_field_content_int(0,"VeritifyCode");
	PlayerDB[playerid][Sex] = cache_get_field_content_int(0,"Sex");
	SetPlayerSkinEx(playerid, cache_get_field_content_int(0,"Skin") );
	PlayerDB[playerid][Newbie] = cache_get_field_content_int(0,"Newbie");
	SetPlayerVirtualWorld(playerid, cache_get_field_content_int(0,"VirtualWorld"));
	SetPlayerInterior(playerid, cache_get_field_content_int(0,"Interior"));
	SetPlayerPos(playerid, cache_get_field_content_float(0, "Pos_X"), cache_get_field_content_float(0, "Pos_Y"), cache_get_field_content_float(0, "Pos_Z"));
	SetPlayerFacingAngle(playerid, cache_get_field_content_float(0, "FacingAngle"));
	new Weapons[12];
	for(new i=0;i<12;i++)
	{
		new fieldname[15];
		format(fieldname,15,"Weapon%i",i);
		Weapons[i] = cache_get_field_content_int(0, fieldname);
		format(fieldname,15,"Ammo%i",i);
		GivePlayerWeaponEx(playerid, Weapons[i], cache_get_field_content_int(0, fieldname));
	}
	SetPlayerScore(playerid, cache_get_field_content_int(0, "XP"));
	PlayerDB[playerid][MoneyInPocket] = cache_get_field_content_int(0, "MoneyInPocket");
	PlayerDB[playerid][MoneyInBank] = cache_get_field_content_int(0, "MoneyInBank");
	PlayerDB[playerid][Credits] = cache_get_field_content_int(0, "Credits");
	PlayerDB[playerid][JailTime] = cache_get_field_content_int(0, "JailTime");
	PlayerDB[playerid][WantedLevel] = cache_get_field_content_int(0, "WantedLevel");
	SetPlayerHealthEx(playerid, cache_get_field_content_float(0, "Health"));
	SetPlayerArmourEx(playerid, cache_get_field_content_float(0, "Armour"));
	PlayerDB[playerid][Job] = cache_get_field_content_int(0, "Job");
	PlayerDB[playerid][Club] = cache_get_field_content_int(0, "Club");
	PlayerDB[playerid][DrivingTheory] = cache_get_field_content_int(0, "DrivingTheory");
	PlayerDB[playerid][AutoLicense] = cache_get_field_content_int(0, "AutoLicense");
	PlayerDB[playerid][AutoParkDriving] = cache_get_field_content_int(0, "AutoParkDriving");
	PlayerDB[playerid][MotoLicense] = cache_get_field_content_int(0, "MotoLicense");
	PlayerDB[playerid][PilotoLicense] = cache_get_field_content_int(0, "PilotoLicense");
	PlayerDB[playerid][LostDLicenses] = cache_get_field_content_int(0, "LostDLicenses");
	PlayerDB[playerid][WeaponsLicense] = cache_get_field_content_int(0, "WeaponsLicense");
	PlayerDB[playerid][PhoneBalance] = cache_get_field_content_int(0, "PhoneBalance");
	PlayerDB[playerid][PhoneState] = cache_get_field_content_int(0, "PhoneState");
	PlayerDB[playerid][adminlvl] = cache_get_field_content_int(0, "adminlvl");
	PlayerDB[playerid][AdminLaikoPabaiga] = cache_get_field_content_int(0, "AdminLaikoPabaiga");
	PlayerDB[playerid][Uzdarbis] = cache_get_field_content_int(0, "Uzdarbis");
	PlayerDB[playerid][VIP] = cache_get_field_content_int(0, "VIP");
	PlayerDB[playerid][VIPLaikoPabaiga] = cache_get_field_content_int(0, "VIPLaikoPabaiga");
	PlayerDB[playerid][Direktorius] = cache_get_field_content_int(0, "Direktorius");
	PlayerDB[playerid][Pavaduotojas] = cache_get_field_content_int(0, "Pavaduotojas");
	PlayerDB[playerid][DarboSutartiesPabaiga] = cache_get_field_content_int(0, "DarboSutartiesPabaiga");
	PlayerDB[playerid][UniformosID] = cache_get_field_content_int(0, "UniformosID");
	PlayerDB[playerid][AprangosTipas] = cache_get_field_content_int(0, "AprangosTipas");
	PlayerDB[playerid][Drabuziai] = cache_get_field_content_int(0, "Drabuziai");
	PlayerDB[playerid][Rangas] = cache_get_field_content_int(0, "Rangas");
	PlayerDB[playerid][Vaistineles] = cache_get_field_content_int(0, "Vaistineles");
	PlayerDB[playerid][LigoninesLaikas] = cache_get_field_content_int(0, "LigoninesLaikas");
	PlayerDB[playerid][JobWarnings] = cache_get_field_content_int(0, "JobWarnings");
	PlayerDB[playerid][AdminWarnings] = cache_get_field_content_int(0, "AdminWarnings");
	PlayerDB[playerid][VIPWarnings] = cache_get_field_content_int(0, "VIPWarnings");
	PlayerDB[playerid][LawWarnings] = cache_get_field_content_int(0, "LawWarnings");
	PlayerDB[playerid][Kanapes] = cache_get_field_content_int(0, "Kanapes");
	PlayerDB[playerid][Kokainas] = cache_get_field_content_int(0, "Kokainas");
	PlayerDB[playerid][Heroinas] = cache_get_field_content_int(0, "Heroinas");
    PlayerDB[playerid][HeroinoPriklausomybesLygis] = cache_get_field_content_int(0, "HeroinoPriklausomybesLygis");
    PlayerDB[playerid][KokainoPriklausomybesLygis] = cache_get_field_content_int(0, "KokainoPriklausomybesLygis");
    PlayerDB[playerid][UzdarbisSiandien] = cache_get_field_content_int(0, "UzdarbisSiandien");
    PlayerDB[playerid][UnBanPriziuretojas] = cache_get_field_content_int(0, "UnBanPriziuretojas");
    PlayerDB[playerid][DirektoriuPriziuretojas] = cache_get_field_content_int(0, "DirektoriuPriziuretojas");
    PlayerDB[playerid][AtvykimaiTotal] = cache_get_field_content_int(0, "AtvykimaiTotal");
    PlayerDB[playerid][BaudosTotal] = cache_get_field_content_int(0, "BaudosTotal");
    PlayerDB[playerid][SiandienZaista] = cache_get_field_content_int(0, "SiandienZaista");
    PlayerDB[playerid][ZaistaTotal] = cache_get_field_content_int(0, "ZaistaTotal");
    PlayerDB[playerid][TimeWorkedWithCarToday] = cache_get_field_content_int(0, "TimeWorkedWithCarToday");
    PlayerDB[playerid][TimeWorkedWithCarTotal] = cache_get_field_content_int(0, "TimeWorkedWithCarTotal");
    new tmpstr[12];
    cache_get_field_content(0, "DarboPradziosData", tmpstr);
    format(PlayerDB[playerid][DarboPradziosData], 12, "%s", tmpstr);


    PlayerDB[playerid][Job1XP] = cache_get_field_content_int(0, "Job1XP");
    PlayerDB[playerid][Job2XP] = cache_get_field_content_int(0, "Job2XP");
    PlayerDB[playerid][Job4XP] = cache_get_field_content_int(0, "Job4XP");
    PlayerDB[playerid][Job5XP] = cache_get_field_content_int(0, "Job5XP");
    PlayerDB[playerid][Job7XP] = cache_get_field_content_int(0, "Job7XP");
    PlayerDB[playerid][Job8XP] = cache_get_field_content_int(0, "Job8XP");
    PlayerDB[playerid][Job9XP] = cache_get_field_content_int(0, "Job9XP");
    PlayerDB[playerid][Job10XP] = cache_get_field_content_int(0, "Job10XP");
    PlayerDB[playerid][Job21XP] = cache_get_field_content_int(0, "Job21XP");
    PlayerDB[playerid][TuriBankoSaskaita] = cache_get_field_content_int(0, "TuriBankoSaskaita");
    PlayerDB[playerid][BankoSaskaitosPin] = cache_get_field_content_int(0, "BankoSaskaitosPin");
    PlayerDB[playerid][KicksForRapidShots] = cache_get_field_content_int(0, "KicksForRapidShots");
    PlayerDB[playerid][SunkvLicense] = cache_get_field_content_int(0, "SunkvLicense");
    PlayerDB[playerid][SunkvParkDriving] = cache_get_field_content_int(0, "SunkvParkDriving");

    PlayerDB[playerid][MutedPlayer] = cache_get_field_content_int(0, "MutedPlayer");
    PlayerDB[playerid][Salmas18645] = cache_get_field_content_int(0, "Salmas18645");
    PlayerDB[playerid][MatuokliuBalai] = cache_get_field_content_int(0, "MatuokliuBalai");
    PlayerDB[playerid][Emigruotas] = cache_get_field_content_int(0, "Emigruotas");
    PlayerDB[playerid][PrivPriziuretojas] = cache_get_field_content_int(0, "PrivPriziuretojas");

    PlayerDB[playerid][LaikoMasinosTeisesKartu] = cache_get_field_content_int(0, "LaikoMasinosTeisesKartu");
    PlayerDB[playerid][AlgosBonusas] = cache_get_field_content_int(0, "AlgosBonusas");
    cache_get_field_content_int(0, "PlayerWhoGaveMute",PlayerDB[playerid][PlayerWhoGaveMute]);
    new str[14];
    cache_get_field_content(0, "DayOfRegistration", str);
    PlayerDB[playerid][PagydimaiTotal] = cache_get_field_content_int(0, "PagydimaiTotal");
    PlayerDB[playerid][NuveztiKroviniai] = cache_get_field_content_int(0, "NuveztiKroviniai");
    PlayerDB[playerid][ClothesBeforeJail] = cache_get_field_content_int(0, "ClothesBeforeJail");
    PlayerDB[playerid][AprangaBeforeJail] = cache_get_field_content_int(0, "AprangaBeforeJail");

    PlayerDB[playerid][LyderiuPriziuretojas] = cache_get_field_content_int(0, "LyderiuPriziuretojas");
    format(PlayerDB[playerid][DayOfRegistration], 14, "%s", str);

    cache_get_field_content(0, "DatePlayerBecameDir", str);
    format(PlayerDB[playerid][DatePlayerBecameDir],12,"%s",str);

    cache_get_field_content(0, "DatePlayerBecamePav", str);
    format(PlayerDB[playerid][DatePlayerBecamePav],12,"%s",str);


    PlayerDB[playerid][DirWarnings] = cache_get_field_content_int(0, "DirWarnings");
    PlayerDB[playerid][PavWarnings] = cache_get_field_content_int(0, "PavWarnings");
    PlayerDB[playerid][Hunger] = cache_get_field_content_float(0, "Hunger");


    PlayerDB[playerid][FirstOwnedVehicleID] = cache_get_field_content_int(0, "FirstOwnedVehicleID");
    PlayerDB[playerid][SecondOwnedVehicleID] = cache_get_field_content_int(0, "SecondOwnedVehicleID");

    PlayerDB[playerid][MoneyFromBussines] = cache_get_field_content_int(0, "MoneyFromBussines");

    PlayerDB[playerid][TimesHelped] = cache_get_field_content_int(0, "TimesHelped");
    PlayerDB[playerid][RestrictedUseOfV] = cache_get_field_content_int(0, "RestrictedUseOfV");
    PlayerDB[playerid][BoughtRareSabre] = cache_get_field_content_int(0, "BoughtRareSabre");


    PlayerDB[playerid][Avietes] = cache_get_field_content_int(0, "Avietes");
    PlayerDB[playerid][Braskes] = cache_get_field_content_int(0, "Braskes");
    PlayerDB[playerid][Krepselis] = cache_get_field_content_int(0, "Krepselis");
    PlayerDB[playerid][UogosToday] = cache_get_field_content_int(0, "UogosToday");
    PlayerDB[playerid][UogosTotal] = cache_get_field_content_int(0, "UogosTotal");
    PlayerDB[playerid][MathToday] = cache_get_field_content_int(0, "MathToday");
    PlayerDB[playerid][KartingaiTicket] = cache_get_field_content_int(0, "KartingaiTicket");
    PlayerDB[playerid][MathTotal] = cache_get_field_content_int(0, "MathTotal");
    PlayerDB[playerid][Bruknes] = cache_get_field_content_int(0, "Bruknes");
    PlayerDB[playerid][Melynes] = cache_get_field_content_int(0, "Melynes");
    PlayerDB[playerid][Zemuoges] = cache_get_field_content_int(0, "Zemuoges");
    PlayerDB[playerid][IPApsauga] = cache_get_field_content_int(0, "IPApsauga");

    PlayerDB[playerid][KartsLaimejoTotal] = cache_get_field_content_int(0, "KartsLaimejoTotal");
    PlayerDB[playerid][KartsLaimejoSiandien] = cache_get_field_content_int(0, "KartsLaimejoSiandien");

    PlayerDB[playerid][VerslininkoLicenzija] = cache_get_field_content_int(0, "VerslininkoLicenzija");
    PlayerDB[playerid][TuriuNamoVaistu] = cache_get_field_content_int(0, "TuriuNamoVaistu");


    PlayerDB[playerid][FirstBusinessSlot] = cache_get_field_content_int(0, "FirstBusinessSlot");
    PlayerDB[playerid][SecondBusinessSlotBought] = cache_get_field_content_int(0, "SecondBusinessSlotBought");
    PlayerDB[playerid][SecondBusinessSlot] = cache_get_field_content_int(0, "SecondBusinessSlot");
    PlayerDB[playerid][TuriuNama] = cache_get_field_content_int(0, "TuriuNama");
    PlayerDB[playerid][AtidariauSlota] = cache_get_field_content_int(0, "AtidariauSlota");

    new tmpIP[36];
    cache_get_field_content(0, "IPAddress", tmpIP);
    format(PlayerDB[playerid][IPAddress], 36, "%s", tmpIP);

    cache_get_field_content(0, "Password", tmpIP);
    format(PlayerDB[playerid][Password], 36, "%s", tmpIP);

    PlayerDB[playerid][SecurityCodeCheck] = cache_get_field_content_int(0, "SecurityCodeCheck");


    cache_get_field_content(0, "SecondaryPassword", tmpIP);
    format(PlayerDB[playerid][SecondaryPassword], 36, "%s", tmpIP);

    UpdateHungerTimer[playerid] = SetTimerEx("UpdateHunger", 800, true, "d", playerid);

	PlayerDB[playerid][Loaded] = 1;
	for(new i = 0; i<10;i++)
	{
	    SendClientMessage(playerid, -1, " ");
 	}
	if(PlayerDB[playerid][Job] > 0)
	{
		new string[90];
		format(string, 90, "• {99D6EB}Bendradarbis {0099CC}%s {99D6EB}prisijungë á serverá.", Vardas(playerid));
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i) && PlayerDB[i][Job] == PlayerDB[playerid][Job])
			{
				SendClientMessage(i, 0x0099CCFF, string);
			}
		}
	}
	OnPlayerDataFullyLoaded(playerid);
	return 1;
}
forward OnPlayerDataFullyLoaded(playerid);
public OnPlayerDataFullyLoaded(playerid)
{
	PlayerDB[playerid][PlayedMinuteTimer] = SetTimerEx("PlayedMinute", 60000, true, "d", playerid);
    SendClientMessage(playerid, 0x7bae39FF,"- {ffffff}» Uþdirbtus pinigus galite atsiimti savivaldybëje betkokia diena. «");
    SendClientMessage(playerid, 0x7bae39FF,"- {ffffff}» Savo uþdarbá galite pamatyti paraðæ - /uzdirbau. «");

	SendClientMessage(playerid, 0x99D6EBFF, "• Paskutinius savo prisijunigmus galitæ paraðæ {0099CC}/prisijungimai.");
    new years,month,days;
    getdate(years, month, days);
    new Valandos,Minutes;
    gettime(Valandos, Minutes);
    new SQLstring[160];
    format(PlayerDB[playerid][PrisijungimoData], 25, "%d-%02d-%02d %02d:%02d", years,month,days,Valandos,Minutes);
    mysql_format(connectionHandle, SQLstring, 160, "UPDATE `players` SET `PrisijungimoData` = '%e' WHERE `Name` = '%e' LIMIT 1;", PlayerDB[playerid][PrisijungimoData],Vardas(playerid));
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

    new IPT[24];
    GetPlayerIp(playerid, IPT, 24);
    mysql_format(connectionHandle, SQLstring, 160, "INSERT INTO `prisijungimai`(`Vardas`, `IP`, `Data`) VALUES ('%e','%e','%i');", Vardas(playerid),IPT,gettime());
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

    if(PlayerDB[playerid][Newbie] == 1)
	{
		PlayerDB[playerid][Newbie] = 0;
		if(GetPlayerSkin(playerid) != 20 && PlayerDB[playerid][Sex] == 1)
		{
			SetPlayerSkinEx(playerid, 20);
		}
		if(GetPlayerSkin(playerid) != 60 && PlayerDB[playerid][Sex] == 2)
		{
			SetPlayerSkinEx(playerid, 60);
		}
		new DialogString[2256];
		//strcat(DialogString, "{DB881A}Sveiki atvykæ á iRoad.LT SA:MP serverá\n{DB881A}Serveryje bandoma atkartoti tikrà gyvenimà, todël bûtina laikytis KET bei kitø taisykliø apie kurias suþinosite vëliau");
		//strcat(DialogString, "\n{DB881A}Serveryje jûs atstovausite vienà gyventojà, kuris atvyko traukiniu á San Fierro miestà.\n{DB881A}Ðiek tiek informacijos apie serverá galite gauti uþlipus ant informacijos „Pickup“,kuriuos rasite traukiniø stotyje");
		strcat(DialogString, "{FFFFFF}Sveiki atvykæ á samp serverá {21ff00}iRoad.LT! \n\n{43c92e}» {FFFFFF}Aèiû, jog pasirinkote mus. Èia pamatysite svarbiausià informacijà, kuria padës jums þaidime.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Pirma, jums reikia apsiprasti serveryje. Administracija siûlo pradëti darba {ad2dfc}Oro ir Vandens kurjeriu{FFFFFF}, nes ten galima puikiai pasipelnyti naujokams.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Visø darbø sàraðà galite rasti paraðæ komandà - {62A5C4}/darbai.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Serveryje lengviau þaisti bûdamas privilegijuotu þaidëju, visas paslaugas galite matyti paraðæ - {62A5C4}/kreditai.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Jeigu þaidëte kitame SA:MP serveryje - siûlome emigruoti. Tokiu bûdu gausite ðiektiek patirties, pinigø ir trejø dienø {ad2dfc}VIP narystæ.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Serveryje vyksta daþni administracijos rengiami {ad2dfc}Eventai{FFFFFF}, per kuriuos galite laimëti nuo pinigø iki admin narystes. Tad, siekite projekto naujienas {ad2dfc}forume.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Prireikus pagalbos, jums visada padës mûsø maloni administracija. Pagalbos galite praðyti paraðæ {62A5C4}/admin [Tekstas]{FFFFFF} bei VIP nariams {62A5C4}/vip [Tekstas].\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Be to, ðiø þaidëjø vardai yra paþymeti serveryje ávairiomis {ad2dfc}s{FFFF00}p{43c92e}a{FF0000}l{FFFF00}v{33ccff}o{FFFF00}m{ad2dfc}i{FFFF00}s. {FFFFFF}Administratoriai - {43c92e}þalia{FFFFFF}, VIP nariai - {FFFF00}geltona{FFFFFF}, Pagr. Administratoriai - {FF0000}raudona.\n");
		strcat(DialogString, "{43c92e}» {FFFFFF}Taip pat iðkylus klausimams, galite raðyti á bendrà projekto skype - {B2FF00}iRoad.LTpagalba.\n");
		strcat(DialogString, " \n");
		strcat(DialogString, "{FF0000}\tSVARBU\n");
		strcat(DialogString, "{FFFFFF}\t\t• Projekto Skype - {26e4b2}iRoad.LTpagalba.\n");
		strcat(DialogString, "{FFFFFF}\t\t• Forumo adresas - {26e4b2}http://iroad.lt.\n");
		strcat(DialogString, "{FFFFFF}\t\t• TeamSpeak adresas - {26e4b2}ts.iroad.lt.\n");
		strcat(DialogString, "{FFFFFF}\t\t• Serverio pagrindiniai administratoriai {FF0000}Robertss_Rossen {FFFFFF}ir {FF0000}Darius_Vision.\n");
		strcat(DialogString, " \n");
		strcat(DialogString, "{FFFFFF}Serveryje bûtina laikytis taisykliø (/taisykles), nesilaikant jø, bus taikomos bausmes (/bausmes).\n");
		strcat(DialogString, "{FFFFFF}Ðià lentelë galite visada perþiûrëti paraðæ - {62A5C4}/informacija.\n");
		strcat(DialogString, "{FFFFFF}Serverio komandas galite rasti paraðæ - {62A5C4}/komandos.\n");
		strcat(DialogString, "{FFFFFF}Daugiau informacijos galite gauti uþlipæs ant {62A5C4}„Pickup“{FFFFFF}, kuriuos rasite traukiniø stotyje.\n");
		strcat(DialogString, " \n");
		strcat(DialogString, "{FFFFFF}\t\t{B2FF00}• • • {FFFFFF}Linkime gerai praleisti laikà su draugais! {B2FF00}• • •");

		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Svarbi informacija", DialogString, "Uþdaryti","");
	}
    if(PlayerDB[playerid][WantedLevel] > 0)
    {
        ErrorMsg(playerid,"Jûs turite átarimo lygi, uþ kà gavote galite pamatyti paraðæ /itarimai.");
    }
	TextDrawShowForPlayer(playerid, Datarodis);
	TextDrawShowForPlayer(playerid, Laikrodis);
	new PlayerVirtualWorld = GetPlayerVirtualWorld(playerid);
 	if(PlayerVirtualWorld >= 3 && HouseInfo[PlayerVirtualWorld-3][HouseID] >= 0)
 	{
 		HouseInfo[PlayerVirtualWorld-3][kieknamie]++;

		if(Valandos >= 21 && Minutes >=00)
		{
		    if(HouseInfo[PlayerVirtualWorld-3][SviesaIjungta] == 0)
		    {
				TextDrawShowForPlayer(playerid, blackTD);
				SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99}	Prisijungëte namie, kuriame tamsu nes yra vakaras.");
				GameTextForPlayer(playerid, "~y~Esate namie, kuriame tamsu.", 3000, 5);

				if(strcmp(HouseInfo[PlayerVirtualWorld-3][HouseOwner], Vardas(playerid), false) == 0)
				{
					SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99}	Ájunkite ðviesà per /bustovaldymas.");
				}
			}
		}
   	}
   	/*if(Valandos >= 12 && Minutes >=00)
   	{
   		for(new house = 0; house < MAX_HOUSES; house++)
		{
			if(strcmp(HouseInfo[house][HouseOwner], Vardas(playerid), false) == 0)
			{
				HouseInfo[house][SviesaIjungta] =false;
			}
		}
	}*/
    if(PlayerDB[playerid][FirstOwnedVehicleID] >= 0)
    {
        mysql_format(connectionHandle, SQLstring, 145, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][FirstOwnedVehicleID]);
        mysql_function_query(connectionHandle,SQLstring,true,"OnLoadFirstOwnedVehicle","d",playerid);
    }
    if(PlayerDB[playerid][SecondOwnedVehicleID] >= 0)
    {
        mysql_format(connectionHandle, SQLstring, 145, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][SecondOwnedVehicleID]);
        mysql_function_query(connectionHandle,SQLstring,true,"OnLoadSecondOwnedVehicle","d",playerid);
    }
    PlayerWeaponsAreChanging[playerid] = false;

    mysql_format(connectionHandle, SQLstring, 145, "SELECT `Priezastis`,`Tipas`,`GaliojimoPabaiga` FROM `bans` WHERE `Vardas` = '%e' LIMIT 1;", Vardas(playerid));
    mysql_function_query(connectionHandle,SQLstring,true,"OnCheckingPlayerBlocks","d",playerid);

    mysql_format(connectionHandle, SQLstring, 145, "SELECT `id` FROM `laukimai` WHERE `LaukiamoZaidejoID` = '%i';", PlayerDB[playerid][SQLID]);
    mysql_function_query(connectionHandle,SQLstring,true,"InformuotiLaukiancius","d",playerid);
    GameTextForPlayer(playerid, "~g~IKI GALO UZKRAUNAMAS ZAIDIMAS", 5000, 3);
    SetTimerEx("UntillLetsPlayerPlay", 5000, false, "d", playerid);
    SetTimerEx("AutoCheckPasiekimai", 60000, false, "d",playerid);


    WantedDraw1[playerid] = CreatePlayerTextDraw(playerid,502.000000, 107.000000, "]");
    PlayerTextDrawBackgroundColor(playerid,WantedDraw1[playerid], 255);
    PlayerTextDrawFont(playerid,WantedDraw1[playerid], 0);
    PlayerTextDrawLetterSize(playerid,WantedDraw1[playerid], 0.329998, 1.099999);
    PlayerTextDrawColor(playerid,WantedDraw1[playerid], -6422273);
    PlayerTextDrawSetOutline(playerid,WantedDraw1[playerid], 1);
    PlayerTextDrawSetProportional(playerid,WantedDraw1[playerid], 1);
    PlayerTextDrawSetSelectable(playerid,WantedDraw1[playerid], 0);

    WantedDraw2[playerid] = CreatePlayerTextDraw(playerid,516.000000, 106.000000, "~g~0 ~w~lygis");
    PlayerTextDrawBackgroundColor(playerid,WantedDraw2[playerid], 255);
    PlayerTextDrawFont(playerid,WantedDraw2[playerid], 2);
    PlayerTextDrawLetterSize(playerid,WantedDraw2[playerid], 0.209999, 1.199999);
    PlayerTextDrawColor(playerid,WantedDraw2[playerid], 16711935);
    PlayerTextDrawSetOutline(playerid,WantedDraw2[playerid], 1);
    PlayerTextDrawSetProportional(playerid,WantedDraw2[playerid], 1);
    PlayerTextDrawSetSelectable(playerid,WantedDraw2[playerid], 0);

    if(PlayerDB[playerid][WantedLevel] < 16)
    {
        format(SQLstring, sizeof(SQLstring), "~g~%d ~w~lygis", PlayerDB[playerid][WantedLevel]);
    }
    else
    {
        format(SQLstring, sizeof(SQLstring), "~r~%d ~w~lygis", PlayerDB[playerid][WantedLevel]);
    }
    PlayerTextDrawSetString(playerid, WantedDraw2[playerid], SQLstring);
    PlayerTextDrawShow(playerid, WantedDraw1[playerid]);
    PlayerTextDrawShow(playerid, WantedDraw2[playerid]);
	return 1;
}
forward UntillLetsPlayerPlay(playerid);
public UntillLetsPlayerPlay(playerid)
{
    TogglePlayerControllable(playerid, true);
    PlayerDB[playerid][ACLoaded] = true;
    PlayerDB[playerid][GalimaVykdytiPasiekimus] = true;
}

forward PlayedMinute(playerid);
public PlayedMinute(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerDB[playerid][LoggedIn] == 0 || PlayerDB[playerid][Loaded] == 0)
		{
			KillTimer(PlayerDB[playerid][PlayedMinuteTimer]);
			PlayerDB[playerid][PlayedMinuteTimer] = -1;
		}
		else
		{
            if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
            {
                Kick(playerid);
                return 1;
            }
            if(PlayerDB[playerid][Hunger] < 100)
            {
                if(PlayerDB[playerid][adminlvl] > 0)
                {
                    PlayerDB[playerid][Hunger]+=0.3;
                }
                else if(PlayerDB[playerid][VIP] == 1)
                {
                    PlayerDB[playerid][Hunger]+=0.5;
                }
                else
                {
                    PlayerDB[playerid][Hunger]+=0.7;
                }
                if(PlayerDB[playerid][Hunger] > 100)
                {
                    PlayerDB[playerid][Hunger] = 100;
                }
                else
                {
                    if(PlayerDB[playerid][Hunger] == 95)
                    {
                        ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Jums reikia pavalgyti, jeigu nepavalgysite - Mirsite ið bado.");
                    }
                    else if(PlayerDB[playerid][Hunger] == 97)
                    {
                        ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Jums reikia pavalgyti, jeigu nepavalgysite - Mirsite ið bado.");
                    }
                    else if(PlayerDB[playerid][Hunger] == 98)
                    {
                        ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Jums reikia pavalgyti, jeigu nepavalgysite - Mirsite ið bado.");
                    }
                    else if(PlayerDB[playerid][Hunger] == 99)
                    {
                        ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Jums reikia pavalgyti, jeigu nepavalgysite - Mirsite ið bado.");
                    }
                    else if(PlayerDB[playerid][Hunger] == 99.5)
                    {
                        ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Jums reikia pavalgyti, jeigu nepavalgysite - Mirsite ið bado.");
                    }
                }
            }
            else
            {
                if(PlayerDB[playerid][AfkState] == true)
                {
                    OnPlayerDeath(playerid, INVALID_PLAYER_ID, 0);
                    SpawnPlayer(playerid);
                }
                else
                {
                    SetPlayerHealthEx(playerid, 0);
                }
                ErrorMsg(playerid,"[ALKIS]: {FFFFFF}Mirëte ið bado...");
                PlayerDB[playerid][Hunger] = 10;
            }
            if(PlayerDB[playerid][Job] == 4)
            {
            	if(IsPlayerInAnyVehicle(playerid))
        		{
            		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            		{
                		new vehicleid = GetPlayerVehicleID(playerid);
                		if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                		{
          					if(IsPlayerInRangeOfPoint(playerid, 2, -2742.3623,378.8387,4.3672) || IsPlayerInRangeOfPoint(playerid, 2, -2742.4998,386.4443,4.3672) || IsPlayerInRangeOfPoint(playerid, 2, -1989.6338,168.8923,27.5391)
  								|| IsPlayerInRangeOfPoint(playerid, 2, -1989.4579,157.8235,27.5391) || IsPlayerInRangeOfPoint(playerid, 2, -1989.1379,135.7163,27.5391) || IsPlayerInRangeOfPoint(playerid, 2, -1989.3558,124.8488,27.5391) || IsPlayerInRangeOfPoint(playerid, 2, -1609.6279,721.2693,12.7124) || IsPlayerInRangeOfPoint(playerid, 2, -1599.4982,721.2233,10.8774))
	    					{
	    						if(PlayerDB[playerid][AfkState] == false)
	    						{
					    		    PlayerDB[playerid][Uzdarbis]+=100;
				      				PlayerDB[playerid][UzdarbisSiandien]+=100;
				      				DarboInformacija[4][DarboFondas]+=500;
				      				PlusPlayerScore(playerid,5);
				      				PlayerDB[playerid][Job4XP]+=5;
				      				SendClientMessage(playerid, 0xAFAFAFAA, "• Uþ budëjimà taksi vietoje gavote {ad2dfc}100€ {AFAFAF}á uþdarbá bei {ad2dfc}5XP.");
				      				SendClientMessage(playerid, 0xAFAFAFAA, "• Taip pat papyldëte savo darbo fondà {ad2dfc}500 eurais.");
	      						}
      						}
     					}
  					}
	    		}
 			}
            if(PlayerDB[playerid][Pasiekimas24] == 0)
            {
                if(PlayerDB[playerid][MoneyInPocket] >= 1000000)
                {
                    PlayerCompletedPasiekimas(playerid,24);
                }
            }
            if(PlayerDB[playerid][Pasiekimas25] == 0)
            {
                if(PlayerDB[playerid][MoneyInPocket] >= 5000000)
                {
                    PlayerCompletedPasiekimas(playerid,25);
                }
            }
            if(PlayerDB[playerid][AfkState] == true)
            {
                return 1;
            }
            if(PlayerDB[playerid][VIP] == 1)
            {
                if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM && PlayerDB[playerid][Job] != 0)
                {
                    switch(PlayerDB[playerid][Job])
                    {
                        case 1,11:
                        {
                            PlayerDB[playerid][Job1XP] +=2;
                        }
                        case 2:
                        {
                            PlayerDB[playerid][Job2XP] +=2;
                        }
                        case 4:
                        {
                            PlayerDB[playerid][Job4XP] +=2;
                        }
                        case 5:
                        {
                            PlayerDB[playerid][Job5XP] +=2;
                        }
                        case 7:
                        {
                            PlayerDB[playerid][Job7XP] +=2;
                        }
                        case 8:
                        {
                            PlayerDB[playerid][Job8XP] +=2;
                        }
                        case 9:
                        {
                            PlayerDB[playerid][Job9XP] +=2;
                        }
                        case 10:
                        {
                            PlayerDB[playerid][Job10XP] +=2;
                        }
                        case 21:
                        {
                            PlayerDB[playerid][Job21XP] +=2;
                        }
                    }
                    PlusPlayerScore(playerid,2);
                }
                PlusPlayerScore(playerid,10);
            }
            else
            {
                if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM && PlayerDB[playerid][Job] != 0)
                {
                    switch(PlayerDB[playerid][Job])
                    {
                        case 1,11:
                        {
                            PlayerDB[playerid][Job1XP] +=1;
                        }
                        case 2:
                        {
                            PlayerDB[playerid][Job2XP] +=1;
                        }
                        case 4:
                        {
                            PlayerDB[playerid][Job4XP] +=1;
                        }
                        case 5:
                        {
                            PlayerDB[playerid][Job5XP] +=1;
                        }
                        case 7:
                        {
                            PlayerDB[playerid][Job7XP] +=1;
                        }
                        case 8:
                        {
                            PlayerDB[playerid][Job8XP] +=1;
                        }
                        case 9:
                        {
                            PlayerDB[playerid][Job9XP] +=1;
                        }
                        case 10:
                        {
                            PlayerDB[playerid][Job10XP] +=1;
                        }
                        case 21:
                        {
                            PlayerDB[playerid][Job21XP] +=1;
                        }
                    }
                    PlusPlayerScore(playerid,1);
                }
                PlusPlayerScore(playerid,5);
            }
            if(PlayerDB[playerid][adminlvl] > 1)
            {
                PlusPlayerScore(playerid,2);
                if(PlayerDB[playerid][adminlvl] > 2)
                {
                    PlusPlayerScore(playerid,1);
                }
            }
            if(GetPlayerScore(playerid) >= 20000)
            {
                if(PlayerDB[playerid][Pasiekimas12] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,12);
                }
            }
            if(GetPlayerScore(playerid) >= 50000)
            {
                if(PlayerDB[playerid][Pasiekimas13] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,13);
                }
            }
            if(GetPlayerScore(playerid) >= 100000)
            {
                if(PlayerDB[playerid][Pasiekimas14] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,14);
                }
            }

            if(PlayerDB[playerid][NegaliVIPGinklu] > 0)
            {
                PlayerDB[playerid][NegaliVIPGinklu]--;
            }
            PlayerDB[playerid][SiandienZaista]+=1;
            PlayerDB[playerid][ZaistaTotal]+=1;

            if(PlayerDB[playerid][ZaistaTotal] == 120)
            {
                if(PlayerDB[playerid][Pasiekimas5] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,5);
                }
            }
            if(PlayerDB[playerid][ZaistaTotal] == 7*60)
            {
                if(PlayerDB[playerid][Pasiekimas6] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,6);
                }
            }

            if(PlayerDB[playerid][ZaistaTotal] == 7*1440)
            {
                if(PlayerDB[playerid][Pasiekimas7] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,7);
                }
            }

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(VehicleDB[vehicleid][VRibotuvas] == 1)
				{
					PlayerDB[playerid][Uzdarbis] +=20;
                    PlayerDB[playerid][UzdarbisSiandien] += 20;
				}
				new Float:VHEALTH;
				GetVehicleHealth(vehicleid, VHEALTH);
				if(VHEALTH > 900)
				{
					PlayerDB[playerid][Uzdarbis] +=10;
                    PlayerDB[playerid][UzdarbisSiandien] +=10;
				}
				if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[playerid][Job])
				{
                    PlayerDB[playerid][TimeWorkedWithCarToday]+=1;
                    PlayerDB[playerid][TimeWorkedWithCarTotal]+=1;

                    new Float:ToBeRaunded = GetPlayerMaxIncomeFwMSG(playerid);
                    new PinigaiKuriuosGaus =  floatround(ToBeRaunded,floatround_floor);
                    if(PlayerDB[playerid][VIP] == 1)
                    {
                        PlayerDB[playerid][Uzdarbis]+=PinigaiKuriuosGaus * 2;
                        PlayerDB[playerid][UzdarbisSiandien]+=PinigaiKuriuosGaus * 2;
                        DarboInformacija[VehicleDB[vehicleid][DARBOID]][DarboFondas]+=PinigaiKuriuosGaus;

                    }
                    else
                    {
                        PlayerDB[playerid][Uzdarbis]+=PinigaiKuriuosGaus;
                        PlayerDB[playerid][UzdarbisSiandien]+=PinigaiKuriuosGaus;
                        DarboInformacija[VehicleDB[vehicleid][DARBOID]][DarboFondas]+=floatround(PinigaiKuriuosGaus *0.5, floatround_round);
                    }
                    if(PlayerDB[playerid][AlgosBonusas] > gettime())
                    {
                        PlayerDB[playerid][Uzdarbis]+=100;
                        PlayerDB[playerid][UzdarbisSiandien]+=100;
                        DarboInformacija[VehicleDB[vehicleid][DARBOID]][DarboFondas]+=50;
                    }
				}
                else if(VehicleDB[vehicleid][VehicleWithOwner] == true && VehicleDB[vehicleid][VehicleWithTaxometer] == true && PlayerDB[playerid][Job] == 4)
                {
                    PlayerDB[playerid][TimeWorkedWithCarToday]+=1;
                    PlayerDB[playerid][TimeWorkedWithCarTotal]+=1;
                    new Float:ToBeRaunded = GetPlayerMaxIncomeFwMSG(playerid);
                    new PinigaiKuriuosGaus =  floatround(ToBeRaunded,floatround_floor);
                    if(PlayerDB[playerid][VIP] == 1)
                    {
                        PlayerDB[playerid][Uzdarbis]+=PinigaiKuriuosGaus * 2;
                        PlayerDB[playerid][UzdarbisSiandien]+=PinigaiKuriuosGaus * 2;
                        DarboInformacija[4][DarboFondas]+=floatround(PinigaiKuriuosGaus, floatround_round);
                    }
                    else
                    {
                        PlayerDB[playerid][Uzdarbis]+=PinigaiKuriuosGaus;
                        PlayerDB[playerid][UzdarbisSiandien]+=PinigaiKuriuosGaus;
                        DarboInformacija[4][DarboFondas]+=floatround(PinigaiKuriuosGaus / 2, floatround_round);
                    }
                    if(PlayerDB[playerid][AlgosBonusas] > gettime())
                    {
                        PlayerDB[playerid][Uzdarbis]+=100;
                        PlayerDB[playerid][UzdarbisSiandien]+=100;
                        DarboInformacija[4][DarboFondas]+=50;
                    }
                }
			}
			if(PlayerDB[playerid][adminlvl] > 0)
			{
				if(PlayerDB[playerid][AdminWeaponsCD] > 0)
				{
					PlayerDB[playerid][AdminWeaponsCD]--;
				}
			}
			if(GetPVarInt(playerid, "NEGaliSPOS") == 1)
			{
				SetPVarInt(playerid, "NEGaliSPOS", 0);
			}
			if(GetPVarInt(playerid, "NEGaliSPOS1") == 1)
			{
				SetPVarInt(playerid, "NEGaliSPOS1", 0);
			}
			SavePlayerData(playerid);
		}
	}
	else
    {
		KillTimer(PlayerDB[playerid][PlayedMinuteTimer]);
		PlayerDB[playerid][PlayedMinuteTimer] = -1;
	}
    return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
    TogglePlayerControllable(playerid, false);
    PlayerDB[playerid][GaliSuveiktiNark] = false;
    PlayerDB[playerid][KraunuTr] = false;
    PlayerDB[playerid][KraunasiDetales] = false;
    PlayerDB[playerid][Kraunasi] = false;
    PlayerDB[playerid][LaukiuVaistu] = false;

	ResetPlayerWeaponsEx(playerid);
    PlayerDB[playerid][SuKrepsiuAntRanku] = false;
	if(killerid != INVALID_PLAYER_ID && killerid != playerid)
	{
        if(PlayerDB[killerid][Pasiekimas8] == 0 && PlayerDB[playerid][Job] == 1)
        {
            PlayerCompletedPasiekimas(killerid,8);
        }
        if(PlayerDB[killerid][JailTime] > 0)
        {
            PlayerDB[killerid][JailTime]+=10;
        }
        else
        {
            if(!IsPlayerInDynamicArea(playerid, A51Zona, 1))
            {
                if(!(IsPlayerInWarZone(killerid) || IsPlayerInWarZone(playerid)))
                {
                    if(!(IsPlayerInDynamicArea(killerid, BankInteriorArea, 1) == 1 && BankExplodesAt > 0))
                    {
                        if(IsJobFromLaw(PlayerDB[killerid][Job]) == 0)
                        {
                            PlayerDB[killerid][WantedLevel]+=5;
                        }
                        if(IsPlayerInDynamicArea(killerid, BankInteriorArea, 1) == 1 || PlayerDB[killerid][LigoninesKlientas] == true)
                        {
                            if(IsJobFromLaw(PlayerDB[killerid][Job]) == 0)
                            {
                                PlayerDB[killerid][WantedLevel]+=5;
                            }
                        }
                        if(IsJobFromLaw(PlayerDB[killerid][Job]) && PlayerDB[playerid][WantedLevel] > 0)
                        {
                            RemovePlayerAttachedObject(playerid, 1);
                            PlayerDB[playerid][MoneyStackOnBack] = false;
                            ResetPlayerWeaponsEx(playerid);
                            PlayerDB[playerid][ClothesBeforeJail] = GetPlayerSkin(playerid);
                            PlayerDB[playerid][AprangaBeforeJail] = PlayerDB[playerid][AprangosTipas];
                            PlayerDB[playerid][JailTime] = PlayerDB[playerid][WantedLevel] * 60;
                            PlayerDB[playerid][WantedLevel] = 0;
                            PlayerDB[playerid][BEGA] = 0;
                            PlayerDB[playerid][BegaLaiko] = 0;
                            SetPlayerColor(playerid, NematomaPilka);
                            new string[128];
                            format(string, 128, "• Jûs buvote pasodintas á kalëjimà uþ ávairius nusikaltimus %i sek.", PlayerDB[playerid][JailTime]);
                            SendClientMessage(playerid, ZYDRA, string);
                            TeleportPlayerInToJail(playerid);
                        }
                    }
                }
            }
        }
		new string[60];
		format(string, 60, "*** Tave nuþudë {E66718}%s", Vardas(killerid));
		SendClientMessage(playerid, RAUDONA, string);
		format(string, 60, "*** Jûs nuþudëte {E66718}%s", Vardas(playerid));
		SendClientMessage(killerid, RAUDONA, string);
	}
	new PlayerVirtualWorld = GetPlayerVirtualWorld(playerid);
	if(PlayerVirtualWorld >= 3 && HouseInfo[PlayerVirtualWorld-3][HouseID] >= 0)
	{
		HouseInfo[PlayerVirtualWorld-3][kieknamie]--;
	}
	PlayerDB[playerid][DeathSkin] = GetPlayerSkin(playerid);
    if(PlayerDB[playerid][JailTime] == 0)
    {
        if(IsPlayerInDynamicArea(playerid, A51Zona, 1))
        {
            if(IsJobFromLaw(PlayerDB[playerid][Job]) == 1)
            {
                PlayerDB[playerid][LigoninesLaikas] = 0;
                SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][DeathSkin], 125.5555,1933.1761,19.2529,181.7243, 0, 0, 0, 0, 0, 0);

            }
            else
            {
                if(PlayerDB[playerid][VIP] == 0)
                {
                    PlayerDB[playerid][LigoninesLaikas] = 60;
                }
                else
                {
                    PlayerDB[playerid][LigoninesLaikas] = 30;
                }
                SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][DeathSkin], -2672.5251,667.3865,245.3842, 169.3434, 0, 0, 0, 0, 0, 0);

            }
        }
        else
        {
            if(PlayerDB[playerid][VIP] == 0)
            {
                PlayerDB[playerid][LigoninesLaikas] = 60;
            }
            else
            {
                PlayerDB[playerid][LigoninesLaikas] = 30;
            }
            SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][DeathSkin], -2672.5251,667.3865,245.3842, 169.3434, 0, 0, 0, 0, 0, 0);

        }
    }
    else
    {
        SetSpawnInfoEx(playerid, NO_TEAM, 268, -2672.5867,667.0590,244.3842, 100, 0,0, 0, 0, 0, 0,1);
    }
    PlayerDB[playerid][Surakintas] = false;
    PlayerDB[playerid][Suristas] = false;
    PlayerDB[playerid][PlayerNeedToSpawn] = true;
    SetTimerEx("LetHimDie", 5000, false, "d",playerid);
	return 1;
}
forward LetHimDie(playerid);
public LetHimDie(playerid)
{
    TogglePlayerControllable(playerid, true);
}
stock IsARegularBike(model)
{
    switch(model)
    {
        case 510,481,509:
        {
            return 1;
        }
        default:
        {
            return 0;
        }
    }
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GetVehiclePos(vehicleid, VehicleSpawnCords[vehicleid][0], VehicleSpawnCords[vehicleid][1], VehicleSpawnCords[vehicleid][2]);
    if(VehicleDB[vehicleid][VehicleWithOwner] == true)
    {
        VehicleDB[vehicleid][VehicleEngineState] = 0;
        VehicleDB[vehicleid][VehicleLights] = 0;
        VehicleDB[vehicleid][VRibotuvas] = 0;
    }
	format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
	new model = GetVehicleModel(vehicleid);
    if(IsARegularBike(model) == 1)
    {
        SetVehicleEngineState(vehicleid,1);
    }
    else
    {
        SetVehicleEngineState(vehicleid,0);
    }

    if(VehicleDB[vehicleid][DARBOMASINA] == true || VehicleDB[vehicleid][VMMasina] == 1 || VehicleDB[vehicleid][Kartingas] == true)
    {
        VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[model - 400];
    }
	return 1;
}
new TicksTillAutoMsg = 40;
forward EveryMinute();
public EveryMinute()
{
    if(AUEventCarStarted == false)
    {
        /*
            new AfterUpdateEventCar,Text3D:AUEventCarLabel;
            new AUEventCarColors[2];
            new bool:AUEventCarStarted = false;

            new DateAUEventStarts[5];
            DateAUEventStarts[0] = 2016;
            DateAUEventStarts[1] = 5;
            DateAUEventStarts[2] = 21;
            DateAUEventStarts[3] = 19;
            DateAUEventStarts[4] = 0;

        */

        new Year, Month, Day,Hour, Minute;

        getdate(Year, Month, Day);
        gettime(Hour, Minute);
        if(DateAUEventStarts[0] == Year)
        {
            if(DateAUEventStarts[1] == Month)
            {
                if(DateAUEventStarts[2] == Day)
                {
                    if(DateAUEventStarts[3] == Hour)
                    {
                        if(DateAUEventStarts[4] == Minute)
                        {
                            SetupRareCarEvent();
                        }
                    }
                }
            }
        }
        if(Year == 2016 && Month == 5 && Day == 21 && Hour == 18 && Minute == 0)
        {
            SendRconCommand("hostname San-Andreas.LT | Reikalingas 0.3.7 klientas");
            SendRconCommand("password 0");
        }
    }
    if(LuccheseGangZoneU == true)
    {
        new bool:PriesasRastas = false;
        if(playersOnline > 0)
        {
            for(new ix = 0;ix <= GetPlayerPoolSize();ix++)
            {
                if(PlayerDB[ix][Job] == 8 && IsPlayerInDynamicArea(ix, LuccheseGangZoneArea, 1) && PlayerDB[ix][AfkState] == false && GetPlayerState(ix) != PLAYER_STATE_SPECTATING)
                {
                    PriesasRastas = true;
                    break;
                }
            }
        }
        if(PriesasRastas == false)
        {
            LuccheseGangZoneU = false;
            GangZoneStopFlashForAll(LuccheseGangZone);
            for(new i2 = 0;i2 <= GetPlayerPoolSize();i2++)
            {
                if(PlayerDB[i2][Job] == 7)
                {
                    SendClientMessage(i2,ZALIA,"• Jûsø mafijos zonà yra ir vël laisva.");
                }
                else if(PlayerDB[i2][Job] == 8)
                {
                    ErrorMsg(i2,"• Lucchese mafijos zona nuo ðiol yra vël laisva.");
                }
            }
        }
    }
    else
    {
        GangZoneStopFlashForAll(LuccheseGangZone);
    }
    if(GenoveseGangZoneU == true)
    {
        new bool:PriesasRastas = false;
        if(playersOnline > 0)
        {
            for(new ix = 0;ix<=GetPlayerPoolSize();ix++)
            {
                if(PlayerDB[ix][Job] == 7 && IsPlayerInDynamicArea(ix, GenoveseGangZoneArea, 1) && PlayerDB[ix][AfkState] == false && GetPlayerState(ix) != PLAYER_STATE_SPECTATING)
                {
                    PriesasRastas = true;
                    break;
                }
            }
        }
        if(PriesasRastas == false)
        {
            GenoveseGangZoneU = false;
            GangZoneStopFlashForAll(GenoveseGangZone);
            for(new i2 = 0;i2 <=GetPlayerPoolSize();i2++)
            {
                if(PlayerDB[i2][Job] == 8)
                {
                    SendClientMessage(i2,ZALIA,"• Jûsø mafijos zonà yra ir vël laisva.");
                }
                else if(PlayerDB[i2][Job] == 7)
                {
                    ErrorMsg(i2,"• Genovese mafijos zona nuo ðiol yra vël laisva.");
                }
            }
        }
    }
    else
    {
        GangZoneStopFlashForAll(GenoveseGangZone);
    }
    TicksTillAutoMsg-=1;
    if(TicksTillAutoMsg == 30)
    {
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Serveryje uþdirbtus pinigus ({C2BF1B}/uzdirbau{DBD965}) gali atsiimti kiekviena diena bet kuriuo metu San-Fierro savivaldybëje.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Serveryje yra galimybe uþdirbti papildomu pinigu/patirties ir kreditu! Ivykdyk serverio pasiekimus - {C2BF1B}/pasiekimai{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Mûsu serverio svetainëje galite bendrauti su kitais þaidejais, taip pat pildyti á serverio darbus - {C2BF1B}www.san-andreas.lt{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Esi alkanas? Nuvyk á bet kokia serverio uþkandinæ | Maisto ir gërimø valdymas - {C2BF1B}/mgv{DBD965}.");
    }
    else if(TicksTillAutoMsg == 20)
    {
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Mûsø serverio oficialus Teamspeak serveris: {C2BF1B}ts.san-andreas.lt{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Reikia pagalbos? Neþinai kaip þaisti? Klausk administratoriø! - {C2BF1B}/admin{DBD965}. | Arba vip nariø - {C2BF1B}/vip{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Visi egzistuojantys serverio darbai - {C2BF1B}/darbai{DBD965} | Bausmiø sàraðas - {C2BF1B}/bausmes{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Visas tarnybas kurias galite iðsikviesti raðykite - {C2BF1B}/kviesti{DBD965}. ");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Apsisaugok savo þaidimo paskyrà - {C2BF1B}/saugumas{DBD965}. | Trugdo serverio textdrawai? - {C2BF1B}/slepti{DBD965}.");
    }
    else if(TicksTillAutoMsg == 10)
    {
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Neþinai kur kas yra ir nori suþinoti? Naudokite komandà - {C2BF1B}/gps{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: VIP nariø komandos - {C2BF1B}/vipinfo{DBD965} | Administratoriø komandos - {C2BF1B}/akomandos{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Serverio taisykliø sàraðas - {C2BF1B}/taisykles{DBD965} | Informacijà apie save - {C2BF1B}/info{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Pagrindines naudojamos serverio komandos - {C2BF1B}/komandos{DBD965}. | Matai sukèiø? - {C2BF1B}/hack{DBD965} Vardas_Pavarde prieþastis.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Uogø inventorius {C2BF1B}/ui{DBD965}. | Visos administratoriø esamos komandos {C2BF1B}/akomandos{DBD965}.");
    }
    else if(TicksTillAutoMsg == 0)
    {
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Visø darbø direktoriø sàraðas - {C2BF1B}/direktoriai{DBD965} | Visø darbø pavaduotojø - {C2BF1B}/pavaduotojai{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Serverio priþiûrëtojø sàraðas - {C2BF1B}/priziuretojai{DBD965}. | Jûsø darbo komandos - {C2BF1B}/darbokomandos{DBD965}");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Þaidejo ieðkojimas - {C2BF1B}/mapp{DBD965} | TOP sàraðas - {C2BF1B}/top{DBD965}");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Serverio tr.priemoniø valdymas - {C2BF1B}/mvaldymas{DBD965} | Namø informacijos - {C2BF1B}/namai{DBD965}.");
        SendClientMessageToAll(0xDBD965FF, "[INFO]: Visos serverio parduodamos paslaugos, jø valdymas - {C2BF1B}/kreditai{DBD965}.");
        TicksTillAutoMsg = 40;
    }

	new Hours,Minutes;
	gettime(Hours, Minutes);
	if(Hours >= 21)
	{
		SetWorldTime(22);
	}
	else if(Hours > 7 && Hours < 21)
	{
		SetWorldTime(14);
	}
    if(Minutes == 0 && (Hours == 16 || Hours == 20))
    {
        StartWeedEvent();
    }
    else
    {
        if(WeedEventInProgress == true)
        {
            WeedEventTimeLeft--;
            if(WeedEventTimeLeft == 0)
            {
                EndWeedEvent();
            }
        }
    }
    if(Hours == 23 && Minutes == 59)
    {
        switch(DienosVarzybos)
        {
            case TOP_BY_TIME:
            {
                mysql_function_query(connectionHandle,"SELECT `id`,`Name` FROM `players` ORDER BY `SiandienZaista` DESC LIMIT 1;",true,"VarzybosPrize","");
            }
            case TOP_BY_Uzdarbis:
            {
                mysql_function_query(connectionHandle,"SELECT `id`,`Name` FROM `players` ORDER BY `UzdarbisSiandien` DESC LIMIT 1;",true,"VarzybosPrize","");
            }
            case TOP_BY_Math:
            {
                mysql_function_query(connectionHandle,"SELECT `id`,`Name` FROM `players` ORDER BY `MathToday` DESC LIMIT 1;",true,"VarzybosPrize","");
            }
            case TOP_BY_Fruits:
            {
                mysql_function_query(connectionHandle,"SELECT `id`,`Name` FROM `players` ORDER BY `UogosToday` DESC LIMIT 1;",true,"VarzybosPrize","");
            }
            case TOP_BY_Carts:
            {
                mysql_function_query(connectionHandle,"SELECT `id`,`Name` FROM `players` ORDER BY `KartsLaimejoSiandien` DESC LIMIT 1;",true,"VarzybosPrize","");
            }
        }
    }
    if(Hours == 0 && Minutes == 0)
    {
        if(playersOnline > 0)
        {
            for(new i = 0;i<=GetPlayerPoolSize();i++)
            {
                PlayerDB[i][UzdarbisSiandien] = 0;
                PlayerDB[i][SiandienZaista] = 0;
                PlayerDB[i][TimeWorkedWithCarToday] = 0;
                PlayerDB[i][UogosToday] = 0;
                PlayerDB[i][MathToday] = 0;
                PlayerDB[i][KartsLaimejoSiandien] = 0;
            }
        }
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] = 0;
        }

        mysql_function_query(connectionHandle,"UPDATE `Verslai` SET `PinigaiUzdirbtiSiandien` = '0';",false,"SendQuery","");

        Stats_TotalToday = 0;
        new UogosText[600];
        new str[128];
        strcat(UogosText, "„San-Fierro parduotø uogø statistika“\n");
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Iðviso parduota: {99CCFF}%d {FFFFFF}uogø.\n",Stats_Total);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota avieèiø: {99CCFF}%d\n",Stats_Avietes);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota brukniø: {99CCFF}%d\n",Stats_Bruknes);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota þemuogiø: {99CCFF}%d\n",Stats_Zemuoges);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota melyniø: {99CCFF}%d\n",Stats_Melynes);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota braðkiø: {99CCFF}%d\n",Stats_Braskes);
        strcat(UogosText, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Ðiandien parduota: {99CCFF}%d {FFFFFF}uogø.",Stats_TotalToday);
        strcat(UogosText, str);
        UpdateDynamic3DTextLabelText(UogosStats, 0x99CCFFFF, UogosText);

        mysql_function_query(connectionHandle,"UPDATE `players` SET `UzdarbisSiandien` = '0',`SiandienZaista`  = '0',`TimeWorkedWithCarToday` = '0',`UogosToday` = '0',`MathToday` = '0',`KartsLaimejoSiandien` = '0';",false,"SendQuery","");

        VarzybosConstruction();
    }
    SavePavaduotojai();
    SaveJobsFunds();
    CheckGarages();
}
public OnVehicleDeath(vehicleid, killerid)
{
    if(IsValidObject(VehicleDB[vehicleid][MirgalkesObjektas]))
    {
        DestroyObject(VehicleDB[vehicleid][MirgalkesObjektas]);
        VehicleDB[vehicleid][MirgalkesObjektas] = INVALID_OBJECT_ID;
    }
    if(VehicleDB[vehicleid][SuSvitureliais] == true)
    {
        VehicleDB[vehicleid][SuSvitureliais] = false;
        DestroyObject(VehicleDB[vehicleid][SvitureliuObjektas]);
        VehicleDB[vehicleid][SvitureliuObjektas]-=1;
    }
	if(VehicleDB[vehicleid][VehicleWithOwner] == true)
	{
        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
        {
            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
        }
		new x = vehicleid;
		VehicleDB[x][VehicleDauztumas]+=1;
		new query[100];
		mysql_format(connectionHandle, query, 100, "UPDATE `nuosavostrpriemones` SET `Sudauzyta` = '1' WHERE `ID` = '%i';", VehicleDB[x][VehicleDatabaseID]);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
		SaveOwnedVehicle(x);
        if(VehicleDB[x][Pardavinejama] == true)
        {
            DestroyDynamic3DTextLabel(VehicleDB[x][PardavimoLabel]);
        }
		foreach(new i : Player)
		{
			if(PlayerDB[i][OwnedVehicle1] == vehicleid)
			{
				PlayerDB[i][OwnedVehicle1] = -1;
                VehicleBySlotInfo[i][0][BrokenBySlot] = 1;
                VehicleBySlotInfo[i][0][BrokenTimesBySlot] = VehicleDB[vehicleid][VehicleDauztumas];
                VehicleBySlotInfo[i][0][RidaBySlot] = VehicleDB[vehicleid][Rida];
                if(VehicleDB[i][Pardavinejama] == true)
                {
                    VehicleBySlotInfo[i][0][PardavinejamaBySlot] = 1;
                }
                else
                {
                    VehicleBySlotInfo[i][0][PardavinejamaBySlot] = 0;
                }
				break;
			}
			if(PlayerDB[i][OwnedVehicle2] == vehicleid)
			{
				PlayerDB[i][OwnedVehicle2] = -1;
                VehicleBySlotInfo[i][1][BrokenBySlot] = 1;
                VehicleBySlotInfo[i][1][BrokenTimesBySlot] = VehicleDB[x][VehicleDauztumas];
                VehicleBySlotInfo[i][1][RidaBySlot] = VehicleDB[vehicleid][Rida];
                if(VehicleDB[i][Pardavinejama] == true)
                {
                    VehicleBySlotInfo[i][1][PardavinejamaBySlot] = 1;
                }
                else
                {
                    VehicleBySlotInfo[i][1][PardavinejamaBySlot] = 0;
                }
				break;
			}
		}
		DestroyVehicle(vehicleid);
	}
    else
    {
        VehicleDB[vehicleid][VehicleEngineState] = 0;
        VehicleDB[vehicleid][VehicleLights] = 0;
        VehicleDB[vehicleid][VRibotuvas] = 0;
        if(VehicleDB[vehicleid][DARBOMASINA])
        {
            VehicleDB[vehicleid][Bendzinas] = 80;
            VehicleDB[vehicleid][FuelType] = 0;
            VehicleDB[vehicleid][PakrautasMaistas] = false;
            VehicleDB[vehicleid][PakrautasSmelis] = false;
            VehicleDB[vehicleid][PakrautosDetales] = false;
            VehicleDB[vehicleid][PakrautaMasina] = -1;
            VehicleDB[vehicleid][PakrautaElektronika] = false;
            VehicleDB[vehicleid][PripildytaDegalu] = false;
            DestroyObject(VehicleDB[vehicleid][VehicleDezesObjectID]);
    		VehicleDB[vehicleid][VehicleDezesObjectID] = -1;
    		//SetVehicleToRespawn(vehicleid);
        }
    }
    if(IsARegularBike(GetVehicleModel(vehicleid)) == 1)
    {

        SetVehicleEngineState(vehicleid,0);
    }
    else
    {
        SetVehicleEngineState(vehicleid,0);
    }
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(PlayerDB[playerid][LoggedIn] == 1 && PlayerDB[playerid][Loaded] == 1)
	{
		if(strlen(text) > 0)
		{
            if(strlen(text) == 1 && strcmp(text, " ", true) == 0)
            {
                return 0;
            }

            if(PlayerDB[playerid][MutedPlayer] > 0)
            {
                new string[80];
                format(string, 80, "• Ið jûsø buvo atimta teisë ðnekëti, kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
                SendClientMessage(playerid, RAUDONA, string);
                return 0;
            }

			if(PlayerDB[playerid][TalkingWithPhone] == 1)
			{
				if(PlayerDB[playerid][PlayerTalkingWith] > -1)
				{
					new String[128];
					format(String, 128, "Tu sakai: %s", text);
					SendClientMessage(playerid, PILKA, String);
					format(String, 128, "Telefonas: %s", text);
					SendClientMessage(PlayerDB[playerid][PlayerTalkingWith], ORANGE, text);
				}
			}
			else
			{
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				new outputStr[128];
				format(outputStr,128,"%s(%i): {FFFFFF}%s",Vardas(playerid),playerid,text);
                new PlayerVirtualWorld = GetPlayerVirtualWorld(playerid);
                new PlayerInterior = GetPlayerInterior(playerid);
                SetPlayerChatBubble(playerid, text, 0xFFFFFFFF, 10.0, 6000);
				foreach(new i : Player)
				{
					if(IsPlayerInRangeOfPoint(i, 20, X, Y, Z) && PlayerVirtualWorld == GetPlayerVirtualWorld(i) && PlayerInterior == GetPlayerInterior(i))
					{
						SendClientMessage(i, GetPlayerColor(playerid), outputStr);
					}
				}
                if(!(PlayerDB[playerid][GavoElektrosSoka] == true && PlayerDB[playerid][ElektrosSokasGalioja] >= gettime() ))
                {
                    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 0, 0, 0, 1000, 1);
                }
                if(MathProblemWaiting == true)
                {
                    new val = strval(text);
                    if(val == MathProblemsAnswer)
                    {
                        MathProblemWaiting = false;
                        new string[100];
                        format(string, sizeof(string), "• Teisingas atsakymas yra - {C2BF1B}%d{DBD965}.", MathProblemsAnswer);
                        SendClientMessageToAll(0xDBD965FF, string);

                        format(string, sizeof(string), "• Ðià matematinæ sàlygà teisingai iðsprendë - {C2BF1B}%s{DBD965}.",Vardas(playerid));
                        SendClientMessageToAll(0xDBD965FF, string);
                        PlayerDB[playerid][MoneyInPocket]+=MathProblemsBounty;
                        PlayerDB[playerid][MathToday]+=1;
                        PlayerDB[playerid][MathTotal]+=1;


                    }
                }
			}
		}
	}
	return 0;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    for(new i = 0;i<SAUGIU_ZONU_SKAICIUS;i++)
    {
        if(areaid == SaugiosZonos[i])
        {
            TextDrawShowForPlayer(playerid, SAUGIZONA1);
            TextDrawShowForPlayer(playerid, SAUGIZONA2);
        }
    }
    for(new i = 0;i<KARO_ZONU_SKAICIUS;i++)
    {
        if(areaid == KaroZonos[i])
        {
            TextDrawShowForPlayer(playerid, KAROZONA1);
            TextDrawShowForPlayer(playerid, KAROZONA2);
        }
    }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new vehicleid = GetPlayerVehicleID(playerid);
        new Model = GetVehicleModel(vehicleid);
        new speed = GetVehicleSpeed(vehicleid);
        if(VehicleDB[vehicleid][DARBOMASINA] == false && IsJobFromLaw(VehicleDB[vehicleid][DARBOID]) == 0 && IsVehicleAircraft(Model) == 0 && IsVehicleShip(Model) == 0 && IsVehicleModelWithEngine(Model) == 1)
        {
            for(new m = 0;m<GREICIO_MATUOKLIU_SKAICIUS;m++)
            {
                if(areaid == GreicioMatuokliai[m])
                {
                    if(speed > 90)
                    {
                        new string[128];

                        if(speed > 120)
                        {
                            if(IsABike(Model))
                            {
                                if(PlayerDB[playerid][MotoLicense] == 1)
                                {
                                    PlayerDB[playerid][WantedLevel]+= 1;
                                    PlayerDB[playerid][MatuokliuBalai]+= 2;
                                    format(string, 128, "Jus virðijote 120km/h greitá. Jûsø buvo %ikm/h. Gaunate 2 balus ir vienà gaudomumo lygá. Jau turite %i/10 balø.", speed,PlayerDB[playerid][MatuokliuBalai]);
                                    SendClientMessage(playerid, RAUDONA, string);
                                    if(PlayerDB[playerid][MatuokliuBalai] >= 10)
                                    {
                                        PlayerDB[playerid][DrivingTheory] = 0;
                                        PlayerDB[playerid][MotoLicense] = 0;
                                        PlayerDB[playerid][MatuokliuBalai] = 0;
                                        ErrorMsg(playerid,"• Surinkote 10 balø, todël praradote motociklo vairavimo teises.");
                                        PlayerDB[playerid][LostDLicenses]++;
                                    }
                                }
                                else
                                {
                                    PlayerDB[playerid][WantedLevel]+=5;
                                    format(string, 128, "Jus virðijote 120km/h greitá. Jûsø buvo %ikm/h. Taip pat vairuojate neturëdamas teisiø,todël gaunate +5 gaudomumo lygio taðkus.", speed);
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                            else
                            {
                                if(PlayerDB[playerid][AutoLicense] == 1)
                                {
                                    PlayerDB[playerid][WantedLevel]+= 1;
                                    PlayerDB[playerid][MatuokliuBalai]+= 2;
                                    format(string, 128, "Jus virðijote 120km/h greitá. Jûsø buvo %ikm/h. Gaunate 2 balus ir vienà gaudomumo lygá. Jau turite %i/10 balø.", speed,PlayerDB[playerid][MatuokliuBalai]);
                                    SendClientMessage(playerid, RAUDONA, string);
                                    if(PlayerDB[playerid][MatuokliuBalai] >= 10)
                                    {
                                        PlayerDB[playerid][DrivingTheory] = 0;
                                        PlayerDB[playerid][AutoLicense] = 0;
                                        PlayerDB[playerid][MatuokliuBalai] = 0;
                                        ErrorMsg(playerid,"• Surinkote 10 balø, todël praradote automobilio vairavimo teises.");
                                        PlayerDB[playerid][LostDLicenses]++;
                                    }
                                }
                                else
                                {
                                    PlayerDB[playerid][WantedLevel]+=5;
                                    format(string, 128, "Jus virðijote 120km/h greitá. Jûsø buvo %ikm/h. Taip pat vairuojate neturëdamas teisiø,todël gaunate +5 gaudomumo lygio taðkus.", speed);
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                        }
                        else
                        {
                            if(IsABike(Model))
                            {
                                if(PlayerDB[playerid][MotoLicense] == 1)
                                {
                                    PlayerDB[playerid][WantedLevel]+= 1;
                                    PlayerDB[playerid][MatuokliuBalai]+= 1;
                                    format(string, 128, "Jus virðijote 90km/h greitá. Jûsø buvo %ikm/h. Gaunate 1 balà ir vienà gaudomumo lygá. Jau turite %i/10 balø.", speed,PlayerDB[playerid][MatuokliuBalai]);
                                    SendClientMessage(playerid, RAUDONA, string);
                                    if(PlayerDB[playerid][MatuokliuBalai] >= 10)
                                    {
                                        PlayerDB[playerid][DrivingTheory] = 0;
                                        PlayerDB[playerid][MotoLicense] = 0;
                                        PlayerDB[playerid][MatuokliuBalai] = 0;
                                        ErrorMsg(playerid,"• Surinkote 10 balø, todël praradote motociklo vairavimo teises.");
                                        PlayerDB[playerid][LostDLicenses]++;
                                    }
                                }
                                else
                                {
                                    PlayerDB[playerid][WantedLevel]+=5;
                                    format(string, 128, "Jus virðijote 90km/h greitá. Jûsø buvo %ikm/h. Taip pat vairuojate neturëdamas teisiø,todël gaunate +5 gaudomumo lygio taðkus.", speed);
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                            else
                            {
                                if(PlayerDB[playerid][AutoLicense] == 1)
                                {
                                    PlayerDB[playerid][WantedLevel]+= 1;
                                    PlayerDB[playerid][MatuokliuBalai]+= 1;
                                    format(string, 128, "Jus virðijote 90km/h greitá. Jûsø buvo %ikm/h. Gaunate 1 balà ir vienà gaudomumo lygá. Jau turite %i/10 balø.", speed,PlayerDB[playerid][MatuokliuBalai]);
                                    SendClientMessage(playerid, RAUDONA, string);
                                    if(PlayerDB[playerid][MatuokliuBalai] >= 10)
                                    {
                                        PlayerDB[playerid][DrivingTheory] = 0;
                                        PlayerDB[playerid][AutoLicense] = 0;
                                        PlayerDB[playerid][MatuokliuBalai] = 0;
                                        ErrorMsg(playerid,"• Surinkote 10 balø, todël praradote automobilio vairavimo teises.");
                                        PlayerDB[playerid][LostDLicenses]++;
                                    }
                                }
                                else
                                {
                                    PlayerDB[playerid][WantedLevel]+=5;
                                    format(string, 128, "Jus virðijote 90km/h greitá. Jûsø buvo %ikm/h. Taip pat vairuojate neturëdamas teisiø,todël gaunate +5 gaudomumo lygio taðkus.", speed);
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                        }
                    }

                }
            }
        }
    }
	if(areaid == HospitalInterioras)
	{
        PlayerDB[playerid][LigoninesKlientas] = true;
	}
    else if(areaid == Sviesaforas1Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[0][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas2Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[1][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas3Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[2][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas4Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[3][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas5Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[4][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas6Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[5][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas7Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[6][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas8Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[7][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas9Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[8][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas10Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[9][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas11Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[10][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }
    else if(areaid == Sviesaforas12Area)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(Sviesaforai[11][SfRedOn] == true)
            {
                PlayerPravaziavoRaudona(playerid);
            }
        }
    }

	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    for(new i = 0;i<SAUGIU_ZONU_SKAICIUS;i++)
    {
        if(areaid == SaugiosZonos[i])
        {
            TextDrawHideForPlayer(playerid, SAUGIZONA1);
            TextDrawHideForPlayer(playerid, SAUGIZONA2);
        }
    }
    for(new i = 0;i<KARO_ZONU_SKAICIUS;i++)
    {
        if(areaid == KaroZonos[i])
        {
            TextDrawHideForPlayer(playerid, KAROZONA1);
            TextDrawHideForPlayer(playerid, KAROZONA2);
        }
    }
	if(areaid == HospitalInterioras)
	{
        PlayerDB[playerid][LigoninesKlientas] = false;
        if(PlayerDB[playerid][LigoninesLaikas] > 0)
        {
            SetPlayerPos(playerid, -2672.5867,667.0590,244.3842);
            SetPlayerFacingAngle(playerid, 100);
            SetPlayerInterior(playerid, 1);
            SetPlayerVirtualWorld(playerid, 0);
        }
	}
	return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if(PlayerDB[playerid][Job] == 15)
    {
        for(new cpid = 0;cpid < VALYTOJAI_MISIJU_SKAICIUS;cpid ++)
        {
            if(ValytojaiMisijos[cpid][MisijosCPD] == checkpointid)
            {
                if(ValytojaiMisijos[cpid][MisijaRuns] == true)
                {
                    GameTextForPlayer(playerid, "~y~ VALOMA..", 3000, 4);
                    if(IsValidDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas1]))
                    {
                        ValytojaiMisijos[cpid][MisijaRuns] = false;
                        GetDynamicObjectPos(ValytojaiMisijos[cpid][MisijosObjektas1], ValytojaiMisijos[cpid][MisijosObjektas1X],ValytojaiMisijos[cpid][MisijosObjektas1Y],ValytojaiMisijos[cpid][MisijosObjektas1Z]);
                        GetDynamicObjectRot(ValytojaiMisijos[cpid][MisijosObjektas1], ValytojaiMisijos[cpid][MisijosObjektas1RX],ValytojaiMisijos[cpid][MisijosObjektas1RY],ValytojaiMisijos[cpid][MisijosObjektas1RZ]);
                        DestroyDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas1]);
                    }
                    if(IsValidDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas2]))
                    {
                        ValytojaiMisijos[cpid][MisijaRuns] = false;
                        GetDynamicObjectPos(ValytojaiMisijos[cpid][MisijosObjektas2], ValytojaiMisijos[cpid][MisijosObjektas2X],ValytojaiMisijos[cpid][MisijosObjektas2Y],ValytojaiMisijos[cpid][MisijosObjektas2Z]);
                        GetDynamicObjectRot(ValytojaiMisijos[cpid][MisijosObjektas2], ValytojaiMisijos[cpid][MisijosObjektas2RX],ValytojaiMisijos[cpid][MisijosObjektas2RY],ValytojaiMisijos[cpid][MisijosObjektas2RZ]);
                        DestroyDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas2]);
                    }
                    if(IsValidDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas3]))
                    {
                        ValytojaiMisijos[cpid][MisijaRuns] = false;
                        GetDynamicObjectPos(ValytojaiMisijos[cpid][MisijosObjektas3], ValytojaiMisijos[cpid][MisijosObjektas3X],ValytojaiMisijos[cpid][MisijosObjektas3Y],ValytojaiMisijos[cpid][MisijosObjektas3Z]);
                        GetDynamicObjectRot(ValytojaiMisijos[cpid][MisijosObjektas3], ValytojaiMisijos[cpid][MisijosObjektas3RX],ValytojaiMisijos[cpid][MisijosObjektas3RY],ValytojaiMisijos[cpid][MisijosObjektas3RZ]);
                        DestroyDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas3]);
                    }
                    if(IsValidDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas4]))
                    {
                        ValytojaiMisijos[cpid][MisijaRuns] = false;
                        GetDynamicObjectPos(ValytojaiMisijos[cpid][MisijosObjektas4], ValytojaiMisijos[cpid][MisijosObjektas4X],ValytojaiMisijos[cpid][MisijosObjektas4Y],ValytojaiMisijos[cpid][MisijosObjektas4Z]);
                        GetDynamicObjectRot(ValytojaiMisijos[cpid][MisijosObjektas4], ValytojaiMisijos[cpid][MisijosObjektas4RX],ValytojaiMisijos[cpid][MisijosObjektas4RY],ValytojaiMisijos[cpid][MisijosObjektas4RZ]);
                        DestroyDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas4]);
                    }
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        TogglePlayerDynamicCP(i, checkpointid, false);
                    }
                    TogglePlayerControllable(playerid, false);
                    SetTimerEx("IsvalytaGT", 1000, false, "d", playerid);
                    if(PlayerDB[playerid][VIP] == 1)
                    {
                        PlayerDB[playerid][Uzdarbis]+=GetPlayerMaxIncomeFwMSG(playerid) * 2;
                        PlayerDB[playerid][UzdarbisSiandien]+=GetPlayerMaxIncomeFwMSG(playerid) * 2;
                    }
                    else
                    {
                        PlayerDB[playerid][Uzdarbis]+=GetPlayerMaxIncomeFwMSG(playerid);
                        PlayerDB[playerid][UzdarbisSiandien]+=GetPlayerMaxIncomeFwMSG(playerid);
                    }
                    SendClientMessage(playerid, ZALIA, "• Gavote iðmokà vertà jûsø vienos darbo minutës á savo uþdarbá.");
                    SetTimerEx("ResetJanitorsMission",  60 * 1000, false, "d", cpid);
                }
                else
                {
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        TogglePlayerDynamicCP(playerid, checkpointid, false);
                    }
                }
            }
        }
    }
    //if(PlayerDB[playerid][Job] == 16)
    //{
        //if(checkpointid ==
    //}
    return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	//if(VehicleDB[vehicleid][TURGUS] == 1) return ErrorMsg(playerid, "• Turgaus transportà negalite þymeti.");
    if(PlayerDB[playerid][Job] == 5 && IsABike(GetVehicleModel(vehicleid)))
    {
        SetPVarInt(playerid, "PazymetasMoto", vehicleid);
    }
    if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
    {
        Kick(playerid);
        return 0;
    }
    PlayerDB[playerid][PlayerWantedVehicleID] = vehicleid;
	if(VehicleDB[vehicleid][VehicleWithOwner] == true)
	{
		if(VehicleDB[vehicleid][VehicleLocked] == 1)
		{
			if(PlayerDB[playerid][OwnedVehicle1] == vehicleid || PlayerDB[playerid][OwnedVehicle2] == vehicleid)
			{
				SendClientMessage(playerid, ZALIA, "• Tr. priemonë uþrakinta, bet jûs esate jos savininkas.");
			}
			else
			{
				new string[100];
				format(string, 100, "Tr.priemonë uþrakinta, ji priklauso {7bae39}%s.", Vardas(VehicleDB[vehicleid][VehicleOwnerID]));
				SendClientMessage(playerid, 0xAADB69FF, string);

				if(IsPlayerInAnyVehicle(playerid))
				{
					RemovePlayerFromVehicle(playerid);
				}
				new Float:Cords[3];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);

                foreach(new i : Player)
                {
                    if(PlayerDB[i][OwnedVehicle1] == vehicleid)
                    {
                        SendClientMessage(i, GELTONA, "Kaþkas bando álipti á jûsø pirmà maðinà.");
                        break;
                    }
                    if(PlayerDB[i][OwnedVehicle2] == vehicleid)
                    {
                        SendClientMessage(i, GELTONA, "Kaþkas bando álipti á jûsø antrà maðinà.");
                        break;
                    }
                }
			}
		}
        if(VehicleDB[vehicleid][Pardavinejama] == true)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                RemovePlayerFromVehicle(playerid);
            }
            new Float:Cords[3];
            GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
            SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
            new Modelis = GetVehicleModel(vehicleid);
            new info[700];
            new string[128];
            format(string, 128, "{CCCC66}Þaidëjo {FFFF00}%s {CCCC66}parduodamo transporto informacija:\n\n",Vardas(VehicleDB[vehicleid][VehicleOwnerID]));
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio pavadinimas: {FFFF00}%s{CCCC66}\n",vNames[Modelis - 400]);
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio kuro sànaudos: {FFFF00}%il/100KM{CCCC66}\n",DegaluSanaudos[Modelis - 400]);
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio bako talpa: {FFFF00}%il{CCCC66}\n",DegaluTalpa[Modelis-400]);
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio rida: {FFFF00}%0.1f km{CCCC66}\n",VehicleDB[vehicleid][Rida]);
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio maksimalus greitis: {FFFF00}%ikm/h{CCCC66}\n",MaxGreitis[Modelis-400]);
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Naujos vertë: {FFFF00}%s {CCCC66}€.\n",AddPoints(aKaina[Modelis-400]));
            strcat(info, string);
            format(string, 128, "\t{CCCC66}Automobilio numeriai: {FFFF00}%s{CCCC66}\n\n",VehicleDB[vehicleid][VehicleNumbers]);
            strcat(info, string);

            format(string, 128, "{CCCC66}Norint susisiekti su pardavëju: {FFFF00}/sms %s.",Vardas(VehicleDB[vehicleid][VehicleOwnerID]));
            strcat(info, string);
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ði transporto priemonë yra pardavinëjama", info, "Gerai","");

        }

	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    PlayerDB[playerid][VehiclePlayerExitedLastTime] = vehicleid;
    if(PlayerDB[playerid][Job] == 16)
    {
        DisablePlayerCheckpoint(playerid);
    }
	return 1;
}

public OnPlayerVehicleDamage(playerid,vehicleid,Float:Damage)
{
    new Float:health;
	new Float:HPLoss;
 	new model = GetVehicleModel(vehicleid);
 	if(!(model == 509 || model == 481 || model == 510 ))//DVIRACIAI
 	{
	  	foreach(new i : Player)
	    {
	    	if(IsPlayerInVehicle(i, vehicleid))
	    	{
	    		 if(Damage > 200)
	    		 {
	    		 	GetPlayerHealth(playerid,health);
	    		 	if(PlayerDB[playerid][SeatBelt] == 1)
	    		 	{
	    		 		HPLoss = floatround(Damage / 40,floatround_round);
	    		 	}
	    		 	else
	    		 	{
	    		 		HPLoss = floatround(Damage / 20,floatround_round);
	    		 	}
	    		 	SetPlayerHealthEx(playerid,health - HPLoss);
	    		 }
	    	}
	    }
 	}

    return 1;
}
forward KickPlayerIfHesStillInVehicle(vehicleid,playerid);
public KickPlayerIfHesStillInVehicle(vehicleid,playerid)
{
	if(IsPlayerInVehicle(playerid, vehicleid))
	{
		printf("Vehicle-Hacker %s", Vardas(playerid));
		Kick(playerid);
	}
	return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
        {
            Kick(playerid);
            return 0;
        }
        SetPlayerArmedWeapon(playerid, 0);
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        new VID = GetPlayerVehicleID(playerid);
        if(!IsARegularBike(GetVehicleModel(VID)))
        {
            ShowPlayerSpeedo(playerid);
            switch(VehicleDB[VID][RadijasStotis])
            {
                case 0:
                {
                    StopAudioStreamForPlayer(playerid);
                }
                case 1:
                {
                    PlayAudioStreamForPlayer(playerid, "http://84.46.205.13:80/rc128.mp3");
                }
                case 2:
                {
                    PlayAudioStreamForPlayer(playerid, "http://radio.m-1.fm/m1/mp3.m3u");
                }
                case 3:
                {
                    PlayAudioStreamForPlayer(playerid, "http://power-stream.data.lt:8000/PHR");
                }
                case 4:
                {
                    PlayAudioStreamForPlayer(playerid, "http://84.46.205.13:80/zipfm128.mp3");
                }
                case 5:
                {
                    PlayAudioStreamForPlayer(playerid, "http://skonto.ls.lv:8002/mp3");
                }
                case 6:
                {
                    PlayAudioStreamForPlayer(playerid, "http://217.146.71.24:80/uuno_high.mp3");
                }
                case 7:
                {
                    PlayAudioStreamForPlayer(playerid, "http://radiozetmp3-18.eurozet.pl:8400");
                }
            }
        }
        else
        {
            SetVehicleEngineState(VID,true);
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        HidePlayerSpeedo(playerid);
        StopAudioStreamForPlayer(playerid);
    }
	if(newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT)
	{
        new vehicleid = GetPlayerVehicleID(playerid);
        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
        {
            new bool:VairuotojasMasinoje;
            new Vairuotojas;
            foreach(new i : Player)
            {
                if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == 0 && (PlayerDB[i][Job] == 3))
                {
                    VairuotojasMasinoje = true;
                    Vairuotojas = i;
                    break;
                }
            }
            if(VairuotojasMasinoje == true)
            {
                new string[128];
                format(string, 128, "• Á jûsø maðinà álipo {00FF00}%s{FFFFFF}.Jei norite imti pinigus raðykite: {00FF00}/imti %i{FFFFFF}.", Vardas(playerid),playerid);
                SendClientMessage(Vairuotojas, -1, string);
            }
        }
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
        if(PlayerDB[playerid][Surakintas] == false && PlayerDB[playerid][Suristas] == false)
        {
            TogglePlayerControllable(playerid, true);
        }
        for(new c = 0;c < VALYTOJAI_MISIJU_SKAICIUS;c++)
        {
            TogglePlayerDynamicCP(playerid, ValytojaiMisijos[c][MisijosCPD], false);
        }

		if(PlayerDB[playerid][SeatBelt] == 1)
		{
			ErrorMsg(playerid,"• Nusisegëte saugos dirþà.");
			PlayerDB[playerid][SeatBelt] = 0;
		}
		if(PlayerDB[playerid][RaceCheckPointID] > 0)
		{
			DisablePlayerRaceCheckpoint(playerid);
			PlayerDB[playerid][RaceCheckPointID] = 0;
		}
        if(PlayerDB[playerid][ImamiPinigai] == true)
        {
            PlayerDB[playerid][ImamiPinigai] = false;
            TextDrawHideForPlayer(playerid, Taksometras1);
            TextDrawHideForPlayer(playerid, Taksometras2);
            TextDrawHideForPlayer(playerid, Taksometras3);
            TextDrawHideForPlayer(playerid, Taksometras4[playerid]);
            TextDrawHideForPlayer(playerid, Taksometras5[playerid]);
            new vehicleid = PlayerDB[playerid][PlayerWantedVehicleID];
            new Float:Atstumas = (GetPlayerDistanceFromPoint(playerid, PlayerDB[playerid][PaslauguAtskaitosX], PlayerDB[playerid][PaslauguAtskaitosY], PlayerDB[playerid][PaslauguAtskaitosZ]) / 1000);
            new KelionesKaina;
            KelionesKaina = floatround(Atstumas * TaksiFSettings[TaksiFKiloKaina], floatround_ceil);
            SendClientMessage(playerid, GELTONA, "-- KELIONËS ÈEKIS --");
            new string[128];
            format(string, 128, "Kelionës atstumas: %0.001f KM",Atstumas);
            new GaunamaPatirtis;
            GaunamaPatirtis = floatround(Atstumas, floatround_floor);
            SendClientMessage(playerid, ZYDRA, string);
            format(string, 128, "SUMA: %dEUR.",KelionesKaina);
            SendClientMessage(playerid, ZYDRA, string);
            SendClientMessage(playerid, GELTONA, "-- ÈEKIO PABAIGA --");
            PlayerDB[playerid][MoneyInPocket]-=KelionesKaina;
            new VDriverID = GetVehicleDriver(vehicleid);
            if(VDriverID != -1 && PlayerDB[VDriverID][Job] == 4)
            {
                format(string, 128, "Keleivis iðlipo,mokestis uþ paslaugas: %d€", KelionesKaina);
                SendClientMessage(VDriverID, ZALIA, string);
                SendClientMessage(VDriverID, ZALIA, "Jûs gausite ~50%% nuo paslaugø kainos.");
                if(PlayerDB[VDriverID][VIP])
                {
                    GaunamaPatirtis = GaunamaPatirtis*2;
                }

                PlayerDB[VDriverID][Job4XP]+=GaunamaPatirtis;

                PlusPlayerScore(VDriverID,GaunamaPatirtis);
                format(string, 128, "Uþ keleivio nuveþimà gavote +%dXP prie darbo patirties.", GaunamaPatirtis);
                SendClientMessage(VDriverID, ZALIA, string);
                new Fondui = floatround(KelionesKaina / 2, floatround_floor);
                DarboInformacija[4][DarboFondas]+=Fondui;
                PlayerDB[VDriverID][MoneyInPocket]+=KelionesKaina - Fondui;
            }
            else
            {
                DarboInformacija[4][DarboFondas]+=KelionesKaina;
            }
        }
	}
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = PlayerDB[playerid][LastDrivedCar];
		if(VehicleDB[vehicleid][VMMasina] == 1)
		{
            if(GetVehicleModel(vehicleid) == 403)
            {
                DestroyVehicle(SunkvTraileris);
                SunkvTrailerisSpawned = false;
            }
			SetVehicleToRespawn(vehicleid);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
        new stringas[128];
        format(stringas,128,"• Paskutinis ðioje transporto priemonëje sedëjo: {7bae39}%s.",VehicleDB[vehicleid][LastDriverName]);
        SendClientMessage(playerid, 0xAADB69FF, stringas);
		PlayerDB[playerid][LastDrivedCar] = vehicleid;
        if(VehicleDB[vehicleid][Kartingas] == true)
        {
            if(PlayerDB[playerid][KartingaiTicket] < gettime())
            {
                ErrorMsg(playerid,"• Praðome ásigyti bilietà leidþianti vaþinëtis kartingais.");
                RemovePlayerFromVehicle(playerid);
            }
            else
            {
                SendClientMessage(playerid, 0xAADB69FF, "Jûsø kartingo bilieto galiojimo laikà galite paþiûrëti paraðæ komandà {7bae39}/kartingas{AADB69}.");
                SendClientMessage(playerid, 0xAADB69FF, "Taip pat galite rungtyniauti su kitais þaidëjais ið pinigø su komandà {7bae39}/kartingai{AADB69}.");
                SendClientMessage(playerid, 0xAADB69FF, "Uþvesti variklá galite paraðæ /variklis arba paspaude Y raidæ arba NUM2.");
            }
        }
        if(AUEventCarStarted == true)
        {
            if(vehicleid == AfterUpdateEventCar)
            {
                if(AUEventCarsLeft == 0)
                {
                    ErrorMsg(playerid,"• Maðinos baigësi.");
                    RemovePlayerFromVehicle(playerid);
                    SetVehicleToRespawn(vehicleid);
                }
                else
                {
                    if(PlayerDB[playerid][BoughtRareSabre] == 0)
                    {
                        ShowPlayerDialog(playerid, 254, DIALOG_STYLE_MSGBOX, "{AFAFAF}", "Serveris pardavinëja ðá automobilá beveik nemokamai ! Paspaudus pasirinkimà pirkti - Gausite Sabre automobilá, su RANDOM serverio iðrinkta spalva.", "Pirkti", "Atðaukti");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Pirkti maðinà galima tik 1 kartà.");
                        RemovePlayerFromVehicle(playerid);
                        SetVehicleToRespawn(vehicleid);
                    }
                }
            }
        }
        if(VehicleDB[vehicleid][TURGUS] == 1)
        {
            new model = GetVehicleModel(vehicleid);
            if(SalesVehiclesInStock[model - 400]  == 0)
            {
                ErrorMsg(playerid,"• Ðio modelio maðinos baigësi.");
            }
            else
            {
                TogglePlayerControllable(playerid, 0);

                if(PlayerDB[playerid][FirstOwnedVehicleID] >= 0 && PlayerDB[playerid][SecondOwnedVehicleID] >= 0)
                {
                    ErrorMsg(playerid,"• Pirma praðome parduoti vienà ið savo nuosavø transporto priemoniø.");
                    TogglePlayerControllable(playerid, 1);
                    RemovePlayerFromVehicle(playerid);
                }
                else
                {
                    SendClientMessage(playerid, 0xe7ba21FF, "Automobiliø centras");
                    new string[70];
                    format(string, 70, "Pavadinimas: %s", vNames[model - 400]);
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    format(string, 70, "Kaina: %s€", AddPoints(aKaina[model - 400]));
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    format(string, 70, "Atstatymo kaina: %s€", AddPoints(floatround(aKaina[model - 400] * 0.07, floatround_ceil)));
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    format(string, 70, "Kuro sànaudos: %iL/KM", DegaluSanaudos[model - 400]);
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    SendClientMessage(playerid, 0xe7ba21FF, "Kuro rûðis: Benzinas");
                    format(string, 70, "Ar norite pirkti %s uþ %s€", vNames[model - 400],AddPoints(aKaina[model - 400]));
                    ShowPlayerDialog(playerid, 55, DIALOG_STYLE_MSGBOX, "{AFAFAF}Turgus", string , "Taip", "Ne");
                }

            }
        }
        else if(VehicleDB[vehicleid][AdminMasina] == true)
        {
            if(PlayerDB[playerid][adminlvl] == 0)
            {
                ErrorMsg(playerid,"• Ði transporto priemonë yra skirta tik administratoriams.");
                RemovePlayerFromVehicle(playerid);
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
            }
            else
            {
                ShowPlayerTurningEngineText(vehicleid,playerid);
            }
        }
        else if(VehicleDB[vehicleid][VIPMasina] == true)
        {
            if(PlayerDB[playerid][VIP] == 0)
            {
                ErrorMsg(playerid,"• Ði transporto priemonë yra skirta tik VIP nariams.");
                RemovePlayerFromVehicle(playerid);
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
            }
            else
            {
                ShowPlayerTurningEngineText(vehicleid,playerid);
            }
        }
        else if(VehicleDB[vehicleid][VehicleForRent] == true)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= VehicleDB[vehicleid][VehicleRentingCost])
            {
                PlayerDB[playerid][MoneyInPocket]-=VehicleDB[vehicleid][VehicleRentingCost];
                SendClientMessage(playerid, ZALIA, "• Pradëdami nuomà sumokëjote á prieká {ffff1a}vienos minutës nuomos mokestá.");
                SetTimerEx("NuomosMokejimas", 59000, false, "id", vehicleid,playerid);
                ShowPlayerTurningEngineText(vehicleid,playerid);
            }
            else
            {
                ErrorMsg(playerid,"• Maðinos nuomai jums neuþtenka pinigø.");
                RemovePlayerFromVehicle(playerid);
            }
        }
		else if(VehicleDB[vehicleid][DARBOMASINA] == true)
		{
			if(PlayerDB[playerid][Job] == VehicleDB[vehicleid][DARBOID])
			{
				if(PlayerDB[playerid][AprangosTipas] != PLAYER_CLOTHES_UNIFORM)
				{
					ErrorMsg(playerid,"Privalote bûti su darbine uniforma.");
					RemovePlayerFromVehicle(playerid);
					new Float:Cords[3];
					GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
					SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
					SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
				}
				else
				{
					new bool:PlayerCanDrive = false;
					if(PlayerDB[playerid][Job] == 1)
					{
						switch(GetVehicleModel(vehicleid))
						{
							case 497:
							{
								if(PlayerDB[playerid][Rangas] >= PoliceSettings[Vehicle497])
								{
									PlayerCanDrive = true;
								}
							}
							case 597:
							{
								if(PlayerDB[playerid][Rangas] >= PoliceSettings[Vehicle597])
								{
									PlayerCanDrive = true;
								}
							}
							case 523:
							{
								if(PlayerDB[playerid][Rangas] >= PoliceSettings[Vehicle523])
								{
									PlayerCanDrive = true;
								}
							}
							case 599:
							{
								if(PlayerDB[playerid][Rangas] >= PoliceSettings[Vehicle599])
								{
									PlayerCanDrive = true;
								}
							}
							case 430:
							{
								if(PlayerDB[playerid][Rangas] >= PoliceSettings[Vehicle430])
								{
									PlayerCanDrive = true;
								}
							}
						}
					}
                    else if(PlayerDB[playerid][Job] == 2)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 416:
                            {
                                if(PlayerDB[playerid][Rangas] >= HPSettings[VEHICLE416_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 490:
                            {
                                if(PlayerDB[playerid][Rangas] >= HPSettings[VEHICLE490_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 487:
                            {
                                if(PlayerDB[playerid][Rangas] >= HPSettings[VEHICLE487_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 452:
                            {
                                if(PlayerDB[playerid][Rangas] >= HPSettings[VEHICLE452_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 4)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 420:
                            {
                                if(PlayerDB[playerid][Rangas] >= TaksiFSettings[Vehicle2F420])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 560:
                            {
                                if(PlayerDB[playerid][Rangas] >= TaksiFSettings[Vehicle2F560])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 438:
                            {
                                if(PlayerDB[playerid][Rangas] >= TaksiFSettings[Vehicle2F438])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 5)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 525:
                            {
                                if(PlayerDB[playerid][Rangas] >= MechanikuSettings[Mech525Vehicle_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 602:
                            {
                                if(PlayerDB[playerid][Rangas] >= MechanikuSettings[Mech602Vehicle_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 7)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 405:
                            {
                                if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 498:
                            {
                                if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 508:
                            {
                                if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 468:
                            {
                                if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 452:
                            {
                                if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 8)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 445:
                            {
                                if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 498:
                            {
                                if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 508:
                            {
                                if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 468:
                            {
                                if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 9)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 601:
                            {
                                if(PlayerDB[playerid][Rangas] >= ARASSettings[ARASVEHICLE601_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 541:
                            {
                                if(PlayerDB[playerid][Rangas] >= ARASSettings[ARASVEHICLE541_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 427:
                            {
                                if(PlayerDB[playerid][Rangas] >= ARASSettings[ARASVEHICLE427_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 528:
                            {
                                if(PlayerDB[playerid][Rangas] >= ARASSettings[ARASVEHICLE528_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 497:
                            {
                                if(PlayerDB[playerid][Rangas] >= ARASSettings[ARASVEHICLE497_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 10)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 488:
                            {
                                if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiVEHICLE488_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 516:
                            {
                                if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiVEHICLE516_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 582:
                            {
                                if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiVEHICLE582_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] == 11)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 411:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE411_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 451:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE451_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 402:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE402_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 415:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE415_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 522:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE522_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 579:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE579_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 560:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE560_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 426:
                            {
                                if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDVEHICLE426_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                        }
                    }
                    else if(PlayerDB[playerid][Job] >= 12 && PlayerDB[playerid][Job] < 21)
                    {
                        PlayerCanDrive = true;
                    }
                    else if(PlayerDB[playerid][Job] == 21)
                    {
                        switch(GetVehicleModel(vehicleid))
                        {
                            case 515:
                            {
                                if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F515Vehicle_RANGAS])
                                {
                                    PlayerCanDrive = true;
                                }
                            }
                            case 443:
                            {
                                if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F443Vehicle_RANGAS])
                                {
                                	PlayerCanDrive = true;
                               	}
							}
						}
                    }
					if(PlayerCanDrive == true)
					{
                        ShowPlayerTurningEngineText(vehicleid,playerid);
						new String[128];
                        format(String,128,"• {99D6EB}Vaþinëjant su darbiniu transportu, uþdirbsite: {0099CC}%i€/min{99D6EB}, su VIP statusu: {0099CC}%i€/min.",GetPlayerMaxIncomeFwMSG(playerid),GetPlayerMaxIncomeFwMSG(playerid) * 2);
                        SendClientMessage(playerid, 0x0099CCFF, String);
                        if(PlayerDB[playerid][AlgosBonusas] > gettime())
                        {
                            SendClientMessage(playerid, 0x0099CCFF, "• {99D6EB}Jûs turite galiojanèia paslaugà „{0099CC}Algos padidëjimas{99D6EB}“, kuri pridës: {0099CC}100€/min.");
                            format(String, 128, "• {99D6EB}Jûsø paslauga: „{0099CC}Algos padidëjimas{99D6EB}“ galios dar {0099CC}%i dienø.", floatround((PlayerDB[playerid][AlgosBonusas]-gettime()) / 86400, floatround_round));
                            SendClientMessage(playerid, 0x0099CCFF, String);
                        }
                        SendClientMessage(playerid, 0x0099CCFF, "• {99D6EB}Paþiûrëti savo darbo komandas: {0099CC}/darbokomandos{99D6EB}.");
                        if(PlayerDB[playerid][Job] == 15)
                        {
                            SendClientMessage(playerid, ZYDRA, "• Jûsø uþduotis dirbant gatviø valytojo darbà yra valyti ðio miesto gatves,vietos kurias reikia iðvalyti bus paþymëtos raudonais taðkais.");
                            for(new c = 0;c < VALYTOJAI_MISIJU_SKAICIUS;c++)
                            {
                                if(ValytojaiMisijos[c][MisijaRuns] == true)
                                {
                                    TogglePlayerDynamicCP(playerid, ValytojaiMisijos[c][MisijosCPD], true);
                                }
                            }
                        }
                        if(PlayerDB[playerid][Job] == 16)
                        {
                        	new Modelis = GetVehicleModel(vehicleid);
                        	if(Modelis == 476 || Modelis == 593)
                        	{
                        	    if(PlayerDB[playerid][VaziuotiToliau] == true)
                        	    {
		                        	SendClientMessage(playerid, GELTONA, "• Norëdami pratæsti darbà atvykite pakrauti kroviná, kuris yra paþymëtas þemëlapyje raudonu simboliu.");
									SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
		                        	SetPlayerCheckpoint(playerid, 1923.1576,-2241.5364,14.2584, 3.0);
									PlayerDB[playerid][LektuvuCP] = 3;
									ArLektuvuCP = true;
								}
								else
								{
									SendClientMessage(playerid, ZYDRA, "• Dirbant lektuvu jûsø darbas yra pristatyti virtualius krovinius ið vieno oro uosto á kità.");
		                        	SendClientMessage(playerid, ZYDRA, "• Uþ tai gausite atsitiktiná atlygá.");
		                        	SendClientMessage(playerid, GELTONA, "• Pasikrovimo punktas yra paþymëtas þemelapyje raudonu simboliu.");
		                        	SetPlayerCheckpoint(playerid, -1242.0383,-86.7009,14.8557, 3.0);
									PlayerDB[playerid][LektuvuCP] = 1;
									ArLektuvuCP = true;
								}
                        	}
                        	else
                        	{
                        		SendClientMessage(playerid, ZYDRA, "• Dirbant laivu jûsø darbas yra jûra pristatyti virtualius krovinius ið vieno punkto á kità.");
	                        	SendClientMessage(playerid, ZYDRA, "• Uþ tai gausite atsitiktiná atlygá (Laivu gaunama maþiau).");
	                        	SendClientMessage(playerid, GELTONA, "• Pasikrovimo punktas yra paþymëtas þemelapyje.");
                        		SetPlayerCheckpoint(playerid, -1564.7982,1261.5377,0.0161, 3.0);
								PlayerDB[playerid][LaivuCP] = 1;
								ArLaivuCP = true;
                        	}
						}
					}
					else
					{
						ErrorMsg(playerid,"• Ðios transporto priemonës jûs negalite vairuoti, nes jûsø rangas per maþas.");
						RemovePlayerFromVehicle(playerid);
						new Float:Cords[3];
						GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);

					}
				}
			}
			else
			{
				switch(VehicleDB[vehicleid][DARBOID])
				{
					case 1:
					{
						ErrorMsg(playerid,"• Ði transporto priemonë priklauso policijos departamentui.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);

					}
					case 2:
					{
						ErrorMsg(playerid,"• Ði transporto priemonë priklauso medikams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);

					}
                    case 4:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso taksi firmai.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);

                    }
                    case 5:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso mechanikams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 7:
                    {
                        if(!(IsJobFromLaw(PlayerDB[playerid][Job]) && GetVehicleModel(vehicleid) == 498))
                        {
                            ErrorMsg(playerid,"• Ði transporto priemonë priklauso Lucchese mafijai.");
                            RemovePlayerFromVehicle(playerid);
                            new Float:Cords[3];
                            GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                            SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                            SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                        }
                    }
                    case 8:
                    {
                        if(!(IsJobFromLaw(PlayerDB[playerid][Job]) && GetVehicleModel(vehicleid) == 498))
                        {
                            ErrorMsg(playerid,"• Ði transporto priemonë priklauso Genovese mafijai.");
                            RemovePlayerFromVehicle(playerid);
                            new Float:Cords[3];
                            GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                            SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                            SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                        }
                    }
                    case 9:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso spec. bûriui „Aras“.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 10:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso Radistams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 11:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso Spirit_Jones.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 13:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso autobusø vairuotojams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 14:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso ugniagesiams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 15:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso valytojams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 16:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso Oro ir Vandens kurjeriams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 19:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso „BurgerShot“ maisto iðveþiotojams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 20:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso „BurgerShot“ maisto iðveþiotojams(2).");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
                    case 21:
                    {
                        ErrorMsg(playerid,"• Ði transporto priemonë priklauso fûristams.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];
                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetTimerEx("KickPlayerIfHesStillInVehicle", 2000, false, "id", vehicleid,playerid);
                    }
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
        new vehicleid = GetPlayerVehicleID(playerid);
		if(VehicleDB[vehicleid][VMMasina] == 1)
		{
            PlayerDB[playerid][NuobaudosUzGreicioVirsijima] = 0;
			switch(GetVehicleModel(vehicleid))
			{
				case 565:
				{
					if(PlayerDB[playerid][AutoLicense] == 1)
					{
						ErrorMsg(playerid,"• Jûs jau turite maðinos vairavimo teises, todël negalite vairuoti ðios maðinos.");
						RemovePlayerFromVehicle(playerid);
						new Float:Cords[3];

						GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetVehicleToRespawn(vehicleid);
					}
					else if(PlayerDB[playerid][DrivingTheory] == 0)
					{
						ErrorMsg(playerid,"• Norëdami laikyti praktinæ vairavimo egzamino dalá, praðome pirma iðlaikyti teorijos egzaminà.");
						RemovePlayerFromVehicle(playerid);
						new Float:Cords[3];

						GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
						SetVehicleToRespawn(vehicleid);
					}
					else
					{
                        ShowPlayerTurningEngineText(vehicleid,playerid);
						if(PlayerDB[playerid][AutoParkDriving] == 0)
						{
							ShowPlayerDialog(playerid, 29, DIALOG_STYLE_MSGBOX, "{AFAFAF}REGITRA", "Ar norite pradëti laikyti praktinæ egzamino dalá,aikðtelëje?\nEgzamino kaina: 500€.", "Taip", "Ne");
						}
						else
						{
							ShowPlayerDialog(playerid, 30, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vairavimo egzaminas", "Ar norite pradëti laikyti paskutinæ praktinio vairavimo egzamino dalá,pravaþiavimà mieste?\nEgzamino kaina: 1000€.", "Taip","Ne");
						}
					}
				}
                case 461:
                {
                    if(PlayerDB[playerid][MotoLicense] == 1)
                    {
                        ErrorMsg(playerid,"• Jûs jau turite motociklo vairavimo teises, todël negalite vairuoti ðios motociklo.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else if(PlayerDB[playerid][DrivingTheory] == 0)
                    {
                        ErrorMsg(playerid,"• Norëdami laikyti praktinæ vairavimo egzamino dalá, praðome pirma iðlaikyti teorijos egzaminà.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else
                    {
                        ShowPlayerTurningEngineText(vehicleid,playerid);
                        if(PlayerDB[playerid][MotoParkDriving] == 0)
                        {
                            ShowPlayerDialog(playerid, 131, DIALOG_STYLE_MSGBOX, "{AFAFAF}REGITRA", "Ar norite pradëti laikyti praktinæ egzamino dalá,aikðtelëje?\nEgzamino kaina: 500€.", "Taip", "Ne");
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 132, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vairavimo egzaminas", "Ar norite pradëti laikyti paskutinæ praktinio vairavimo egzamino dalá,pravaþiavimà mieste?\nEgzamino kaina: 1000€.", "Taip","Ne");
                        }
                    }
                }
                case 403:
                {
                    if(PlayerDB[playerid][SunkvLicense] == 1)
                    {
                        ErrorMsg(playerid,"• Jûs jau turite sunkveþimiø vairavimo teises, todël negalite vairuoti ðios sunkveþimio.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else if(PlayerDB[playerid][DrivingTheory] == 0)
                    {
                        ErrorMsg(playerid,"• Norëdami laikyti praktinæ vairavimo egzamino dalá, praðome pirma iðlaikyti teorijos egzaminà.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else
                    {
                        ShowPlayerTurningEngineText(vehicleid,playerid);
                        if(PlayerDB[playerid][SunkvParkDriving] == 0)
                        {
                            ShowPlayerDialog(playerid, 133, DIALOG_STYLE_MSGBOX, "{AFAFAF}REGITRA", "Ar norite pradëti laikyti praktinæ egzamino dalá,aikðtelëje?\nEgzamino kaina: 500€.", "Taip", "Ne");
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 134, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vairavimo egzaminas", "Ar norite pradëti laikyti paskutinæ praktinio vairavimo egzamino dalá,pravaþiavimà mieste?\nEgzamino kaina: 1000€.", "Taip","Ne");
                        }
                    }
                }
                case 469:
                {
                    if(PlayerDB[playerid][PilotoLicense] == 1)
                    {
                        ErrorMsg(playerid,"• Jûs jau turite pilotavimo licenzijà.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else if(PlayerDB[playerid][DrivingTheory] == 0)
                    {
                        ErrorMsg(playerid,"• Norëdami laikyti praktinæ pilotavimo egzamino dalá,praðome pirma iðlaikyti teorijos egzaminà.");
                        RemovePlayerFromVehicle(playerid);
                        new Float:Cords[3];

                        GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                        SetVehicleToRespawn(vehicleid);
                    }
                    else
                    {
                        ShowPlayerTurningEngineText(vehicleid,playerid);
                        ShowPlayerDialog(playerid, 135, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vairavimo egzaminas", "Ar norite pradëti laikyti paskutinæ praktinio vairavimo egzamino dalá,pravaþiavimà mieste?\nEgzamino kaina: 1000€.", "Taip","Ne");
                    }
                }
			}
		}
        if(VehicleDB[vehicleid][VehicleWithOwner] == true)
        {
            ShowPlayerTurningEngineText(vehicleid,playerid);
        }
        format(VehicleDB[vehicleid][LastDriverName],24,"%s",Vardas(playerid));

	}
	return 1;
}
stock ShowPlayerTurningEngineText(vehicleid,playerid)
{
    if(IsVehicleModelWithEngine(GetVehicleModel(vehicleid)))
    {
        SendClientMessage(playerid, 0xAADB69FF,"• Transportas uþvedamas automatiðkai. Variklio valdymas ({7bae39}NUM2{AADB69}) ðviesos ({7bae39}NUM8{AADB69}).");
        SendClientMessage(playerid, 0xAADB69FF,"• Papildomus pinigus galite gauti jei naudosite {7bae39}/autopilotas {AADB69}gausite {7bae39}20€{AADB69}/min.");
        SendClientMessage(playerid, 0xAADB69FF,"ir jei buklæ laikysite {7bae39}90%%{AADB69} gausite {7bae39}10€{AADB69}/min.");
        SendClientMessage(playerid, 0xAADB69FF,"• Radija galite ásijungti su komanda - {7bae39}/radijas");
        if(VehicleDB[vehicleid][FuelType] == 0 && VehicleDB[vehicleid][Bendzinas] > 0)
        {
            new engine, lights, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
            VehicleDB[vehicleid][VehicleEngineState] = 1;
            VehicleDB[vehicleid][VehicleLights] = 1;
        }
        else if(VehicleDB[vehicleid][FuelType] == 1 && VehicleDB[vehicleid][Dujos] > 0)
        {
            new engine, lights, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
            VehicleDB[vehicleid][VehicleEngineState] = 1;
            VehicleDB[vehicleid][VehicleLights] = 1;
        }
    }
}
public OnPlayerEnterCheckpoint(playerid)
{
	DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid, "HouseICON") > 0)
    {
        RemovePlayerMapIcon(playerid, GetPVarInt(playerid, "HouseICON"));
    }
    RemovePlayerMapIcon(playerid, 97);//Targeto ICON
    if(PlayerDB[playerid][Job] == 16)
    {
        if(ArLektuvuCP == true)
        {
	        new VehicleID = GetPlayerVehicleID(playerid);
	        if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 476) return ErrorMsg(playerid,"• Privalote bûti savo darbiniame transporte.");
	   	    if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 593) return ErrorMsg(playerid,"• Privalote bûti savo darbiniame transporte.");
	    	if(PlayerDB[playerid][LektuvuCP] == 1)
			{
	    	    if(PlayerDB[playerid][MoneyInPocket] < 200)
	    	    {
					ErrorMsg(playerid, "• Pasikrovimui reikia 200€.");
					return 1;
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket] -=200;
		    		DisablePlayerCheckpoint(playerid);
		    		GameTextForPlayer(playerid, "~y~ KRAUNAMA..", 3000, 4);
		    		TogglePlayerControllable(playerid, false);
		    		SetTimerEx("Pakrauta", 5000, false, "d", playerid);
	    		}
	    	}
	    	if(PlayerDB[playerid][LektuvuCP] == 2)
	    	{
	    		//PlayerDB[playerid][MoneyInPocket] -=200;
	    		DisablePlayerCheckpoint(playerid);
	    		GameTextForPlayer(playerid, "~y~ ISKRAUNAMA..", 3000, 4);
	    		TogglePlayerControllable(playerid, false);
	    		SetTimerEx("Iskrauta", 5000, false, "d", playerid);
	    	}
	     	if(PlayerDB[playerid][LektuvuCP] == 3)
	    	{
	    	    if(PlayerDB[playerid][MoneyInPocket] < 200)
	    	    {
					ErrorMsg(playerid, "• Pasikrovimui reikia 200€.");
					return 1;
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket] -=200;
		    		DisablePlayerCheckpoint(playerid);
		    		GameTextForPlayer(playerid, "~y~ KRAUNAMA..", 3000, 4);
		    		TogglePlayerControllable(playerid, false);
		    		SetTimerEx("Pakrauta2", 5000, false, "d", playerid);
	    		}
	    	}
	    	if(PlayerDB[playerid][LektuvuCP] == 4)
	    	{
	    		DisablePlayerCheckpoint(playerid);
	    		GameTextForPlayer(playerid, "~y~ ISKRAUNAMA..", 3000, 4);
	    		TogglePlayerControllable(playerid, false);
	    		SetTimerEx("Iskrauta2", 5000, false, "d", playerid);
	    	}
    	}
    	if(ArLaivuCP == true)
    	{
    		new VehicleID = GetPlayerVehicleID(playerid);
	        if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 453) return ErrorMsg(playerid,"• Privalote bûti savo darbiniame transporte.");
	   	    if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 472) return ErrorMsg(playerid,"• Privalote bûti savo darbiniame transporte.");
	   	    if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 484) return ErrorMsg(playerid,"• Privalote bûti savo darbiniame transporte.");

	   	    if(PlayerDB[playerid][LaivuCP] == 1)
			{
				if(PlayerDB[playerid][MoneyInPocket] < 150)
	    	    {
					ErrorMsg(playerid, "• Pasikrovimui reikia 200€.");
					return 1;
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket] -=150;
		    		DisablePlayerCheckpoint(playerid);
		    		GameTextForPlayer(playerid, "~y~ KRAUNAMA..", 5000, 4);
		    		TogglePlayerControllable(playerid, false);
		    		SetTimerEx("LaivuPakrauta", 5000, false, "d", playerid);
	    		}
	    	}
	    	if(PlayerDB[playerid][LaivuCP] == 2)
	    	{
	    		DisablePlayerCheckpoint(playerid);
	    		GameTextForPlayer(playerid, "~y~ ISKRAUNAMA..", 5000, 4);
	    		TogglePlayerControllable(playerid, false);
	    		SetTimerEx("LaivuIskrauta", 5000, false, "d", playerid);
	    	}
	    	if(PlayerDB[playerid][LaivuCP] == 3)
	    	{
      			if(PlayerDB[playerid][MoneyInPocket] < 150)
	    	    {
					ErrorMsg(playerid, "• Pasikrovimui reikia 200€.");
					return 1;
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket] -=150;
		    		DisablePlayerCheckpoint(playerid);
		    		GameTextForPlayer(playerid, "~y~ KRAUNAMA..", 5000, 4);
		    		TogglePlayerControllable(playerid, false);
		    		SetTimerEx("LaivuPakrauta", 5000, false, "d", playerid);
	    		}
	    	}
    	}
    }
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    DisablePlayerRaceCheckpoint(playerid);
	if(PlayerDB[playerid][adminlvl] == 5)
	{
		new SendMsg[60];
		format(SendMsg, 60, "Uþvaþiavote ant RaceCheckpoint kurio ID: %i", PlayerDB[playerid][RaceCheckPointID]);
		SendClientMessage(playerid, GELTONA, SendMsg);
	}
	switch(PlayerDB[playerid][RaceCheckPointID])
	{
		case 1:
        {
            new vehicleid = 0;
            vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio,virðydamas ðá greitá galite neiðlaikyti egzamino.");
            }
            SendClientMessage(playerid, GELTONA, "• Jûsø pirma uþduotis: Ávaþiuoti á aikðtelæ horizontaliai.");
            SetPlayerRaceCheckpoint(playerid, 0, -2074.7722,-175.9909,34.4439,-2071.7200,-192.1290,34.9437, 1.2);
            PlayerDB[playerid][RaceCheckPointID] = 2;
        }
        case 2:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new Float:z_angle;
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            GetVehicleZAngle(vehicleid, z_angle);
            if( (floatcmp(z_angle, 160) == 0 || floatcmp(z_angle, 160) == 1) && (floatcmp(z_angle, 190) == 0 || floatcmp(z_angle, 190) == -1) )
            {
                SendClientMessage(playerid, ZALIA, "• Pirmàjà savo uþduotá ávykdëte sëkmingai. Vaþiuokitæ á kità raudonà taðkà ir gausite sekanèius nurodymus.");
            }
            else
            {
                SendClientMessage(playerid, RAUDONA, "• Klaida, ávaþiavote neteisingai!");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2071.7200,-192.1290,34.9437,-2075.5947,-200.0690,34.9582, 1.2);
            PlayerDB[playerid][RaceCheckPointID] = 3;

        }
        case 3:
        {
            new vehicleid = 0;
            vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio,virðydamas ðá greitá galite neiðlaikyti egzamino.");
            }
            SendClientMessage(playerid, GELTONA, "• Jûsø uþduotis: Pastatykite maðinà galu.");
            SetPlayerRaceCheckpoint(playerid, 0, -2076.4492,-200.6530,35.3202,-2068.8950,-214.0876,35.3202, 1.2);
            PlayerDB[playerid][RaceCheckPointID] = 4;
        }
        case 4:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new Float:z_angle;
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            GetVehicleZAngle(vehicleid, z_angle);
            if( (floatcmp(z_angle, 270) == 0 || floatcmp(z_angle, 270) == 1) && (floatcmp(z_angle, 310) == 0 || floatcmp(z_angle, 310) == -1) )
            {
                SendClientMessage(playerid, ZALIA, "• Uþduotá ávykdëte sëkmingai. Jûsø sekanti uþduotis yra tokia pati: pastatykite maðinà galu priekyje esanèioje aikðtelëje.");
            }
            else
            {
                SendClientMessage(playerid, RAUDONA, "• Klaida, maðinà pastatëte neteisingai!");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2068.8950,-214.0876,35.3202,-2073.1121,-213.6388,35.3202, 1.2);
            PlayerDB[playerid][RaceCheckPointID] = 5;
        }
        case 5:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new Float:z_angle;
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            GetVehicleZAngle(vehicleid, z_angle);
            if( (floatcmp(z_angle, 80) == 0 || floatcmp(z_angle, 80) == 1) && (floatcmp(z_angle, 100) == 0 || floatcmp(z_angle, 100) == -1) )
            {
                SendClientMessage(playerid, ZALIA, "• Uþduotá ávykdëte sëkmingai. Jûsø sekanti uþduotis áveikti 180 laipsniø posuká.");
            }
            else
            {
                SendClientMessage(playerid, RAUDONA, "• Klaida,maðinà pastatëte neteisingai!");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2074.9492,-228.0145,35.3202,-2062.9919,-234.0003,35.3273, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 6;
        }
        case 6:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2062.9919,-234.0003,35.3273,-2060.9922,-222.2878,35.3273, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 7;
        }
        case 7:
        {
            new vehicleid = GetPlayerVehicleID(playerid);

            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2060.9922,-222.2878,35.3273,-2060.8008,-211.4807,34.9460, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 8;
        }
        case 8:
        {
            new vehicleid = GetPlayerVehicleID(playerid);

            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2060.8008,-211.4807,34.9460,-2064.6592,-200.4862,34.9448, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 9;
            SendClientMessage(playerid, ZALIA, "• Uþduotá ávykdëte sëkmingai. Jûsø sekanti uþduotis patikrins jûsø sugebëjimus atlikti staigius manevrus.");
            SendClientMessage(playerid, ZALIA, "• Apvaþiuokite kliûtis priekyje.");
        }
        case 9:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2064.6592,-200.4862,34.9448,-2060.5234,-190.6557,34.9432, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 10;
        }

        case 10:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2060.5234,-190.6557,34.9432,-2064.6021,-180.6088,34.9437, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 11;
        }
        case 11:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2064.6021,-180.6088,34.9437,-2062.6582,-139.2680,34.9457, 1.5);
            SendClientMessage(playerid, ZALIA, "• Uþduotá ávykdëte sëkmingai. Vaþiuokite á toliau esantá raudonà taðkà.");
            PlayerDB[playerid][RaceCheckPointID] = 12;
        }
        case 12:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2064.6021,-180.6088,34.9437,-2062.6582,-139.2680,34.9457, 1.5);
            SendClientMessage(playerid, ZALIA, "• Uþduotá ávykdëte sëkmingai. Vaþiuokite á toliau esantá raudonà taðkà.");
            PlayerDB[playerid][RaceCheckPointID] = 13;
        }
        case 13:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2064.6021,-180.6088,34.9437,-2062.5447,-139.3797,34.9437, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 14;
        }
        case 14:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 0;
            SendClientMessage(playerid, ZALIA, "• Praktinio vairavimo egzamino dalá,aikðtelëje iðlaikëte sëkmingai.");
            PlayerDB[playerid][AutoParkDriving] = 1;
            SetVehicleToRespawn(vehicleid);
        }
        case 15:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2044.8218,-84.8268,34.9456,-2020.5542,-72.4885,34.9538, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 16;
        }
        case 16:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2020.5542,-72.4885,34.9538,-2007.9945,-103.2065,35.4678, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 17;
        }
        case 17:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            SetPlayerRaceCheckpoint(playerid, 0, -2007.9945,-103.2065,35.4678,-2007.8246,-223.5960,35.4929, 1.5);
            PlayerDB[playerid][RaceCheckPointID] = 18;
        }
        case 18:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 19;
            SetPlayerRaceCheckpoint(playerid, 0, -2007.8246,-223.5960,35.4929
        , -1993.5474,-236.3757,35.3651, 1.5);
        }

        case 19:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 20;
            SetPlayerRaceCheckpoint(playerid, 0, -1993.5474,-236.3757,35.3651, -1851.1346,-238.7127,18.0087, 1.5);
        }

        case 20:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 21;
            SetPlayerRaceCheckpoint(playerid, 0, -1851.1346,-238.7127,18.0087, -1812.0710,-238.9089,18.0089, 1.5);
        }

        case 21:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 22;
            SetPlayerRaceCheckpoint(playerid, 0, -1812.0710,-238.9089,18.0089, -1797.0558,-222.9317,17.6681, 1.5);
        }

        case 22:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 23;
            SetPlayerRaceCheckpoint(playerid, 0, -1797.0558,-222.9317,17.6681, -1797.0557,-129.0562,5.4265, 1.5);
        }

        case 23:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 24;
            SetPlayerRaceCheckpoint(playerid, 0, -1797.0557,-129.0562,5.4265, -1807.5721,171.5811,14.7364, 1.5);
        }

        case 24:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 25;
            SetPlayerRaceCheckpoint(playerid, 0, -1807.5721,171.5811,14.7364, -1755.8693,292.6081,7.1520, 1.5);
        }

        case 25:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 26;
            SetPlayerRaceCheckpoint(playerid, 0, -1755.8693,292.6081,7.1520, -1555.8375,564.4529,6.8132, 1.5);
        }

        case 26:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 27;
            SetPlayerRaceCheckpoint(playerid, 0, -1555.8375,564.4529,6.8132, -1555.8063,716.0162,6.8210, 1.5);
        }

        case 27:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 28;
            SetPlayerRaceCheckpoint(playerid, 0, -1555.8063,716.0162,6.8210, -1573.5056,736.5026,6.9050, 1.5);
        }

        case 28:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 29;
            SetPlayerRaceCheckpoint(playerid, 0, -1573.5056,736.5026,6.9050, -1710.6597,747.0091,24.5243, 1.5);
        }

        case 29:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 30;
            SetPlayerRaceCheckpoint(playerid, 0, -1710.6597,747.0091,24.5243, -1710.5867,825.8314,24.5169, 1.5);
        }

        case 30:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 31;
            SetPlayerRaceCheckpoint(playerid, 0, -1710.5867,825.8314,24.5169, -1728.6775,852.5505,24.5165, 1.5);
        }

        case 31:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 32;
            SetPlayerRaceCheckpoint(playerid, 0, -1728.6775,852.5505,24.5165, -1778.2762,852.3820,24.5165, 1.5);
        }

        case 32:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 33;
            SetPlayerRaceCheckpoint(playerid, 0, -1778.2762,852.3820,24.5165, -1885.0282,852.5357,34.7899, 1.5);
        }

        case 33:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 34;
            SetPlayerRaceCheckpoint(playerid, 0, -1885.0282,852.5357,34.7899, -1989.7042,852.7014,45.0791, 1.5);
        }

        case 34:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 35;
            SetPlayerRaceCheckpoint(playerid, 0, -1989.7042,852.7014,45.0791, -2007.6598,826.5902,45.0788, 1.5);
        }

        case 35:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 36;
            SetPlayerRaceCheckpoint(playerid, 0, -2007.6598,826.5902,45.0788, -2028.8414,810.8928,49.1283, 1.5);
        }

        case 36:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 37;
            SetPlayerRaceCheckpoint(playerid, 0, -2028.8414,810.8928,49.1283, -2127.4087,810.7134,69.1960, 1.5);
        }

        case 37:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 38;
            SetPlayerRaceCheckpoint(playerid, 0, -2127.4087,810.7134,69.1960, -2241.0837,810.8060,49.0792, 1.5);
        }

        case 38:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 39;
            SetPlayerRaceCheckpoint(playerid, 0, -2241.0837,810.8060,49.0792, -2372.0940,810.2188,35.0166, 1.5);
        }

        case 39:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 40;
            SetPlayerRaceCheckpoint(playerid, 0, -2372.0940,810.2188,35.0166, -2514.3894,810.4182,49.2780, 1.5);
        }

        case 40:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 41;
            SetPlayerRaceCheckpoint(playerid, 0, -2514.3894,810.4182,49.2780, -2594.9448,810.5551,49.6123, 1.5);
        }

        case 41:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 42;
            SetPlayerRaceCheckpoint(playerid, 0, -2594.9448,810.5551,49.6123, -2608.9287,798.2985,49.5044, 1.5);
        }

        case 42:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 43;
            SetPlayerRaceCheckpoint(playerid, 0, -2608.9287,798.2985,49.5044, -2609.3232,720.0778,27.7478, 1.5);
        }

        case 43:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 44;
            SetPlayerRaceCheckpoint(playerid, 0, -2609.3232,720.0778,27.7478, -2625.3169,710.5681,27.5876, 1.5);
        }

        case 44:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 45;
            SetPlayerRaceCheckpoint(playerid, 0, -2625.3169,710.5681,27.5876, -2738.8706,711.0145,40.9071, 1.5);
        }

        case 45:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 46;
            SetPlayerRaceCheckpoint(playerid, 0, -2738.8706,711.0145,40.9071, -2753.0750,686.5339,40.9071, 1.5);
        }

        case 46:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 47;
            SetPlayerRaceCheckpoint(playerid, 0, -2753.0750,686.5339,40.9071, -2753.6235,576.8179,14.1813, 1.5);
        }

        case 47:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 48;
            SetPlayerRaceCheckpoint(playerid, 0, -2753.6235,576.8179,14.1813, -2739.1304,562.1499,14.1792, 1.5);
        }

        case 48:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 49;
            SetPlayerRaceCheckpoint(playerid, 0, -2739.1304,562.1499,14.1792, -2619.5271,562.3035,14.2431, 1.5);
        }

        case 49:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 50;
            SetPlayerRaceCheckpoint(playerid, 0, -2619.5271,562.3035,14.2431, -2608.8203,550.9648,14.2424, 1.5);
        }

        case 50:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 51;
            SetPlayerRaceCheckpoint(playerid, 0, -2608.8203,550.9648,14.2424, -2609.1213,481.4341,14.2421, 1.5);
        }

        case 51:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 52;
            SetPlayerRaceCheckpoint(playerid, 0, -2609.1213,481.4341,14.2421, -2632.6853,470.8278,14.2429, 1.5);
        }

        case 52:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 53;
            SetPlayerRaceCheckpoint(playerid, 0, -2632.6853,470.8278,14.2429, -2694.2058,470.4019,4.2244, 1.5);
        }

        case 53:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 54;
            SetPlayerRaceCheckpoint(playerid, 0, -2694.2058,470.4019,4.2244, -2708.4368,456.1616,3.9608, 1.5);
        }

        case 54:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 55;
            SetPlayerRaceCheckpoint(playerid, 0, -2708.4368,456.1616,3.9608, -2708.5408,428.1036,3.9617, 1.5);
        }

        case 55:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 56;
            SetPlayerRaceCheckpoint(playerid, 0, -2708.5408,428.1036,3.9617, -2752.0872,390.5235,3.9148, 1.5);
        }

        case 56:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 57;
            SetPlayerRaceCheckpoint(playerid, 0, -2752.0872,390.5235,3.9148, -2718.6968,333.0491,3.9618, 1.5);
        }

        case 57:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 58;
            SetPlayerRaceCheckpoint(playerid, 0, -2718.6968,333.0491,3.9618, -2708.7053,301.1561,3.9621, 1.5);
        }

        case 58:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 59;
            SetPlayerRaceCheckpoint(playerid, 0, -2708.7053,301.1561,3.9621, -2693.7327,215.6532,3.9617, 1.5);
        }

        case 59:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 60;
            SetPlayerRaceCheckpoint(playerid, 0, -2693.7327,215.6532,3.9617, -2592.6724,220.3888,8.8447, 1.5);
        }

        case 60:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 61;
            SetPlayerRaceCheckpoint(playerid, 0, -2592.6724,220.3888,8.8447, -2564.3164,170.8643,4.1847, 1.5);
        }

        case 61:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 62;
            SetPlayerRaceCheckpoint(playerid, 0, -2564.3164,170.8643,4.1847, -2592.0830,160.1309,3.9533, 1.5);
        }

        case 62:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 63;
            SetPlayerRaceCheckpoint(playerid, 0, -2592.0830,160.1309,3.9533, -2606.1599,145.4826,3.9693, 1.5);
        }

        case 63:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 64;
            SetPlayerRaceCheckpoint(playerid, 0, -2606.1599,145.4826,3.9693, -2606.2356,51.6326,3.9619, 1.5);
        }

        case 64:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 65;
            SetPlayerRaceCheckpoint(playerid, 0, -2606.2356,51.6326,3.9619, -2592.0830,36.9915,3.9655, 1.5);
        }

        case 65:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 66;
            SetPlayerRaceCheckpoint(playerid, 0, -2592.0830,36.9915,3.9655, -2434.1648,37.1820,34.5997, 1.5);
        }

        case 66:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 67;
            SetPlayerRaceCheckpoint(playerid, 0, -2434.1648,37.1820,34.5997, -2423.6323,24.6550,34.8331, 1.5);
        }

        case 67:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 68;
            SetPlayerRaceCheckpoint(playerid, 0, -2423.6323,24.6550,34.8331, -2423.2810,-56.4843,34.9530, 1.5);
        }

        case 68:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 69;
            SetPlayerRaceCheckpoint(playerid, 0, -2423.2810,-56.4843,34.9530, -2384.6165,-72.6684,34.9462, 1.5);
        }

        case 69:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 70;
            SetPlayerRaceCheckpoint(playerid, 0, -2384.6165,-72.6684,34.9462, -2179.7495,-72.9754,34.9539, 1.5);
        }

        case 70:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 71;
            SetPlayerRaceCheckpoint(playerid, 0, -2179.7495,-72.9754,34.9539, -2056.8235,-72.9329,34.9523, 1.5);
        }

        case 71:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 72;
            SetPlayerRaceCheckpoint(playerid, 0, -2056.8235,-72.9329,34.9523, -2049.6199,-84.3130,34.9461, 1.5);
        }
        case 72:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 73;
            SetPlayerRaceCheckpoint(playerid, 0, -2049.6199,-84.3130,34.9461, -2049.6077,-94.7102,34.7458, 1.5);
        }
        case 73:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 0;
            SendClientMessage(playerid, ZALIA, "• Vairavimo egzaminas baigtas.");
            SendClientMessage(playerid, -1, "-- Vertinimas --");
            new string[128];
            new Float:DabartineBukle;
            GetVehicleHealth(vehicleid, DabartineBukle);
            SetVehicleToRespawn(vehicleid);
            format(string, 128, "Maðinos pradinë bûklë: 100%%, baigus egzaminà %0.2f%%", DabartineBukle / 10);
            SendClientMessage(playerid, GELTONA, string);
            format(string, 128, "Nuobaudos uþ greièio virðyjimà: %0d", PlayerDB[playerid][NuobaudosUzGreicioVirsijima]);
            SendClientMessage(playerid, GELTONA, string);
            new PointsReceived = 100;
            while(1000 - DabartineBukle > 400)
            {
                DabartineBukle+= 4;
                PointsReceived--;
            }
            if(PlayerDB[playerid][NuobaudosUzGreicioVirsijima] > 0)
            {
                PointsReceived-=PlayerDB[playerid][NuobaudosUzGreicioVirsijima] * 5;
            }
            format(string, 128, "Surinkote %d taðkus ið 100 galimø. Iðlaikymui reikia maþiausiai 70taðkø.", PointsReceived);
            SendClientMessage(playerid, GELTONA, string);
            if(PointsReceived < 70)
            {
                ErrorMsg(playerid,"• Egzaminas neiðlaikytas.");
            }
            else
            {
                if(GetVehicleModel(vehicleid) == 461)
                {
                    PlayerDB[playerid][MotoLicense] = 1;
                    if(PlayerDB[playerid][Pasiekimas3] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,3);
                    }
                    PlayerDB[playerid][MotoParkDriving] = 0;
                    PlayerDB[playerid][DrivingTheory] = 0;
                    SendClientMessage(playerid, ZALIA, "• Sveikiname, jûs iðlaikëte vairavimo egzaminà bei ágyjote teisæ vairuoti motociklus.");
                }
                else
                {
                    PlayerDB[playerid][AutoLicense] = 1;
                    if(PlayerDB[playerid][Pasiekimas1] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,1);
                    }
                    PlayerDB[playerid][AutoParkDriving] = 0;
                    PlayerDB[playerid][DrivingTheory] = 0;
                    SendClientMessage(playerid, ZALIA, "• Sveikiname,jûs iðlaikëte vairavimo egzaminà bei ágyjote teisæ vairuoti automobilá.");
                }
            }
        }
        case 74:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 76;
            SetPlayerRaceCheckpoint(playerid, 0, -2089.1521,-144.2441,35.3203, -2090.9241,-163.0309,34.8984, 1.5);
        }

        case 76:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 77;
            SetPlayerRaceCheckpoint(playerid, 0, -2088.8164,-169.2023,34.8964, -2090.7371,-173.5857,34.9094, 1.5);
        }

        case 77:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 78;
            SetPlayerRaceCheckpoint(playerid, 0, -2090.7371,-173.5857,34.9094, -2088.5701,-179.8051,34.8974, 1.5);
        }

        case 78:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 79;
            SetPlayerRaceCheckpoint(playerid, 0, -2088.5701,-179.8051,34.8974, -2090.5737,-191.8372,34.8943, 1.5);
        }

        case 79:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 80;
            SetPlayerRaceCheckpoint(playerid, 0, -2090.5737,-191.8372,34.8943, -2088.5625,-205.0233,34.8966, 1.5);
        }

        case 80:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 81;
            SetPlayerRaceCheckpoint(playerid, 0, -2088.5625,-205.0233,34.8966, -2088.0298,-214.7080,34.8964, 1.5);
        }

        case 81:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 82;
            SetPlayerRaceCheckpoint(playerid, 0, -2088.0298,-214.7080,34.8964, -2090.7603,-234.8115,34.8974, 1.5);
        }

        case 82:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 83;
            SetPlayerRaceCheckpoint(playerid, 0, -2090.7603,-234.8115,34.8974, -2083.6641,-234.0206,34.9082, 1.5);
        }

        case 83:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 84;
            SetPlayerRaceCheckpoint(playerid, 0, -2083.6641,-234.0206,34.9082, -2084.3413,-210.1076,34.8983, 1.5);
        }

        case 84:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 85;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.3413,-210.1076,34.8983, -2084.5464,-202.4509,35.0069, 1.5);
        }

        case 85:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 86;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.5464,-202.4509,35.0069, -2084.4741,-193.9194,35.2334, 1.5);
        }

        case 86:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 87;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.4741,-193.9194,35.2334, -2084.5713,-176.8491,34.9810, 1.5);
        }

        case 87:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 88;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.5713,-176.8491,34.9810, -2084.5139,-165.3652,35.0139, 1.5);
        }

        case 88:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 89;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.5139,-165.3652,35.0139, -2084.4121,-143.9146,34.8976, 1.5);
        }
        case 89:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 90;
            SetPlayerRaceCheckpoint(playerid, 0, -2084.4121,-143.9146,34.8976, -2083.8694,-143.7344,34.8812, 1.5);
        }
        case 90:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio");
            }
            PlayerDB[playerid][RaceCheckPointID] = 91;
            SetPlayerRaceCheckpoint(playerid, 0, -2083.8694,-143.7344,34.8812, -2083.7947,-138.7385,34.8986, 1.5);
        }
        case 91:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 0;
            SendClientMessage(playerid, ZALIA, "• Praktinio vairavimo egzamino dalá,aikðtelëje iðlaikëte sëkmingai.");
            PlayerDB[playerid][MotoParkDriving] = 1;
            SetVehicleToRespawn(vehicleid);
        }
        //Furos
        case 92:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 93;
            SetPlayerRaceCheckpoint(playerid, 0, -2020.4547,-212.7529,35.9074, -2042.9089,-254.1815,35.9121, 1.5);
        }

        case 93:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 94;
            SetPlayerRaceCheckpoint(playerid, 0, -2042.9089,-254.1815,35.9121, -2070.5725,-253.3816,35.9179, 1.5);
        }

        case 94:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 95;
            SetPlayerRaceCheckpoint(playerid, 0, -2070.5725,-253.3816,35.9179, -2048.8296,-264.9761,35.9141, 1.5);
        }

        case 95:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 96;
            SetPlayerRaceCheckpoint(playerid, 0, -2048.8296,-264.9761,35.9141, -2034.4437,-228.6945,35.9159, 1.5);
        }

        case 96:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 97;
            SetPlayerRaceCheckpoint(playerid, 0, -2034.4437,-228.6945,35.9159, -2048.3179,-148.0347,35.9152, 1.5);
        }

        case 97:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 98;
            SetPlayerRaceCheckpoint(playerid, 0, -2048.3179,-148.0347,35.9152, -2049.3003,-208.0885,35.9112, 1.5);
        }

        case 98:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 99;
            SetPlayerRaceCheckpoint(playerid, 0, -2049.3003,-208.0885,35.9112, -2034.6628,-146.0271,35.9103, 1.5);
        }
        case 99:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 40)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 40km/h greièio.");
            }
            PlayerDB[playerid][RaceCheckPointID] = 0;
            SendClientMessage(playerid, ZALIA, "• Praktinio vairavimo egzamino dalá aikðtelëje iðlaikëte sëkmingai.");
            PlayerDB[playerid][SunkvParkDriving] = 1;
            DestroyVehicle(SunkvTraileris);
            SunkvTrailerisSpawned = false;
            SetVehicleToRespawn(vehicleid);
        }
        case 101:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 102;
            SetPlayerRaceCheckpoint(playerid, 0, -2022.3422,-72.7411,35.7671, -1995.0428,-72.9435,35.2511, 1.5);
        }

        case 102:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 103;
            SetPlayerRaceCheckpoint(playerid, 0, -1995.0428,-72.9435,35.2511, -1814.2328,-118.6645,6.0908, 1.5);
        }

        case 103:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 104;
            SetPlayerRaceCheckpoint(playerid, 0, -1814.2328,-118.6645,6.0908, -1801.4473,-139.0987,6.7654, 1.5);
        }

        case 104:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 105;
            SetPlayerRaceCheckpoint(playerid, 0, -1801.4473,-139.0987,6.7654, -1801.5540,-262.0802,20.3373, 1.5);
        }

        case 105:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 106;
            SetPlayerRaceCheckpoint(playerid, 0, -1801.5540,-262.0802,20.3373, -1821.0323,-562.1902,16.8541, 1.5);
        }

        case 106:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 107;
            SetPlayerRaceCheckpoint(playerid, 0, -1821.0323,-562.1902,16.8541, -1870.5734,-575.9866,24.6305, 1.5);
        }

        case 107:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 108;
            SetPlayerRaceCheckpoint(playerid, 0, -1870.5734,-575.9866,24.6305, -1971.0142,-576.7123,26.1016, 1.5);
        }

        case 108:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 109;
            SetPlayerRaceCheckpoint(playerid, 0, -1971.0142,-576.7123,26.1016, -2139.8218,-502.8839,39.7462, 1.5);
        }

        case 109:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 110;
            SetPlayerRaceCheckpoint(playerid, 0, -2139.8218,-502.8839,39.7462, -2251.9268,-204.6829,35.8954, 1.5);
        }

        case 110:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 111;
            SetPlayerRaceCheckpoint(playerid, 0, -2251.9268,-204.6829,35.8954, -2301.3188,-188.0421,35.7634, 1.5);
        }

        case 111:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 112;
            SetPlayerRaceCheckpoint(playerid, 0, -2301.3188,-188.0421,35.7634, -2369.4578,-84.7090,35.7576, 1.5);
        }

        case 112:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 113;
            SetPlayerRaceCheckpoint(playerid, 0, -2369.4578,-84.7090,35.7576, -2406.1716,-68.3085,35.7538, 1.5);
        }

        case 113:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 114;
            SetPlayerRaceCheckpoint(playerid, 0, -2406.1716,-68.3085,35.7538, -2423.8352,-120.5691,35.7634, 1.5);
        }

        case 114:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 115;
            SetPlayerRaceCheckpoint(playerid, 0, -2423.8352,-120.5691,35.7634, -2486.3184,-207.7612,27.3799, 1.5);
        }

        case 115:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 116;
            SetPlayerRaceCheckpoint(playerid, 0, -2486.3184,-207.7612,27.3799, -2689.0298,-207.8685,4.7622, 1.5);
        }

        case 116:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 117;
            SetPlayerRaceCheckpoint(playerid, 0, -2689.0298,-207.8685,4.7622, -2704.0552,-153.9000,4.7713, 1.5);
        }

        case 117:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 118;
            SetPlayerRaceCheckpoint(playerid, 0, -2704.0552,-153.9000,4.7713, -2704.4438,-85.0956,4.7639, 1.5);
        }

        case 118:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 119;
            SetPlayerRaceCheckpoint(playerid, 0, -2704.4438,-85.0956,4.7639, -2704.5847,143.6636,4.7723, 1.5);
        }

        case 119:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 120;
            SetPlayerRaceCheckpoint(playerid, 0, -2704.5847,143.6636,4.7723, -2703.9639,273.1805,4.7715, 1.5);
        }

        case 120:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 121;
            SetPlayerRaceCheckpoint(playerid, 0, -2703.9639,273.1805,4.7715, -2661.6743,286.0551,4.7748, 1.5);
        }

        case 121:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 122;
            SetPlayerRaceCheckpoint(playerid, 0, -2661.6743,286.0551,4.7748, -2604.9978,312.6931,4.7710, 1.5);
        }

        case 122:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 123;
            SetPlayerRaceCheckpoint(playerid, 0, -2604.9978,312.6931,4.7710, -2604.4844,452.9536,15.0426, 1.5);
        }

        case 123:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 124;
            SetPlayerRaceCheckpoint(playerid, 0, -2604.4844,452.9536,15.0426, -2553.6504,466.3357,15.0525, 1.5);
        }

        case 124:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 125;
            SetPlayerRaceCheckpoint(playerid, 0, -2553.6504,466.3357,15.0525, -2524.2246,549.8647,15.1067, 1.5);
        }

        case 125:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 126;
            SetPlayerRaceCheckpoint(playerid, 0, -2524.2246,549.8647,15.1067, -2590.5601,569.0338,15.0558, 1.5);
        }

        case 126:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 127;
            SetPlayerRaceCheckpoint(playerid, 0, -2590.5601,569.0338,15.0558, -2736.4958,569.4746,14.9919, 1.5);
        }

        case 127:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 128;
            SetPlayerRaceCheckpoint(playerid, 0, -2736.4958,569.4746,14.9919, -2708.8916,483.6040,5.3390, 1.5);
        }

        case 128:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 129;
            SetPlayerRaceCheckpoint(playerid, 0, -2708.8916,483.6040,5.3390, -2751.7197,470.0589,5.4967, 1.5);
        }

        case 129:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 130;
            SetPlayerRaceCheckpoint(playerid, 0, -2751.7197,470.0589,5.4967, -2838.1833,468.3358,4.8035, 1.5);
        }

        case 130:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 131;
            SetPlayerRaceCheckpoint(playerid, 0, -2838.1833,468.3358,4.8035, -2844.4883,492.7393,4.9579, 1.5);
        }

        case 131:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 132;
            SetPlayerRaceCheckpoint(playerid, 0, -2844.4883,492.7393,4.9579, -2821.1340,653.7628,14.1568, 1.5);
        }

        case 132:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 133;
            SetPlayerRaceCheckpoint(playerid, 0, -2821.1340,653.7628,14.1568, -2821.5950,922.6837,44.4960, 1.5);
        }

        case 133:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 134;
            SetPlayerRaceCheckpoint(playerid, 0, -2821.5950,922.6837,44.4960, -2838.5830,978.6395,44.0874, 1.5);
        }

        case 134:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 135;
            SetPlayerRaceCheckpoint(playerid, 0, -2838.5830,978.6395,44.0874, -2824.4104,1256.2543,6.0467, 1.5);
        }

        case 135:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 136;
            SetPlayerRaceCheckpoint(playerid, 0, -2824.4104,1256.2543,6.0467, -2483.5974,1372.7233,7.6304, 1.5);
        }

        case 136:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 137;
            SetPlayerRaceCheckpoint(playerid, 0, -2483.5974,1372.7233,7.6304, -2336.1245,1367.7749,7.6309, 1.5);
        }

        case 137:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 138;
            SetPlayerRaceCheckpoint(playerid, 0, -2336.1245,1367.7749,7.6309, -2062.0188,1306.8308,7.7042, 1.5);
        }

        case 138:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 139;
            SetPlayerRaceCheckpoint(playerid, 0, -2062.0188,1306.8308,7.7042, -1959.8289,1283.6642,7.6308, 1.5);
        }

        case 139:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 140;
            SetPlayerRaceCheckpoint(playerid, 0, -1959.8289,1283.6642,7.6308, -1689.4398,1267.2451,7.6295, 1.5);
        }

        case 140:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 141;
            SetPlayerRaceCheckpoint(playerid, 0, -1689.4398,1267.2451,7.6295, -1607.9756,1091.8607,7.6348, 1.5);
        }

        case 141:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 142;
            SetPlayerRaceCheckpoint(playerid, 0, -1607.9756,1091.8607,7.6348, -1562.5087,882.3184,7.6309, 1.5);
        }

        case 142:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 143;
            SetPlayerRaceCheckpoint(playerid, 0, -1562.5087,882.3184,7.6309, -1563.3724,670.4040,7.6308, 1.5);
        }

        case 143:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 144;
            SetPlayerRaceCheckpoint(playerid, 0, -1563.3724,670.4040,7.6308, -1665.9897,393.1093,7.6230, 1.5);
        }

        case 144:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 145;
            SetPlayerRaceCheckpoint(playerid, 0, -1665.9897,393.1093,7.6230, -1776.5730,284.4421,10.5134, 1.5);
        }

        case 145:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 146;
            SetPlayerRaceCheckpoint(playerid, 0, -1776.5730,284.4421,10.5134, -1806.6536,67.6178,15.5527, 1.5);
        }

        case 146:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 147;
            SetPlayerRaceCheckpoint(playerid, 0, -1806.6536,67.6178,15.5527, -1801.4225,-96.6778,7.5709, 1.5);
        }

        case 147:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 148;
            SetPlayerRaceCheckpoint(playerid, 0, -1801.4225,-96.6778,7.5709, -1844.6134,-113.4301,6.1119, 1.5);
        }

        case 148:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 149;
            SetPlayerRaceCheckpoint(playerid, 0, -1844.6134,-113.4301,6.1119, -2030.6948,-67.4401,35.7623, 1.5);
        }

        case 149:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 150;
            SetPlayerRaceCheckpoint(playerid, 0, -2030.6948,-67.4401,35.7623,-2049.7041,-95.8374,35.7635, 1.5);
        }
        case 150:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Nevirðykite 90km/h greièio!");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 151;
            SetPlayerRaceCheckpoint(playerid, 0, -2049.9209,-97.1721,35.7749,-2050.4836,-109.0003,35.8625, 1.5);
        }
        case 151:
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleSpeed(vehicleid) > 90)
            {
                SetVehicleVelocity(vehicleid, 0, 0, 0);
                SendClientMessage(playerid, RAUDONA, "• Praðome nevirðyti 90km/h greièio.");
                PlayerDB[playerid][NuobaudosUzGreicioVirsijima]+=1;
            }
            PlayerDB[playerid][RaceCheckPointID] = 0;
            SendClientMessage(playerid, ZALIA, "• Vairavimo egzaminas baigtas.");
            SendClientMessage(playerid, -1, "-- Vertinimas --");
            new string[80];
            new Float:DabartineBukle;
            GetVehicleHealth(vehicleid, DabartineBukle);
            SetVehicleToRespawn(vehicleid);
            format(string, 80, "Maðinos pradinë bûklë: 100%%, baigus egzaminà %0.2f%%", DabartineBukle / 10);
            SendClientMessage(playerid, GELTONA, string);
            format(string, 80, "Nuobaudos uþ greièio virðyjimà: %0d", PlayerDB[playerid][NuobaudosUzGreicioVirsijima]);
            SendClientMessage(playerid, GELTONA, string);
            new PointsReceived = 100;
            while(1000 - DabartineBukle > 400)
            {
                DabartineBukle+= 4;
                PointsReceived--;
            }
            if(PlayerDB[playerid][NuobaudosUzGreicioVirsijima] > 0)
            {
                PointsReceived-=PlayerDB[playerid][NuobaudosUzGreicioVirsijima] * 5;
            }
            format(string, 80, "Surinkote %d taðkus ið 100 galimø. Iðlaikymui reikia maþiausiai 70taðkø.", PointsReceived);
            SendClientMessage(playerid, GELTONA, string);
            if(PointsReceived < 70)
            {
                ErrorMsg(playerid,"• Egzaminas neiðlaikytas.");
            }
            else
            {
                PlayerDB[playerid][SunkvLicense] = 1;
                if(PlayerDB[playerid][Pasiekimas2] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,2);
                }
                PlayerDB[playerid][SunkvParkDriving] = 0;
                PlayerDB[playerid][DrivingTheory] = 0;
                SendClientMessage(playerid, ZALIA, "• Sveikiname,jûs iðlaikëte vairavimo egzaminà bei ágyjote teisæ vairuoti sunkveþimius.");
            }
        }
        case 152:
        {
            PlayerDB[playerid][RaceCheckPointID] = 153;
            SetPlayerRaceCheckpoint(playerid, 3, -2114.6167,232.2158,118.4827, -2307.0220,511.0353,127.7003, 3);
        }
        case 153:
        {
            PlayerDB[playerid][RaceCheckPointID] = 154;
            SetPlayerRaceCheckpoint(playerid, 3, -2307.0220,511.0353,127.7003, -2474.1160,802.7992,156.6440, 3);
        }
        case 154:
        {
            PlayerDB[playerid][RaceCheckPointID] = 155;
            SetPlayerRaceCheckpoint(playerid, 3, -2474.1160,802.7992,156.6440, -2526.7766,1116.8412,131.8827,3);
        }
        case 155:
        {
            PlayerDB[playerid][RaceCheckPointID] = 156;
            SetPlayerRaceCheckpoint(playerid, 3, -2526.7766,1116.8412,131.8827, -2587.6409,1405.0875,71.1188, 3);
        }
        case 156:
        {
            PlayerDB[playerid][RaceCheckPointID] = 157;
            SetPlayerRaceCheckpoint(playerid, 3, -2587.6409,1405.0875,71.1188, -2687.3359,1520.5299,37.8605, 3);
        }
        case 157:
        {
            PlayerDB[playerid][RaceCheckPointID] = 158;
            SetPlayerRaceCheckpoint(playerid, 3, -2687.3359,1520.5299,37.8605, -2893.5090,1343.4211,43.7449, 3);
        }
        case 158:
        {
            PlayerDB[playerid][RaceCheckPointID] = 159;
            SetPlayerRaceCheckpoint(playerid, 3, -2893.5090,1343.4211,43.7449, -2754.0078,1021.1450,126.0025, 3);
        }
        case 159:
        {
            PlayerDB[playerid][RaceCheckPointID] = 160;
            SetPlayerRaceCheckpoint(playerid, 3, -2754.0078,1021.1450,126.0025, -2491.8342,733.6821,110.0822, 3);
        }
        case 160:
        {
            PlayerDB[playerid][RaceCheckPointID] = 161;
            SetPlayerRaceCheckpoint(playerid, 3, -2491.8342,733.6821,110.0822, -2106.0547,657.1323,148.8053, 3);
        }
        case 161:
        {
            PlayerDB[playerid][RaceCheckPointID] = 162;
            SetPlayerRaceCheckpoint(playerid, 3, -2106.0547,657.1323,148.8053, -1997.9224,377.9238,137.6560, 3);
        }
        case 162:
        {
            PlayerDB[playerid][RaceCheckPointID] = 163;
            SetPlayerRaceCheckpoint(playerid, 3, -1997.9224,377.9238,137.6560,-2009.6780,-0.0330,110.6200, 3);
        }
        case 163:
        {
            PlayerDB[playerid][RaceCheckPointID] = 164;
            SetPlayerRaceCheckpoint(playerid, 3, -2009.6780,-0.0330,110.6200,-2027.8121,-108.2968,41.4421, 3);
        }
        case 164:
        {
            PlayerDB[playerid][RaceCheckPointID] = 165;
            SetPlayerRaceCheckpoint(playerid, 4, -2027.8121,-108.2968,41.4421,-2027.8121,-108.2968,25.421, 3);
        }
        case 165:
        {
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            PlayerDB[playerid][PilotoLicense] = 1;

            if(PlayerDB[playerid][Pasiekimas4] == 0)
            {
                PlayerCompletedPasiekimas(playerid,4);
            }

            PlayerDB[playerid][DrivingTheory] = 0;
            SendClientMessage(playerid, ZALIA, "• Sëkmingai iðlaikëte pilotavimo egzaminà ir ágyjote teisæ pilotuoti lektuvus.");
        }
        case 166:
        {
            if(PlayerDB[playerid][ZaidziaKartingais] == true)
            {
                new gameID = PlayerDB[playerid][KartsGameID];
                if(gameID >= 0)
                {
                    new bool:PlayerIsP1 = false;
                    if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[playerid][SQLID])
                    {
                        PlayerIsP1 = true;
                    }

                    if(PlayerIsP1 == true)
                    {
                        CartGamesDB[gameID][CGI_P1_Points]+=1;
                        switch(CartGamesDB[gameID][CGI_P1_Points] % 10)
                        {
                            case 0:
                            {
                                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_Laps] * 10)
                                {
                                    new string[128];
                                    PlayerDB[playerid][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money]*2;
                                    format(string, sizeof(string), "• Pasiekëte finiðo linijà ir laimëjote ! Laimëjote %s€",AddPoints(CartGamesDB[gameID][CGI_Money]));
                                    SendClientMessage(playerid, 0x33AA33FF, string);
                                    format(string, sizeof(string), "• Þaidëjas %s laimëjo kartingus, jûs pralaimëjote %s€",Vardas(playerid),AddPoints(CartGamesDB[gameID][CGI_Money]));
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1 && PlayerDB[i][SQLID] == CartGamesDB[gameID][CGI_P2_SQLID])
                                        {
                                            SendClientMessage(i, 0xFF0000FF, string);
                                            SetPlayerPosExt(i,-1903.2593,-877.9726,32.0234,354.6720);
                                            SetPlayerVirtualWorld(i, 0);

                                            PlayerDB[i][ZaidziaKartingais] = false;
                                        }
                                    }
                                    SetPlayerPosExt(playerid,-1903.2593,-877.9726,32.0234,354.6720);
                                    SetPlayerVirtualWorld(playerid, 0);
                                    DestroyCartsRace(gameID);
                                    PlayerDB[playerid][ZaidziaKartingais] = false;
                                }
                                else
                                {
                                    SetPlayerRaceCheckpoint(playerid, 0, -1900.6304,-849.9285,31.3072,-1901.2926,-812.2694,31.3072, 3);//9CP
                                }
                            }
                            case 1:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1901.2926,-812.2694,31.3072, -1901.7729,-773.3618,31.3071, 3);//2CP
                            }
                            case 2:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1901.7729,-773.3618,31.3071, -1898.9614,-751.3140,31.3072 , 3);//3CP
                            }
                            case 3:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1898.9614,-751.3140,31.3072 , -1883.5948,-748.9782,31.307 , 3);//4CP
                            }
                            case 4:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1883.5948,-748.9782,31.307, -1876.4861,-771.0129,31.3072  , 3);//5CP
                            }
                            case 5:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1876.4861,-771.0129,31.3072, -1877.1022,-831.4324,31.6656 , 3);//6CP
                            }
                            case 6:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1877.1022,-831.4324,31.6656, -1878.1511,-853.4637,31.3072, 3);//7CP
                            }
                            case 7:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1878.1511,-853.4637,31.3072, -1883.2092,-865.5722,31.3073,3);//8CP
                            }
                            case 8:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1883.2092,-865.5722,31.3073,-1892.3425,-858.7948,31.3074 , 3);//9CP
                            }
                            case 9:
                            {
                                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_Laps] * 10 - 1)
                                {
                                    SetPlayerRaceCheckpoint(playerid, 2, -1892.3425,-858.7948,31.3074,-1900.6304,-849.9285,31.3072, 3);//9CP
                                }
                                else
                                {
                                    SetPlayerRaceCheckpoint(playerid, 0, -1892.3425,-858.7948,31.3074,-1900.6304,-849.9285,31.3072, 3);//9CP
                                }
                            }
                        }
                    }
                    else
                    {
                        CartGamesDB[gameID][CGI_P2_Points]+=1;
                        switch(CartGamesDB[gameID][CGI_P2_Points] % 10)
                        {
                            case 0:
                            {
                                if(CartGamesDB[gameID][CGI_P2_Points] == CartGamesDB[gameID][CGI_Laps] * 10)
                                {
                                    new string[128];
                                    PlayerDB[playerid][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money]*2;
                                    format(string, sizeof(string), "• Pasiekëte finiðo linijà ir laimëjote ! Laimëjote %s€",AddPoints(CartGamesDB[gameID][CGI_Money]));
                                    SendClientMessage(playerid, 0x33AA33FF, string);
                                    format(string, sizeof(string), "• Þaidëjas %s laimëjo kartingus, jûs pralaimëjote %s€",Vardas(playerid),AddPoints(CartGamesDB[gameID][CGI_Money]));
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1 && PlayerDB[i][SQLID] == CartGamesDB[gameID][CGI_P1_SQLID])
                                        {
                                            SendClientMessage(i, 0xFF0000FF, string);
                                            SetPlayerPosExt(i,-1903.2593,-877.9726,32.0234,354.6720);
                                            SetPlayerVirtualWorld(i, 0);
                                        }
                                    }
                                    SetPlayerPosExt(playerid,-1903.2593,-877.9726,32.0234,354.6720);
                                    SetPlayerVirtualWorld(playerid, 0);
                                    DestroyCartsRace(gameID);
                                }
                                else
                                {
                                    SetPlayerRaceCheckpoint(playerid, 0, -1900.6304,-849.9285,31.3072,-1901.2926,-812.2694,31.3072, 3);//9CP
                                }
                            }
                            case 1:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1901.2926,-812.2694,31.3072, -1901.7729,-773.3618,31.3071, 3);//2CP
                            }
                            case 2:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1901.7729,-773.3618,31.3071, -1898.9614,-751.3140,31.3072 , 3);//3CP
                            }
                            case 3:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1898.9614,-751.3140,31.3072 , -1883.5948,-748.9782,31.307 , 3);//4CP
                            }
                            case 4:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1883.5948,-748.9782,31.307, -1876.4861,-771.0129,31.3072  , 3);//5CP
                            }
                            case 5:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1876.4861,-771.0129,31.3072, -1877.1022,-831.4324,31.6656 , 3);//6CP
                            }
                            case 6:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1877.1022,-831.4324,31.6656, -1878.1511,-853.4637,31.3072, 3);//7CP
                            }
                            case 7:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1878.1511,-853.4637,31.3072, -1883.2092,-865.5722,31.3073,3);//8CP
                            }
                            case 8:
                            {
                                SetPlayerRaceCheckpoint(playerid, 0, -1883.2092,-865.5722,31.3073,-1892.3425,-858.7948,31.3074 , 3);//9CP
                            }
                            case 9:
                            {
                                if(CartGamesDB[gameID][CGI_P2_Points] == CartGamesDB[gameID][CGI_Laps] * 10 - 1)
                                {
                                    SetPlayerRaceCheckpoint(playerid, 2, -1892.3425,-858.7948,31.3074,-1900.6304,-849.9285,31.3072, 3);//9CP
                                }
                                else
                                {
                                    SetPlayerRaceCheckpoint(playerid, 0, -1892.3425,-858.7948,31.3074,-1900.6304,-849.9285,31.3072, 3);//9CP
                                }
                            }
                        }
                    }
                }
            }
        }
	}

	return 1;
}
//END OF ONPLAYERENTERRACECHECKPOINT
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}
public OnPlayerRequestSpawn(playerid)
{
	if(PlayerDB[playerid][LoggedIn] == 0)
	{
		Kick(playerid);
		return 0;
	}
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(GetPVarInt(playerid, "PreventPickuping") > 0)
	{
		return 1;
	}
    if(pickupid == LeidimasVersluiPick)
    {
        if(PlayerDB[playerid][VerslininkoLicenzija] == 1)
        {
            ErrorMsg(playerid,"• Jûs jau turite verslininko licenzijà.");
        }
        else
        {
            ShowPlayerDialog(playerid, 296, DIALOG_STYLE_MSGBOX, "{AFAFAF}Leidimas verslui pirkti", "{FFFFFF}Norëdami ásigyti verslà ðiame serveryje, jûs privalote turëti leidimà verslui pirkti, kurio kaina yra {96A677}250.000€\n\n{FFFFFF}Neturint ðio leidimo, jûs verslo ásigyti negalësite, tad ðis leidimas yra privalomas.", "Pirkti", "Atðaukti");
        }
        return 1;
    }
    if(pickupid == InformacijaNaujokui[0])
    {
        new strf[1150], str[110];
        str = "{33AA33}• {FFFFFF}Kadangi esate naujokas ðiame serveryje, arba atëjote ið kitur!\n"; strcat(strf, str);
        str = "{33AA33}• {FFFFFF}Mes jums siûlome emigruoti ið to serverio iðkuriuo atëjote á èia!\n"; strcat(strf, str);
        str = "{33AA33}• {FFFFFF}Emigruodami gausite {33AA33}5.000 XP 10.000€ ir 3 dienø {FFFFFF}nemokamà VIP statusà !\n"; strcat(strf, str);
        str = "\n{33AA33}• {FFFFFF}Emigruoti galite mûsø svetainëje: {33AA33}www.San-Andreas.lt > Emigracija"; strcat(strf, str);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{ffffff}Emigracija", strf, "Supratau", "");
        return 1;
    }
    if(pickupid == InformacijaNaujokui[1])
    {
        new strf[1150], str[120];
        str = "{33AA33}• {FFFFFF}Pagalba manau tau jos tikrai prireiks!\n\n"; strcat(strf, str);
        str = "{33AA33}• {FFFFFF}Jeigu kaþkas neaiðku jum padës serverio administracijà. {33AA33}/admin [ kokia pagalba reikalinga ]\n"; strcat(strf, str);
        str = "{33AA33}• {FFFFFF}Visos serverio komandos - {33AA33}/komandos {FFFFFF}tau padës iðpresti kokiø komandø tau reikia.\n"; strcat(strf, str);
        str = "\n{33AA33}• {FFFFFF}Mûsø svetainës adresas: {33AA33}www.San-Andreas.lt"; strcat(strf, str);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{ffffff}Pagalba", strf, "Supratau", "");
        return 1;
    }

    if(pickupid == InformacijaNaujokui[2])
    {
        new strf[1150], str[140];
        str = "{33AA33}• {FFFFFF}Serverio moodifikacijos atnaujinimai vyksta kas 2 dienas\n\n"; strcat(strf, str);
        str = "\n{33AA33}• {FFFFFF}Taipat, jeigu turite minèiø serveryje, padëkite mums plëstis ! {33AA33}www.San-Andreas.lt > Idëjos."; strcat(strf, str);
        str = "\n{33AA33}• {FFFFFF}Þaidëjo siûlomos ádëjos yra labai rimtai þiûrimos, ir apsvarstomos tad itin menka ádëja serveriui padës plëstis !"; strcat(strf, str);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{ffffff}Atnaujinimai", strf, "Supratau", "");
        return 1;
    }

    if(pickupid == UogosShop)
    {
        new string[128];
        format(string, 128, "{99CCFF}• {FFFFFF}Krepðelis uogoms rinkti \t 75 € \t %d vnt sandelyje.\n       \n{99CCFF}• {FFFFFF}Uogø pardavimas",KrepseliaiSkaicius);
        ShowPlayerDialog(playerid, 259, DIALOG_STYLE_LIST, "Uogø pardavimas", string, "Pasirinkti", "Uþdaryti");
        return 1;
    }

    if(pickupid == KartingaiKasa)
    {
        ShowPlayerDialog(playerid, 264, DIALOG_STYLE_LIST, "{AFAFAF}Bilietai", "15 minuèiø - 500€\n30 minuèiø - 1000€\n60 minuèiø - 2000€\n           \nAbonimentas 3 dienoms kartingams vaþinëti - 10000€\nAbonimentas 7 dienoms kartingams vaþinëti - 20000€", "Rinktis", "Atðaukti");
        return 1;
	}
    if(pickupid == NamoVaistuPirkimas)
    {
        new MedikaiDirba;
        for(new i = 0;i<=GetPlayerPoolSize();i++)
    	{
     		if(PlayerDB[i][Job] > 0)
       		{
         		if(!IsPlayerConnected(i))
           		{
             		continue;
               	}
               	if(PlayerDB[i][Loaded] == 1)
                {
                	if(PlayerDB[i][Job] == 2)
                 	{
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										MedikaiDirba++;
		                            }
		                        }
		                    }
		                }
          			}
			 	}
		 	}
		}
		if(MedikaiDirba > 2)
		{
		    new string[128];
			ErrorMsg(playerid, "• Ðiuo metu pirkti medikamentus èia negalite, nes yra dibanèiøjø medikø.");
			format(string, sizeof(string), "• Dabar dirba %i medikai(-ø), kurie nëra AFK.", MedikaiDirba);
   			SendClientMessage(playerid, RAUDONA, string);
   			SendClientMessage(playerid, GELTONA, "• Iðkviesti galite paraðæ - /kviesti.");
		}
		else
		{
		    if(PlayerDB[playerid][TuriuNamoVaistu] == 5) return ErrorMsg(playerid, "• Pirma padëkite dabar turimus medikamentus.");
			if(PlayerDB[playerid][MoneyInPocket] < 5000) return ErrorMsg(playerid, "• Turite nepakankamai pinigø pirkimui. Reikia 5'000 eurø.");
			if(PlayerDB[playerid][TuriuNama] == 1) return ErrorMsg(playerid, "• Pirmiausia nusipirkite namà :).");
		    PlayerDB[playerid][VaistuLaikas] = gettime() + (10 + random(20));
     		PlayerDB[playerid][LaukiuVaistu] = true;
      		SendClientMessage(playerid, 0x90C695FF, "• Palaukite kol vaistininke atneð medikamentø.");
		}
        return 1;
    }
    if(pickupid == HealNaujokas)
    {
    	new MedikaiDirba;
        for(new i = 0;i<=GetPlayerPoolSize();i++)
    	{
     		if(PlayerDB[i][Job] > 0)
       		{
         		if(!IsPlayerConnected(i))
           		{
             		continue;
               	}
               	if(PlayerDB[i][Loaded] == 1)
                {
                	if(PlayerDB[i][Job] == 2)
                 	{
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										MedikaiDirba++;
		                            }
		                        }
		                    }
		                }
          			}
			 	}
		 	}
		}
		if(MedikaiDirba > 2)
		{
		    new string[128];
			ErrorMsg(playerid, "• Ðiuo metu èia pasigydyti negalite, nes yra dibanèiøjø medikø.");
			format(string, sizeof(string), "• Dabar dirba %i medikai(-ø), kurie nëra AFK.", MedikaiDirba);
   			SendClientMessage(playerid, RAUDONA, string);
   			SendClientMessage(playerid, GELTONA, "• Iðkviesti galite paraðæ - /kviesti.");
		}
		else
		{
		    if(PlayerDB[playerid][PlayerHealthAC] > 50) return ErrorMsg(playerid, "• Pasigydymas galimas turint maþiau 50 gyvybiø.");
			if(GetPlayerScore(playerid) < 2000)
			{
				SetPlayerHealthEx(playerid, 100);
				SendClientMessage(playerid,ZALIA, "• Sëkmingai pasigydëte.");
			}
			else
			{
			    if(PlayerDB[playerid][MoneyInPocket] < 100) return ErrorMsg(playerid, "• Pasigydymas kainuoja 1000€.");
			    SetPlayerHealthEx(playerid, 100);
			    PlayerDB[playerid][MoneyInPocket] -=1000;
			    SendClientMessage(playerid,ZALIA, "• Sëkmingai pasigydëte.");
   			}
		}
        return 1;
    }
    /*
#define VERSLU_SKAICIUS 150
enum VERSLU_INFORMACIJA
{
    VDB_SQLID,
    VDB_Pavadinimas[42],
    Float:VDB_X,
    Float:VDB_Y,
    Float:VDB_Z,
    VDB_WorldID,
    VDB_InteriorID,
    VDB_Nupirktas,
    VDB_SavininkoVardas[24],
    VDB_SavininkoSQLID,
    VDB_Kaina,
    VDB_Pajamos,
    VDB_VersloPelnas,
    VDB_Lygis,
    VDB_Parduodamas,
    VDB_PardavimoKaina,
    VDB_RinkosKaina,
    Text3D:VDB_Label,
    VDB_Pickup
}
new VerslaiDB[VERSLU_SKAICIUS][VERSLU_INFORMACIJA];
new VerslaiPoolSize = 0;
    */
    for(new i = 0;i <= VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Pickup] == pickupid)
        {
            if(VerslaiDB[i][VDB_Nupirktas] == 0)
            {
                if(PlayerDB[playerid][VerslininkoLicenzija] == 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslininko licenzija", "{FF0000}Verslo ásigyti negalite, kadangi tam turite turëti verslo licenzija.\n{FF0000}Licenzijà galite nusipirkti savivaldybëje. {FFFFFF}/gps > Savivaldybë.", "", "");
                    return 1;
                }
                new info[600];
                format(info,sizeof(info),"{FFFFFF}Ar norite nupirkti verslà „{96A677}%s{FFFFFF}“, uþ {96A677}%s€{FFFFFF}?\n",VerslaiDB[i][VDB_Pavadinimas],AddPoints(VerslaiDB[i][VDB_Kaina]));
                strcat(info,"{FFFFFF}Norëdami nusipirkti spauskite mygtukà „{96A677}Pirkti{FFFFFF}“, norëdami nepirkti spauskite mygtukà „{96A677}Atðaukti{FFFFFF}“");
                ShowPlayerDialog(playerid, 256, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo pirkimas",info , "Pirkti", "Atðaukti");
                PlayerDB[playerid][SelectedVerslasID] = i;
            }
            else
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    SetPlayerVirtualWorld(playerid, VerslaiDB[i][VDB_SQLID]+9);
                    SetPlayerInterior(playerid, 7);
                    SetPlayerPosExt(playerid,-2020.6823,-93.0635,620.3799,92.4058);
                }
                else
                {
                    new string[60];
                    format(string, sizeof(string), "~y~VERSLAS PRIKLAUSO: ~r~ %s", Vardas(VerslaiDB[i][VDB_SavininkoVardas]));
                    GameTextForPlayer(playerid, string, 3000, 5);
                    if(VerslaiDB[i][VDB_Parduodamas] == 1)
                    {
                        if(PlayerDB[playerid][VerslininkoLicenzija] == 0)
                        {
                            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslininko licenzija", "{FF0000}Verslo ásigyti negalite, kadangi tam turite turëti verslo licenzija.\n{FF0000}Licenzijà galite nusipirkti savivaldybëje. {FFFFFF}/gps > Savivaldybë.", "", "");
                            return 1;
                        }
                        PlayerDB[playerid][SelectedVerslasID] = i;
                        new info[600];
                        format(info,sizeof(info),"{FFFFFF}Ar norite nupirkti verslà „{96A677}%s{FFFFFF}“, uþ {96A677}%s€?\n",VerslaiDB[i][VDB_Pavadinimas],AddPoints(VerslaiDB[i][VDB_PardavimoKaina]));
                        strcat(info,"{FFFFFF}Norëdami nusipirkti spauskite mygtukà „{96A677}Pirkti{FFFFFF}“, \nnorëdami nepirkti spauskite mygtukà „{96A677}Atðaukti{FFFFFF}“");
                        ShowPlayerDialog(playerid, 294, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo pirkimas",info , "Pirkti", "Atðaukti");
                    }
                }
            }
            break;
        }
    }
    for(new i = 0;i <= VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Valdymas] == pickupid)
        {
            if(VerslaiDB[i][VDB_Nupirktas] == 1)
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    new caption[90];
                    format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                    new info[2024];
                    new string[128];

                    strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                    strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                    switch(VerslaiDB[i][VDB_Parduodamas])
                    {
                        case 0:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                        }
                        case 1:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                        }
                    }
                    strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                    new days,hours,mins,secs;
                    if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                    {
                        secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                        while(secs >= 60)
                        {
                            secs-=60;
                            mins+=1;
                        }
                        while(mins >= 60)
                        {
                            mins-=60;
                            hours+=1;
                        }
                        while(hours >= 24)
                        {
                            hours-=24;
                            days+=1;
                        }
                    }
                    format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                    strcat(info, string);
                    strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                    ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                }
            }
            break;
        }
    }
    if(pickupid == RadistaiPickupGaraze)
    {
        if(RadistaiGarazas == true)
        {
            GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
            return 1;
        }
        ShowPlayerDialog(playerid, 251, DIALOG_STYLE_LIST, "{AFAFAF}Liftas", "• Eiti ant stogo\n• Iðeiti ið garaþo. (perkelia á baze)", "Eiti", "Atðaukti");
    }
    if(pickupid == RadistaiPickupLauke)
    {
        ShowPlayerDialog(playerid, 252, DIALOG_STYLE_LIST, "{AFAFAF}Liftas", "• Eiti ant stogo\n• Eiti á poþeminá garaþà.", "Eiti", "Atðaukti");
    }
    if(pickupid == RadistaiPickupAntStogo)
    {
        ShowPlayerDialog(playerid, 253, DIALOG_STYLE_LIST, "{AFAFAF}Liftas", "• Nulipti nuo stogo(perkelia á baze)\n• Eiti á poþeminá garaþà.", "Eiti", "Atðaukti");
    }
    if(pickupid == CluckinBell_Maistas)
    {
        new info[400];

        strcat(info,"{E3F77E}» {FFFFFF}Mësainis su suriu {E3F77E}8€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Cluckinbell mesainis {E3F77E}13€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Havajø pica{E3F77E}10€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Submarinas su kumpiu{E3F77E}7€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Kava {E3F77E}3€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Coco-Cola {E3F77E}5€");
        ShowPlayerDialog(playerid, 235, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", info, "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == WellPica_Maistas)
    {
        new info[500];
        strcat(info,"{E3F77E}» {FFFFFF}Studentø pica {E3F77E}8€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Vezuvijaus pica {E3F77E}9€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Havajø pica {E3F77E}10€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Karpio pica {E3F77E}9€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Saliami pica {E3F77E}12€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Kava {E3F77E}3€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sultys {E3F77E}4€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Coco-Cola {E3F77E}2€");
        ShowPlayerDialog(playerid, 237, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", info, "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == BurgerShot_Maistas)
    {
        new info[520];

        strcat(info,"{E3F77E}» {FFFFFF}Tamsios duonos sumuðtinis {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Mësainis su sûriu {E3F77E}4€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Mësainis {E3F77E}3€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Mësainis su ðonine {E3F77E}3€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sumuðtinis su viðtiena {E3F77E}6€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sumuðtinis su þuvimi {E3F77E}5€\n");
        strcat(info,"{E3F77E}» {FFFFFF}„BurgerShot“ mësainis {E3F77E}14€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Coco-Cola {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Arbata {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Kava {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Obuoliø sultys{E3F77E} 3€");
        ShowPlayerDialog(playerid, 231, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", info, "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == AukotiFondasPickup)
    {
        new info[600];
        strcat(info, "{ffffff}• Paaukoti {d1bd39}policijos{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti spec. bûrio{d1bd39}„Aras“{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}Taksi{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}fûristo{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}radijos{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}medikø{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}mechanikø{ffffff} darbui.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}„Lucchese“{ffffff} mafijai.\n");
        strcat(info, "{ffffff}• Paaukoti {d1bd39}„Genovese“{ffffff} mafijai.");
        ShowPlayerDialog(playerid, 223, DIALOG_STYLE_LIST, "{AFAFAF}Aukojimas darbø fondams", info, "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == LigonineUzPinigusPickup)
    {
        if(PlayerDB[playerid][LigoninesLaikas] <= 1)
        {
            ErrorMsg(playerid,"• Jûs neprivalote bûti ligoninëje.");
        }
        else
        {
            ShowPlayerDialog(playerid, 220, DIALOG_STYLE_MSGBOX, "{AFAFAF}Reikalingas patvirtinimas", "{FFFFFF}Ar tikrai norite panaikinti laukimo laikà, ir iðeiti ið ligoninës nelaukus laiko? Kaina 500€", "Taip", "Ne");
        }
        return 1;
    }
    if(pickupid == Garazai1Pirkimas)
    {
        SendClientMessage(playerid, -1, "");
        SendClientMessage(playerid, ZYDRA, "• Gal nori iðsinuomoti garaþà?");
        SendClientMessage(playerid, GELTONA, "• Visi garaþai yra nuomojami 30 dienø uþ 100 kreditø.");
        SendClientMessage(playerid, ZALIA, "• Laisvø garaþø numeriai yra þali,o uþimtø raudoni. Norëdamas iðsinuomoti garaþà pasirink garaþo numerá ir spausk „Rinktis“.");        SendClientMessage(playerid, -1, "");

        new info[400];
        for(new i = 0;i<22;i++)
        {
            if(i == 21)
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    new string[14];
                    format(string, 14, "{FF0000}%i", i);
                    strcat(info, string);
                }
                else
                {
                    new string[14];
                    format(string, 14, "{00FF00}%i", i);
                    strcat(info, string);
                }
            }
            else
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    new string[14];
                    format(string, 14, "{FF0000}%i\n", i);
                    strcat(info, string);
                }
                else
                {
                    new string[14];
                    format(string, 14, "{00FF00}%i\n", i);
                    strcat(info, string);
                }
            }
        }
        ShowPlayerDialog(playerid, 189, DIALOG_STYLE_LIST, "{AFAFAF}Serverio garaþai", info, "Rinktis","Atðaukti");
        return 1;
    }
    if(pickupid == Garazai2Pirkimas)
    {
        SendClientMessage(playerid, -1, "");
        SendClientMessage(playerid, ZYDRA, "• Gal nori iðsinuomoti garaþà?");
        SendClientMessage(playerid, GELTONA, "• Visi garaþai yra nuomojami 30 dienø uþ 100 kreditø.");
        SendClientMessage(playerid, ZALIA, "• Laisvø garaþø numeriai yra þali,o uþimtø raudoni. Norëdamas iðsinuomoti garaþà pasirink garaþo numerá ir spausk „Rinktis“.");        SendClientMessage(playerid, -1, "");

        new info[400];
        for(new i = 22;i<32;i++)
        {
            if(i == 31)
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    new string[14];
                    format(string, 14, "{FF0000}%i", i);
                    strcat(info, string);
                }
                else
                {
                    new string[14];
                    format(string, 14, "{00FF00}%i", i);
                    strcat(info, string);
                }
            }
            else
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    new string[14];
                    format(string, 14, "{FF0000}%i\n", i);
                    strcat(info, string);
                }
                else
                {
                    new string[14];
                    format(string, 14, "{00FF00}%i\n", i);
                    strcat(info, string);
                }
            }
        }
        ShowPlayerDialog(playerid, 191, DIALOG_STYLE_LIST, "{AFAFAF}Serverio garaþai", info, "Rinktis","Atðaukti");
        return 1;
    }
    if(pickupid == ClothesBoxGymRed)
    {
        SendClientMessage(playerid, ZALIA, "• Apsirengëte raudonos spalvos bokso aprangà. Persirengti galite su komanda /persirengti.");
        SetPlayerSkinEx(playerid, 80);
        PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_KITI;
        SavePlayerData(playerid);
        return 1;
    }
    if(pickupid == ClothesBoxGymBlue)
    {
        SendClientMessage(playerid, ZALIA, "• Apsirengëte mëlynos spalvos bokso aprangà. Persirengti galite su komanda /persirengti.");
        SetPlayerSkinEx(playerid, 81);
        PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_KITI;
        SavePlayerData(playerid);
        return 1;
    }
    //
    if(pickupid == KioskaiPickup[0] || pickupid == KioskaiPickup[1] || pickupid == KioskaiPickup[2]|| pickupid == KioskaiPickup[3]|| pickupid == KioskaiPickup[4] || pickupid == KioskaiPickup[5])
    {
        //        ShowPlayerDialog(playerid, 158, DIALOG_STYLE_LIST, "{AFAFAF}Pasirinkite prekiø kategorijà", "Ávairios\nGërimai\nUþkandþiai", "Rinktis", "Atðaukti");
        new info[420];

        //
//        strcat(info, "{E3F77E}» {ffffff}Teleloto bilietai {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Saskaitos papildymai\n");
        strcat(info,"{E3F77E}» {FFFFFF}Bandelë su cinamonu {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Traðkuèiai {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sausainiai „Selga“ {E3F77E}1€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Coco-Cola gërimas 2L {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sprite gërimas 2L {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Fotoaparatas {E3F77E}35€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Gëlës {E3F77E}5€");
        ShowPlayerDialog(playerid, 249, DIALOG_STYLE_LIST, "{AFAFAF}Prekiø sàraðas", info, "Rinktis", "Atðaukti");
        return 1;
    }
    //
    if(pickupid == PickupBuyHelmet)
    {
        if(PlayerDB[playerid][Salmas18645] == 0)
        {
            ShowPlayerDialog(playerid, 155, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ðalmo pirkimas", "Ar norite ásigyti ðalmà uþ 2 000€ ?", "Taip", "Ne");
        }
        else
        {
            ErrorMsg(playerid,"• Jûs jau turite ðalmà.");
        }
        return 1;
    }
    //
    if(pickupid == EnterPickupBoxGym)
    {
        SetPlayerInterior(playerid, 5);
        SetPlayerVirtualWorld(playerid, 1);
        SetPlayerPosExt(playerid,772.2798,-2.7056,1000.7298,2.8228);
        return 1;
    }
    if(pickupid == ExitPickupBoxGym)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2170.0764,252.0474,35.3335,267.5919);
        return 1;
    }
    if(pickupid == EnterVaistine)
    {
        SetPlayerPosExt(playerid,-552.8530,-1042.7377,3.7920,180.000);
        return 1;
	}
	if(pickupid == ExitVaistine)
    {
        SetPlayerPosExt(playerid,-1855.9718,486.9867,35.1719,180.000);
        return 1;
	}
	if(pickupid == EnterNTA)
    {
        SetPlayerPosExt(playerid, 708.4461,378.6703,1023.5939,360.000);
        //SetPlayerVirtualWorld(playerid, 1);
        return 1;
	}
	if(pickupid == ExitNTA[0] || pickupid == ExitNTA[1])
    {
        SetPlayerPosExt(playerid, -2651.7219,375.9903,5.4959,90.0000);
        //SetPlayerVirtualWorld(playerid, 0);
        return 1;
	}
	if(pickupid == NarkSlotas)
	{
		if(PlayerDB[playerid][TuriuNama] == 0) return ErrorMsg(playerid, "• Neturite namo.");
		ShowPlayerDialog(playerid, 331, DIALOG_STYLE_MSGBOX, "{AFAFAF}Narkotikø sloto atidarymas", "{FFFFFF}Ar tikrai norite atiaryti bûsto narkotikø slotà? \n\tKaina: {FF0000}100 {FFFFFF}kred.", "Atidaryti", "Atðaukti");
		return 1;
	}
	if(pickupid == NarkTalpa)
	{
		if(PlayerDB[playerid][TuriuNama] == 0) return ErrorMsg(playerid, "• Neturite namo.");
		if(HouseInfo[playerid][KiekTelpaNarku] == 1000) return ErrorMsg(playerid, "• Pasiektas maksimalus lygis.");
		if(HouseInfo[playerid][NarkSlotState] == 0) return ErrorMsg(playerid, "• Pirmiausia atidarykite narkotikø slotà.");
		new info[700];
     	new string[128];
     	format(string, 128, "{FFFFFF}• Dabar jûsø spintos talpa: {FFFF00}%i{FFFFFF}.", HouseInfo[playerid][KiekTelpaNarku]);
      	strcat(info, string);
      	format(string, 128, "{FFFFFF}\n• Ar norite padidinti {FF0000}100 {FFFFFF}vienetais? \n\t\tKaina: {FF0000}25 {FFFFFF}krd.");
      	strcat(info, string);
      	ShowPlayerDialog(playerid, 333, DIALOG_STYLE_MSGBOX, "{AFAFAF}Narkotikø talpos didinimas", info, "Padidinti","Atðaukti");
	}
	if(pickupid == NamoMokesciai)
	{
		if(PlayerDB[playerid][TuriuNama] == 0) return ErrorMsg(playerid, "• Neturite namo.");
		if(HouseInfo[playerid][HouseMokesciai] == 0) return ErrorMsg(playerid, "• Kolkas mokesèiai nesusikaupæ.");
	    new info[700];
     	new string[128];
     	format(string, 128, "{FFFFFF}Ar norite apkomëti namo mokesèius? \n\tSuma: {FF0000}%i {FFFFFF}eur.", HouseInfo[playerid][HouseMokesciai]);
      	strcat(info, string);
      	ShowPlayerDialog(playerid, 332, DIALOG_STYLE_MSGBOX, "{AFAFAF}Mokesèiø apmokëjimas", info, "Apmokëti","Atðaukti");
	}
    //
    if(pickupid == SavivaldybeAlgos)
    {
        if(PlayerDB[playerid][Uzdarbis])
        {
            new Text[90];
            format(Text, 90, "Sveiki,jûs esate uþdirbæs %s €.\n Ar norite atsiimti savo uþdarbá?", AddSpaces(PlayerDB[playerid][Uzdarbis]));
            ShowPlayerDialog(playerid, 150, DIALOG_STYLE_MSGBOX, "{AFAFAF}Algos atsiimimo punktas", Text, "Taip", "Ne");

        }
        else
        {
           ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Algos atsiimimo punktas", "Ðiame algos atsiëmimo punkte galite atsiimti jûsø uþdirbtà algà.", "Gerai", "");
        }
        return 1;
    }
    if(pickupid == EnterSavivaldybePickup)
    {
        SetPlayerInterior(playerid, 3);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,386.5259,173.6381,1008.3828,63.7399);

        if(PlayerDB[playerid][Pasiekimas9] == 0)
        {
            PlayerCompletedPasiekimas(playerid,9);
        }
        return 1;
    }
    if(pickupid == ExitSavivaldybePickup)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2720.8101,-317.1805,7.8438,40.7443);
        return 1;
    }
    if(pickupid == EnterZIPClothingSalon)
    {
        SetPlayerInterior(playerid, 18);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,161.4048,-94.2416,1001.8047,0.7938);
        return 1;
    }
    if(pickupid == ExitZIPClothingSalon)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-1885.3784,863.5361,35.1728,135.9554);
        return 1;
    }

    if(pickupid == EnterSFPoliceDep)
    {
        SetPlayerInterior(playerid, 3);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,238.9551,142.0094,1003.0234,2.7202);
        return 1;
    }

    if(pickupid == ExitSFPoliceDep)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-1605.4619,713.4599,13.4585,355.9804);
        return 1;
    }
    if(pickupid == PickupSFPoliceFinePayment)
    {
        if(PlayerDB[playerid][WantedLevel] > 0)
        {
            if(PlayerDB[playerid][WantedLevel] > 40)
            {
                ErrorMsg(playerid,"• Baudà apmokëti galite tik turëdami maþiau nei 40 gaudomumo lygio balø.");
                if(IsJobFromLaw(PlayerDB[playerid][Job]) && PlayerDB[playerid][WantedLevel] <= 5)
                {
                    return 1;
                }
                else
                {
                    RemovePlayerAttachedObject(playerid, 1);
                    PlayerDB[playerid][MoneyStackOnBack] = false;
                    ResetPlayerWeaponsEx(playerid);
                    PlayerDB[playerid][ClothesBeforeJail] = GetPlayerSkin(playerid);
                    PlayerDB[playerid][AprangaBeforeJail] = PlayerDB[playerid][AprangosTipas];
                    PlayerDB[playerid][JailTime] = PlayerDB[playerid][WantedLevel] * 45;
                    PlayerDB[playerid][WantedLevel] = 0;
                    PlayerDB[playerid][BEGA] = 0;
                    new string[80];
                    format(string, 80, "• Jûs buvote pasodintas á kalëjimà uþ ávairius nusikaltimus %i sek.", PlayerDB[playerid][JailTime]);
                    SendClientMessage(playerid, ZYDRA, string);
                    TeleportPlayerInToJail(playerid);
                }
            }
            else
            {
                new info[200];
                format(info, 200, "Jûs esate gaudomas teisësaugos,bei privalote susimokëti baudà uþ nusikaltimus.\nBaudos dydis uþ jûsø nusiþengimus yra: %s€\nAr norite susimokëti baudà?", AddPoints(150*PlayerDB[playerid][WantedLevel]));

                ShowPlayerDialog(playerid, 154, DIALOG_STYLE_MSGBOX, "{AFAFAF}Baudø susimokëjimo punktas", info, "Taip", "Ne");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Jûs neturite gaudomumo lygio balø.");
        }
        return 1;
    }

    if(pickupid == EnterXoomer3Degaline)
    {
        SetPlayerInterior(playerid, 4);
        SetPlayerVirtualWorld(playerid, 4);
        SetPlayerPosExt(playerid,-27.5626,-27.8856,1003.5573,4.3915);
        return 1;
    }
    if(pickupid == ExitXoomer3Degaline)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2418.1790,969.5725,45.2969,265.5829);
        return 1;
    }
    if(pickupid == Xoomer3Degaline[0] || pickupid == Xoomer3Degaline[1] || pickupid == Xoomer3Degaline[2] || pickupid == Xoomer3Degaline[3] || pickupid == Xoomer3Degaline[4] \
     || pickupid == Xoomer3Degaline[5])
    {
        OnPlayerPickUpDynamicPickup(playerid, XoomerDegaline[0]);
        return 1;
    }
    //
    if(pickupid == EnterXoomer2Degaline)
    {
        SetPlayerInterior(playerid, 4);
        SetPlayerVirtualWorld(playerid, 3);
        SetPlayerPosExt(playerid,-27.5626,-27.8856,1003.5573,4.3915);
        return 1;
    }
    if(pickupid == ExitXoomer2Degaline)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2266.1177,547.2280,35.1771,268.7845);
        return 1;
    }
    if(pickupid == Xoomer2Degaline[0] || pickupid == Xoomer2Degaline[1] || pickupid == Xoomer2Degaline[2] || pickupid == Xoomer2Degaline[3] || pickupid == Xoomer2Degaline[4] \
     || pickupid == Xoomer2Degaline[5] || pickupid == Xoomer2Degaline[6] || pickupid == Xoomer2Degaline[7])
    {
        OnPlayerPickUpDynamicPickup(playerid, XoomerDegaline[0]);
        return 1;
    }
    //
    if(pickupid == XoomerDegalineShop)
    {
        new info[520];
        strcat(info,"{E3F77E}» {FFFFFF}Kebabas su kiauliena {E3F77E}3€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Submarinas su kumpiu {E3F77E}2€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Submarinas su viðtiena {E3F77E}5€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Sumuðtinis „Panini“ {E3F77E}6€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Submarinas su kiauliena ir agurkais {E3F77E}5€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Kava {E3F77E}4€\n");
        strcat(info,"{E3F77E}» {FFFFFF}Fanta {E3F77E}2€");
        ShowPlayerDialog(playerid, 233, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", info, "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == EnterXoomerDegaline)
    {
        SetPlayerInterior(playerid, 4);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,-27.5626,-27.8856,1003.5573,4.3915);
        return 1;
    }
    if(pickupid == ExitXoomerDegaline)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2037.1816,151.6474,27.6790,271.9181);
        return 1;
    }
    if(pickupid == XoomerDegaline[0] || pickupid == XoomerDegaline[1] || pickupid == XoomerDegaline[2] || pickupid == XoomerDegaline[3])
    {
        if(IsValidVehicle(PlayerDB[playerid][VehiclePlayerExitedLastTime]))
        {
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid, X, Y, Z);

            if(GetVehicleDistanceFromPoint(PlayerDB[playerid][VehiclePlayerExitedLastTime], X,Y,Z) > 5)
            {
                ErrorMsg(playerid,"• Transporto priemonë yra per toli.");
            }
            else
            {
                new VehicleModel = GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime]);
                if(IsVehicleModelWithEngine(VehicleModel))
                {
                    new MasinosID = PlayerDB[playerid][VehiclePlayerExitedLastTime];
                    if(VehicleDB[MasinosID][FuelType] == 0)
                    {
                        //Pila bendzina
                        PlayerDB[playerid][GasStationTimerRunsOrl] = true;
                        PlayerDB[playerid][GasStationTimerOrl] = SetTimerEx("XoomerDegalineFill", 500, true, "di", playerid,0);
                        PlayerDB[playerid][DegaluTipasKuriPila] = 0;
                    }
                    else
                    {
                        //Dujas
                        PlayerDB[playerid][GasStationTimerRunsOrl] = true;
                        PlayerDB[playerid][GasStationTimerOrl] = SetTimerEx("XoomerDegalineFill", 500, true, "di", playerid,1);
                        PlayerDB[playerid][DegaluTipasKuriPila] = 1;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ði transporto priemonë nenaudoja degalø.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Neturite jokios maðinos á kurià galëtumete pilti degalus. (Pabandykite trumpai álipti á savo maðinà ir tuo met bandykite vël..)");
        }
        return 1;
    }
    //
    if(pickupid == OrlenDegalineShop)
    {
        ShowPlayerDialog(playerid, 141, DIALOG_STYLE_LIST, "Orlen 24/7", "Submarinas 12€\nKebabas 8€\nSumuðtiniai su rukyta deðra 6€\nSprite 2€\nCoca-Cola 2€\nFanta 2€", "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == EnterOrlenDegaline)
    {
        SetPlayerInterior(playerid, 6);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,-26.8339,-55.5846,1003.5469,3.9528);
        return 1;
    }
    if(pickupid == ExitOrlenDegaline)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-1674.6460,430.8495,7.1797,220.0252);
        return 1;
    }
    if(pickupid == OrlenDegaline[11] || pickupid == OrlenDegaline[12] || pickupid == OrlenDegaline[13] || pickupid == OrlenDegaline[14] || pickupid == OrlenDegaline[15])
    {
        OnPlayerPickUpDynamicPickup(playerid, OrlenDegaline[0]);
        return 1;
    }
    if(pickupid == OrlenDegaline[0] || pickupid == OrlenDegaline[1] || pickupid == OrlenDegaline[2] || pickupid == OrlenDegaline[3] \
        ||  pickupid == OrlenDegaline[4] || pickupid == OrlenDegaline[5] || pickupid == OrlenDegaline[6] || pickupid == OrlenDegaline[7] \
        || pickupid == OrlenDegaline[8] || pickupid == OrlenDegaline[9] || pickupid == OrlenDegaline[10])
    {
        if(IsValidVehicle(PlayerDB[playerid][VehiclePlayerExitedLastTime]))
        {
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid, X, Y, Z);

            if(GetVehicleDistanceFromPoint(PlayerDB[playerid][VehiclePlayerExitedLastTime], X,Y,Z) > 5)
            {
                ErrorMsg(playerid,"• Transporto priemonë yra per toli.");
            }
            else
            {
                new VehicleModel = GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime]);
                if(IsVehicleModelWithEngine(VehicleModel))
                {
                    new MasinosID = PlayerDB[playerid][VehiclePlayerExitedLastTime];
                    if(VehicleDB[MasinosID][FuelType] == 0)
                    {
                        //Pila bendzina
                        PlayerDB[playerid][GasStationTimerRunsOrl] = true;
                        PlayerDB[playerid][GasStationTimerOrl] = SetTimerEx("OrlenDegalineFill", 500, true, "di", playerid,0);
                        PlayerDB[playerid][DegaluTipasKuriPila] = 0;
                    }
                    else
                    {
                        //Dujas
                        PlayerDB[playerid][GasStationTimerRunsOrl] = true;
                        PlayerDB[playerid][GasStationTimerOrl] = SetTimerEx("OrlenDegalineFill", 500, true, "di", playerid,1);
                        PlayerDB[playerid][DegaluTipasKuriPila] = 1;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ði transporto priemonë nenaudoja degalø.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Neturite jokios maðinos á kurià galëtumete pilti degalus. (Pabandykite trumpai álipti á savo maðinà ir tuo met bandykite vël..)");
        }
        return 1;
    }
    if(pickupid == EnterCluckinBellPickup)
    {
        SetPlayerInterior(playerid, 9);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,365.7158,-9.8873,1001.8516,3);
        return 1;
    }
    if(pickupid == ExitCluckinBellPickup)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-1816.7483,615.4305,35.1719,182.9326);
        return 1;
    }
    if(pickupid == EnterWellPicaPickup1)
    {
        SetPlayerInterior(playerid, 5);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,370.5054,-131.1232,1001.4922,5.5211);
        return 1;
    }
    if(pickupid == ExitWellPicaPickup1)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-1723.6249,1360.4484,7.1875,82.8672);
        return 1;
    }
    if(pickupid == EnterBurgerShotPickup1)
    {
        SetPlayerInterior(playerid, 10);
        SetPlayerVirtualWorld(playerid, 2);
        SetPlayerPosExt(playerid,364.8510,-73.2284,1001.5078,312.2902);
        return 1;
    }
    if(pickupid == ExitBurgerShotPickup1)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2333.9302,-166.7758,35.5547,258.1213);
        return 1;
    }
    if(pickupid == EnterBurgerShotPickup2)
    {
        SetPlayerInterior(playerid, 10);
        SetPlayerVirtualWorld(playerid, 3);
        SetPlayerPosExt(playerid,364.8510,-73.2284,1001.5078,312.2902);
        return 1;
    }
    if(pickupid == ExitBurgerShotPickup2)
    {
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPosExt(playerid,-2358.3713,1008.2838,50.8270,88.5079);
        return 1;
    }

    if(pickupid == Gaisrine_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            SendClientMessage(playerid, ZALIA, "• Isidarbinote á ugniagesiø gretas.");
            GameTextForPlayer(playerid, "~g~ISIDARBINOTE I ugniagesius", 3000, 3);
            PlayerDB[playerid][Job] = 14;
            if(PlayerDB[playerid][Pasiekimas41] == 0)
            {
                PlayerCompletedPasiekimas(playerid,41);
            }
            PlayerDB[playerid][JobInvitation] = 0;
            new string[128];
            format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == 14)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            PlayerDB[playerid][Rangas] = 1;
            if(PlayerDB[playerid][Sex] == 1)
            {

                SetPlayerSkinEx(playerid, 277);
                PlayerDB[playerid][UniformosID] = 277;
            }
            else
            {

                SetPlayerSkinEx(playerid, 263);
                PlayerDB[playerid][UniformosID] = 263;
            }
            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;

        }
        else if(PlayerDB[playerid][Job] != 14)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == Gaisrine_Gesintuvas)
    {
        if(PlayerDB[playerid][Job] == 14)
        {
            GivePlayerWeaponEx(playerid,WEAPON_FIREEXTINGUISHER,500);
            SendClientMessage(playerid, ZALIA,"Gavote gesintuvà.");
        }
        else
        {
            ErrorMsg(playerid,"• Gesintuvai tik gaisrininkams.");
        }
        return 1;
    }

    if(pickupid == Valytojai_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            SendClientMessage(playerid, ZALIA, "• Isidarbinote á gatviø valytojus.");
            GameTextForPlayer(playerid, "~g~ISIDARBINOTE I VALYTOJUS", 3000, 3);
            PlayerDB[playerid][Job] = 15;

            if(PlayerDB[playerid][Pasiekimas38] == 0)
            {
                PlayerCompletedPasiekimas(playerid,38);
            }
            PlayerDB[playerid][JobInvitation] = 0;
            new string[128];
            format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == 15)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            PlayerDB[playerid][Rangas] = 1;
            if(PlayerDB[playerid][Sex] == 1)
            {

                SetPlayerSkinEx(playerid, 6);
                PlayerDB[playerid][UniformosID] = 6;
            }
            else
            {

                SetPlayerSkinEx(playerid, 69);
                PlayerDB[playerid][UniformosID] = 69;
            }
            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
        }
        else if(PlayerDB[playerid][Job] != 15)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }

    if(pickupid == BurgerStKurjeris_ISIDARBINIMAS || pickupid == BurgerSt2Kurjeris_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            SendClientMessage(playerid, ZALIA, "• Isidarbinote á „BurgerShot“ maisto iðveþiotojus.");
            GameTextForPlayer(playerid, "~g~ISIDARBINOTE MAISTO KURJERIU", 3000, 3);
            PlayerDB[playerid][Job] = 19;

            if(PlayerDB[playerid][Pasiekimas36] == 0)
            {
                PlayerCompletedPasiekimas(playerid,36);
            }
            PlayerDB[playerid][JobInvitation] = 0;
            new string[128];
            format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == 19)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            PlayerDB[playerid][Rangas] = 1;

            if(PlayerDB[playerid][Sex] == 1)
            {

                SetPlayerSkinEx(playerid, 155);
                PlayerDB[playerid][UniformosID] = 155;
            }
            else
            {

                SetPlayerSkinEx(playerid, 205);
                PlayerDB[playerid][UniformosID] = 205;
            }
            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
        }
        else if(PlayerDB[playerid][Job] != 19)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }

    if(pickupid == AutoBus_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            SendClientMessage(playerid, ZALIA, "• Isidarbinote á autobusu vairuotojus.");
            GameTextForPlayer(playerid, "~g~ISIDARBINOTE I Autobusu vairuotojus", 3000, 3);
            PlayerDB[playerid][Job] = 13;
            PlayerDB[playerid][JobInvitation] = 0;
            new string[128];
            format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
            if(PlayerDB[playerid][Pasiekimas39] == 0)
            {
                PlayerCompletedPasiekimas(playerid,39);
            }
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == 13)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            PlayerDB[playerid][Rangas] = 1;
            if(PlayerDB[playerid][Sex] == 1)
            {

                SetPlayerSkinEx(playerid, 240);
                PlayerDB[playerid][UniformosID] = 240;
            }
            else
            {

                SetPlayerSkinEx(playerid, 172);
                PlayerDB[playerid][UniformosID] = 172;
            }
            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
        }
        else if(PlayerDB[playerid][Job] != 13)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == Lektuvu_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            SendClientMessage(playerid, ZALIA, "• Isidarbinote á Oro ir Vandens kurjerius.");
            GameTextForPlayer(playerid, "~g~ISIDARBINOTE I Oro ir Vandens kurjerius", 3000, 3);
            PlayerDB[playerid][Job] = 16;
            PlayerDB[playerid][JobInvitation] = 0;
            new string[128];
            format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
            /*if(PlayerDB[playerid][Pasiekimas39] == 0)
            {
                PlayerCompletedPasiekimas(playerid,39);
            }*/
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == 16)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            PlayerDB[playerid][Rangas] = 1;
            if(PlayerDB[playerid][Sex] == 1)
            {

                SetPlayerSkinEx(playerid, 61);
                PlayerDB[playerid][UniformosID] = 61;
            }
            else
            {

                SetPlayerSkinEx(playerid, 76);
                PlayerDB[playerid][UniformosID] = 76;
            }
            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
        }
        else if(PlayerDB[playerid][Job] != 16)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == LuccheseMafia_PiniguPlovimas)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(PlayerDB[playerid][MoneyStackOnBack] == true)
            {
                new AmountOfMoney = ((1+random(9) ) * 3000) + (1 + random(9) * 200);
                DarboInformacija[7][DarboFondas]+=AmountOfMoney;
                new string[128];
                format(string, 128, "Sëkmingai realizavote %s € kuriuos pavogëte ið San-Fierro banko. Pinigai saugomi Mafijos pinigø saugykloje.", AddPoints(AmountOfMoney));
                SendClientMessage(playerid, ZALIA, string);
                PlayerDB[playerid][MoneyStackOnBack] = false;
                RemovePlayerAttachedObject(playerid, 1);
                PlayerDB[playerid][WantedLevel] = 0;
                PlayerDB[playerid][BEGA] = 0;
            }
        }
        else
        {
            ErrorMsg(playerid,"• Tik mafijos nariams.");
        }
        return 1;
    }
    if(pickupid == GenoveseMafia_PiniguPlovimas)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(PlayerDB[playerid][MoneyStackOnBack] == true)
            {
                new AmountOfMoney = ((1+random(9) ) * 3000) + (1 + random(9) * 200);
                DarboInformacija[8][DarboFondas]+=AmountOfMoney;
                new string[128];
                format(string, 128, "Sëkmingai realizavote %s € kuriuos pavogëte ið San-Fierro banko. Pinigai saugomi Mafijos pinigø saugykloje.", AddPoints(AmountOfMoney));
                SendClientMessage(playerid, ZALIA, string);
                PlayerDB[playerid][MoneyStackOnBack] = false;
                RemovePlayerAttachedObject(playerid, 1);
                PlayerDB[playerid][WantedLevel] = 0;
                PlayerDB[playerid][BEGA] = 0;
            }
        }
        else
        {
            ErrorMsg(playerid,"• Tik mafijos nariams.");
        }
        return 1;
    }
    if(pickupid == CreateBankAccountPickup[0])
    {
        if(PlayerDB[playerid][TuriBankoSaskaita] == 1)
        {
            ErrorMsg(playerid,"• Jûs jau turite banko saskaità.");
        }
        else
        {
            ShowPlayerDialog(playerid, 120, DIALOG_STYLE_MSGBOX, "{AFAFAF}Banko saskaitos atidarymas", "Ar norëtumete atsidaryti banko sàskaità ðiame banke?Paslauga yra visiðkai nemokama.", "Taip", "Ne");
        }
        return 1;
    }
    if(pickupid == CreateBankAccountPickup[1])
    {
        if(PlayerDB[playerid][TuriBankoSaskaita] == 1)
        {
            ErrorMsg(playerid,"• Jûs jau turite banko saskaità.");
        }
        else
        {
            ShowPlayerDialog(playerid, 120, DIALOG_STYLE_MSGBOX, "{AFAFAF}Banko saskaitos atidarymas", "Ar norëtumete atsidaryti banko sàskaità ðiame banke?Paslauga yra visiðkai nemokama.", "Taip", "Ne");
        }
        return 1;
    }
    if(pickupid == EnterBankPickup)
    {
        TogglePlayerControllable(playerid, 0);
        SetPlayerVirtualWorld(playerid, 1);
        SetPlayerInterior(playerid, 20);
        SetPlayerFacingAngle(playerid, 271);
        SetPlayerPos(playerid, 1345.2527,-955.1249,200.9860);
        SetTimerEx("MakeControllable", 1500, false, "d", playerid);
        if(PlayerDB[playerid][Pasiekimas10] == 0)
        {
            PlayerCompletedPasiekimas(playerid,10);
        }
        SendClientMessage(playerid, RAUDONA, "Ðiame banke, kaip ir, bet kurioje kitoje vieðojoje vietoje ginklø naudojimas ir turëjimas uþtraukia baudþiamàjà atsakomybæ.");
        return 1;
    }
    if(pickupid == ExitBankPickup)
    {
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 0);
        SetPlayerFacingAngle(playerid, 271.6);
        SetPlayerPos(playerid, -2764.1650,375.6126,6.3401);
        return 1;
    }
    if(pickupid == NaikintiGinklusPick)
    {
        if(IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(PlayerDB[playerid][TuriDeze] == true)
            {
                PlayerDB[playerid][TuriDeze] = false;
                RemovePlayerAttachedObject(playerid, 0);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                SendClientMessage(playerid, ZALIA, "Perdavei vienà dëþæ naikinimui.Atlygis 100€ prie algos.");
                if(PlayerDB[playerid][VIP] == 1)
                {
                    PlayerDB[playerid][Uzdarbis]+=200;
                    PlayerDB[playerid][UzdarbisSiandien]+=200;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 1,11:
                        {
                            PlayerDB[playerid][Job1XP] +=10;
                        }
                        case 9:
                        {
                            PlayerDB[playerid][Job9XP] +=10;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Uþ prisidëjimà prie kontrobandos naikinimo gavote +10XP prie darbo patirties.");
                    PlusPlayerScore(playerid,10);
                }
                else
                {
                    PlayerDB[playerid][Uzdarbis]+=100;
                    PlayerDB[playerid][UzdarbisSiandien]+=100;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 1,11:
                        {
                            PlayerDB[playerid][Job1XP] +=5;
                        }
                        case 9:
                        {
                            PlayerDB[playerid][Job9XP] +=5;
                        }
                    }
                    PlusPlayerScore(playerid,5);
                    SendClientMessage(playerid, ZALIA, "Uþ prisidëjimà prie kontrobandos naikinimo gavote +5XP prie darbo patirties.");
                }

                DarboInformacija[PlayerDB[playerid][Job]][DarboFondas]+=200;
                cmd_r(playerid,"Perdaviau vienà kontrobandos dëþæ naikinimui.");
            }
            else
            {
                ErrorMsg(playerid,"• Neturi deþës.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Tik teisësaugininkams.");
        }
        return 1;
    }
    if(pickupid == GenoveseGinklai)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(PlayerDB[playerid][TuriDeze] == true)
            {
                PlayerDB[playerid][TuriDeze] = false;
                RemovePlayerAttachedObject(playerid, 0);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                GenoveseMafiaSettings[GenoveseAmmoShotgun]+=50;
                GenoveseMafiaSettings[GenoveseAmmoDeagle]+=50;
                GenoveseMafiaSettings[GenoveseAmmoAK47]+=50;
                GenoveseMafiaSettings[GenoveseAmmoSniper]+=50;
                SendClientMessage(playerid, ZALIA, "• Iðkroviai vienà dëþæ ginklø á mafijos ginklø sandelá.");
            }
            else
            {
                if(GetPVarInt(playerid, "HadDialogLastly") < gettime() - 40)
                {
                    new DialogInformation[2048];
                    new string[100];
                    format(string, 100, "{FFFFFF}Ginklo modelis: ShotGun | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoShotgun]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: Desert Eagle | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoDeagle]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: AK-47 | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoAK47]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: Sniper Rifle | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoSniper]);
                    strcat(DialogInformation, string);
                    strcat(DialogInformation, "\nGyvybës ir ðarvai");
                    ShowPlayerDialog(playerid, 115, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø saugykla", DialogInformation, "Rinktis", "Atðaukti");
                    SetPVarInt(playerid, "HadDialogLastly", gettime());
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Ðie ginklai priklauso Genovese mafijai.");
        }
        return 1;
    }
    if(pickupid == LuccheseGinklai)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(PlayerDB[playerid][TuriDeze] == true)
            {
                PlayerDB[playerid][TuriDeze] = false;
                RemovePlayerAttachedObject(playerid, 0);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                LuccheseMafiaSettings[LuccheseAmmoShotgun]+=50;
                LuccheseMafiaSettings[LuccheseAmmoDeagle]+=50;
                LuccheseMafiaSettings[LuccheseAmmoAK47]+=50;
                LuccheseMafiaSettings[LuccheseAmmoSniper]+=50;
                SendClientMessage(playerid, ZALIA, "• Iðkroviai vienà dëþæ ginklø á mafijos ginklø sandelá.");
            }
            else
            {
                if(GetPVarInt(playerid, "HadDialogLastly") < gettime() - 40)
                {
                    new DialogInformation[2048];
                    new string[100];
                    format(string, 100, "{FFFFFF}Ginklo modelis: ShotGun | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoShotgun]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: Desert Eagle | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoDeagle]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: AK-47 | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoAK47]);
                    strcat(DialogInformation, string);
                    format(string, 100, "\n{FFFFFF}Ginklo modelis: Sniper Rifle | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoSniper]);
                    strcat(DialogInformation, string);
                    strcat(DialogInformation, "\nGyvybës ir ðarvai");
                    ShowPlayerDialog(playerid, 110, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø saugykla", DialogInformation, "Rinktis", "Atðaukti");
                    SetPVarInt(playerid, "HadDialogLastly", gettime());
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Ðie ginklai priklauso lucchese mafijai.");
        }
        return 1;
    }
    if(pickupid == NelegalusGinklaiPick)
    {
        if(IsJobFromMafia(PlayerDB[playerid][Job]))
        {
            if(PlayerDB[playerid][TuriDeze] == true)
            {
                PlayerDB[playerid][TuriDeze] = false;
                RemovePlayerAttachedObject(playerid, 0);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            }
            else
            {
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPlayerAttachedObject(playerid,0,2358,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-97.399993,1.000000,1.000000,1.000000);
                PlayerDB[playerid][TuriDeze] = true;
                if(NGLastTimeTook + 30 <= gettime())
                {
                    NGSuspiciousLevel++;
                    NGLastTimeTook = gettime();
                }
                else if(NGLastTimeTook + 240 < gettime())
                {
                    NGSuspiciousLevel = 1;
                }
                if(NGSuspiciousLevel == 8)
                {
                    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
                    {
                        if(PlayerDB[pid][Job] == 1)
                        {
                            SendClientMessage(pid, MELYNA, "[DISPEÈERËS PRANEÐIMAS] • Los-Santos jûros uoste, viename ið sandeliø vyksta keisti dalykai,praðome patikrinti.");
                        }
                    }
                }
                else if(NGSuspiciousLevel == 14)
                {
                    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
                    {
                        if(IsJobFromLaw(PlayerDB[pid][Job]))
                        {
                            SendClientMessage(pid, RAUDONA, "[EKSTREMALI SITUACIJA] • Los-Santos jûros uoste pastebëtas padidëjæs mafijø aktyvumas,praðome imtis atitinkamø veiksmø.");
                        }
                    }
                }
            }
        }
        return 1;
    }
    if(pickupid == Radistai_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 10)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote Radistø komandos nariu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE I RADIJA", 3000, 3);
                    PlayerDB[playerid][Job] = 10;
                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 10)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 184);
                        PlayerDB[playerid][UniformosID] = 184;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 150);
                        PlayerDB[playerid][UniformosID] = 150;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 10)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == ARAS_AMUNICIJA)
    {
        if(PlayerDB[playerid][Job] == 9)
        {
            GivePlayerWeaponEx(playerid, WEAPON_DEAGLE, 200);
            GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN, 100);
            GivePlayerWeaponEx(playerid, WEAPON_M4, 500);
            GivePlayerWeaponEx(playerid, WEAPON_TEARGAS, 3);
            SetPlayerHealthEx(playerid, 100);
            SetPlayerArmourEx(playerid, 100);
            GameTextForPlayer(playerid, "~g~APSIGINKLAVAI", 3000, 3);
        }
        else
        {
            ErrorMsg(playerid,"• Ðie ginklai skirti tik spec. bûrio „Aras“ nariams.");
        }
        return 1;
    }
    if(pickupid == SPD_GINKLAI)
    {
        if(PlayerDB[playerid][Job] == 11)
        {
            GivePlayerWeaponEx(playerid, WEAPON_DEAGLE, 100);
            GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN, 50);
            GivePlayerWeaponEx(playerid, WEAPON_M4, 500);
            GivePlayerWeaponEx(playerid, WEAPON_NITESTICK, 1);
            SetPlayerHealthEx(playerid, 100);
            SetPlayerArmourEx(playerid, 100);
            GameTextForPlayer(playerid, "~g~APSIGINKLAVAI", 3000, 3);
        }
        else
        {
            ErrorMsg(playerid,"• Ðie ginklai skirti tik SPD.");
        }
        return 1;
    }
    if(pickupid == SPD_ISIDARBINIMAS)
    {
        if(pickupid == SPD_ISIDARBINIMAS)
        {
            ErrorMsg(playerid,"• Ðis darbas laikinai uþdarytas.");
            return 1;
        }
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 11)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote Slaptosios policijos agentu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE SPD", 3000, 3);
                    PlayerDB[playerid][Job] = 11;
                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 11)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    SetPlayerSkinEx(playerid, 294);
                    PlayerDB[playerid][UniformosID] = 294;
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 11)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == ARAS_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 9)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote spec. bûrio „Aras“ nariu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE SPEC. BURYJE ARAS", 3000, 3);
                    PlayerDB[playerid][Job] = 9;
                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 9)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 285);
                        PlayerDB[playerid][UniformosID] = 285;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 298);
                        PlayerDB[playerid][UniformosID] = 298;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 9)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == GenoveseMafia_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 8)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote Genovese mafijos nariu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE Genovese mafijoje", 3000, 3);
                    PlayerDB[playerid][Job] = 8;

                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 8)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 121);
                        PlayerDB[playerid][UniformosID] = 121;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 190);
                        PlayerDB[playerid][UniformosID] = 190;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 8)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == LuccheseMafia_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 7)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote Lucchese mafijos nariu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE Lucchese mafijoje", 3000, 3);
                    PlayerDB[playerid][Job] = 7;

                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 7)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 124);
                        PlayerDB[playerid][UniformosID] = 124;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 192);
                        PlayerDB[playerid][UniformosID] = 192;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 7)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == JailDoorsOut1)
    {
        SetPlayerPos(playerid, 2836.9414,982.3698,10.7500);
        SetPlayerFacingAngle(playerid, 90);
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        return 1;
    }
    if(pickupid == JailDoorsIn)
    {
        SetPlayerPos(playerid, 1301.2959,1473.0499,1201.3860);
        SetPlayerFacingAngle(playerid, 180);
        SetPlayerInterior(playerid, 1);
        SetPlayerVirtualWorld(playerid, 0);
        return 1;
    }
    if(pickupid == KaleimoMaistas)
    {
        ShowPlayerDialog(playerid, 79, DIALOG_STYLE_LIST, "{AFAFAF}Kalëjimo maistas", "Plovas\nKotletai\nKompotas", "Rinktis", "Atðaukti");
        return 1;
    }
    if(pickupid == PoliceKaleimoPick || pickupid == ARASKaleimoPick)
    {
        if(PlayerDB[playerid][WantedLevel] > 0)
        {
            if(IsJobFromLaw(PlayerDB[playerid][Job]) && PlayerDB[playerid][WantedLevel] <= 5)
            {
                return 1;
            }
            else
            {
                RemovePlayerAttachedObject(playerid, 1);
                PlayerDB[playerid][MoneyStackOnBack] = false;
                ResetPlayerWeaponsEx(playerid);
                PlayerDB[playerid][ClothesBeforeJail] = GetPlayerSkin(playerid);
                PlayerDB[playerid][AprangaBeforeJail] = PlayerDB[playerid][AprangosTipas];
                PlayerDB[playerid][JailTime] = PlayerDB[playerid][WantedLevel] * 60;
                PlayerDB[playerid][WantedLevel] = 0;
                PlayerDB[playerid][BEGA] = 0;
                new string[80];
                format(string, 80, "• Jûs buvote pasodintas á kalëjimà uþ ávairius nusikaltimus %i sek.", PlayerDB[playerid][JailTime]);
                SendClientMessage(playerid, ZYDRA, string);
                TeleportPlayerInToJail(playerid);
            }
        }
        return 1;
    }
    if(pickupid == DrugKokainas)
    {
        if(KokaineInFactory == 0)
        {
            return 1;
        }
        else
        {
            if(IsJobFromMafia(PlayerDB[playerid][Job]))
            {
                if(HeroineInFactory > 0)
                {
                    SendClientMessage(playerid, RAUDONA, "• Pirmiausia rinkite Heroinà.");
                    return 1;
                }
                ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,0,0 ,0,0);
                GameTextForPlayer(playerid, "~g~ NUGREBEI DALI KOKAINO..", 2000, 3);
                PlusPlayerScore(playerid,1);
                if(KokaineInFactory >= DrugsTakingSpeed)
                {
                    PlayerDB[playerid][Kokainas]+=DrugsTakingSpeed;
                    KokaineInFactory-=DrugsTakingSpeed;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 7:
                        {
                            LuccheseTookCoco+=DrugsTakingSpeed;
                        }
                        case 8:
                        {
                            GenoveseTookCoco+=DrugsTakingSpeed;
                        }
                    }
                }
                else
                {
                    PlayerDB[playerid][Kokainas]+=KokaineInFactory;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 7:
                        {
                            LuccheseTookCoco+=KokaineInFactory;
                        }
                        case 8:
                        {
                            GenoveseTookCoco+=KokaineInFactory;
                        }
                    }
                    KokaineInFactory = 0;
                }
            }
            else if(IsJobFromLaw(PlayerDB[playerid][Job]))
            {
                if(HeroineInFactory > 0)
                {
                    SendClientMessage(playerid, RAUDONA, "• Pirmiausia naikinkite Heroinà.");
                    return 1;
                }
                ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,0,0 ,0,0);
                GameTextForPlayer(playerid, "~g~ ISBARSTEI DALI KOKAINO..", 2000, 3);
                if(KokaineInFactory >= DrugsDestroyingSpeed)
                {
                    PlusPlayerScore(playerid,1);
                    PlayerDB[playerid][Job1XP] +=1;
                    PlayerDB[playerid][Uzdarbis]+=DrugsDestroyingSpeed;
                    PlayerDB[playerid][UzdarbisSiandien]+=DrugsDestroyingSpeed;
                    KokaineInFactory-=DrugsDestroyingSpeed;
                    LawTookCoco+=DrugsDestroyingSpeed;
                }
                else
                {
                    PlusPlayerScore(playerid,1);
                    PlayerDB[playerid][Job1XP] +=1;
                    PlayerDB[playerid][Uzdarbis]+=KokaineInFactory;
                    PlayerDB[playerid][UzdarbisSiandien]+=KokaineInFactory;
                    LawTookCoco+=KokaineInFactory;
                    KokaineInFactory = 0;
                }
            }
            else
            {
                SendClientMessage(playerid, -1, "~ NARKOTIKØ GAMYKLOS INFORMACIJA ~");
                SendClientMessage(playerid, GELTONA, "• Narkotinës medþiagos vadinamos - Kokainu atsargos gamykloje");
                SendClientMessage(playerid, GELTONA, "• Deja, taèiau jûs negalite nieko daryti su ðiomis atsargomis, nes nepriklausote nei vienai ið ðiø grupiø:");
                SendClientMessage(playerid, GELTONA, "• Teisësaugos pareigûnai");
                SendClientMessage(playerid, GELTONA, "• Mafijø nariai");
                SendClientMessage(playerid, -1, "~ INFORMACIJOS PABAIGA ~");
            }
            UpdateKokaineStatusAtFactory();
        }
        return 1;
    }
    if(pickupid == DrugHeroinas)
    {
        if(HeroineInFactory == 0)
        {
            return 1;
        }
        else
        {
            if(IsJobFromMafia(PlayerDB[playerid][Job]))
            {
                ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,0,0 ,0,0);
                GameTextForPlayer(playerid, "~g~ NUGREBEI DALI HEROINO..", 2000, 3);
                PlusPlayerScore(playerid,1);
                if(HeroineInFactory >= DrugsTakingSpeed)
                {
                    PlayerDB[playerid][Heroinas]+=DrugsTakingSpeed;
                    HeroineInFactory-=DrugsTakingSpeed;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 7:
                        {
                            LuccheseTookHeroino+=DrugsTakingSpeed;
                        }
                        case 8:
                        {
                            GenoveseTookHeroino+=DrugsTakingSpeed;
                        }
                    }
                }
                else
                {
                    PlayerDB[playerid][Heroinas]+=HeroineInFactory;
                    switch(PlayerDB[playerid][Job])
                    {
                        case 7:
                        {
                            LuccheseTookCoco+=HeroineInFactory;
                        }
                        case 8:
                        {
                            GenoveseTookCoco+=HeroineInFactory;
                        }
                    }
                    HeroineInFactory = 0;
                }
            }
            else if(IsJobFromLaw(PlayerDB[playerid][Job]))
            {
                ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,0,0 ,0,0);
                GameTextForPlayer(playerid, "~g~ ISBARSTEI DALI HEROINO..", 2000, 3);
                if(HeroineInFactory >= DrugsDestroyingSpeed)
                {
                    PlusPlayerScore(playerid,1);
                    PlayerDB[playerid][Uzdarbis]+=DrugsDestroyingSpeed;
                    PlayerDB[playerid][UzdarbisSiandien]+=DrugsDestroyingSpeed;
                    HeroineInFactory-=DrugsDestroyingSpeed;
                    LawTookHeroino+=DrugsDestroyingSpeed;
                }
                else
                {
                    PlusPlayerScore(playerid,1);
                    PlayerDB[playerid][Uzdarbis]+=HeroineInFactory;
                    PlayerDB[playerid][UzdarbisSiandien]+=HeroineInFactory;
                    LawTookHeroino+=HeroineInFactory;
                    HeroineInFactory = 0;
                }
            }
            else
            {
                SendClientMessage(playerid, -1, "~ NARKOTIKØ GAMYKLOS INFORMACIJA ~");
                SendClientMessage(playerid, GELTONA, "• Narkotinës medþiagos vadinamos - heroino atsargos gamykloje");
                SendClientMessage(playerid, GELTONA, "• Deja,taèiau jûs negalite nieko daryti su ðiomis atsargomis,nes nepriklausote nei vienai ið ðiø grupiø:");
                SendClientMessage(playerid, GELTONA, "• Teisësaugos pareigûnai");
                SendClientMessage(playerid, GELTONA, "• Mafijø nariai");
                SendClientMessage(playerid, -1, "~ INFORMACIJOS PABAIGA ~");
            }
            UpdateHeroineStatusAtFactory();
        }
        return 1;
    }
    if(pickupid == PickupToEnterDrugsFactory)
    {
        if(PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][Job] == 9 || PlayerDB[playerid][Job] == 11 || PlayerDB[playerid][Job] == 7 || PlayerDB[playerid][Job] == 8)
        {
	        SetPlayerVirtualWorld(playerid,1);
	        SetPlayerInterior(playerid,1);
	        SetPlayerPos(playerid,963.418762,2108.292480,1011.030273);
	        SetPlayerFacingAngle(playerid, 100);
        }
        else
        {
   			ErrorMsg(playerid, "• Á sandelá gali áeiti tik teisësaugininkai arba mafijos nariai.");
		}
        return 1;
    }
    if(pickupid == PickupToExitDrugsFactory)
    {
        SetPlayerVirtualWorld(playerid,0);
        SetPlayerInterior(playerid,0);
        SetPlayerPos(playerid,578.0472,1222.0006,11.7113);
        SetPlayerFacingAngle(playerid, 219);
        return 1;
    }

    if(pickupid == PickupToEnterTaksiFGarage)
    {
        if(TaksiFGarazas == true)
        {
            GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
            return 1;
        }
        SetPlayerPos(playerid, -2357.3679,-78.4269,10.5438);
        SetPlayerFacingAngle(playerid,267);
        return 1;
    }
    if(pickupid == PickupToExitTaksiFGarage)
    {
        if(TaksiFGarazas == true)
        {
            GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
            return 1;
        }
        SetPlayerPosExt(playerid, -2565.4348,498.7839,14.6110,0.2080);
        return 1;
    }
    if(pickupid == TPKalnasParasiutas)
    {
        if(PlayerDB[playerid][VIP] == 0)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= 100)
            {
                PlayerDB[playerid][MoneyInPocket]-=100;
                GivePlayerWeaponEx(playerid, WEAPON_PARACHUTE, 1);
                SendClientMessage(playerid, ZALIA, "• Gavote paraðiutà uþ 100€.");
            }
            else
            {
                new string[80];
                format(string, 80, "• Nepakanka pinigø paraðiuto ásigyjimui (turi %d €, reikia 100 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],100 - PlayerDB[playerid][MoneyInPocket]);
                SendClientMessage(playerid, RAUDONA, string);
            }
        }
        else
        {
            GivePlayerWeaponEx(playerid, WEAPON_PARACHUTE, 1);
            SendClientMessage(playerid, ZALIA, "• Jûs esate VIP narys,todël gavote paraðiutà nemokamai.");
        }
    }
	if(pickupid == TechPaslauguPickup)
	{
		ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
		return 1;
	}
	if(pickupid == MasinosAtkelimoPickup)
	{
		ShowPlayerDialog(playerid, 47 , DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemonës partempimas,iðtraukimas uþ 500€", "Pirma nuosava tr.priemonë\nAntra nuosava tr.priemonë", "Atkeldinti", "Atðaukti");
		return 1;
	}
	if(pickupid == WeaponsLicensePickupA || pickupid == WeaponsLicensePickupB)
	{
		if(PlayerDB[playerid][WeaponsLicense] == 0)
		{
			ShowPlayerDialog(playerid, 37, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ginklø licenzija", "Ar norite gauti ginklø licenzijà?\n\nLicenzijos kaina - 2.000€", "Taip", "Ne");
		}
		else{
			ErrorMsg(playerid,"Jûs jau turite ginklø licenzijà");
		}

		return 1;
	}
	if(pickupid == WeaponsShopSideA)
	{
		SetPVarInt(playerid, "PreventPickuping", 1);
		SetPlayerPos(playerid, 287.8070,-27.9117,1001.5156);
		SetPlayerFacingAngle(playerid, 2.8414);
		return 1;
	}
	if(pickupid == WeaponsShopSideB)
	{
		SetPVarInt(playerid, "PreventPickuping", 1);
		SetPlayerPos(playerid, 285.7801,-33.2963,1001.5156);
		SetPlayerFacingAngle(playerid, 200);
		return 1;
	}
	if(pickupid == PickupWeaponsShopBuyWeps)
	{
		if(PlayerDB[playerid][WeaponsLicense] == 1)
		{
			ShowPlayerDialog(playerid, 36, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø parduotuvë", "„9mm“ pistoletas su 500 kulkø - 1500€\n„Desert Eagle“ pistoletas su 250 kulkø - 7500€\nMedþioklinis ðautuvas 50 kulkø - 5000€", "Pirkti", "Atðaukti");
		}
		else
		{
			SendClientMessage(playerid, RAUDONA, "Negalime jums pasiûlyti ginklø,nes jûs neturite ginklø licenzijos.");
		}
		return 1;
	}
	if(pickupid == PickupToWeaponsShop)
	{
		SetPVarInt(playerid, "PreventPickuping", 2);
		SetPlayerInterior(playerid, 1);
		SetPlayerPos(playerid, 286.0409,-38.4878,1001.5156);
		SetPlayerFacingAngle(playerid, 0);
		return 1;
	}
	if(pickupid == PickupOutWeaponsShop)
	{
		SetPVarInt(playerid, "PreventPickuping", 2);
		SetPlayerPos(playerid, -2625.7407,210.2021,4.6202);
		SetPlayerFacingAngle(playerid, 0);
		SetPlayerInterior(playerid, 0);
		return 1;
	}
	if(pickupid == HospitalInterEnterPickup)
	{
		SetPVarInt(playerid, "PreventPickuping", 2);
		SetPlayerPos(playerid, -2675.1377,669.7626,244.3842);
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerInterior(playerid, 1);
		return 1;
	}
	if(pickupid == HospitalInterExitPickup)
	{
		if(PlayerDB[playerid][LigoninesLaikas] == 0)
		{
			SetPVarInt(playerid, "PreventPickuping", 2);
			SetPlayerPos(playerid, -2665.8840,638.4487,14.4531);
			SetPlayerFacingAngle(playerid, 101.0050);
			SetPlayerInterior(playerid, 0);
		}
		return 1;
	}
	if(pickupid == PickupLiftToRoofOfMedicsA)
	{
		if(PlayerDB[playerid][Job] == 2)
		{
			SetPlayerPos(playerid, -2683.9539,686.1783,66.1040);
			SetPlayerFacingAngle(playerid, 105.8509);
		}
		else
		{
			GameTextForPlayer(playerid, "~r~TIK MEDIKAMS", 3000, 3);
		}
		return 1;
	}
	if(pickupid == PickupLiftToRoofOfMedicsB)
	{
		if(PlayerDB[playerid][Job] == 2)
		{
			SetPlayerPos(playerid, -2695.5369,635.4590,14.4545);
			SetPlayerFacingAngle(playerid, 177.0808);
		}
		else
		{
			GameTextForPlayer(playerid, "~r~TIK MEDIKAMS", 3000, 3);
		}
		return 1;
	}
	if(pickupid == PickupToEnterMedicsGarage)
	{
		if(MedikuGarazas == true)
		{
			GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
			return 1;
		}
		SetPlayerPos(playerid, -2579.2043,683.5970,-0.7252);
		SetPlayerFacingAngle(playerid,274.0758);
		return 1;
	}
	if(pickupid == PickupToExitMedicsGarage)
	{
		if(MedikuGarazas == true)
		{
			GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
			return 1;
		}
		SetPlayerPos(playerid, -2558.1638,660.3552,14.4531);
		SetPlayerFacingAngle(playerid, 174.6032);
	}
	if(pickupid == MEDIKAI_ISIDARBINIMAS)
	{
		if(PlayerDB[playerid][Job] == 0)
		{
			if(PlayerDB[playerid][JobInvitation] != 2)
			{
				SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
				SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
				SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
			}
			else
			{
				if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
				{
					new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
					new hours,mins,seconds,days;
					while(timeleft > 86400)
					{
						days++;
						timeleft-=86400;
					}
					while(timeleft > 3600)
					{
						hours++;
						timeleft-=3600;
					}
					while(timeleft > 60)
					{
						mins++;
						timeleft-=60;
					}
					while(timeleft > 1)
					{
						seconds++;
						timeleft--;
					}
					new string[128];
					format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
					SendClientMessage(playerid, RAUDONA, string);
				}
				else
				{
					SendClientMessage(playerid, ZALIA, "• Tapote mediku.");
					GameTextForPlayer(playerid, "~g~ISIDARBINOTE MEDIKU", 3000, 3);
					PlayerDB[playerid][Job] = 2;

					PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
					new years,month,day;
					getdate(years, month, day);
					format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
					PlayerDB[playerid][JobInvitation] = 0;
					new string[128];
					format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
					foreach(new i : Player)
					{
						if(PlayerDB[i][Job] == 2)
						{
							SendClientMessage(i, 0x0099CCFF, string);
						}
					}
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 275);
                        PlayerDB[playerid][UniformosID] = 275;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 308);
                        PlayerDB[playerid][UniformosID] = 308;
                    }
					PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
					mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
					mysql_function_query(connectionHandle,string,false,"SendQuery","");
				}
			}
		}
		else if(PlayerDB[playerid][Job] != 2)
		{
			SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
		}
		else
		{
			if(HPSettings[vaistai] < 5) return ErrorMsg(playerid,"• Sandelyje nëra vaistinëliø, uþsakykite juos pas fûristus!");
			if(PlayerDB[playerid][Vaistineles] == 0)
			{
				PlayerDB[playerid][Vaistineles]+=5;
				GameTextForPlayer(playerid, "~g~GAVOTE VAISTINELIU", 3000, 3);
				HPSettings[vaistai]-=5;
				SaveHospitalSettings();
			}
			else
			{
			    ErrorMsg(playerid, "• Turite iðnaudoti visas turimas vaistinëles!");
			}
		}
	}
    if(pickupid == A51_GINKLAI)
    {
        if(IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            GivePlayerWeaponEx(playerid, WEAPON_DEAGLE, 50);
            GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN, 100);
            GivePlayerWeaponEx(playerid, WEAPON_M4, 500);
            SetPlayerHealthEx(playerid, 100);
            SetPlayerArmourEx(playerid, 100);
            GameTextForPlayer(playerid, "~g~APSIGINKLAVAI", 3000, 3);
        }
        else
        {
            ErrorMsg(playerid,"• Ðie ginklai skirti tik teisësaugininkø treniruotëms.");
        }
        return 1;
    }
    if(pickupid == A51ZonaPick)
    {
        if(IsJobFromLaw(PlayerDB[playerid][Direktorius]))
        {
            if(A51_UZIMTA == 0)
            {
                ShowPlayerDialog(playerid, 106, DIALOG_STYLE_MSGBOX, "A51 zona", "Ar norite pradëti pratybas?", "Taip", "Ne");
            }
            else
            {
                if(PlayerDB[playerid][Direktorius] == A51_UZIMTA)
                {
                    ShowPlayerDialog(playerid, 107, DIALOG_STYLE_MSGBOX, "A51 zona", "Ar norite nutraukti pratybas?", "Taip", "Ne");
                }
                else
                {
                    ErrorMsg(playerid,"• Zona jau uþimta.");
                }
            }
        }
        return 1;
    }
    if(pickupid == A52ZonaPick)
    {
        if(IsJobFromLaw(PlayerDB[playerid][Direktorius]))
        {
            if(A52_UZIMTA == 0)
            {
                ShowPlayerDialog(playerid, 108, DIALOG_STYLE_MSGBOX, "A52 zona", "Ar norite pradëti pratybas?", "Taip", "Ne");
            }
            else
            {
                if(PlayerDB[playerid][Direktorius] == A52_UZIMTA)
                {
                    ShowPlayerDialog(playerid, 109, DIALOG_STYLE_MSGBOX, "A52 zona", "Ar norite nutraukti pratybas?", "Taip", "Ne");
                }
                else
                {
                    ErrorMsg(playerid,"• Zona jau uþimta.");
                }
            }
        }
        return 1;
    }
	if(pickupid == POLICE_WEAPONS)
	{
		if(PlayerDB[playerid][Job] == 1)
		{
			GivePlayerWeaponEx(playerid, WEAPON_SPRAYCAN, 1500);
			GivePlayerWeaponEx(playerid, WEAPON_SILENCED, 300);
			GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN, 100);
            GivePlayerWeaponEx(playerid, WEAPON_NITESTICK, 1);
			SetPlayerHealthEx(playerid, 100);
			SetPlayerArmourEx(playerid, 100);
			GameTextForPlayer(playerid, "~g~APSIGINKLAVAI", 3000, 3);
		}
		else
		{
			ErrorMsg(playerid,"• Ðie ginklai skirti tik polcijos pareigûnams.");
		}
		return 1;
	}
    if(pickupid == MECHANIKAS_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 5)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote mechaniku.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE MECHANIKU", 3000, 3);
                    PlayerDB[playerid][Job] = 5;

                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 5)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 50);
                        PlayerDB[playerid][UniformosID] = 50;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 65);
                        PlayerDB[playerid][UniformosID] = 65;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 5)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == FURISTAI_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 21)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Ásidarbinote á Tolimûjø reisø vairuotojus.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE FURISTUOSE", 3000, 3);
                    PlayerDB[playerid][Job] = 21;

                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 21)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 44);
                        PlayerDB[playerid][UniformosID] = 44;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 148);
                        PlayerDB[playerid][UniformosID] = 148;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 21)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
    if(pickupid == TaksiF_ISIDARBINIMAS)
    {
        if(PlayerDB[playerid][Job] == 0)
        {
            if(PlayerDB[playerid][JobInvitation] != 4)
            {
                SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
                SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
                SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
            }
            else
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
                {
                    new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
                    new hours,mins,seconds,days;
                    while(timeleft > 86400)
                    {
                        days++;
                        timeleft-=86400;
                    }
                    while(timeleft > 3600)
                    {
                        hours++;
                        timeleft-=3600;
                    }
                    while(timeleft > 60)
                    {
                        mins++;
                        timeleft-=60;
                    }
                    while(timeleft > 1)
                    {
                        seconds++;
                        timeleft--;
                    }
                    new string[128];
                    format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "• Tapote taksistu.");
                    GameTextForPlayer(playerid, "~g~ISIDARBINOTE TAKSISTU", 3000, 3);
                    PlayerDB[playerid][Job] = 4;

                    PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
                    new years,month,day;
                    getdate(years, month, day);
                    format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
                    PlayerDB[playerid][JobInvitation] = 0;
                    new string[128];
                    format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 4)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {
                        SetPlayerSkinEx(playerid, 187);
                        PlayerDB[playerid][UniformosID] = 187;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 141);
                        PlayerDB[playerid][UniformosID] = 141;
                    }
                    PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                    mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
                    mysql_function_query(connectionHandle,string,false,"SendQuery","");
                }
            }
        }
        else if(PlayerDB[playerid][Job] != 4)
        {
            SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
        }
        return 1;
    }
	if(pickupid == POLICE_ISIDARBINIMAS)
	{
		if(PlayerDB[playerid][Job] == 0)
		{
			if(PlayerDB[playerid][JobInvitation] != 1)
			{
				SendClientMessage(playerid, RAUDONA, "• Norint ásidarbinti reikalingas pakvietimas,já galite gauti ið ðio darbo direktoriaus.");
				SendClientMessage(playerid, DGELTONA, "• Prisijungusius direktorius rasi paraðæs /direktoriai");
				SendClientMessage(playerid, DGELTONA, "• Uþpildyk anketà mûsø forume. Mûsø svetainë WWW.san-andreas.lt");
			}
			else
			{
				if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime() )
				{
					new timeleft = PlayerDB[playerid][DarboSutartiesPabaiga] - gettime();
					new hours,mins,seconds,days;
					while(timeleft > 86400)
					{
						days++;
						timeleft-=86400;
					}
					while(timeleft > 3600)
					{
						hours++;
						timeleft-=3600;
					}
					while(timeleft > 60)
					{
						mins++;
						timeleft-=60;
					}
					while(timeleft > 1)
					{
						seconds++;
						timeleft--;
					}
					new string[128];
					format(string, 128, "Jûs turite apribojimà ásidarbinti á darbus su pakvietimais,kuris galios dar %d dienø, %d valandø , %d minuèiø , %d sekundþiø.", days,hours,mins,seconds);
					SendClientMessage(playerid, RAUDONA, string);
				}
				else
				{
					SendClientMessage(playerid, ZALIA, "• Tapote policininku.");
					GameTextForPlayer(playerid, "~g~ISIDARBINOTE POLICININKU", 3000, 3);
					PlayerDB[playerid][Job] = 1;

					PlayerDB[playerid][DarboSutartiesPabaiga] = gettime() + (86400 * PlayerDB[playerid][JobInvitationTime]);
					new years,month,day;
					getdate(years, month, day);
					format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
					PlayerDB[playerid][JobInvitation] = 0;
					new string[128];
					format(string, 128, "[racija]{99D6EB} Þaidëjas {0099CC}%s{99D6EB} papildë jûsø darbo gretas !", Vardas(playerid));
					foreach(new i : Player)
					{
						if(PlayerDB[i][Job] == 1)
						{
							SendClientMessage(i, 0x0099CCFF, string);
						}
					}
                    PlayerDB[playerid][Rangas] = 1;
                    if(PlayerDB[playerid][Sex] == 1)
                    {

                        SetPlayerSkinEx(playerid, 281);
                        PlayerDB[playerid][UniformosID] = 281;
                    }
                    else
                    {

                        SetPlayerSkinEx(playerid, 306);
                        PlayerDB[playerid][UniformosID] = 306;
                    }
					PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
					mysql_format(connectionHandle, string, 128, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Naujas darbuotojas: %s');", PlayerDB[playerid][Job],Vardas(playerid));
					mysql_function_query(connectionHandle,string,false,"SendQuery","");
				}
			}
		}
		else if(PlayerDB[playerid][Job] != 1)
		{
			SendClientMessage(playerid, RAUDONA, "• Negalite dirbti dviejø darbø! Norëdamas palikti darbà raðyk {FF9016}/paliktidarba");
		}
        return 1;
	}
    if(pickupid == InfoAboutDrivingSchool)
    {
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Norëdami turëti vairavimo paþymëjimà pirmà turite iðlaikyti teorijà, o vëliau praktiná vaþiavimà,");
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Teorijos klausimø iðviso yra {33AA33}10{FFFFFF},neatsakius teisingai á {33AA33}3{FFFFFF} ið jø teorijos neiðlaikysite,");
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Tai jums kainuos 500€ uþ teorijos egzaminà ir 1500€ uþ praktiná vairavimà (500€ aikðtelëje 1000€ mieste)");
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Norëdami iðlaikyti praktiná vaþiavimà mieste, jums reikia surinkti {33AA33}70/100 {FFFFFF}taðkø.");
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Praktinio vaþavimo taðkus sudaro: {33AA33}Saugaus greièio palaikymas ir buklës iðlaikymas{FFFFFF}.");
        SendClientMessage(playerid,0x33AA33AA,"• {FFFFFF}Jeigu prarasite vairuotojo paþymëjimà, kiekvienà kartà praktinis vaþiavimas mieste kainuos 1000€ brangiau.");
        return 1;
    }

	if(pickupid == PickupToEnterIntoDrivingSchool)
	{
        SetPVarInt(playerid, "PreventPickuping", 2);
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid, -2029.8269,-115.8754,1035.1719);
		SetPlayerFacingAngle(playerid, 311.5544);
		return 1;
	}
	if(pickupid == PickupToExitDrivingSchool)
	{
        SetPVarInt(playerid, "PreventPickuping", 2);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, -2026.4117,-101.0223,35.1641);
		SetPlayerFacingAngle(playerid, 357.7836);
		SetPlayerInterior(playerid, 0);
		return 1;
	}
	if(pickupid == DrivingTheoryPickup)
	{
		if(PlayerDB[playerid][DrivingTheory] == 1)
		{
			ErrorMsg(playerid,"• Jûs jau esate iðlaikæs vairavimo teorijos egzaminà.");
		}
		else
		{
			PlayerDB[playerid][DrivingTheoryMistakes] = 0;
			ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, "{AFAFAF}Teorija", "Ar norite laikyti teoriná vairavimo egzaminà?\nTeorinio egzamino kaina - 500 eurø", "Taip", "Ne");
		}
		return 1;
	}
	for(new i=0;i<CashPointsCount;i++)
	{
		if(pickupid == CashPointPickup[i])
		{
            if(PlayerDB[playerid][TuriBankoSaskaita])
            {
                ShowPlayerDialog(playerid, 121, DIALOG_STYLE_PASSWORD, "{AFAFAF}Patikrinimas", "{FFFFFF}Norëdami naudotis banko paslaugomis,turite áraðyti jûsø sàskaitos PIN kodà.", "Toliau", "Atðaukti");
            }
            else
            {
                ErrorMsg(playerid,"• Neturite banko kortelës.");
            }
			break;
		}
	}
    if(LoadedHouses > 0)
    {
        for(new PickyX = 0;PickyX < 10;PickyX ++)
        {
            if(pickupid == ExitFromHouse[PickyX])
            {
                new PlayerVirtualWorld = GetPlayerVirtualWorld(playerid);
                if(PlayerVirtualWorld >= 3 && HouseInfo[PlayerVirtualWorld-3][HouseID] >= 0)
                {
                    if(strcmp(HouseInfo[PlayerVirtualWorld-3][HouseOwner], Vardas(playerid)) == 0 || HouseInfo[PlayerVirtualWorld-3][HouseDoorsLocked] == 0)
                    {
                        SetPVarInt(playerid, "PreventPickuping", 3);
                        SetPlayerVirtualWorld(playerid, HouseInfo[PlayerVirtualWorld-3][HouseVirtualWorld]);
                        SetPlayerInterior(playerid, 0);
                        SetPlayerPosExt(playerid, HouseInfo[PlayerVirtualWorld-3][HousePosX],HouseInfo[PlayerVirtualWorld-3][HousePosY],HouseInfo[PlayerVirtualWorld-3][HousePosZ],90);
                        HouseInfo[PlayerVirtualWorld-3][kieknamie]--;
                        TextDrawHideForPlayer(playerid, blackTD);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Durys uþrakintos, negalite atidaryti.");
                    }
                }
                return 1;
            }
        }
        for(new Picky = 0; Picky <= LoadedHouses; Picky++)
        {
            if(pickupid == HouseInfo[Picky][HousePickupID] && HouseInfo[Picky][HouseID] >= 0)
            {
                if(HouseInfo[Picky][HouseBought] == 0)
                {
                    if(PlayerDB[playerid][TuriuNama] == 0)
                    {
	                    new info[256];
	                    if(HouseInfo[Picky][HouseForCredits] == 1)
	                    {
	                        format(info, 256,  "Ðis namas yra parduodamas\nNamo kaina: %s kreditø\n Ar norite pirkti ðá namà?", AddSpaces(HouseInfo[Picky][HouseCost]));
	                    }
	                    else
	                    {
	                        format(info, 256,  "Ðis namas yra parduodamas\nNamo kaina: %s €\n Ar norite pirkti ðá namà?", AddSpaces(HouseInfo[Picky][HouseCost]));
	                    }
	                    ShowPlayerDialog(playerid, 143, DIALOG_STYLE_MSGBOX, "{AFAFAF}Namo pirkimas", info, "Taip", "Ne");
	                    PlayerDB[playerid][HousePlayerIsLookingAt] = Picky;
                    }
                    else
                    {
						ErrorMsg(playerid, "• Jûs jau turite namà.");
                    }
                }
                else
                {
                    if(strcmp(HouseInfo[Picky][HouseOwner], Vardas(playerid), false) == 0 || strcmp(HouseInfo[Picky][NamoRaktas], Vardas(playerid), false) == 0 || HouseInfo[Picky][HouseDoorsLocked] == 0)
                    {
                        switch(HouseInfo[Picky][HouseInteriorNumber])
                        {
                            case 0:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 3);
                                SetPlayerPosExt(playerid,235.2406,1188.6093,1080.2578,3.9696);
                            }
                            case 1:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 2);
                                SetPlayerPosExt(playerid,224.4242,1239.9857,1082.1406,84.3386);
                            }
                            case 2:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 1);
                                SetPlayerPosExt(playerid,224.288,1289.1907,1082.1406,359.868);
                            }
                            case 3:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 5);
                                SetPlayerPosExt(playerid,239.2819,1114.1991,1080.9922,270.2654);
                            }
                            case 4:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 15);
                                SetPlayerPosExt(playerid,295.6901,1474.7999,1080.2651,4.9773);
                            }
                            case 5:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 4);
                                SetPlayerPosExt(playerid,261.1165,1287.2197,1080.2578,178.9149);
                            }
                            case 6:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 10);
                                SetPlayerPosExt(playerid,24.3599,1342.7167,1084.3750,176.6454);
                            }

                            case 7:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 8);
                                SetPlayerPosExt(playerid,-42.5267,1408.23,1084.4297,172.068);
                            }
                            case 8:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 9);
                                SetPlayerPosExt(playerid,84.9244,1324.2983,1083.8594,159.5582);
                            }
                            case 9:
                            {
                                SetPlayerVirtualWorld(playerid, 3+Picky);
                                SetPlayerInterior(playerid, 9);
                                SetPlayerPosExt(playerid,260.2038,1239.7758,1084.2578,358.0279);
                            }
                        }
                        HouseInfo[Picky][kieknamie]++;

						new Hours,Minutes;
						gettime(Hours, Minutes);
						new PlayerVW = GetPlayerVirtualWorld(playerid);
						if(Hours >= 21)
						{
							if(HouseInfo[PlayerVW-3][SviesaIjungta] == 0)
							{
								TextDrawShowForPlayer(playerid, blackTD);

								SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99}	Áëjote á namà, kuriame tamsu nes yra vakaras.");
								
                                if(strcmp(HouseInfo[Picky][HouseOwner], Vardas(playerid), false) == 0)
                                {
									SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99} Ájunkite ðviesà per /bustovaldymas.");
								}
							}
						}
                    }
                    else
                    {
                        new info[64];
                        format(info, 64,  "~r~ Namo savininkas %s", HouseInfo[Picky][HouseOwner]);
                        GameTextForPlayer(playerid, info, 4000, 4);
                    }
                }
                return 1;
            }
        }
    }
	return 1;
}
//END OF ONPLAYERPICKUP
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    PlayerDB[playerid][LastTimePressedKey] = gettime();
    if(PRESSED(KEY_SECONDARY_ATTACK))
    {
        if(GetPlayerInterior(playerid) == 7)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3, -2018.9481,-93.0429,620.3799))
            {
                new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
                for(new i = 0;i<=VerslaiPoolSize;i++)
                {
                    if(V_SQLID == VerslaiDB[i][VDB_SQLID])
                    {
                        SetPVarInt(playerid, "PreventPickuping", 4);
                        SetPlayerVirtualWorld(playerid, VerslaiDB[i][VDB_WorldID]);
                        SetPlayerInterior(playerid, VerslaiDB[i][VDB_InteriorID]);
                        SetPlayerPos(playerid,VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z]);
                        break;
                    }
                }
            }
        }

        if(PlayerDB[playerid][GasStationTimerRunsOrl] == true)
        {
            PlayerDB[playerid][GasStationTimerRunsOrl] = false;
            KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
            GameTextForPlayer(playerid, "~g~ PILIMAS BAIGTAS", 2000, 4);
            new string[45];
            SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
            switch(PlayerDB[playerid][DegaluTipasKuriPila])
            {
                case 0:
                {
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: Benzinas");
                }
                case 1:
                {
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: Dujos");
                }
            }
            format(string, 45, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
            SendClientMessage(playerid, GELTONA, string);
            format(string, 45, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
            SendClientMessage(playerid, GELTONA, string);
            format(string, 45, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
            SendClientMessage(playerid, GELTONA, string);
            SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
            PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
            PlayerDB[playerid][PiltaDegalu] = 0;
            PlayerDB[playerid][SumaUzDegalus] = 0;
            PlayerDB[playerid][DegaluTipasKuriPila] = -1;
            PlayerDB[playerid][CostOfLitreFuel] = 0;
            TogglePlayerControllable(playerid, true);
        }
        else if(IsPlayerInDynamicArea(playerid, WeedEventArea, 1))
        {
            if(WeedEventInProgress == true)
            {
                for(new Weed = 0;Weed < WeedObjectsCreated;Weed++)
                {
                    if(WeedObject[Weed][WeedObjectHarvested] == false)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2, WeedObject[Weed][WeedObjectX], WeedObject[Weed][WeedObjectY], WeedObject[Weed][WeedObjectZ]))
                        {
                            if(IsJobFromLaw(PlayerDB[playerid][Job]))
                            {
                                WeedObject[Weed][WeedObjectHarvested] = true;
                                DestroyDynamicObject(WeedObject[Weed][WeedObjectID]);
                                new WeedFound = random(30) + 1;
                                new string[128];
                                format(string, 128, "• Sunaikinai {00FF00}%i{FFFFFF}g. þolës :((",WeedFound);
                                SendClientMessage(playerid, -1, "");
                                SendClientMessage(playerid, -1, string);
                                format(string, 128, "• Uþ þolës sunaikinimà gavote %i € á savo uþdarbá.", WeedFound*5);
                                SendClientMessage(playerid, -1, string);
                                SendClientMessage(playerid, -1, "");
                                KonfiskuotosKanapes+=WeedFound;
                                PlayerDB[playerid][Uzdarbis]+= WeedFound * 5;
                                PlayerDB[playerid][UzdarbisSiandien]+= WeedFound * 5;
                                DarboInformacija[PlayerDB[playerid][Job]][DarboFondas] +=WeedFound * 2;
                                GameTextForPlayer(playerid, "~r~SUNAIKINAI~n~KRUMA..", 3000, 4);
                                ApplyAnimation(playerid, "MISC", "pickup_box", 4.1, 0, 1, 1, 0, 0, 1);
                            }
                            else
                            {
                                WeedObject[Weed][WeedObjectHarvested] = true;
                                DestroyDynamicObject(WeedObject[Weed][WeedObjectID]);
                                new WeedFound = random(30) + 1;
                                PlayerDB[playerid][Kanapes]+=WeedFound;
                                new string[128];
                                format(string, 128, "• Paèiûpai {00FF00}%i{FFFFFF}g. þolytës :))",WeedFound);
                                SendClientMessage(playerid, -1, string);
                                GameTextForPlayer(playerid, "~g~ WEEDDD...", 3000, 4);
                                ClearAnimations(playerid, 1);
                                ApplyAnimation(playerid, "MISC", "pickup_box", 4.1, 0, 1, 1, 0, 0, 1);

                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    if(!IsPlayerInAnyVehicle(playerid) && PRESSED(KEY_NO))//Ðiukðles ið namø
	{
	    if(PlayerDB[playerid][TuriuMaisa] == true)
	    {
		    if(IsPlayerInAnyVehicle(playerid)) return ErrorMsg(playerid, "• Pirmiausia iðlipkite ið maðinos.");
		    if(IsPlayerInRangeOfPoint(playerid, 4.0, -2017.9205,346.8866,35.1810))
		    {
		    	for(new house = 0; house < MAX_HOUSES; house++)
				{
					if(strcmp(HouseInfo[house][HouseOwner], Vardas(playerid), false) == 0)
					{
						HouseInfo[house][Siuksles] -=50;
					}
				}
				new AmountOfMoney = 500+random(500);
				PlayerDB[playerid][MoneyInPocket] +=AmountOfMoney;
				new string[128];
				format(string, 128, "{33CC99}• Aèiû. Uþ tai gavote {33FF99}%s{33CC99} eurø.", AddPoints(AmountOfMoney));
				SendClientMessage(playerid, 0x33FF99AA, string);

				RemovePlayerAttachedObject(playerid, 0);
				PlayerDB[playerid][TuriuMaisa] = false;
			}
		}
  	}
    if(PRESSED(KEY_YES))
    {
        if(IsPlayerInRangeOfPoint(playerid, 2, 1375.86,-963.88,199.99))
        {
            if(BankSecurityDoorsOpen == false)
            {
                if(PlayerDB[playerid][adminlvl] > 3)
                {
                    new string[50];
                    format(string, 50, "• DABARTINIS BANKO PIN YRA - %i", BankRealPin);
                    SendClientMessage(playerid, -1, string);
                }
                ShowPlayerDialog(playerid, 122, DIALOG_STYLE_PASSWORD, "{AFAFAF}Skaitmeninis uþraktas", "Áveskite prie eigos kodà sudarytà ið 4 skaitmenø.", "Gerai", "Atðaukti");
            }
            return 1;
        }
        else
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new vid = GetPlayerVehicleID(playerid);
                if(IsVehicleModelWithEngine(GetVehicleModel(vid)))
                {
                    if(IsPlayerInRangeOfPoint(playerid, 5, -1736.3324,-135.5733,3.5489))
                    {
                        new Float:Health;
                        GetVehicleHealth(vid, Health);
                        if(Health <= 500)
                        {
                            if(VehicleDB[vid][DARBOMASINA] == true)
                            {
                                SendClientMessage(playerid, 0xd1bd39FF, "• {FFFFFF}Sutaisëte darbinæ tr.priemonæ {d1bd39}nemokamai !");
                                SetVehicleHealth(vid, 1000);
                                RepairVehicle(vid);
                            }
                            else
                            {
                                if(PlayerDB[playerid][MoneyInPocket] < 300)
                                {
                                    ErrorMsg(playerid,"• Turite nepakankamai pinigø pasinaudojimui ðia paslauga.");
                                }
                                else
                                {
                                    PlayerDB[playerid][MoneyInPocket]-=300;
                                    SetVehicleHealth(vid, 1000);
                                    RepairVehicle(vid);
                                    DarboInformacija[5][DarboFondas]+=150;
                                    SendClientMessage(playerid, 0xd1bd39FF, "• {FFFFFF}Sutaisëte savo tr.priemonæ uþ {d1bd39}300 €");
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Maðinos taisyti negalite, kadangi norint naudotis ðia paslauga maðinos bûklë turi bûti iki 50%%.");
                        }
                    }
                    else
                    {
                        new info[64];
                        if(VehicleDB[vid][VehicleEngineState] == 0)
                        {
                            strcat(info, "{FFFFFF}• Ájungti variklá.");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}• Iðjungti variklá.");
                        }
                        if(VehicleDB[vid][VehicleLights] == 0)
                        {
                            strcat(info, "\n{FFFFFF}• Ájungti ðviesas.");
                        }
                        else
                        {
                            strcat(info, "\n{FFFFFF}• Iðjungti ðviesas.");
                        }
                        ShowPlayerDialog(playerid, 250, DIALOG_STYLE_LIST, "{AFAFAF}Maðinos valdymas", info, "Rinktis", "Atðaukti");
                    }
                }
            }
            else
            {

                if(PrieKrumu(playerid))
                {
                    if(PlayerDB[playerid][SuKrepsiuAntRanku] == true)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 4.0, LastKrumuPos[playerid][0], LastKrumuPos[playerid][1], LastKrumuPos[playerid][2]))
                        {
                            SendClientMessage(playerid, 0xFF0000FF, "• èia jau kà tik buvote!");
                        }
                        else
                        {
                            new count = PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                            if(count < 20)
                            {
                                ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,0,0 ,0,0);
                                new Float: P_Pos[3]; GetPlayerPos(playerid, P_Pos[0], P_Pos[1], P_Pos[2]);

                                new RandomKiekis = 1 + random(4), string[128];
                                if(RandomKiekis > 20-count)
                                {
                                    RandomKiekis = 20-count;
                                }

                                switch(random(8))
                                {
                                    case 0:
                                    {
                                        PlayerDB[playerid][Avietes] += RandomKiekis;
                                        format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}avietes.", RandomKiekis);
                                    }
                                    case 1:
                                    {
                                        format(string, 128, "• {FFFFFF}Nieko neradote.");
                                    }
                                    case 2:
                                    {
                                        PlayerDB[playerid][Bruknes] += RandomKiekis;
                                        format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}bruknes.", RandomKiekis);
                                    }
                                    case 3:
                                    {
                                        format(string, 128, "• {FFFFFF}Nieko neradote.");
                                    }
                                    case 4:
                                    {
                                        PlayerDB[playerid][Melynes] += RandomKiekis;
                                        format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}melynes.", RandomKiekis);
                                    }
                                    case 5:
                                    {
                                        switch(random(5))
                                        {
                                            case 0:
                                            {
                                                format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}avietes, taèiau jos buvo supuvusios ir iðmetëte.", RandomKiekis);
                                            }
                                            case 1:
                                            {
                                                format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}bruknes, taèiau jos buvo supuvusios ir iðmetëte.", RandomKiekis);
                                            }
                                            case 2:
                                            {
                                                format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}melynes, taèiau jos buvo supuvusios ir iðmetëte.", RandomKiekis);
                                            }
                                            case 3:
                                            {
                                                format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}þemuoges, taèiau jos buvo supuvusios ir iðmetëte.", RandomKiekis);
                                            }
                                            case 4:
                                            {
                                                format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}braðkes, taèiau jos buvo supuvusios ir iðmetëte.", RandomKiekis);
                                            }
                                        }
                                    }
                                    case 6:
                                    {
                                        PlayerDB[playerid][Zemuoges] += RandomKiekis;
                                        format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}zemuoges.", RandomKiekis);
                                    }
                                    case 7:
                                    {
                                        PlayerDB[playerid][Braskes] += RandomKiekis;
                                        format(string, 128, "• {FFFFFF}Nuskynëte {99CCFF}%i {FFFFFF}braðkes.", RandomKiekis);
                                    }
                                }

                                SendClientMessage(playerid, 0x99CCFFFF, string);
                                LastKrumuPos[playerid][0] = P_Pos[0];
                                LastKrumuPos[playerid][1] = P_Pos[1];
                                LastKrumuPos[playerid][2] = P_Pos[2];
                                count = PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                                if(count == 20)
                                {
                                    RemovePlayerAttachedObject(playerid, 0);
                                    switch(random(3))
                                    {
                                        case 0:
                                        {
                                            SetPlayerAttachedObject(playerid,0,19636,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                        }
                                        case 1:
                                        {
                                            SetPlayerAttachedObject(playerid,0,19637,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                        }
                                        case 2:
                                        {
                                            SetPlayerAttachedObject(playerid,0,19638,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                SendClientMessage(playerid, 0xFF0000FF, "• Jûsø krepðelis pilnas.");
                            }
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Jûs neturite krepðelio kad galëtumëte rinkti uogas.");
                    }
                }
            }
        }
    }
    if(!IsPlayerInAnyVehicle(playerid) && newkeys == KEY_WALK)
    {
        if(PlayerDB[playerid][TuriDeze] == true)
        {
            new Float:Cords[3];
            new Float:Offsets[3];
            GetVehicleModelInfo(498, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
            for(new i = 0;i<=GetVehiclePoolSize();i++)
            {
                if(GetVehicleModel(i) == 498 && VehicleDB[i][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[i][DARBOID]))
                {
                    GetVehicleRelativePos(i, Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                    if(IsPlayerInRangeOfPoint(playerid, 1, Cords[0],Cords[1],Cords[2]))
                    {
                        if(VehicleDB[i][PakrautuDeziuSkaicius] < 40)
                        {
                            VehicleDB[i][PakrautuDeziuSkaicius]++;
                            new string[7];
                            format(string, 7, "%i/40", VehicleDB[i][PakrautuDeziuSkaicius]);
                            UpdateDynamic3DTextLabelText(VehicleDB[i][BoxesInCarLabel], 0x50AE4DFF, string);
                            PlayerDB[playerid][TuriDeze] = false;
                            RemovePlayerAttachedObject(playerid, 0);
                            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                            if(VehicleDB[i][PakrautuDeziuSkaicius] == 40)
                            {
                                ErrorMsg(playerid,"• Sunkveþemis pilnas.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Papildomos dëþës netelpa.");
                        }
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }
            }
        }
        else
        {
            if(GetPlayerInterior(playerid) == 20 && GetPlayerVirtualWorld(playerid) == 1 && IsJobFromMafia(PlayerDB[playerid][Job]))
            {
                if(IsValidDynamicObject(BankMoneyStack[0]) && BankMoneyStackTaken[0] == false && IsPlayerInRangeOfPoint(playerid, 1, 1378.24536, -977.55951, 200.35193) && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[0] = true;
                    DestroyDynamicObject(BankMoneyStack[0]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[0] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[1]) && BankMoneyStackTaken[1] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1377.83240, -977.64569, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[1] = true;
                    DestroyDynamicObject(BankMoneyStack[1]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[1] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[2]) && BankMoneyStackTaken[2] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1377.97192, -977.26794, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[2] = true;
                    DestroyDynamicObject(BankMoneyStack[2]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[2] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[3]) && BankMoneyStackTaken[3] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1377.52600, -977.41846, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[3] = true;
                    DestroyDynamicObject(BankMoneyStack[3]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[3] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[4]) && BankMoneyStackTaken[4] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1377.36658, -977.79840, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[4] = true;
                    DestroyDynamicObject(BankMoneyStack[4]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[4] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[5]) && BankMoneyStackTaken[5] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1378.42224, -977.15747, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;

                    BankMoneyStackTaken[5] = true;
                    DestroyDynamicObject(BankMoneyStack[5]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[5] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[6]) && BankMoneyStackTaken[6] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1378.73694, -977.60443, 200.35193)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[6] = true;
                    DestroyDynamicObject(BankMoneyStack[6]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[6] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[7]) && BankMoneyStackTaken[7] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1378.57739, -976.89459, 200.15588)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;

                    BankMoneyStackTaken[7] = true;
                    DestroyDynamicObject(BankMoneyStack[7]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[7] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[8]) && BankMoneyStackTaken[8] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1377.63953, -977.00494, 200.15588)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;

                    BankMoneyStackTaken[8] = true;
                    DestroyDynamicObject(BankMoneyStack[8]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[8] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
                else if(IsValidDynamicObject(BankMoneyStack[9]) && BankMoneyStackTaken[9] == false &&  IsPlayerInRangeOfPoint(playerid, 1, 1378.07874, -976.96252, 200.15588)  && PlayerDB[playerid][MoneyStackOnBack] == false)
                {
                    PlayerDB[playerid][WantedLevel] +=50;
                    SendClientMessage(playerid, RAUDONA, "Uþ bendradarbiavimà banko apipleðime gaunate +50 átarimo lygio taðkø.");
                    PlayerDB[playerid][BEGA] = 1;
                    PlayerDB[playerid][BegaLaiko] = 1;
                    BankMoneyStackTaken[9] = true;
                    DestroyDynamicObject(BankMoneyStack[9]);
                    PlayerDB[playerid][MoneyStackOnBack] = true;
                    BankMoneyStack[9] = INVALID_OBJECT_ID;
                    SetPlayerAttachedObject(playerid, 1, 1550, 1, -0.046000, -0.169999, -0.009999, 2.800001, 87.200004, -173.900009);
                }
            }
            else if(IsJobFromMafia(PlayerDB[playerid][Job]) || IsJobFromLaw(PlayerDB[playerid][Job]))
            {
                new Float:Cords[3];
                new Float:Offsets[3];
                GetVehicleModelInfo(498, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
                for(new i = 0;i<=GetVehiclePoolSize();i++)
                {
                    if(GetVehicleModel(i) == 498 && VehicleDB[i][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[i][DARBOID]))
                    {
                        GetVehicleRelativePos(i, Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                        if(IsPlayerInRangeOfPoint(playerid, 1, Cords[0],Cords[1],Cords[2]))
                        {
                            if(VehicleDB[i][PakrautuDeziuSkaicius] > 0)
                            {
                                VehicleDB[i][PakrautuDeziuSkaicius]--;
                                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                                SetPlayerAttachedObject(playerid,0,2358,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-97.399993,1.000000,1.000000,1.000000);
                                PlayerDB[playerid][TuriDeze] = true;
                                new string[7];
                                format(string, 7, "%i/40", VehicleDB[i][PakrautuDeziuSkaicius]);
                                UpdateDynamic3DTextLabelText(VehicleDB[i][BoxesInCarLabel], 0x50AE4DFF, string);
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Nëra kà iðimti.");
                            }
                            break;
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
        }
    }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(PRESSED(KEY_ANALOG_UP))
        {
            if(IsVehicleModelWithEngine(GetVehicleModel(GetPlayerVehicleID(playerid))))
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                new engine, lights, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
                if(VehicleDB[vehicleid][VehicleLights] == 1)
                {
                    SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
                    VehicleDB[vehicleid][VehicleLights] = 0;
                }
                else{
                    SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
                    VehicleDB[vehicleid][VehicleLights] = 1;
                }
            }
        }
        if(PRESSED(KEY_ANALOG_DOWN))
        {
            if(IsVehicleModelWithEngine(GetVehicleModel(GetPlayerVehicleID(playerid))))
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(VehicleDB[vehicleid][VehicleEngineState] == 1)
                {
                    GameTextForPlayer(playerid, "~r~UZGESINTAS!", 2000, 3);
                    SetVehicleEngineState(vehicleid,false);
                }
                else
                {
                    if(VehicleDB[vehicleid][FuelType] == 0)
                    {
                        if(VehicleDB[vehicleid][Bendzinas] > 0)
                        {
                            GameTextForPlayer(playerid, "~g~UZVESTAS!", 2000, 3);
                            SetVehicleEngineState(vehicleid,true);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Maðinos uþvesti nepavyko.. Baigësi benzinas.");
                        }
                    }
                    else
                    {
                        if(VehicleDB[vehicleid][Dujos] > 0)
                        {
                            GameTextForPlayer(playerid, "~g~UZVESTAS!", 2000, 3);
                            SetVehicleEngineState(vehicleid,true);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Maðinos uþvesti nepavyko.. Baigësi dujos.");
                        }
                    }
                }
            }
        }
    }
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == 2)
		{
			if(PRESSED(KEY_CROUCH))
			{
				new Float:Cords[3];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				foreach(new i : Player)
				{
					if(IsPlayerInRangeOfPoint(i, 30.0, Cords[0], Cords[1], Cords[2]))
					{
						SendClientMessage(i, -1, "{AFAFAF}MEDIKAI: pasitraukite á ðalikelæ!");
					}
				}
			}
		}
        else if(VehicleDB[vehicleid][DARBOMASINA] == true && (VehicleDB[vehicleid][DARBOID] == 1 || VehicleDB[vehicleid][DARBOID] == 9))
        {
            if(PRESSED(KEY_CROUCH))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                new ClosestPlayerID = -1;
                new Float:ClosestPlayerDistance = 1000;
                for(new i = 0; i<=GetPlayerPoolSize();i++)
                {
                    if(i == playerid || IsPlayerConnected(i) == 0)
                    {
                        continue;
                    }
                    if(IsPlayerInRangeOfPoint(i, 20.0, Cords[0], Cords[1], Cords[2]))
                    {
                        if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
                        {
                            new Float:Dist = GetPlayerDistanceFromPoint(i, Cords[0], Cords[1], Cords[2]);
                            if(Dist < ClosestPlayerDistance)
                            {
                                ClosestPlayerDistance = Dist;
                                ClosestPlayerID = i;
                            }
                        }
                    }
                }
                if(ClosestPlayerID >= 0)
                {
                    new string[70];
                    format(string, sizeof(string), "~g~Policininkas ~r~%s~g~!~n~Prasome sustoti!", Vardas(playerid));
                    GameTextForPlayer(ClosestPlayerID, string, 4000, 5);
                    format(string, sizeof(string), " • Stabdote þaidëjà %s", Vardas(ClosestPlayerID));
                    SendClientMessage(playerid, 0xFF9933FF, string);
                }
            }
        }
        else if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == 11 && VehicleDB[vehicleid][SuSvitureliais] == true)
        {
            if(PRESSED(KEY_CROUCH))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                foreach(new i : Player)
                {
                    if(IsPlayerInRangeOfPoint(i, 30.0, Cords[0], Cords[1], Cords[2]))
                    {
                        SendClientMessage(i, -1, "{AFAFAF}POLICIJA: pasitraukite á ðalikelæ!");
                    }
                }
            }
        }
	}
    //HORN - 2
    if(PRESSED(2) && (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
    {
        if(PlayerDB[playerid][Job] == 2)
        {
            new vehicleIDAS = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleIDAS][DARBOMASINA] == true)
            {
                if(GetVehicleModel(vehicleIDAS) == 490)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(11701,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS, 0.000000, 0.624999, 1.109999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
            }
        }
        else if(PlayerDB[playerid][Job] == 9)
        {
            new vehicleIDAS = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleIDAS][DARBOMASINA] == true)
            {
                if(GetVehicleModel(vehicleIDAS) == 482)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(19419,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS, 0.000000, 1.019999, 0.909999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
            }
        }
        else if(PlayerDB[playerid][Job] == 6)
        {
            new vehicleIDAS = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleIDAS][DARBOMASINA] == true)
            {
                if(GetVehicleModel(vehicleIDAS) == 541)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(18646,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS, -0.449999,-0.074999,0.675000,0.000000,0.000000,0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
            }
        }
        else if(PlayerDB[playerid][Job] == 11)
        {
            new vehicleIDAS = GetPlayerVehicleID(playerid);
            new Modelis = GetVehicleModel(vehicleIDAS);
            if(VehicleDB[vehicleIDAS][DARBOMASINA] == true)
            {
                if(Modelis == 411)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(18646,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS, -0.499999, 0.899999, 0.254999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 589)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(18646,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  -0.469999, 0.589999, 0.189999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 451)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(18646,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  -0.429999, 0.539999, 0.189999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 402)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(18646,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  -0.554999, 0.564999, 0.319999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 579)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(19419,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  -0.019999, 0.000000, 1.204999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 560 || Modelis == 415)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(19419,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  0.000000, 0.274999, 0.799999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
                else if(Modelis == 426)
                {
                    if(VehicleDB[vehicleIDAS][SuSvitureliais] == false)
                    {
                        VehicleDB[vehicleIDAS][SvitureliuObjektas] = CreateObject(19419,0,0,-1000,0,0,0);
                        AttachObjectToVehicle(VehicleDB[vehicleIDAS][SvitureliuObjektas], vehicleIDAS,  0.000000, 0.100000, 0.809999, 0.000000, 0.000000, 0.000000);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = true;
                    }
                    else
                    {
                        DestroyObject(VehicleDB[vehicleIDAS][SvitureliuObjektas]);
                        VehicleDB[vehicleIDAS][SuSvitureliais] = false;
                    }
                }
            }
        }
    }
    if(PRESSED(KEY_SUBMISSION) && (IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER))
    {
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
        {
            new Float:pX,Float:pY,Float:pZ;
            GetPlayerPos(playerid,pX,pY,pZ);
            new Float:vX,Float:vY,Float:vZ;
            new Found=0;
            new vid=0;
            while((vid<=GetVehiclePoolSize())&&(!Found))
            {
                vid++;
                GetVehiclePos(vid,vX,vY,vZ);
                if  ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
                {
                    Found=1;
                    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                    {
                        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                    }
                    else AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                }
            }
        }
    }
    if(PRESSED(KEY_NO))
    {
        //KMA VARTAI UZ 1000 EURU
        if(IsPlayerInRangeOfPoint(playerid, 7.0, -2154.4451, -754.2456, 31.1827))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                if(KMAVartaiState == false)
                {
                    if(PlayerDB[playerid][Job] == 5)
                    {
                        KMAVartaiState = true;
                        new TimeTillClose = MoveDynamicObject(KMAVartai, -2154.4451, -754.2456, 27.6827, 2, 0,0,90) + 6000;
                        SetTimer("CloseKMA", TimeTillClose, false);
                    }
                    else if(PlayerDB[playerid][MoneyInPocket] >= 1000 )
                    {
                        PlayerDB[playerid][MoneyInPocket]-=1000;
                        KMAVartaiState = true;
                        new TimeTillClose = MoveDynamicObject(KMAVartai, -2154.4451, -754.2456, 27.6827, 2, 0,0,90) + 6000;
                        SetTimer("CloseKMA", TimeTillClose, false);
                        SendClientMessage(playerid, GELTONA, "KMA Vartai atidaryti uþ 1000€. Turite 6 sekundes pravaþiuoti.");
                    }
                }
            }
        }
        /*
    bool:RecKauliukaiOffer,
    RecKauliukaiOfferTill,
    SentKauliukaiOfferUntill,
    bool:SentKauliukaiOffer,
    KauliukaiMoney,
    KauliukaiOfferIniciatorID
        */
        else if(PlayerDB[playerid][RecKauliukaiOffer] == true && PlayerDB[playerid][RecKauliukaiOfferTill] >= gettime())
        {
            new pID = -1;
            for(new i = 0;i<= GetPlayerPoolSize();i++)
            {
                if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                {
                    if(PlayerDB[i][SQLID] == PlayerDB[playerid][KauliukaiOfferIniciatorID])
                    {
                        pID = i;
                        break;
                    }
                }
            }
            if(pID >= 0)
            {
                if(PlayerDB[playerid][KauliukaiMoney] > PlayerDB[pID][MoneyInPocket] || PlayerDB[playerid][MoneyInPocket] < PlayerDB[playerid][KauliukaiMoney])
                {
                    ErrorMsg(playerid,"• Vienas ið jûsø arba abu neturite pakankamai pinigø þaidimui kauliukais.");
                    ErrorMsg(pID,"• Vienas ið jûsø arba abu neturite pakankamai pinigø þaidimui kauliukais.");
                    PlayerDB[playerid][RecKauliukaiOffer] = false;

                }
                else
                {
                    new info[512];
                    new string[204];
                    format(string,sizeof(string),"{FFFFFF}Þaidëjas {6EF83C}%s {FFFFFF}siûlo Jums þaisti kauliukà ið {6EF83C}%s €\n\n",Vardas(pID),AddPoints(PlayerDB[playerid][KauliukaiMoney]));
                    strcat(info,string);
                    strcat(info,"{FFFFFF}Sutikdamas þaisti kauliukà su ðiuo þaidëju, serveris ridens kauliukà nuo 1 iki 6, laimëjimo tikimybë 50/50, pinigø sumà kurià statëte laimës þaidëjas pas kurá iðkris didþiausias skaièius. \n\n");
                    new Code[6];
                    randomString(Code,5);
                    format(PlayerDB[playerid][KauliukaiCode], 6, "%s", Code);
                    format(string,sizeof(string),"{FFFFFF}Norëdamas sutikti þaisti apaèioje á laukelá áraðykite {6EF83C}%s",PlayerDB[playerid][KauliukaiCode]);
                    strcat(info, string);
                    ShowPlayerDialog(playerid, 255, DIALOG_STYLE_INPUT, "{AFAFAF}Kauliukai", info, "Þaisti", "Atsisakyti");
                }
            }

        }
        else if(PlayerDB[playerid][ReceivedKartsOffer] == true && PlayerDB[playerid][KartsOfferExpiresAt] > gettime())
        {
            new pID = -1;
            for(new i = 0;i<= GetPlayerPoolSize();i++)
            {
                if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                {
                    if(PlayerDB[i][SQLID] == PlayerDB[playerid][KartOfferSenderSQLid])
                    {
                        pID = i;
                        break;
                    }
                }
            }
            if(pID >= 0)
            {
                if(PlayerDB[playerid][KartsOfferMoney] > PlayerDB[pID][MoneyInPocket] || PlayerDB[playerid][MoneyInPocket] < PlayerDB[playerid][KartsOfferMoney])
                {
                    ErrorMsg(playerid,"• Vienas ið jûsø arba abu neturite pakankamai pinigø varþyboms.");
                    ErrorMsg(pID,"• Vienas ið jûsø arba abu neturite pakankamai pinigø varþyboms.");
                    PlayerDB[playerid][ReceivedKartsOffer] = false;

                }
                else
                {
                    new info[512];
                    new string[204];
                    format(string,sizeof(string),"{FFFFFF}Þaidëjas {6EF83C}%s {FFFFFF}siûlo varþytis kartingø lenktynëse ið {6EF83C}%s €\n\n",Vardas(pID),AddPoints(PlayerDB[playerid][KartsOfferMoney]));
                    strcat(info,string);
                    format(string, sizeof(string), "{FFFFFF}Jums sutikus lenktiniauti jûs bûsite nukeliami á kità virtualø pasaulá, kuriame lenktyniausite %d ratus. \n\n", PlayerDB[playerid][KartsRatai]);
                    strcat(info,string);
                    new Code[6];
                    randomString(Code,5);
                    format(PlayerDB[playerid][KartsCode], 6, "%s", Code);
                    format(string,sizeof(string),"{FFFFFF}Norëdamas sutikti lenktiniauti apaèioje á laukelá áraðykite {6EF83C}%s",PlayerDB[playerid][KartsCode]);
                    strcat(info, string);
                    ShowPlayerDialog(playerid, 265, DIALOG_STYLE_INPUT, "{AFAFAF}Kartingai", info, "Þaisti", "Atsisakyti");
                }
            }
        }
        else if(PlayerDB[playerid][adminlvl] >= 4)
        {
            cmd_slaptoskomandos(playerid,"");
        }
    }
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PRESSED(KEY_SUBMISSION))
    {
        //A51
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 345.4811,1796.6949,18.3269) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 343.5734,1799.6780,18.3304);
            }
            else
            {
                SetPlayerPos(playerid, 343.5734,1799.6780,18.3304);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 343.5734,1799.6780,18.3304) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 345.4811,1796.6949,18.3269);
            }
            else
            {
                SetPlayerPos(playerid, 345.4811,1796.6949,18.3269);
            }
        }

        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 289.2649,1821.6365,17.3460) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 282.5333,1821.2195,17.3454);
            }
            else
            {
                SetPlayerPos(playerid, 282.5333,1821.2195,17.3454);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 282.5333,1821.2195,17.3454) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 289.2649,1821.6365,17.3460);
            }
            else
            {
                SetPlayerPos(playerid, 289.2649,1821.6365,17.3460);
            }
        }

        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 135.0996,1938.8584,18.9981) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 134.8042,1945.1489,19.0521);
            }
            else
            {
                SetPlayerPos(playerid, 134.8042,1945.1489,19.0521);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 134.8042,1945.1489,19.0521) && IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                SetVehiclePos(GetPlayerVehicleID(playerid), 135.0996,1938.8584,18.9981);
            }
            else
            {
                SetPlayerPos(playerid, 135.0996,1938.8584,18.9981);
            }
        }
        //MEDIKU
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2581.4502,662.1776,14.6075) && MedikuGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 2)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePos(vehicleid, -2569.5503,663.2225,-0.7159);
                SetVehicleZAngle(vehicleid, 270.5);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2575.4153,663.1802,-0.7331) && MedikuGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 2)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePos(vehicleid, -2581.1814,658.5783,14.4545);
                SetVehicleZAngle(vehicleid, 185.5);
            }
        }
        //TAKSI FIRMA GARAZAS
        if(IsPlayerInRangeOfPoint(playerid, 7.0, -2562.8074,495.3473,14.6184) && TaksiFGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 4)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePos(vehicleid, -2350.0232,-100.1805,10.5547);
                SetVehicleZAngle(vehicleid, 270);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2353.0427,-98.0781,10.6148) && TaksiFGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 4)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePosExt(vehicleid, -2562.8103,502.1671,14.3878,0.2710);
            }
        }

        //Radistai
        if(IsPlayerInRangeOfPoint(playerid, 7.0, -2189.7065,-110.2756,35.3460) && RadistaiGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 10)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePosExt(vehicleid, -2219.5730,-110.1769,-16.9646,272.6654);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2226.7324,-110.0541,-16.7952) && RadistaiGarazas == false)
        {
            if(PlayerDB[playerid][Job] == 10)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                SetVehiclePosExt(vehicleid, -2189.4568,-107.5841,35.1801,358.8139);
            }
        }
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PRESSED(KEY_HANDBRAKE) || GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PRESSED(KEY_SPRINT))
	{
        if(IsPlayerInDynamicArea(playerid, GarazaiArea1, 1))
        {
            for(new i = 0;i<22;i++)
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1 && GarazaiInfo[i][GarazasNupirktasIki] > gettime())
                {
                    if(strcmp(Vardas(playerid), GarazaiInfo[i][GarazoSavininkas], true) == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 8, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ]))
                        {
                            if(GarazaiInfo[i][GarazasAtidarytas] == true)
                            {
                                MoveDynamicObject(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ],2,GarazaiInfo[i][GCordsRX],GarazaiInfo[i][GCordsRY],GarazaiInfo[i][GCordsRZ]);
                                GarazaiInfo[i][GarazasAtidarytas] = false;
                                GameTextForPlayer(playerid, "~r~GARAZAS UZDAROMAS..", 3000, 4);
                            }
                            else
                            {
                                MoveDynamicObject(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ]-4,2,GarazaiInfo[i][GCordsRX],GarazaiInfo[i][GCordsRY],GarazaiInfo[i][GCordsRZ]);
                                GarazaiInfo[i][GarazasAtidarytas] = true;
                                GameTextForPlayer(playerid, "~g~GARAZAS ATIDAROMAS..", 3000, 4);
                            }
                            break;
                        }
                    }
                }
            }
        }
        else if(IsPlayerInDynamicArea(playerid, GarazaiArea2, 1))
        {
            for(new i = 22;i<32;i++)
            {
                if(GarazaiInfo[i][GarazasNupirktas] == 1 && GarazaiInfo[i][GarazasNupirktasIki] > gettime())
                {
                    if(strcmp(Vardas(playerid), GarazaiInfo[i][GarazoSavininkas], true) == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 8, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ]))
                        {
                            if(GarazaiInfo[i][GarazasAtidarytas] == true)
                            {
                                MoveDynamicObject(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ],2,GarazaiInfo[i][GCordsRX],GarazaiInfo[i][GCordsRY],GarazaiInfo[i][GCordsRZ]);
                                GarazaiInfo[i][GarazasAtidarytas] = false;
                                GameTextForPlayer(playerid, "~r~GARAZAS UZDAROMAS..", 3000, 4);
                            }
                            else
                            {
                                MoveDynamicObject(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ]-4,2,GarazaiInfo[i][GCordsRX],GarazaiInfo[i][GCordsRY],GarazaiInfo[i][GCordsRZ]);
                                GarazaiInfo[i][GarazasAtidarytas] = true;
                                GameTextForPlayer(playerid, "~g~GARAZAS ATIDAROMAS..", 3000, 4);
                            }
                            break;
                        }
                    }
                }
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2067.5349,-7.1022,33.2051) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 11 || PlayerDB[playerid][JobInvitation] == 11) )
        {
            if(SPDGateState == false)
            {
                MoveDynamicObject(SPDGateObject[0],  -2065.4580, -27.5868, 34.31000,5,  0.00000, 0.00000, -90.00000);
                MoveDynamicObject(SPDGateObject[1],  -2065.4580, -27.5868, 34.23000,5,  180.00000, 0.00000, -90.00000);
                SPDGateState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(SPDGateObject[0],  -2065.47778, -19.19370, 34.31000,5,  0.00000, 0.00000, -90.00000);
                MoveDynamicObject(SPDGateObject[1],  -2065.47778, -19.19370, 34.23000,5,  180.00000, 0.00000, -90.00000);
                SPDGateState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2057.1870,-64.7913,24.7512) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 11 || PlayerDB[playerid][JobInvitation] == 11) )
        {
            if(SPDGarageGatesState == false)
            {
                MoveDynamicObject(SPDGarageGates,  -2057.00000, -77.3300, 23.70000,2,   0.00000, 0.00000, 90.00000);
                SPDGarageGatesState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(SPDGarageGates,  -2057.00000, -70.33000, 23.70000,2,   0.00000, 0.00000, 90.00000);
                SPDGarageGatesState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }

        else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2068.80005, -52.20059, 23.6000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 11 || PlayerDB[playerid][JobInvitation] == 11) )
        {
            if(SPDDoors1State == false)
            {
                MoveDynamicObject(SPDDoors1,  -2068.80005, -52.20059, 23.6000,0.2,   0.00000, 0.00000, 90.00000);
                SPDDoors1State = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(SPDDoors1,  -2068.80005, -52.20059, 23.70000,0.2,   0.00000, 0.00000, 180.00000);
                SPDDoors1State = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2067.83862, -63.08151, 23.60000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 11 || PlayerDB[playerid][JobInvitation] == 11) )
        {
            if(SPDDoors2State == false)
            {
                MoveDynamicObject(SPDDoors2, -2067.83862, -63.08151, 23.60000,0.2,   0.00000, 0.00000, -270.00000);
                SPDDoors2State = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(SPDDoors2, -2067.83862, -63.08151, 23.70000,0.2,  0.00000, 0.00000, -180.00000);
                SPDDoors2State = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 15.0, 288.0470,1411.4480,10.6388) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 21 || PlayerDB[playerid][JobInvitation] == 21) )
        {
            if(FuristaiPagrGState == false)
            {
                MoveDynamicObject(FuristaiPagrLG,288.453,1405.4760,9.662,2,0.000,0.000,-90.000);
                MoveDynamicObject(FuristaiPagrRG,288.453,1425.2900,9.662,2,0.000,0.000,-90.000);
                FuristaiPagrGState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(FuristaiPagrGText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(FuristaiPagrLG,288.453,1411.476,9.662,2,0.000,0.000,-90.000);
                MoveDynamicObject(FuristaiPagrRG,288.453,1420.290,9.662,2,0.000,0.000,-90.000);
                FuristaiPagrGState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(FuristaiPagrGText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 15.0, 2424.1482, -2089.4910, 12.5469) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 21 || PlayerDB[playerid][JobInvitation] == 21) )
        {
            if(FuristaiLSGState == false)
            {
                MoveDynamicObject(FuristaiLSGL,  2424.252,-2102.7209,12.467,2,0.000,0.000,90.000);
                MoveDynamicObject(FuristaiLSGR,  2424.252,-2085.3870,12.467,2,0.000,0.000,90.000);
                FuristaiLSGState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(FuristaiLSGText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(FuristaiLSGL,  2424.252,-2098.221,12.467,2,0.000,0.000,90.000);
                MoveDynamicObject(FuristaiLSGR,  2424.252,-2089.387,12.467,2,0.000,0.000,90.000);
                FuristaiLSGState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(FuristaiLSGText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 15.0, 997.4463, 2133.1860, 9.8180) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 21 || PlayerDB[playerid][JobInvitation] == 21) )
        {
            if(FuristaiLVGState == false)
            {
                MoveDynamicObject(FuristaiLVGL,  997.373,2126.0920,9.814,2,0.000,0.000,-90.000);
                MoveDynamicObject(FuristaiLVGR,  997.373,2149.4431,9.814,2,0.000,0.000,-90.000);
                FuristaiLVGState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(FuristaiLVGText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(FuristaiLVGL,  997.373,2133.092,9.814,2,0.000,0.000,-90.000);
                MoveDynamicObject(FuristaiLVGR,  997.373,2141.943,9.814,2,0.000,0.000,-90.000);
                FuristaiLVGState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(FuristaiLVGText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2048.200,69.442,29.677) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 14) )
        {
            if(GaisrineVartaiState[3] == false)
            {
                MoveDynamicObject(GaisrineVartai[3], -2048.200,69.442,23.277,2,0.000,0.000,0.000);
                GaisrineVartaiState[3] = true;
            }
            else
            {
                MoveDynamicObject(GaisrineVartai[3], -2048.200,69.442,29.677,2,0.000,0.000,0.000);
                GaisrineVartaiState[3] = false;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2048.200,85.459,29.677) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 14) )
        {
            if(GaisrineVartaiState[2] == false)
            {
                MoveDynamicObject(GaisrineVartai[2], -2048.200,85.459,23.277,2,0.000,0.000,0.000);
                GaisrineVartaiState[2] = true;
            }
            else
            {
                MoveDynamicObject(GaisrineVartai[2], -2048.200,85.459,29.677,2,0.000,0.000,0.000);
                GaisrineVartaiState[2] = false;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2021.564,85.518,29.677) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 14) )
        {
            if(GaisrineVartaiState[1] == false)
            {
                MoveDynamicObject(GaisrineVartai[1], -2021.564,85.518,23.277,2,0.000,0.000,0.000);
                GaisrineVartaiState[1] = true;
            }
            else
            {
                MoveDynamicObject(GaisrineVartai[1], -2021.564,85.518,29.677,2,0.000,0.000,0.000);
                GaisrineVartaiState[1] = false;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 8.0, -2021.563,69.442,29.677) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 14) )
        {
            if(GaisrineVartaiState[0] == false)
            {
                MoveDynamicObject(GaisrineVartai[0], -2021.563,69.442,23.577,2,0,0,0);
                GaisrineVartaiState[0] = true;
            }
            else
            {
                MoveDynamicObject(GaisrineVartai[0], -2021.563,69.442,29.677,2,0,0,0);
                GaisrineVartaiState[0] = false;
            }
        }

        else if(IsPlayerInRangeOfPoint(playerid, 9.0, -2126.9753,-80.2492,35.3234) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 9 || PlayerDB[playerid][JobInvitation] == 9) )
        {
            if(ARASPagrindiniaiVartaiState == false)
            {
                MoveDynamicObject(ARASPagrindiniaiVartai, -2116.35278, -80.64670, 37.04730,2,   0.00000, 0.00000, 0.00000);
                ARASPagrindiniaiVartaiState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(ARASPagrindiniaiVartaiText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(ARASPagrindiniaiVartai, -2126.60181, -80.64670, 37.04730,2,   0.00000, 0.00000, 0.00000);
                ARASPagrindiniaiVartaiState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(ARASPagrindiniaiVartaiText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1.8, -1070.1543, -1292.0240, 128.3708) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 8 || PlayerDB[playerid][JobInvitation] == 8) )
        {
            if(GenoveseDoorsDown == false)
            {
                if(GenoveseMafijaGarageDoorsState == false)
                {
                    MoveDynamicObject(GenoveseMafijaGarageDoors, -1070.15430, -1292.02405, 128.35080,0.05,   0.00000, 0.00000, 0.00000);
                    GenoveseMafijaGarageDoorsState = true;
                }
                else
                {
                    MoveDynamicObject(GenoveseMafijaGarageDoors, -1070.15430, -1292.02405, 128.37080,0.05,   0.00000, 0.00000, 90.00000);
                    GenoveseMafijaGarageDoorsState = false;
                }
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -1058.83496, -1255.90295, 130.87900) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 8 || PlayerDB[playerid][JobInvitation] == 8) )
        {
            if(GenoveseGatesDown == false)
            {
                if(GenoveseMafijaGatesState == false)
                {
                    MoveDynamicObject(GenoveseMafijaGates, -1058.83496, -1255.90295, 124.57900,2,   0.00000, 0.00000, -90.00000);
                    GenoveseMafijaGatesState = true;
                    GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                    new string[256];
                    new Y,M,D,H,MI;
                    getdate(Y, M, D);
                    gettime(H, MI);
                    format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                    UpdateDynamic3DTextLabelText(GenoveseMafijaGatesText, 0xFFFFFFFF, string);
                }
                else
                {
                    MoveDynamicObject(GenoveseMafijaGates, -1058.83496, -1255.90295, 130.87900,2,   0.00000, 0.00000, -90.00000);
                    GenoveseMafijaGatesState = false;
                    GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                    new string[256];
                    new Y,M,D,H,MI;
                    getdate(Y, M, D);
                    gettime(H, MI);
                    format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                    UpdateDynamic3DTextLabelText(GenoveseMafijaGatesText, 0xFFFFFFFF, string);
                }
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1.8, -674.96930, 938.22601, 11.56320) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 7 || PlayerDB[playerid][JobInvitation] == 7) )
        {
            if(LuccheseDoorsDown == false)
            {
                if(LuccheseMafijaGarageDoorsState == false)
                {
                    MoveDynamicObject(LuccheseMafijaGarageDoors, -674.96930, 938.22601, 11.565,0.05,   0.00000, 0.00000, 0.00000);
                    LuccheseMafijaGarageDoorsState = true;
                }
                else
                {
                    MoveDynamicObject(LuccheseMafijaGarageDoors, -674.96930, 938.22601, 11.56220,0.05,   0.00000, 0.00000, 90.00000);
                    LuccheseMafijaGarageDoorsState = false;
                }
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -715.38000, 972.19702, 8.0) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 7 || PlayerDB[playerid][JobInvitation] == 7) )
        {
            if(LuccheseGatesDown == false)
            {
                if(LuccheseMafijaGatesState == false)
                {
                    MoveDynamicObject(LuccheseMafijaGates, -715.38000, 972.19702, 8.0,2,   0.00000, 0.00000, 90.00000);
                    LuccheseMafijaGatesState = true;
                    GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);

                    new string[256];
                    new Y,M,D,H,MI;
                    getdate(Y, M, D);
                    gettime(H, MI);
                    format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                    UpdateDynamic3DTextLabelText(LuccheseMafijaGatesText, 0xAFAFAFFF, string);
                }
                else
                {
                    MoveDynamicObject(LuccheseMafijaGates, -715.38000, 972.19702, 13.85900,2,   0.00000, 0.00000, 90.00000);
                    LuccheseMafijaGatesState = false;
                    GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);

                    new string[256];
                    new Y,M,D,H,MI;
                    getdate(Y, M, D);
                    gettime(H, MI);
                    format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                    UpdateDynamic3DTextLabelText(LuccheseMafijaGatesText, 0xAFAFAFFF, string);
                }
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0,  -1723.44702, -122.15500, 4.15900) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 5 || PlayerDB[playerid][JobInvitation] == 5) )
        {
            if(MechanikuGVState == false)
            {
                MoveDynamicObject(MechanikuGVartai, -1723.44702, -122.15500, 0.55900,2,   0.00000, 0.00000, 311.68600);
                MechanikuGVState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(MechanikuGVText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(MechanikuGVartai, -1723.44702, -122.15500, 4.15900,2,   0.00000, 0.00000, 311.68600);
                MechanikuGVState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(MechanikuGVText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -1753.74097, -121.91200, 3.50000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 5 || PlayerDB[playerid][JobInvitation] == 5) )
        {
            if(MechanikuSVState == false)
            {
                MoveDynamicObject(MechanikuSVartai,  -1753.74097, -121.91200, 3.40000,0.05,   0.00000, 10.00000, 90.00000);
                MechanikuSVState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(MechanikuSVText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(MechanikuSVartai, -1753.74097, -121.91200, 3.50000,0.05,   0.00000, 90.00000, 90.00000);
                MechanikuSVState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(MechanikuSVText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2570.7703,552.9943,14.5830) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 4 || PlayerDB[playerid][JobInvitation] == 4) )
        {
            if(TaksiFVartaiState == false)
            {
                MoveDynamicObject(TaksiFVartai, -2570.04590, 552.82098, 14.2700, 0.01,  0.00000, 10.00000, -1.30800);
                TaksiFVartaiState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(TaksiFText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(TaksiFVartai, -2570.04590, 552.82098, 14.28100,0.01,   0.00000, 90.44000, -1.30800);
                TaksiFVartaiState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(TaksiFText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2177.9636,-91.0748,35.3430) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 10 || PlayerDB[playerid][JobInvitation] == 10) )
        {
            if(RadistaiVartaiState == false)
            {
                MoveDynamicObject(RadistaiVartai, -2177.21118, -100.89800, 33.47700,2,   180.00000, 0.00000, 270.19299);
                RadistaiVartaiState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

                UpdateDynamic3DTextLabelText(RadistaiText, 0xFFFFFFFF, string);
            }
            else
            {
                MoveDynamicObject(RadistaiVartai, -2177.21118, -90.85000, 33.47700,2,   180.00000, 0.00000, 270.19299);
                RadistaiVartaiState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
                UpdateDynamic3DTextLabelText(RadistaiText, 0xFFFFFFFF, string);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2598.3748, 2500.8398, 24.7656) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][VIP] == 1 || PlayerDB[playerid][Job] == 6 ))
        {
            if(VIPVartaiState == false)
            {
                MoveDynamicObject(VIPVartaiA, -2595.4636, 2508.3604, 24.7656,2,   7.94000, 0.00000, 65.68500);
                MoveDynamicObject(VIPVartaiB, -2603.9468, 2487.4319, 24.7972,2,   7.93980, 0.00000, 67.67000);
                VIPVartaiState = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(VIPVartaiA, -2598.37476, 2500.83984, 24.76560,2,  7.94000, 0.00000, 65.68500);
                MoveDynamicObject(VIPVartaiB, -2601.63110, 2493.41260, 24.79720,2,  7.93980, 0.00000, 67.67000);
                VIPVartaiState = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -1987.47852, -720.69427, 33.79540) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && PlayerDB[playerid][adminlvl] > 0)
        {
            if(AdminsVartai1State == false)
            {
                MoveDynamicObject(AdminsVartai1, -1987.47852, -720.69427, 26.09540, 2, 0, 0, 0);
                AdminsVartai1State = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(AdminsVartai1, -1987.47852, -720.69427, 33.79540, 2, 0, 0, 0);
                AdminsVartai1State = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -1987.74451, -997.41663, 33.73850) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && PlayerDB[playerid][adminlvl] > 0)
        {
            if(AdminsVartai2State == false)
            {
                MoveDynamicObject(AdminsVartai2, -1987.74451, -997.41663, 25.73850, 2, 0, 0, 0);
                AdminsVartai2State = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(AdminsVartai2, -1987.74451, -997.41663, 33.73850, 2, 0, 0, 0);
                AdminsVartai2State = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -1930.79578, -858.59253, 32.07030) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && PlayerDB[playerid][adminlvl] > 0)
        {
            if(AdminsVartai3State == false)
            {
                MoveDynamicObject(AdminsVartai3, -1930.79578, -858.59253, 25.07030, 2, 0, 0, 90);
                AdminsVartai3State = true;
                GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
            }
            else
            {
                MoveDynamicObject(AdminsVartai3, -1930.79578, -858.59253, 32.07030, 2, 0, 0, 90);
                AdminsVartai3State = false;
                GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
            }
        }
		//MEDIKU VARTAI PIRMI GARAZO
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2553.3308110,619.1898190,15.4164000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 2 || PlayerDB[playerid][JobInvitation] == 2 )  )
		{
			if(MedikuGVartai1State == false)
			{
				MoveDynamicObject(MedikuGVartai1, -2553.3308110,619.1898190,11.4164,2,0.0000000,0.0000000,-90.0000000);
				GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
				MedikuGVartai1State = true;
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

				UpdateDynamic3DTextLabelText(MedikuVartai1Label, 0xFFFFFFFF, string);

			}
			else
			{
				MoveDynamicObject(MedikuGVartai1, -2553.3308110,619.1898190,15.4164000,2,0.0000000,0.0000000,-90.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
				MedikuGVartai1State = false;
				new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
				UpdateDynamic3DTextLabelText(MedikuVartai1Label, 0xFFFFFFFF, string);
			}
		}
		//MEDIKU VARTAI  ANTRI GARAZO
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2582.2216800,619.2119750,15.4164100) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 2 || PlayerDB[playerid][JobInvitation] == 2 )  )
		{
			if(MedikuGVartai2State == false)
			{
				MoveDynamicObject(MedikuGVartai2, -2582.2216800,619.2119750,11.4164,2,0.0000000,0.0000000,-90.0000000);
				GameTextForPlayer(playerid, "~g~ATIDAROMI..", 3000, 3);
				MedikuGVartai2State = true;
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

				UpdateDynamic3DTextLabelText(MedikuVartai2Label, 0xFFFFFFFF, string);
			}
			else
			{
				MoveDynamicObject(MedikuGVartai2, -2582.2216800,619.2119750,15.4164000,2,0.0000000,0.0000000,-90.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMI..", 3000, 3);
				MedikuGVartai2State = false;
				new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
				UpdateDynamic3DTextLabelText(MedikuVartai2Label, 0xFFFFFFFF, string);
			}
		}

		//MEDIKU UZKARDA 1
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2563.2399900,579.7672120,14.3256000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 2 || PlayerDB[playerid][JobInvitation] == 2 )  )
		{
			if(MedikuUzkarda1State == false)
			{
				MoveDynamicObject(MedikuUzkarda1,-2563.2399900,579.7672120,14.4256000, 0.1, 0.0000000,0.5000000,0.0000000);
				GameTextForPlayer(playerid, "~g~ATIDAROMI..", 2000, 3);
				MedikuUzkarda1State = true;
			}
			else
			{
				GameTextForPlayer(playerid, "~r~UZDAROMI..", 2000, 3);
				MoveDynamicObject(MedikuUzkarda1,-2563.2399900,579.7672120,14.3256000, 0.1, 0.0000000,-90.000000,0.0000000);
				MedikuUzkarda1State = false;
			}
		}
		//MEDIKU UZKARDA 2
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2599.7402340,588.9689940,14.3256000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 2 || PlayerDB[playerid][JobInvitation] == 2 )  )
		{
			if(MedikuUzkarda2State == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(MedikuUzkarda2,-2599.7402340,588.9689940,14.4256000, 0.05, 0.0000000,0.5000000,90.0000000);
				MedikuUzkarda2State = true;
			}
			else
			{
				MoveDynamicObject(MedikuUzkarda2,-2599.7402340,588.9689940,14.3256000, 0.05, 0.0000000,90.0000000,90.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				MedikuUzkarda2State = false;
			}
		}
		//POLICIJOS DURYS 2 AUKSTAS
		else if(IsPlayerInRangeOfPoint(playerid, 3, -1583.4239500,680.3018800,16.8560000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][JobInvitation] == 1 )  )
		{
			if(POLICEDoorsState == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(POLICEDoors,-1583.4239500,680.3018800,16.880000,0.05,0.0000000,0.0000000,90.0000000);
				POLICEDoorsState = true;
			}
			else
			{
				MoveDynamicObject(POLICEDoors,-1583.4239500,680.3018800,16.8560000,0.05,0.0000000,0.0000000,180.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				POLICEDoorsState = false;
			}
		}
		//POLICIJOS GARAZO GELEZINES DURYS
		else if(IsPlayerInRangeOfPoint(playerid, 3, -1620.7519500,688.3212300,7.8072800) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][JobInvitation] == 1   || PlayerDB[playerid][Job] == 11)  )
		{
			if(PoliceIronDoorsState == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(PoliceIronDoors,-1620.7519500,688.3212300,11.307300,1,0.0000000,0.0000000,0.0000000);
				PoliceIronDoorsState = true;
			}
			else
			{
				MoveDynamicObject(PoliceIronDoors,-1620.7519500,688.3212300,7.8072800,1,0.0000000,0.0000000,0.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				PoliceIronDoorsState = false;
			}
		}
		//POLICIJOS GARAZO Vartai
		else if(IsPlayerInRangeOfPoint(playerid, 10.0,-1631.6577100,688.4983500,8.7092600) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][JobInvitation] == 1  || PlayerDB[playerid][Job] == 11 )  )
		{
			if(PoliceGarageDoorsState == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(PoliceGarageDoors,-1631.6577100,688.4983500,13.209300,2,0.0000000,0.0000000,270.0000000);
				PoliceGarageDoorsState = true;
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

				UpdateDynamic3DTextLabelText(PoliceGarageText, 0xFFFFFFFF, string);
			}
			else
			{
				MoveDynamicObject(PoliceGarageDoors,-1631.6577100,688.4983500,8.7092600,2,0.0000000,0.0000000,270.0000000);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				PoliceGarageDoorsState = false;
				new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
				UpdateDynamic3DTextLabelText(PoliceGarageText, 0xFFFFFFFF, string);
			}
		}
		//POLICIJOS Vartai1
		else if(IsPlayerInRangeOfPoint(playerid, 8.0,-1571.8800000,661.4476900,7.8621900) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][JobInvitation] == 1  || PlayerDB[playerid][Job] == 11)  )
		{
			if(PoliceVartai1State == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(PoliceVartai1,-1571.8800000,654.4477,7.8621900,2,0.0000000,0.0000000,269.5350300);
				PoliceVartai1State = true;
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

				UpdateDynamic3DTextLabelText(PoliceVartai1Text, 0xFFFFFFFF, string);
			}
			else
			{
				MoveDynamicObject(PoliceVartai1,-1571.8800000,661.4476900,7.8621900,2,0.0000000,0.0000000,269.5350300);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				PoliceVartai1State = false;
				new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
				UpdateDynamic3DTextLabelText(PoliceVartai1Text, 0xFFFFFFFF, string);
			}
		}

		//POLICIJOS Vartai2
		else if(IsPlayerInRangeOfPoint(playerid, 8.0,-1641.5696000,681.3400000,10.1015000) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && (PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][JobInvitation] == 1  || PlayerDB[playerid][Job] == 11 )  )
		{
			if(PoliceVartai2State == false)
			{
				GameTextForPlayer(playerid, "~g~ATIDAROMA..", 2000, 3);
				MoveDynamicObject(PoliceVartai2,-1641.5696000,692.8400,10.1015000,2.5,0.0000000,0.0000000,270.4450700);
				PoliceVartai2State = true;
                new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus atidarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);

				UpdateDynamic3DTextLabelText(PoliceVartai2Text, 0xFFFFFFFF, string);
			}
			else
			{
				MoveDynamicObject(PoliceVartai2,-1641.5696000,681.3400000,10.1015000,2.5,0.0000000,0.0000000,270.4450700);
				GameTextForPlayer(playerid, "~r~UZDAROMA..", 2000, 3);
				PoliceVartai2State = false;
				new string[256];
                new Y,M,D,H,MI;
                getdate(Y, M, D);
                gettime(H, MI);
                format(string,sizeof(string),"Vartus atidaryti/uþdaryti galite paspaudæ {B27820}SPACE {FFFFFF}mygtukà.\n{B27820}TIK DARBUOTOJAMS !\n\n{FFFFFF}Vartus uþdarë: {B27820}%s {FFFFFF} ({B27820}%i-%02d-%02d %02d:%02d{FFFFFF})",Vardas(playerid),Y,M,D,H,MI);
				UpdateDynamic3DTextLabelText(PoliceVartai2Text, 0xFFFFFFFF, string);
			}
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
    if(PlayerDB[playerid][AfkState] == false)
    {
        Streamer_Update(playerid);
    }
    if(PlayerDB[playerid][MoneyStackOnBack] == true)
    {
        new PlayerWeaponID = GetPlayerWeapon(playerid);
        new bool:Pass = false;
        switch(PlayerWeaponID)
        {
            case 0..1:
            {
                Pass = true;
            }
            case 22..24:
            {
                Pass = true;
            }
            default:
            {
                Pass = false;
            }
        }
        if(Pass == false)
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
    }
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(PlayerDB[playerid][PlayerWantedVehicleID] != GetPlayerVehicleID(playerid))
        {
            Kick(playerid);
            return 0;
        }
    }
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        new VHicle = GetPlayerVehicleID(playerid);
        if(GetPVarInt(playerid, "WaitTillNextSPW") == 0 && PlayerDB[playerid][adminlvl] < 4)
        {
            new VSP = GetVehicleSpeed(VHicle);
            if(VSP >= 260 && IsVehicleAircraft(GetVehicleModel(VHicle)) == 0)
            {
                new string[128];
                format(string, 128, "[Praneðimas administratoriams] %s(%i) pasiekë 260km/h greitá (%i km/h) praðome patikrinti ðá þaidëjà.", Vardas(playerid),playerid,VSP);
                foreach(new i : Player)
                {
                    if(PlayerDB[i][adminlvl] > 0 && i != playerid)
                    {
                        SendClientMessage(i, -1, string);
                    }
                }
                SetPVarInt(playerid, "WaitTillNextSPW", 2);
            }
        }
		if(VehicleDB[VHicle][VRibotuvas] == 1)
		{
		    static s_iVehicle;

	        if ( g_fSpeedCap[ playerid ] != 0.0)
	        {
	            s_iVehicle = GetPlayerVehicleID( playerid );

	            if ( s_iVehicle )
	            {
	                static
	                    Float:s_fX,
	                    Float:s_fY,
	                    Float:s_fZ,
	                    Float:s_fVX,
	                    Float:s_fVY,
	                    Float:s_fVZ
	                ;

	                GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
	                GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );

	                if ( !IsPlayerInRangeOfPoint( playerid, g_fSpeedCap[ playerid ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
	                {
	                    static
	                        Float:s_fLength
	                    ;

	                    s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );

	                    s_fVX = ( s_fVX / s_fLength ) * g_fSpeedCap[ playerid ];
	                    s_fVY = ( s_fVY / s_fLength ) * g_fSpeedCap[ playerid ];
	                    s_fVZ = ( s_fVZ / s_fLength ) * g_fSpeedCap[ playerid ];

	                    if ( s_iVehicle )
	                        SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
	                }
	            }
	        }
		}
        for(new SpikeID = 0;SpikeID <= GetPlayerPoolSize();SpikeID++)
        {
            if(SpygliaiInfo[SpikeID][SpygliaiPadeti] == true)
            {
                if(IsPlayerInRangeOfPoint(playerid, 3, SpygliaiInfo[SpikeID][SpygliaiX],SpygliaiInfo[SpikeID][SpygliaiY],SpygliaiInfo[SpikeID][SpygliaiZ]))
                {
                    new panels, doors, lights, tires;
                    GetVehicleDamageStatus(VHicle, panels, doors, lights, tires);
                    tires = encode_tires(1, 1, 1, 1);
                    UpdateVehicleDamageStatus(VHicle, panels, doors, lights, tires);
                    break;
                }
            }
        }
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid != GetPlayerDialogID(playerid))
    {
        SendClientMessage(playerid, RAUDONA, "• Privalote pirma uþdaryti prieð tai buvusá dialogà.");
        return 0;
    }
    if(dialogid == -1)
    {
        Kick(playerid);
    }
    ResetPlayerDialogID(playerid);
	new inputdialogtext[1000];
	format(inputdialogtext, 1000, "%s", inputtext);
	strreplace(inputdialogtext, "%", "%%", true);
	if(dialogid == 1)
	{
		if(response)
		{
			if(strlen(inputdialogtext) < 3)
			{
				ErrorMsg(playerid,"• Slaptaþodis pertrumpas.");
	  			new info[400];
	  			format(info, 400, "{ffffff}Sveikas(-a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n", Vardas(playerid));
	  			strcat(info,"{ffffff}Mûsø serverio administracija dþiaugiasi jog pasirinkote bûtent mus, manome jog mûsø serveryje apsiprasite, ir jums patiks èia þaisti !\n");
	  			strcat(info,"{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá privalësite naudoti kiekvienà kartà {7bae39}prisijungiant{ffffff}.");
	  			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "{AFAFAF}Registracija", info, "Registruotis", "Iðeiti");
			}
			else if(strlen(inputdialogtext) > 36)
			{
				ErrorMsg(playerid,"• Slaptaþodis per ilgas.");
			  	new info[400];
			  	format(info, 400, "{ffffff}Sveikas(-a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n", Vardas(playerid));
	 	 		strcat(info,"{ffffff}Mûsø serverio administracija dþiaugiasi jog pasirinkote bûtent mus, manome jog mûsø serveryje apsiprasite, ir jums patiks èia þaisti !\n");
		  		strcat(info,"{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá privalësite naudoti kiekvienà kartà {7bae39}prisijungiant{ffffff}.");
			  	ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "{AFAFAF}Registracija", info, "Registruotis", "Iðeiti");
			}
			else
  			{
				new SQLstring[256];
	 		 	new metai,menuo,diena;
	  			getdate(metai, menuo, diena);
	  			new IPAdresas[20];
	  			GetPlayerIp(playerid, IPAdresas, 20);
				mysql_format(connectionHandle, SQLstring, 256, "INSERT INTO `players` (`id`, `Name`, `Password`,`DayOfRegistration`,`DarboPradziosData`,`IPAddress`) VALUES (NULL, '%e', '%e','%d-%d-%d','%d-%d-%d','%e');", Vardas(playerid),inputdialogtext,metai,menuo,diena,metai,menuo,diena,IPAdresas);
				mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
	  			mysql_format(connectionHandle, SQLstring, 84, "INSERT INTO `pasiekimai`(`Name`) VALUES ('%e');", Vardas(playerid));
	  			mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
				format(SQLstring,256,"Sëkmingai uþsiregistravote á {7bae39}San-Andreas.lt {ffffff}serverá, jûsø ávestas slaptaþodis: {7bae39}%s.",inputdialogtext);
				SendClientMessage(playerid, 0xFFFFFFFF, SQLstring);
	  			new info[400];
	  			strcat(info, "{ffffff}Mûsø serveris reikalauja {7bae39}el.paðto{ffffff} nustatymo, kuris yra labai svarbus paskyros saugumui.\n");
            	strcat(info, "{7bae39}El.paðtas{ffffff} privalo bûti egzistuojantis kitaip jûsø ðansai vykdyti veiksmus susijusius su paskyra maþëja.\n");
            	strcat(info, "{7bae39}Taip pat praradus savo vartotojà, pin kodà, pamirðus slaptaþodá, patvirtinomo kodà viskas bus susisiekama el.paðtu uþtikrinant jûsø paskyros saugumà.");
				ShowPlayerDialog(playerid, 2, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", info, "Gerai", "");
			}
   		}
   		else
   		{
   		    Kick(playerid);
    	}
		return 1;
	}
	if(dialogid == 2)
	{
		if(strlen(inputdialogtext)  == 0)
		{
            new info[400];
            strcat(info, "{ffffff}Mûsø serveris reikalauja {7bae39}el.paðto{ffffff} nustatymo, kuris yra labai svarbus paskyros saugumui.\n");
            strcat(info, "{7bae39}El.paðtas{ffffff} privalo bûti egzistuojantis kitaip jûsø ðansai vykdyti veiksmus susijusius su paskyra maþëja.\n");
            strcat(info, "{7bae39}Taip pat praradus savo vartotojà, pin kodà, pamirðus slaptaþodá, patvirtinomo kodà viskas bus susisiekama el.paðtu uþtikrinant jûsø paskyros saugumà.");
            ShowPlayerDialog(playerid, 2, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", info, "Gerai", "");
		}
		else if(!IsValidEmail(inputdialogtext))
		{
            new info[400];
            strcat(info, "{ffffff}Mûsø serveris reikalauja {7bae39}el.paðto{ffffff} nustatymo, kuris yra labai svarbus paskyros saugumui.\n");
            strcat(info, "{7bae39}El.paðtas{ffffff} privalo bûti egzistuojantis kitaip jûsø ðansai vykdyti veiksmus susijusius su paskyra maþëja.\n");
            strcat(info, "{7bae39}Taip pat praradus savo vartotojà, pin kodà, pamirðus slaptaþodá, patvirtinomo kodà viskas bus susisiekama el.paðtu uþtikrinant jûsø paskyros saugumà.");
            ShowPlayerDialog(playerid, 2, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", info, "Gerai", "");
		}
		else
        {
			new SQLstring[110];
			mysql_format(connectionHandle, SQLstring, 110, "SELECT NULL FROM `players` WHERE `EMAIL` = '%e' LIMIT 1;", inputdialogtext);
			mysql_function_query(connectionHandle,SQLstring,true,"OnPlayerSettingEMail","ds",playerid,inputdialogtext);
		}
		return 1;
	}
	if(dialogid == 3)
	{
        new SQLstring[130];
        if(response)
        {
            mysql_format(connectionHandle, SQLstring, 130, "UPDATE `players` SET `Sex` = '1',`Skin` = '20',`Drabuziai` = '20' WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        }
        else
        {
            mysql_format(connectionHandle, SQLstring, 130, "UPDATE `players` SET `Sex` = '2',`Skin` = '93',`Drabuziai` = '93' WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        }
        //mysql_format(connectionHandle, SQLstring, 130, "UPDATE `playersneedveritifycode` SET `CanBeSent` = '1' WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
        //mysql_function_query( connectionHandle, SQLstring, false, "", "");
        new info[400];
        format(info, 400, "{ffffff}Sveikas - (a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n", Vardas(playerid));
        strcat(info, "{ffffff}Mûsø duomenø bazë aptiko jog ðis vartotojas - (a) jau yra registruotas mûsø serveryje.\n");
        strcat(info, "{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá naudojote paskyros {7bae39}registracijoje{ffffff}.");
		ShowPlayerDialog(playerid, 4, DIALOG_STYLE_PASSWORD, "Prisijungimas", info, "Prisijungti","Iðeiti");
		return 1;
	}
	if(dialogid == 4)
	{
		if(response)
		{
			if(strlen(inputdialogtext) == 0)
			{
                new info[400];
                format(info,400,"{ffffff}Sveikas - (a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n",Vardas(playerid));
                strcat(info,"{ffffff}Mûsø duomenø bazë aptiko jog ðis vartotojas - (a) jau yra registruotas mûsø serveryje.\n");
                strcat(info,"{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá naudojote paskyros {7bae39}registracijoje{ffffff}.");
                ShowPlayerDialog(playerid, 4, DIALOG_STYLE_PASSWORD, "Prisijungimas", info, "Prisijungti","Iðeiti");
			}
			else{
				new SQLstring[200];
				mysql_format(connectionHandle, SQLstring, 200, "SELECT `EMAIL`,`Verified`,`SecurityCodeCheck` FROM `players` WHERE `Name` = '%e' AND `Password` = '%e' LIMIT 1;", Vardas(playerid),inputdialogtext);
				mysql_function_query(connectionHandle,SQLstring,true,"OnPlayerTryingLogin","d",playerid);
			}
		}
		else{
			Kick(playerid);
		}
		return 1;
	}
	if(dialogid == 5)
	{
		if(strlen(inputdialogtext)  == 0)
		{
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", "Áveskite elektroninio paðto adresà\nJis bus reikalingas paskyrai atgauti ir registracijos patvirtinimui.\n{FF0000}Nieko neávesta", "Gerai", "");
		}
		else if(!IsValidEmail(inputdialogtext))
		{
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", "Áveskite elektroninio paðto adresà\nJis bus reikalingas paskyrai atgauti ir registracijos patvirtinimui.\n{FF0000}Blogas elektroninio paðto formatas", "Gerai", "");
		}
		else
		{
			new SQLstring[110];
			mysql_format(connectionHandle, SQLstring, 110, "SELECT NULL FROM `players` WHERE `EMAIL` = '%e' LIMIT 1;", inputdialogtext);
			mysql_function_query(connectionHandle,SQLstring,true,"OnPlayerSettingEMailAReg","ds",playerid,inputdialogtext);
		}
	}
	if(dialogid == 6)
	{
		if(response)
		{
			new SQLstring[130];
			mysql_format(connectionHandle, SQLstring, 130, "UPDATE `players` SET `Sex` = '1',`Skin` = '20',`Drabuziai` = '20' WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
			mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

		}
		else{
			new SQLstring[130];
			mysql_format(connectionHandle, SQLstring, 130, "UPDATE `players` SET `Sex` = '2',`Skin` = '60',`Drabuziai` = '60' WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
			mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
		}
		//Patvirtinimas
		new SQLstring[130];
		mysql_format(connectionHandle, SQLstring, 130, "SELECT `EMAIL`,`VeritifyCode` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
		mysql_function_query(connectionHandle,SQLstring,true,"OnAccountVeritifyAsk","d",playerid);
		return 1;
	}
	if(dialogid == 7)
	{
		if(response)
		{
			if(strlen(inputdialogtext) == 0)
			{
				new SQLstring[130];
				mysql_format(connectionHandle, SQLstring, 130, "SELECT `EMAIL`,`VeritifyCode` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
				mysql_function_query(connectionHandle,SQLstring,true,"OnAccountVeritifyAsk","d",playerid);
			}
			else
			{
				new SQLstring[256];
				mysql_format(connectionHandle, SQLstring, 256, "SELECT `Password`,`Sex`,`EMAIL` FROM `players` WHERE `Name` = '%e' AND `VeritifyCode` = '%e' LIMIT 1;", Vardas(playerid),inputdialogtext);
				mysql_function_query(connectionHandle,SQLstring,true,"OnAccountVeritifyTry","d",playerid);
			}
		}
		else
        {
			Kick(playerid);
		}
		return 1;
	}
	if(dialogid == 8)
	{
		//USED FOR SIMPLE SHOWING OF DIALOGS LIKE SVEIKI ATVYKE AND ETC..
        ResetPlayerDialogID(playerid);
		return 1;
	}
	if(dialogid == 11)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new DialogStr[90];
					format(DialogStr, 90, "Banke jûs turite: {00FF00}%s€", AddPoints(PlayerDB[playerid][MoneyInBank]));
					ShowPlayerDialog(playerid, 12, DIALOG_STYLE_MSGBOX, "{AFAFAF}Balansas", DialogStr, "Gerai","Atgal");
				}
				case 1:
				{
					new DialogStr[90];
					format(DialogStr,90,"Norëdami padëti pinigus áveskite sumà\nKiðenëje turite: %s€",AddPoints(PlayerDB[playerid][MoneyInPocket]));
					ShowPlayerDialog(playerid, 13, DIALOG_STYLE_INPUT, "{AFAFAF}Padëti pinigus", DialogStr, "Padëti", "Atgal");
				}
				case 2:
				{
					new DialogStr[90];
					format(DialogStr,90,"Norëdami paimti pinigus áveskite sumà kurià norite paimti\nBanke turite: %s€",AddPoints(PlayerDB[playerid][MoneyInBank]));
					ShowPlayerDialog(playerid, 14, DIALOG_STYLE_INPUT, "{AFAFAF}Iðimti pinigus", DialogStr, "Iðimti", "Atgal");
				}
				case 3:
				{
					new DialogStr[130];
					format(DialogStr,130,"Norëdami pasipildyti savo telefono saskaità turite ávesti sumà uþ kurià norite pildyti\nBanke turite: %s€",AddPoints(PlayerDB[playerid][MoneyInBank]));
					ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, "{AFAFAF}Telefono saskaitos pildymas", DialogStr, "Pildyti", "Atgal");
				}
			}
		}
		return 1;
	}
	if(dialogid == 12)
	{
		if(response)
		{
			ClearAnimations(playerid,1);
		}
		else
		{
			ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "{AFAFAF}SAN-ANDREAS.LT Bankas", "{FFFFFF}Balansas\n{FFFFFF}Padëti pinigus\n{FFFFFF}Iðimti pinigus\nTelefono sàskaita", "Pasirinkti","Baigti");
		}
		return 1;
	}
	if(dialogid == 13)
	{
		if(response)
		{
			ClearAnimations(playerid,1);
			new amount;
			amount = strval(inputdialogtext);
			if(amount > PlayerDB[playerid][MoneyInPocket])
			{
				ErrorMsg(playerid,"• Ðiai operacijai atlikti neturite pakankamai pinigø!");
			}
			else if(amount <= 0)
			{
				ErrorMsg(playerid,"• Suma kurià norite padëti turi bûti bent 1€!");
			}
			else if(amount <= PlayerDB[playerid][MoneyInPocket])
			{
				PlayerDB[playerid][MoneyInPocket]-=amount;
				PlayerDB[playerid][MoneyInBank]+=amount;
				new OutputStr[70];
				format(OutputStr,70,"• Pinigai padëti á banko sàskaità. Dabar banke turite: %s€",AddPoints(PlayerDB[playerid][MoneyInBank]));
				SendClientMessage(playerid, Bright_YELLOW, OutputStr);
			}
		}
		else
		{
			ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "{AFAFAF}SAN-ANDREAS.LT Bankas", "{FFFFFF}Balansas\n{FFFFFF}Padëti pinigus\n{FFFFFF}Iðimti pinigus\nTelefono sàskaita", "Pasirinkti","Baigti");
		}
	}
	if(dialogid == 14)
	{
		if(response)
		{
			ClearAnimations(playerid,1);
			new amount;
			amount = strval(inputdialogtext);
			if(amount > PlayerDB[playerid][MoneyInBank])
			{
				ErrorMsg(playerid,"• Ðiai operacijai atlikti neturite pakankamai pinigø banko saskaitoje!");
			}
			else if(amount <= 0)
			{
				ErrorMsg(playerid,"• Suma kurià norite paimti turi bûti bent 1€!");
			}
			else if(amount <= PlayerDB[playerid][MoneyInBank])
			{
				PlayerDB[playerid][MoneyInPocket]+=amount;
				PlayerDB[playerid][MoneyInBank]-=amount;
				new OutputStr[80];
				format(OutputStr,80,"• Pinigai nuimti ið banko. Dabar savo saskaitoje turite: %s€",AddPoints(PlayerDB[playerid][MoneyInBank]));
				SendClientMessage(playerid, Bright_YELLOW, OutputStr);
			}
		}
		else
		{
			ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "{AFAFAF}SAN-ANDREAS.LT Bankas", "{FFFFFF}Balansas\n{FFFFFF}Padëti pinigus\n{FFFFFF}Iðimti pinigus\nTelefono sàskaita", "Pasirinkti","Baigti");
		}
	}
	if(dialogid == 15)
	{
		if(response)
		{
			ClearAnimations(playerid,1);
			new amount;
			amount = strval(inputdialogtext);
			if(amount > PlayerDB[playerid][MoneyInBank])
			{
				ErrorMsg(playerid,"• Ðiai operacijai atlikti neturite pakankamai pinigø banko saskaitoje!");
			}
			else if(amount <= 0)
			{
				ErrorMsg(playerid,"• Suma kurià norite panaudoti saskaitos papildymui turi bûti bent 1€!");
			}
			else if(amount <= PlayerDB[playerid][MoneyInBank])
			{
				PlayerDB[playerid][MoneyInBank]-=amount;
				PlayerDB[playerid][PhoneBalance]+=amount;
				new OutputStr[100];
				format(OutputStr, 100, "• Pasipildei  sàskaità uþ %s€", AddPoints(amount));
				SendClientMessage(playerid, Bright_YELLOW, OutputStr);
				format(OutputStr, 100, "• Ðiuo metu jûsø sàskaitoje yra %s€", AddPoints(PlayerDB[playerid][PhoneBalance]));
				SendClientMessage(playerid, Bright_YELLOW, OutputStr);
			}
		}
		else
		{
			ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "{AFAFAF}SAN-ANDREAS.LT Bankas", "{FFFFFF}Balansas\n{FFFFFF}Padëti pinigus\n{FFFFFF}Iðimti pinigus\nTelefono sàskaita", "Pasirinkti","Baigti");
		}
		return 1;
	}
	if(dialogid == 16)
	{
		if(response)
		{
			if(PlayerDB[playerid][MoneyInPocket] >= 500)
			{
				PlayerDB[playerid][MoneyInPocket] -=500;
                PlayerDB[playerid][AfkPoints]= -60;
                PlayerDB[playerid][DrivingTheoryMistakes] = 0;
				ShowPlayerDialog(playerid, 17, DIALOG_STYLE_MSGBOX, "{AFAFAF}1.Klausimas", "Kurioje vaþiuojamosios kelio dalies puseje turite vaþiuoti?", "Deðinëje", "Kairëje");
			}
			else
            {
				ErrorMsg(playerid,"Teorijos egzaminui jûs turite permaþai pinigø. Egzamino kaina - 500€.");
			}
		}
		return 1;
	}
	if(dialogid == 17)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, "{AFAFAF}2.Klausimas", "Kada galima nustoti laikytis KET taisykliø?\nA: pasiekus uþmiestá\nB: taisykliø privaloma laikytis visada", "A","B");
		}
		else
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
            ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, "{AFAFAF}2.Klausimas", "Kada galima nustoti laikytis KET taisykliø?\nA: pasiekus uþmiestá\nB: taisykliø privaloma laikytis visada", "A","B");
		}
	}
	if(dialogid == 18)
	{
		if(response)
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_MSGBOX, "{AFAFAF}3.Klausimas", "Kà reikia padaryti pirmiausia ásëdus i tr.priemonæ?\nA: uþvesti variklá\nB: uþsisegti dirþà", "A","B");
		}
		else{
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_MSGBOX, "{AFAFAF}3.Klausimas", "Kà reikia padaryti pirmiausia ásëdus i tr.priemonæ?\nA: uþvesti variklá\nB: uþsisegti dirþà", "A","B");
		}
	}
	if(dialogid == 19)
	{
		if(response)
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 20, DIALOG_STYLE_MSGBOX, "{AFAFAF}4.Klausimas", "Koks maksimalus greitis yra leistinas miesto ribose?\nA:90 km/h\nB:120 km/h", "A","B");
		}
		else
		{
			ShowPlayerDialog(playerid, 20, DIALOG_STYLE_MSGBOX, "{AFAFAF}4.Klausimas", "Koks maksimalus greitis yra leistinas miesto ribose?\nA:90 km/h\nB:120 km/h", "A","B");
		}
	}
	if(dialogid == 20)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, 21, DIALOG_STYLE_MSGBOX, "{AFAFAF}5.Klausimas", "Kà darysite sugedus maðinai?\nA: ieðkosite gedimo pats,jei gedimo aptikti paèiam nepavyks kviesite mechanikus\nB: praðysite pagalbos ið administracijos", "A","B");
		}
		else
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 21, DIALOG_STYLE_MSGBOX, "{AFAFAF}5.Klausimas", "Kà darysite sugedus maðinai?\nA: ieðkosite gedimo pats,jei gedimo aptikti paèiam nepavyks kviesite mechanikus\nB: praðysite pagalbos ið administracijos", "A","B");
		}
	}
	if(dialogid == 21)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, 22, DIALOG_STYLE_MSGBOX, "{AFAFAF}6.Klausimas", "Nuo kelintos valandos privaloma vaþinëti su ájungtais ðviesiniais þibintais?\nA: visà parà\nB: tamsaus paros meto metu", "A","B");
		}
		else
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 22, DIALOG_STYLE_MSGBOX, "{AFAFAF}6.Klausimas", "Nuo kelintos valandos privaloma vaþinëti su ájungtais ðviesiniais þibintais?\nA: visà parà\nB: tamsaus paros meto metu", "A","B");
		}
	}
	if(dialogid == 22)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, 23, DIALOG_STYLE_MSGBOX, "{AFAFAF}7.Klausimas", "Kà reiðkia trumpinys K.E.T?\nA: Keliø etikos taisyklës\nB: Keliø eismo taisyklës", "A","B");
		}
		else{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 23, DIALOG_STYLE_MSGBOX, "{AFAFAF}7.Klausimas", "Kà reiðkia trumpinys K.E.T?\nA: Keliø etikos taisyklës\nB: Keliø eismo taisyklës", "A","B");
		}
	}

	if(dialogid == 23)
	{
		if(response)
		{
            PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 24, DIALOG_STYLE_MSGBOX, "{AFAFAF}8.Klausimas", "Ar galima vairavimo metu ðnekëti telefonu?\nA: taip\nB: ne", "A","B");
		}
		else
		{
			ShowPlayerDialog(playerid, 24, DIALOG_STYLE_MSGBOX, "{AFAFAF}8.Klausimas", "Ar galima vairavimo metu ðnekëti telefonu?\nA: taip\nB: ne", "A","B");
		}
	}
	if(dialogid == 24)
	{
		if(response)
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 25, DIALOG_STYLE_MSGBOX, "{AFAFAF}9.Klausimas", "Ar privalote praleisti speceliais þenklais paþymëtas tarnybines maðinas,ne ijungtais ðviturëliais?\nA: taip\nB: ne", "A","B");
		}
		else
		{
			ShowPlayerDialog(playerid, 25, DIALOG_STYLE_MSGBOX, "{AFAFAF}9.Klausimas", "Ar privalote praleisti speceliais þenklais paþymëtas tarnybines maðinas,ne ájungtais ðviturëliais?\nA: taip\nB: ne", "A","B");
		}
	}
	if(dialogid == 25)
	{
		if(response)
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
			ShowPlayerDialog(playerid, 26, DIALOG_STYLE_MSGBOX, "{AFAFAF}10.Klausimas", "Kaip elgsitës pesèiajam stovint ant kelio?\nA: vengsite susidurimo,todël apvaþiuosite\nB: bandysite kliutá áveigti jëga", "A","B");

		}
		else
		{
			ShowPlayerDialog(playerid, 26, DIALOG_STYLE_MSGBOX, "{AFAFAF}10.Klausimas", "Kaip elgsitës pesèiajam stovint ant kelio?\nA: vengsite susidurimo,todël apvaþiuosite\nB: bandysite kliutá áveigti jëga", "A","B");
		}
	}
	if(dialogid == 26)
	{
		if(!response)
		{
			PlayerDB[playerid][DrivingTheoryMistakes] +=1;
		}
		if(PlayerDB[playerid][DrivingTheoryMistakes] >= 3)
		{
			new String[90];
			format(String,90,"• Teorijos egzamino jums iðlaikyti nepavyko,nes atsakëte teisingai tik á %i/10 klausimø.",10 - PlayerDB[playerid][DrivingTheoryMistakes]);
			ErrorMsg(playerid,String);
			GameTextForPlayer(playerid, "~r~NEPAVYKO", 3000, 4);
		}
		else
        {
			new String[90];
			format(String,90,"• Sveikiname sëkmingai iðlaikius teorijos egzaminà - atsakëte teisingai á %i/10 klausimø.",10 - PlayerDB[playerid][DrivingTheoryMistakes]);
			SendClientMessage(playerid, ZALIA, String);
			SendClientMessage(playerid, ZALIA, "• Dabar galite atlikti praktiná vairavimo egzaminà aikðtelëje.");
			PlayerDB[playerid][DrivingTheoryMistakes] = 0;
			PlayerDB[playerid][DrivingTheory] = 1;
			GameTextForPlayer(playerid, "~g~ISLAIKYTA", 3000, 4);
		}
	}
	if(dialogid == 27)
	{
		if(PlayerDB[playerid][adminlvl] >= 4)
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 28, DIALOG_STYLE_INPUT, "Laikinos maðinos kurimas", "Áraðykite maðinos Pavadinimà arba ID,norëdami atspawninti maðinà á savo pozicijà.", "Sukurti", "Atgal");
					}
					case 1:
					{
						for(new vid = 0;vid<=GetVehiclePoolSize();vid++)
						{
							if(VehicleDB[vid][VehicleDedicatedForAdmin] == true)
							{
								DestroyVehicle(vid);
								VehicleDB[vid][VehicleDedicatedForAdmin] = false;
							}
						}
						SendClientMessage(playerid, ZALIA, "Visos laikinos maðinos sunaikintos.");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, 31, DIALOG_STYLE_INPUT, "{AFAFAF}Teleportacija á kordinates", "Áveskite kordinates á kurias norite nusikelti.", "Keliauti", "Atgal");
					}
                    case 3:
                    {
                        PlayerDB[playerid][Kanapes] +=500;
                        PlayerDB[playerid][Kokainas] +=500;
                        PlayerDB[playerid][Heroinas] +=500;
                        GameTextForPlayer(playerid, "~p~NARKOMANO ISAKYMAS IVYGDYTAS", 2000, 3);
                        SendClientMessage(playerid, ZALIA, "• Gauta po 500 visø rûðiø narkotikø.");
                    }
                    case 4:
                    {
                        if(IsPlayerInAnyVehicle(playerid))
                        {
                            new vehicleid = GetPlayerVehicleID(playerid);
                            new Model = GetVehicleModel(vehicleid);
                            for(new part = 1000;part<= 1193;part++)
                            {
                                if(IsValidComponentForVehicleModel(Model,part))
                                {
                                    AddVehicleComponent(vehicleid, part);
                                }
                            }
                        }
                    }
                    case 5:
                    {
                        PlayerDB[playerid][MoneyInPocket]+=20000000;
                        SendClientMessage(playerid, ZALIA, "• Gauta 20M á kiðenæ.");
                    }
                    case 6:
                    {
                        cmd_skginklai(playerid,"");
                    }
                    case 7:
                    {
                        cmd_createhouse(playerid,"");
                    }
                    case 8:
                    {
                        cmd_deletehouse(playerid,"");
                    }
                    case 9:
                    {
                        cmd_changeworlds(playerid,"");
                    }
				}
			}
		}
		else
        {
			Ban(playerid);
		}
	}
	if(dialogid == 28)
	{
		if(response)
		{
			new vehiclemod = ReturnVehicleModelID(inputdialogtext);

			if(vehiclemod == 0)
			{
				ErrorMsg(playerid,"Toks maðinos modelis ne egzistuoja!");
				ShowPlayerDialog(playerid, 28, DIALOG_STYLE_INPUT, "Laikinos maðinos kurimas", "Áraðykite maðinos Pavadinimà arba ID,norëdami atspawninti maðinà á savo pozicijà.", "Sukurti", "Atgal");
			}
			else
			{
				new Float:Cords[4];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				GetPlayerFacingAngle(playerid, Cords[3]);
				new vehicleid = CreateVehicle(vehiclemod, Cords[0], Cords[1], Cords[2], Cords[3], 100, 100, -1);
                format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
                VehicleDB[vehicleid][VehicleEngineState] = 0;
                VehicleDB[vehicleid][VehicleLights] = 0;
                VehicleDB[vehicleid][VRibotuvas] = 0;
                VehicleDB[vehicleid][TURGUS] = 0;
                VehicleDB[vehicleid][Rida] = 0;
                VehicleDB[vehicleid][Bendzinas] = 0;
                VehicleDB[vehicleid][Dujos] = 0;
                VehicleDB[vehicleid][FuelType] = 0;
                VehicleDB[vehicleid][VMMasina] = 0;
                VehicleDB[vehicleid][DARBOMASINA] = false;
                VehicleDB[vehicleid][DARBOID] = 0;
                VehicleDB[vehicleid][VehicleOwnerID] = -1;
                format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
                VehicleDB[vehicleid][VehicleNumReg] = 0;
                VehicleDB[vehicleid][VehicleColor1] = 0;
                VehicleDB[vehicleid][VehicleColor2] = 0;
                VehicleDB[vehicleid][VehicleDatabaseID] = -1;
                VehicleDB[vehicleid][VehicleWithOwner] = false;
                VehicleDB[vehicleid][VehicleLocked] = 0;
                VehicleDB[vehicleid][VehicleDauztumas] = 0;
                VehicleDB[vehicleid][DujuIranga] = 0;
                VehicleDB[vehicleid][AdminMasina] = false;
                VehicleDB[vehicleid][VIPMasina] = false;
                VehicleDB[vehicleid][PakrautasMaistas] = false;
                VehicleDB[vehicleid][PakrautasSmelis] = false;
                VehicleDB[vehicleid][PakrautosDetales] = false;
                VehicleDB[vehicleid][PakrautaMasina] = -1;
                VehicleDB[vehicleid][PakrautaElektronika] = false;
                VehicleDB[vehicleid][PripildytaDegalu] = false;


				VehicleDB[vehicleid][VehicleDedicatedForAdmin] = true;
				PutPlayerInVehicleEx(playerid, vehicleid, 0);
                VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[vehiclemod-400];
                LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
                SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
			}
		}
		else{
			cmd_slaptoskomandos(playerid,"");
		}
	}
	if(dialogid == 29)
	{
		if(response)
		{
			PlayerDB[playerid][MoneyInPocket]-=500;
            new vehicleid = GetPlayerVehicleID(playerid);
            switch(random(4))
            {
                case 0:
                {
                    SetVehiclePos(vehicleid, -2069.5205,-106.3263,34.9487);
                    SetVehicleZAngle(vehicleid, 180.1063);
                }
                case 1:
                {
                    SetVehiclePos(vehicleid, -2064.1763,-106.2409,34.9466);
                    SetVehicleZAngle(vehicleid, 181.9633);
                }
                case 2:
                {
                    SetVehiclePos(vehicleid, -2074.5457,-106.5428,34.9507);
                    SetVehicleZAngle(vehicleid, 180);
                }
                case 3:
                {
                    SetVehiclePos(vehicleid, -2079.8252,-106.4727,34.9432);
                    SetVehicleZAngle(vehicleid, 180);
                }
            }
			SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("LetPlayerDrive", 2000, false, "d", playerid);
			SetPlayerRaceCheckpoint(playerid, 0, -2071.8379,-139.2273,34.8202, -2071.7585,-144.5317,34.9432, 2);
			PlayerDB[playerid][RaceCheckPointID] = 1;
            SendClientMessage(playerid, GELTONA,"------------------");
            SendClientMessage(playerid, -1, "Norëdami iðlaikyti ðá egzaminà praðome laikytis jums pateiktø instrukcijø.");
            SendClientMessage(playerid, -1, "Pirmiausia privalote uþsisegti saugos dirþà,tuomet uþvesti maðinà bei ájungti ðviesos þibintus.");
            SendClientMessage(playerid, -1, "Atlikus ðià uþduotá praðome vaþiuoti á pirmà raudonà taðkà.");
            SendClientMessage(playerid, -1, "Saugos dirþà galite uþsisegti panaudojus komandà /dirzas.");
            SendClientMessage(playerid, -1, "Variklá uþvesite panaudojus komandà /variklis.");
            SendClientMessage(playerid, -1, "Ðviesos þibintus ájungsite panaudojus komandà /sviesos.");
            SendClientMessage(playerid, GELTONA,"------------------");
		}
		else
		{
			RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
	}
	if(dialogid == 30)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(response)
			{
				if(PlayerDB[playerid][MoneyInPocket] < 1000)
				{
					ErrorMsg(playerid,"Egzamino treèiojo etapo laikymo kaina 1.000€,taèiau jûs tiek neturite.");
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					RemovePlayerFromVehicle(playerid);
				}
				else
                {
                    PlayerDB[playerid][LaikoMasinosTeisesKartu]+=1;

					PlayerDB[playerid][MoneyInPocket]-=1000;
					SendClientMessage(playerid, ZALIA, "Dabar galite pradëti laikyti vairavimo egzamino paskutinæ dalá.");
					ErrorMsg(playerid,"Nevirðykite leistino greièio,bei sekite nurodymus.");
					PlayerDB[playerid][RaceCheckPointID] = 15;
					SetPlayerRaceCheckpoint(playerid, 0, -2060.1421,-96.7492,34.7905, -2044.8218,-84.8268,34.9456, 2);
				}
			}
			else
			{
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				PlayerDB[playerid][RaceCheckPointID] = 0;
				ErrorMsg(playerid,"Atlikti paskutinæ egzamino dalá galësite bet kada panorëje. Tam reikës álipti á vairavimo mokyklos maðinà.");
			}
		}
	}
	if(dialogid == 31)
	{
		if(response)
		{
			new StringForCoords[60];
			format(StringForCoords, 60, "%s", inputdialogtext);
			new Float:Cords[3];

			strreplace(StringForCoords, ",", " ", true);
			if(!sscanf(StringForCoords, "fff", Cords[0],Cords[1],Cords[2]))
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SetVehiclePos(GetPlayerVehicleID(playerid), Cords[0], Cords[1], Cords[2]);
				}
				else
				{
					SetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
				}
			}
			else{
				ErrorMsg(playerid,"Blogai ávestos kordinatës.");
			}
		}
		else{
			cmd_slaptoskomandos(playerid,"");
		}
	}
	if(dialogid == 32)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas, neturite teisës administruoti rangø.");
                        return 1;
                    }
                }
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }
    			SetPVarInt(playerid, "RangasKuriRedaguoja", listitem+1);
    			new info[300];
    			switch(listitem+1)
    			{
    				case 1:
    				{
    					format(info, 300, "Dabartinis pirmo rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
    				}
    				case 2:
    				{
    					format(info, 300, "Dabartinis antro rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
    				}
    				case 3:
    				{
    					format(info, 300, "Dabartinis treèio rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
    				}
    				case 4:
    				{
    					format(info, 300, "Dabartinis ketvirto rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
    				}
    				case 5:
    				{
    					format(info, 300, "Dabartinis penkto rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
    				}
    				case 6:
    				{
    					format(info, 300, "Dabartinis ðeðtojo rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
    				}
    				case 7:
    				{
    					format(info, 300, "Dabartinis septinto rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
    				}
    				case 8:
    				{
    					format(info, 300, "Dabartinis aðtunto rango pavadinimas: „%s“\n\nRango pavadinimo keitimui áraðykite naujà rango pavadinimà.", DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
    				}
    			}
    			ShowPlayerDialog(playerid, 33, DIALOG_STYLE_INPUT, "{AFAFAF}Rango pavadinimo keitimas", info, "Keisti", "Atðaukti");
            }
		}
	}
	if(dialogid == 33)
	{

        if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
        {
            if(PlayerDB[playerid][Direktorius] <= 0)
            {
                if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                {
                    ErrorMsg(playerid,"• Jûs, kaip pavaduotojas, neturite teisës administruoti rangø.");
                    return 1;
                }
            }
            new JobIDToWorkWith;
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                JobIDToWorkWith = PlayerDB[playerid][Direktorius];
            }
            else
            {
                JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
            }
            if(!response)
            {
                cmd_rangupavadinimai(playerid,"");
            }
            else
            {
                if(!(isnull(inputdialogtext) || strlen(inputdialogtext) <= 3) )
                {
                    new query[144];
                    switch(GetPVarInt(playerid, "RangasKuriRedaguoja"))
                    {
                        case 1:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `1RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 2:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `2RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 3:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `3RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 4:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `4RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 5:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `5RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 6:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `6RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 7:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `7RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas], 30, "%s", inputdialogtext);
                        }
                        case 8:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `8RangoPavadinimas` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas], 30, "%s", inputdialogtext);
                        }
                    }
                }
                cmd_rangupavadinimai(playerid,"");
            }
        }
	}
	if(dialogid == 34)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_DRABUZIAI)
					{
                        if(PlayerDB[playerid][Job] > 0)
                        {
    						PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
    						SetPlayerSkinEx(playerid, PlayerDB[playerid][UniformosID]);
    						SendClientMessage(playerid, ZALIA, "• Persirengëte á savo uniformà.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûs neturite darbinës uniformos.");
                        }
					}
                    else if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_KITI)
                    {
                        PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
                        SetPlayerSkinEx(playerid, PlayerDB[playerid][Drabuziai]);
                        SendClientMessage(playerid, ZALIA, "• Persirengëte á savo paprastus drabuþius.");
                    }
					else
					{
						PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
						SetPlayerSkinEx(playerid, PlayerDB[playerid][Drabuziai]);
						SendClientMessage(playerid, ZALIA, "• Persirengëte á savo paprastus drabuþius.");
					}
				}
				case 1:
				{
					SetPVarInt(playerid, "skinuTipas", SKINSELECT_TYPE_CLOTHESFCreds);
					ShowPlayerSkinsSelect(playerid);
				}
				case 2:
				{
                    ErrorMsg(playerid,"• Laikinai iðjungta.");
                    return 1;

                    /*
                    SetPVarInt(playerid, "skinuTipas", SKINSELECT_TYPE_PAPLUDIMIO);
					ShowPlayerSkinsSelect(playerid);
	   				SelectTextDraw(playerid, 0x00FF00FF);
                    */
				}
			}
		}
	}

	if(dialogid == 36)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, 36, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø parduotuvë", "„9mm“ pistoletas su 500 kulkø - 1500€\n„Desert Eagle“ pistoletas su 250 kulkø - 7500€\nMedþioklinis ðautuvas 50 kulkø - 5000€", "Pirkti", "Atðaukti");
			switch(listitem)
			{
				case 0:
				{
					if(PlayerDB[playerid][MoneyInPocket] >= 1500)
					{
						GivePlayerWeaponEx(playerid, WEAPON_COLT45, 500);
						PlayerDB[playerid][MoneyInPocket]-=1500;
						SendClientMessage(playerid, ZALIA, "• Nusipirkote „9mm“ pistoletà su 500 kulkø.");
						SendClientMessage(playerid, ZALIA, "• Uþ ginklø naudojimà vieðose vietose gresia kalëjimas");
					}
					else
					{
						SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
					}
				}
				case 1:
				{
					if(PlayerDB[playerid][MoneyInPocket] >= 7500)
					{
						GivePlayerWeaponEx(playerid, WEAPON_DEAGLE, 250);
						PlayerDB[playerid][MoneyInPocket]-=7500;
						SendClientMessage(playerid, ZALIA, "• Nusipirkote „Desert Eagle“ pistoletà su 250 kulkø.");
						SendClientMessage(playerid, ZALIA, "• Uþ ginklø naudojimà vieðose vietose gresia kalëjimas");
					}
					else
					{
						SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
					}
				}
				case 2:
				{
					if(PlayerDB[playerid][MoneyInPocket] >= 5000)
					{
						GivePlayerWeaponEx(playerid, WEAPON_RIFLE, 50);
						PlayerDB[playerid][MoneyInPocket]-=5000;
						SendClientMessage(playerid, ZALIA, "• Nusipirkote Medþiokliná ðautuvà su 50 kulkø.");
						SendClientMessage(playerid, ZALIA, "• Uþ ginklø naudojimà vieðose vietose gresia kalëjimas");
					}
					else
					{
						SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
					}
				}
			}
		}
	}
	if(dialogid == 37)
	{
		if(response)
		{
			new info[500];
			strcat(info, "Þaidime ginklas skirtas savigynai arba darbui.\n");
			strcat(info, "Masinis þudymas nëra leidþiamas,uþ tai bûsite pasodintas á kalëjimà ir ið jûsø bus atimta licenzija ir ginklai.\n");
			strcat(info, "Kuo daugiau kartø prarasite licenzijà,tuo daugiau jums ji kainuos.\n");
			strcat(info, "Uþ ðaudymà  pasislëpus arba nuo vaþiuojanèios maðinos,arba pro maðinos langà gresia ban (/bausmes)\n\nLaikysite testà?");
			ShowPlayerDialog(playerid, 38, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ginklø licenzija", info, "Taip", "Ne");
		}
	}
	if(dialogid == 38)
	{
		if(response)
		{
			if(PlayerDB[playerid][MoneyInPocket] >= 2000)
			{
				PlayerDB[playerid][MoneyInPocket] -=2000;
				ShowPlayerDialog(playerid, 39, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ginklø licenzija", "Teorijos testas\n1.Ar serveryje galima ðaudyti nuo pastato pasislëpus?", "Taip", "Ne");
			}
			else{
				SendClientMessage(playerid, RAUDONA, "• Jums nepakanka pinigø ginklø licenzijos ásigyjimui.");
			}
		}
	}
	if(dialogid == 39)
	{
		if(response)
		{
			ErrorMsg(playerid,"Neiðlaikëte ginklø licenzijos teorijos testo.");
			GameTextForPlayer(playerid, "~r~NEPAVYKO", 3000, 3);
		}
		else
		{
			ShowPlayerDialog(playerid, 40, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ginklø licenzija", "Teorijos testas\n2.Ar padësite savo draugui,jai jis pasiûlys uþpulti civilius ar teisësaugos pareigûnus?", "Taip", "Ne");
		}
	}
	if(dialogid == 40)
	{
		if(response)
		{
			ErrorMsg(playerid,"Neiðlaikëte ginklø licenzijos teorijos testo.");
			GameTextForPlayer(playerid, "~r~NEPAVYKO", 3000, 3);
		}
		else
		{
			Saudykla(playerid);
		}
	}
	if(dialogid == 41)
	{
		if(response)
		{
			if(PlayerDB[playerid][GavesBaudosPasiulyma] == true)
			{
				if(IsJobFromLaw(PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job]))
				{
					if(PlayerDB[playerid][MoneyInPocket] >= PlayerDB[playerid][WantedLevel] * 200)
					{
						PlayerDB[playerid][MoneyInPocket]-= PlayerDB[playerid][WantedLevel] * 200;
						PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][MoneyInPocket]+=PlayerDB[playerid][WantedLevel] * 20;
						DarboInformacija[PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job]][DarboFondas]+=PlayerDB[playerid][WantedLevel] * 80;
						new string[128];
						format(string, 128, "• Þaidëjas %s sumokëjo baudà sëkmingai bei jûs gavote %s (10proc. nuo baudos sumos).", Vardas(playerid),AddPoints(PlayerDB[playerid][WantedLevel] * 20));
						SendClientMessage(PlayerDB[playerid][BaudaSkyresPlayeris], ZALIA, string);
						new radio[128];
						format(radio, 128, "[racija] Þaidëjas {0099CC}%s{99D6EB} susimokëjo baudà pareigûnui {0099CC}%s.",Vardas(playerid),Vardas(PlayerDB[playerid][BaudaSkyresPlayeris]));
						SendClientMessageToLaw(0x0099CCFF,radio);
                        PlayerDB[playerid][Surakintas] = false;
                        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                        RemovePlayerAttachedObject(playerid, 0);
                        TogglePlayerControllable(playerid, true);
                        foreach(new i : Player)
						{
                            if(PlayerDB[i][SekimoBusena] == true && PlayerDB[i][SekimoTaikinys] == playerid && IsJobFromLaw(PlayerDB[i][Job]) )
                            {
                                SendClientMessage(i, RAUDONA, "• Jûsø sekamas þaidëjas neteko gaudomumo lygio.");
                            }
						}
						PlayerDB[playerid][WantedLevel] = 0;
                        PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][BaudosTotal] +=1;
                        if(PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][VIP] == 1)
                        {
                            switch(PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(PlayerDB[playerid][BaudaSkyresPlayeris], ZALIA, "Uþ surinktà baudà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(PlayerDB[playerid][BaudaSkyresPlayeris],10);
                        }
                        else
                        {
                            switch(PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(PlayerDB[playerid][BaudaSkyresPlayeris], ZALIA, "Uþ surinktà baudà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(PlayerDB[playerid][BaudaSkyresPlayeris],5);
                        }
					}
					else
					{
						ErrorMsg(playerid,"• Baudai susimokëti jûsø pinigø neuþteko.");
						new string[90];
						format(string, 90, "• Þaidëjas %s neturëjo pakankamai pinigø sumokëti baudai.", Vardas(playerid));
						ErrorMsg(PlayerDB[playerid][BaudaSkyresPlayeris],string);
					}
				}
				else
				{
					ErrorMsg(playerid,"Pareigûnas skyræs baudà atsijungæs.");
				}
			}
			PlayerDB[playerid][GavesBaudosPasiulyma] = false;
		}
		else
		{
			PlayerDB[playerid][GavesBaudosPasiulyma] = false;
			if(IsPlayerConnected(PlayerDB[playerid][BaudaSkyresPlayeris]))
			{
				if(PlayerDB[PlayerDB[playerid][BaudaSkyresPlayeris]][Job] == 1)
				{
					new string[64];
					format(string, 64, "• Þaidëjas %s atsisakë mokëti baudà.", Vardas(playerid));
					ErrorMsg(PlayerDB[playerid][BaudaSkyresPlayeris],string);
				}
			}
		}
        PlayerDB[playerid][GavesBaudosPasiulyma] = false;
	}
	if(dialogid == 42)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }

    			SendClientMessage(playerid, ZALIA, "Pasirinkite rangà nuo kurio norite leisti pasirinktà aprangà.");
    			SetPVarInt(playerid, "SelectedSkinNum", listitem);
    			new info[500];
    			new string[80];
    			format(string, 80, "{FFFFFF}1. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}2. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}3. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}4. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}5. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}6. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}7. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
    			strcat(info, string);
    			format(string, 80, "{FFFFFF}8. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
    			strcat(info, string);
    			ShowPlayerDialog(playerid, 43, DIALOG_STYLE_LIST, "{AFAFAF}Rango nustatymas", info, "Keisti", "Atðaukti");
            }
		}
	}
	if(dialogid == 43)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }

    			if(JobIDToWorkWith == 1)
    			{
    				switch(GetPVarInt(playerid, "SelectedSkinNum"))
    				{
    					case 0:
    					{
    						PoliceSettings[SKIN280_RANGAS] = listitem+1;
    					}
    					case 1:
    					{
    						PoliceSettings[SKIN281_RANGAS] = listitem+1;
    					}
    					case 2:
    					{
    						PoliceSettings[SKIN282_RANGAS] = listitem+1;
    					}
    					case 3:
    					{
    						PoliceSettings[SKIN283_RANGAS] = listitem+1;
    					}
    					case 4:
    					{
    						PoliceSettings[SKIN288_RANGAS] = listitem+1;
    					}
    					case 5:
    					{
    						PoliceSettings[SKIN284_RANGAS] = listitem+1;
    					}
    				}
    				SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
    				SavePoliceSettings();
    			}
                else if(JobIDToWorkWith == 2)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            HPSettings[SKIN274_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            HPSettings[SKIN275_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            HPSettings[SKIN70_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveHospitalSettings();
                }
                else if(JobIDToWorkWith == 4)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            TaksiFSettings[SKIN187_RANGAS2F] = listitem+1;
                        }
                        case 1:
                        {
                            TaksiFSettings[SKIN240_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            TaksiFSettings[SKIN189_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveTaksiFSettings();
                }
                else if(JobIDToWorkWith == 5)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            MechanikuSettings[Mech50SKIN_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            MechanikuSettings[Mech8SKIN_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            MechanikuSettings[Mech42SKIN_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveMechanikuSettings();
                }
                else if(JobIDToWorkWith == 7)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            LuccheseMafiaSettings[Lucchese124SKIN_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            LuccheseMafiaSettings[Lucchese125SKIN_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            LuccheseMafiaSettings[Lucchese126SKIN_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            LuccheseMafiaSettings[Lucchese113SKIN_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveLuccheseSettings();
                }
                else if(JobIDToWorkWith == 8)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            GenoveseMafiaSettings[Genovese121SKIN_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            GenoveseMafiaSettings[Genovese122SKIN_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            GenoveseMafiaSettings[Genovese123SKIN_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            GenoveseMafiaSettings[Genovese98SKIN_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveGenoveseSettings();
                }
                else if(JobIDToWorkWith == 10)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            RadistaiSettings[RadistaiSKIN184_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            RadistaiSettings[RadistaiSKIN185_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            RadistaiSettings[RadistaiSKIN289_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveRadistaiSettings();
                }
                else if(JobIDToWorkWith == 11)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            SPDSettings[SPDSKIN164_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            SPDSettings[SPDSKIN165_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            SPDSettings[SPDSKIN294_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            SPDSettings[SPDSKIN303_RANGAS] = listitem+1;
                        }
                        case 4:
                        {
                            SPDSettings[SPDSKIN304_RANGAS] = listitem+1;
                        }
                        case 5:
                        {
                            SPDSettings[SPDSKIN305_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveSPDSettings();
                }
                else if(JobIDToWorkWith == 21)
                {
                    switch(GetPVarInt(playerid, "SelectedSkinNum"))
                    {
                        case 0:
                        {
                            FURISTAISettings[F44SKIN_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            FURISTAISettings[F73SKIN_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            FURISTAISettings[F128SKIN_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            FURISTAISettings[F183SKIN_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveFURISTAISettings();
                }
            }
		}
		cmd_srangai(playerid,"");
	}
	if(dialogid == 44)
	{
		if(response)
		{
			if(PlayerDB[playerid][Direktorius] > 0)
			{
				foreach(new i : Player)
				{
					if(PlayerDB[i][Job] == PlayerDB[playerid][Direktorius])
					{
						SendClientMessage(i, 0x0099CCFF, "[racija] Direktorius iðmëtë visus darbuotojus ið darbo.");
					}
				}
				foreach(new i : Player)
				{
					if(PlayerDB[i][Job] == PlayerDB[playerid][Direktorius])
					{
						PlayerDB[i][Job] = 0;
						PlayerDB[i][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
						PlayerDB[i][UniformosID] = 0;
                        PlayerDB[i][JobWarnings] = 0;
						SetPlayerSkinEx(i, PlayerDB[i][Drabuziai]);
						GameTextForPlayer(i, "~r~ISMESTAS IS DARBO", 3000, 3);
						ErrorMsg(i,"Jûs buvote iðmestas ið darbo.");
						PlayerDB[i][DarboSutartiesPabaiga] = 0;
						SavePlayerData(i);
					}
				}
				new query[500];
				mysql_format(connectionHandle, query, 500, "UPDATE `players` SET `Job` = '0',`AprangosTipas` = '%i',`DarboSutartiesPabaiga` = '0',`JobWarnings` = '0',`Skin` = `Drabuziai`,`UniformosID` = '0' WHERE `Job` = '%i';", PLAYER_CLOTHES_DRABUZIAI,PlayerDB[playerid][Direktorius]);
				mysql_function_query(connectionHandle,query,false,"SendQuery","");
				SendClientMessage(playerid, ZALIA, "Visi jûsø darbuotojai sëkmingai iðmesti ið darbo.");
			}
		}
	}
	if(dialogid == 45)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }

    			SendClientMessage(playerid, ZALIA, "Pasirinkite rangà nuo kurio norite leisti pasirinktà transporto priemonæ.");
    			SetPVarInt(playerid, "SelectedVNum", listitem);
    			new info[500];
    			new string[70];
    			format(string, 70, "{FFFFFF}1. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}2. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}3. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}4. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}5. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}6. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}7. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}8. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
    			strcat(info, string);
    			ShowPlayerDialog(playerid, 46, DIALOG_STYLE_LIST, "{AFAFAF}Rango nustatymas", info, "Keisti", "Atðaukti");
            }
		}
	}
	if(dialogid == 46)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }
    			if(JobIDToWorkWith == 1)
    			{
    				switch(GetPVarInt(playerid, "SelectedVNum"))
    				{
    					case 0:
    					{
    						PoliceSettings[Vehicle497] = listitem+1;
    					}
    					case 1:
    					{
    						PoliceSettings[Vehicle597] = listitem+1;
    					}
    					case 2:
    					{
    						PoliceSettings[Vehicle523] = listitem+1;
    					}
    					case 3:
    					{
    						PoliceSettings[Vehicle599] = listitem+1;
    					}
    					case 4:
    					{
    						PoliceSettings[Vehicle430] = listitem+1;
    					}
    				}
    				SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
    				SavePoliceSettings();
    			}
                else if(JobIDToWorkWith == 2)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            HPSettings[VEHICLE416_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            HPSettings[VEHICLE490_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            HPSettings[VEHICLE487_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            HPSettings[VEHICLE452_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveHospitalSettings();
                }
                else if(JobIDToWorkWith == 4)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            TaksiFSettings[Vehicle2F420] = listitem+1;
                        }
                        case 1:
                        {
                            TaksiFSettings[Vehicle2F560] = listitem+1;
                        }
                        case 2:
                        {
                            TaksiFSettings[Vehicle2F438] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveTaksiFSettings();
                }
                else if(JobIDToWorkWith == 5)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            MechanikuSettings[Mech525Vehicle_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            MechanikuSettings[Mech602Vehicle_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveMechanikuSettings();
                }
                else if(JobIDToWorkWith == 7)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] = listitem+1;
                        }
                        case 4:
                        {
                            LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveLuccheseSettings();
                }
                else if(JobIDToWorkWith == 8)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveGenoveseSettings();
                }
                else if(JobIDToWorkWith == 9)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            ARASSettings[ARASVEHICLE601_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            ARASSettings[ARASVEHICLE541_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            ARASSettings[ARASVEHICLE427_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            ARASSettings[ARASVEHICLE528_RANGAS] = listitem+1;
                        }
                        case 4:
                        {
                            ARASSettings[ARASVEHICLE497_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveARASSettings();
                }
                else if(JobIDToWorkWith == 10)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            RadistaiSettings[RadistaiVEHICLE488_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            RadistaiSettings[RadistaiVEHICLE516_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            RadistaiSettings[RadistaiVEHICLE582_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveRadistaiSettings();
                }
                else if(JobIDToWorkWith == 11)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            SPDSettings[SPDVEHICLE411_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            SPDSettings[SPDVEHICLE451_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            SPDSettings[SPDVEHICLE402_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            SPDSettings[SPDVEHICLE415_RANGAS] = listitem+1;
                        }
                        case 4:
                        {
                            SPDSettings[SPDVEHICLE522_RANGAS] = listitem+1;
                        }
                        case 5:
                        {
                            SPDSettings[SPDVEHICLE579_RANGAS] = listitem+1;
                        }
                        case 6:
                        {
                            SPDSettings[SPDVEHICLE560_RANGAS] = listitem+1;
                        }
                        case 7:
                        {
                            SPDSettings[SPDVEHICLE426_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveSPDSettings();
                }
                else if(JobIDToWorkWith == 21)
                {
                    switch(GetPVarInt(playerid, "SelectedVNum"))
                    {
                        case 0:
                        {
                            FURISTAISettings[F435Vehicle_RANGAS] = listitem+1;
                        }
                        case 1:
                        {
                            FURISTAISettings[F591Vehicle_RANGAS] = listitem+1;
                        }
                        case 2:
                        {
                            FURISTAISettings[F515Vehicle_RANGAS] = listitem+1;
                        }
                        case 3:
                        {
                            FURISTAISettings[F443Vehicle_RANGAS] = listitem+1;
                        }
                        case 4:
                        {
                            FURISTAISettings[F584Vehicle_RANGAS] = listitem+1;
                        }
                    }
                    SendClientMessage(playerid, ZALIA, "Sëkmingai atnaujinote informacija.");
                    SaveFURISTAISettings();
                }
            }
		}
		cmd_mrangai(playerid,"");
	}
	if(dialogid == 47)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(PlayerDB[playerid][OwnedVehicle1] <= 0)
					{
                       SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}pirmasis {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
					}
					else
					{
						if(PlayerDB[playerid][MoneyInPocket] >= 500)
						{
							PlayerDB[playerid][MoneyInPocket]-=500;
							foreach(new i : Player)
							{
								if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle1]))
								{
									RemovePlayerFromVehicle(i);
									new Float:Cords[3];
									GetPlayerPos(i, Cords[0],Cords[1],Cords[2]);
									SetPlayerPos(i, Cords[0],Cords[1],Cords[2]);
								}
							}
							SetVehiclePos(PlayerDB[playerid][OwnedVehicle1], -2631.0364,-54.8563,4.4831);
							SetVehicleZAngle(PlayerDB[playerid][OwnedVehicle1], 0);
							SendClientMessage(playerid, ZALIA, "• Maðina atkeldinta uþ 500€.Maðinà rasite ðioje aikðtelëje.");
						}
						else
						{
							new string[100];
							format(string, 100, "• Nepakanka pinigø maðinos atkelimui (turi %d €, reikia 500 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],500 - PlayerDB[playerid][MoneyInPocket]);
							SendClientMessage(playerid, RAUDONA, string);
						}
					}
				}
				case 1:
				{
					if(PlayerDB[playerid][OwnedVehicle2] <= 0)
					{
                       SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}antras {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
					}
					else
					{
						if(PlayerDB[playerid][MoneyInPocket] >= 500)
						{
							PlayerDB[playerid][MoneyInPocket]-=500;
							foreach(new i : Player)
							{
								if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle1]))
								{
									RemovePlayerFromVehicle(i);
									new Float:Cords[3];
									GetPlayerPos(i, Cords[0],Cords[1],Cords[2]);
									SetPlayerPos(i, Cords[0],Cords[1],Cords[2]);
								}
							}
							SetVehiclePos(PlayerDB[playerid][OwnedVehicle2], -2631.0364,-54.8563,4.4831);
							SetVehicleZAngle(PlayerDB[playerid][OwnedVehicle2], 0);
							SendClientMessage(playerid, ZALIA, "• Maðina atkeldinta uþ 500€.Maðinà rasite ðioje aikðtelëje.");
						}
						else
						{
							new string[100];
							format(string, 100, "• Nepakanka pinigø maðinos atkelimui (turi %d €, reikia 500 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],500 - PlayerDB[playerid][MoneyInPocket]);
							SendClientMessage(playerid, RAUDONA, string);
						}
					}
				}
			}
		}
	}
	if(dialogid == 48)
	{
		if(response)
		{
            switch(listitem)
            {
                case 0:
                {
                    ShowPlayerDialog(playerid, 52, DIALOG_STYLE_MSGBOX, "{AFAFAF}Paslaugos", "Pasirinkite,kurià maðinà norësite uþregistruoti.", "1", "2");
                }
                case 1:
                {
                    ShowPlayerDialog(playerid, 54, DIALOG_STYLE_MSGBOX, "{AFAFAF}Paslaugos", "Pasirinkite,kurioje norite montuoti dujø árangà.", "1", "2");
                }
            }
		}
	}

    if(dialogid == 50)
    {
        if(response)
        {
            if(IsPlayerConnected(GetPVarInt(playerid, "Itariamasis")))
            {
                new id = GetPVarInt(playerid, "Itariamasis");
                switch(listitem)
                {
                    case 0:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Non RP“ ", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 10 þvaigþdutes(-èiø) uþ „Non RP“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"• Savo paskutinius átarimus uþ kà gavote galite paþiûrëti paraðe /itarimai.");
                        PlayerDB[id][WantedLevel]+=10;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Non RP“', '10');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 1:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Masinis þudymas(DM)“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 15 þvaigþdutes(-èiø) uþ „Masinis þudymas(DM)“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"• Savo paskutinius átarimus uþ kà gavote galite paþiûrëti paraðe /itarimai.");
                        PlayerDB[id][WantedLevel]+=15;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Masinis þudymas(DM)“', '15');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 2:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Tyèinis ESC laikymas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 10 þvaigþdutes(-èiø) uþ „Tyèinis ESC laikymas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=10;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Tyèinis ESC laikymas“', '10');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 3:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Relog“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s pastebëjo, tyèiná RELOG!", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        new MessageToPublic[128];
                        format(MessageToPublic, 128, "Pareigûnas %s átarë jus 20 þvaigþdutes(-èiø) uþ „Relog“", Vardas(playerid),Vardas(id));
                        PlayerDB[id][WantedLevel]+=20;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Relog“', '20');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 4:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Bëgimas nuo teisësaugininko“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s pastebëjo, kad jûs begote nuo jo!", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        new MessageToPublic[128];
                        format(MessageToPublic, 128, "Pareigûnas %s átarë jus 7 þvaigþdutes(-èiø) uþ „Bëgimas nuo teisësaugininko“", Vardas(playerid),Vardas(id));
                        PlayerDB[id][WantedLevel]+=7;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %s átarë uþ „Bëgimas nuo teisësaugininko“', '7');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 5:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Teisësaugos neklausymas/áþeidinëjimas/uþpuolimas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 8 þvaigþdutes(-èiø) uþ „Teisësaugos neklausymas/áþeidinëjimas/uþpuolimas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=8;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Teisësaugos neklausymas/áþeidinëjimas/uþpuolimas“', '8');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 6:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Avarijos kaltininkas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 5 þvaigþdutes(-èiø) uþ „Avarijos kaltininkas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=5;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Avarijos kaltininkas“', '5');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 7:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Civilio uþpuolimas/áþeidinëjimas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 5 þvaigþdutes(-èiø) uþ „Civilio uþpuolimas/áþeidinëjimas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=5;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Civilio uþpuolimas/áþeidinëjimas', '5');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 8:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Ginklo naudojimas/rodymas vieðoje vietoje“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 4 þvaigþdutes(-èiø) uþ „Ginklo naudojimas/rodymas vieðoje vietoje“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=4;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Ginklo naudojimas/rodymas vieðoje vietoje', '4');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 9:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Kyðio siûlymas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 4 þvaigþdutes(-èiø) uþ „Kyðio siûlymas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=4;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Kyðio siûlymas“', '4');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 10:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Valstybinës turto niokojimas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 4 þvaigþdutes(-èiø) uþ „Valstybinës turto niokojimas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=4;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Valstybinës turto niokojimas“', '4');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 11:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Vaþiavimas be ðalmo/dirþo/technikinës(nuosavos)“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 5 þvaigþdutes(-èiø) uþ „Vaþiavimas be ðalmo/dirþo/technikinës(nuosavos)“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=5;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Vaþiavimas be ðalmo/dirþo/technikinës(nuosavos)', '5');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 12:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Narkotiniø medþiagø vartojimas/platinimas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 6 þvaigþdutes(-èiø) uþ „Narkotiniø medþiagø vartojimas/platinimas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=6;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Narkotiniø medþiagø vartojimas/platinimas“', '6');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 13:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Narkotiniø medþiagø turëjimas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 3 þvaigþdutes(-èiø) uþ „Narkotiniø medþiagø turëjimas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=3;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Narkotiniø medþiagø turëjimas“', '3');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 14:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Trukdymas teisësaugai dirbti“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 5 þvaigþdutes(-èiø) uþ „Trukdymas teisësaugai dirbti“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=5;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Trukdymas teisësaugai dirbti“', '5');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 15:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Transporto priemonës dauþymas“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 3 þvaigþdutes(-èiø) uþ „Transporto priemonës dauþymas“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=3;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Transporto priemonës dauþymas“', '3');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                    case 16:
                    {
                        new RACIJA[128];
                        format(RACIJA, 128, "[racija] %s áspëjo: {FFFFFF}%s uþ „Vaþiavimas be ðviesø/teisiø“", Vardas(playerid),Vardas(id));
                        SendClientMessageToLaw(0x66CCFFFF,RACIJA);
                        ErrorMsg(playerid,"• Jeigu uþdëjote átarima per klaidà, panaudokite komandà /unita.");
                        new MessageToPlayer[128];
                        format(MessageToPlayer, 128, "Pareigûnas %s átarë jus 5 þvaigþdutes(-èiø) uþ „Vaþiavimas be ðviesø/teisiø“", Vardas(playerid));
                        ErrorMsg(id,MessageToPlayer);
                        ErrorMsg(id,"Paþiûrëk paskutinius átarimus su /itarimai.");
                        PlayerDB[id][WantedLevel]+=5;
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', 'Pareigûnas %e átarë uþ „Vaþiavimas be ðviesø/teisiø“', '5');", Vardas(id),Vardas(playerid));
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    }
                }
                new info[1000];
                strcat(info,"» Vaþiavimas nesilaikius KET (10 átarimo lygio)\n");
                strcat(info,"» Masinis þudymas(DM) (15 átarimo lygio)\n");
                strcat(info,"» Tyèinis ESC laikymas (10 átarimo lygio)\n");
                strcat(info,"» Relog (20 átarimo lygio)\n");
                strcat(info,"» Bëgimas nuo teisësaugininko (7 átarimo lygio)\n");
                strcat(info,"» Teisësaugos neklausymas/áþeidinëjimas/uþpuolimas (8 átarimo lygio)\n");
                strcat(info,"» Avarijos kaltininkas (5 átarimo lygio)\n");
                strcat(info,"» Civilio uþpuolimas/áþeidinëjimas (5 átarimo lygio)\n");
                strcat(info,"» Ginklo naudojimas/rodymas vieðoje vietoje (4 átarimo lygio)\n");
                strcat(info,"» Kyðio siûlymas (4 átarimo lygio)\n");
                strcat(info,"» Valstybinës turto niokojimas (4 átarimo lygio)\n");
                strcat(info,"» Vaþiavimas be ðalmo/dirþo/technikinës(nuosavos) (5 átarimo lygio)\n");
                strcat(info,"» Narkotiniø medþiagø vartojimas/platinimas (6 átarimo lygio)\n");
                strcat(info,"» Narkotiniø medþiagø turëjimas (3 átarimo lygio)\n");
                strcat(info,"» Trukdymas teisësaugai dirbti (5 átarimo lygio)\n");
                strcat(info,"» Transporto priemonës dauþymas (3 átarimo lygio)\n");
                strcat(info,"» Vaþiavimas be ðviesø/teisiø (5 átarimo lygio)");
                ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "{AFAFAF}Átarimo lygio davimas", info, "Rinktis", "Atðaukti");
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas atsijungæs.");
            }
        }
    }


    if(dialogid == 51)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerDB[playerid][Kanapes] == 0)
                    {
                        ErrorMsg(playerid,"• Neturi kanapiø.");
                    }
                    else if(PlayerDB[playerid][Kanapes] > 0)
                    {
                        if(PlayerDB[playerid][NegaliRukytiKanapiu] > 0)
                        {
                            ErrorMsg(playerid,"• Palukëk, vis dar negali vartoti.");
                        }
                        else
                        {
                            PlayerDB[playerid][NegaliRukytiKanapiu] = 10;
                            PlayerDB[playerid][Kanapes]-=1;
                            SetTimerEx("NarkomanoEfektai", 3000, false, "dd", playerid,0);
                            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
                            SendClientMessage(playerid, -1, "• Mëgaujates nuostabiu kanapiø skoniu.");
                            GameTextForPlayer(playerid, "~r~K~g~A~y~N~r~A~g~P~y~E~r~S", 3000, 3);
                            PlayerDB[playerid][GaliSuveiktiNark] = true;
                        }
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][Heroinas] == 0)
                    {
                            ErrorMsg(playerid,"• Neturi heroino.");
                    }
                    else
                    {
                        new Sanaudos;
                        switch(PlayerDB[playerid][HeroinoPriklausomybesLygis])
                        {
                            case 0:
                            {
                                Sanaudos = 15;
                            }
                            case 10:
                            {
                                Sanaudos = 18;
                            }
                            case 20:
                            {
                                Sanaudos = 21;
                            }
                            case 30:
                            {
                                Sanaudos = 24;
                            }
                            case 40:
                            {
                                Sanaudos = 27;
                            }
                            case 50:
                            {
                                Sanaudos = 30;
                            }
                            case 60:
                            {
                                Sanaudos = 33;
                            }
                            case 70:
                            {
                                Sanaudos = 36;
                            }
                            case 80:
                            {
                                Sanaudos = 39;
                            }
                            case 90:
                            {
                                Sanaudos = 42;
                            }
                            case 100:
                            {
                                Sanaudos = 45;
                            }
                        }
                        if(Sanaudos > PlayerDB[playerid][Heroinas])
                        {
                            ErrorMsg(playerid,"• Tau reikia daugiau heroino.");
                        }
                        else
                        {
                            if(PlayerDB[playerid][NegaliVartotiHeroino] > 0)
                            {
                                ErrorMsg(playerid,"• Negali vartoti heroino taip tankiai.");
                            }
                            else
                            {
                                PlayerDB[playerid][Heroinas]-=Sanaudos;
                                if(PlayerDB[playerid][HeroinoPriklausomybesLygis] != 100)
                                {
                                    PlayerDB[playerid][HeroinoPriklausomybesLygis] += 10;
                                }
                                SendClientMessage(playerid, -1, "• Susileidai heroino..");
                                PlayerDB[playerid][NegaliVartotiHeroino] = 20;
                                SetTimerEx("NarkomanoEfektai", 3000, false, "dd", playerid,1);
                                GameTextForPlayer(playerid, "~r~H~g~E~y~R~r~O~g~I~y~N~r~A~g~S", 3000, 3);
                                PlayerDB[playerid][GaliSuveiktiNark] = true;
                            }
                        }
                    }
                }
               case 2:
                {
                    if(PlayerDB[playerid][Kokainas] == 0)
                    {
                            ErrorMsg(playerid,"• Neturi kokaino.");
                    }
                    else
                    {
                        new Sanaudos;
                        switch(PlayerDB[playerid][KokainoPriklausomybesLygis])
                        {
                            case 0:
                            {
                                Sanaudos = 10;
                            }
                            case 10:
                            {
                                Sanaudos = 13;
                            }
                            case 20:
                            {
                                Sanaudos = 16;
                            }
                            case 30:
                            {
                                Sanaudos = 19;
                            }
                            case 40:
                            {
                                Sanaudos = 22;
                            }
                            case 50:
                            {
                                Sanaudos = 25;
                            }
                            case 60:
                            {
                                Sanaudos = 28;
                            }
                            case 70:
                            {
                                Sanaudos = 31;
                            }
                            case 80:
                            {
                                Sanaudos = 34;
                            }
                            case 90:
                            {
                                Sanaudos = 37;
                            }
                            case 100:
                            {
                                Sanaudos = 40;
                            }
                        }
                        if(Sanaudos > PlayerDB[playerid][Kokainas])
                        {
                            ErrorMsg(playerid,"• Tau reikia daugiau kokaino.");
                        }
                        else
                        {
                            if(PlayerDB[playerid][NegaliVartotiKokaino] > 0)
                            {
                                ErrorMsg(playerid,"• Negali vartoti kokaino taip tankiai.");
                            }
                            else
                            {
                                PlayerDB[playerid][Kokainas]-=Sanaudos;
                                if(PlayerDB[playerid][KokainoPriklausomybesLygis] != 100)
                                {
                                    PlayerDB[playerid][KokainoPriklausomybesLygis] += 10;
                                }
                                SendClientMessage(playerid, -1, "• Átraukiai kokaino..");
                                PlayerDB[playerid][NegaliVartotiKokaino] = 80;
                                SetTimerEx("NarkomanoEfektai", 3000, false, "dd", playerid,2);
                                GameTextForPlayer(playerid,"~r~K~g~O~y~K~r~A~g~I~y~N~r~A~g~S", 3000, 3);
                                PlayerDB[playerid][GaliSuveiktiNark] = true;
                            }
                        }
                    }
                }
            }
        }
    }
    if(dialogid == 52)
    {
        if(response)
        {
            if(PlayerDB[playerid][OwnedVehicle1] > 0)
            {
                new vehicleid = PlayerDB[playerid][OwnedVehicle1];
                if(GetVehicleDistanceFromPoint(vehicleid, -1976.9523,887.3963,45.9097) > 3 && GetVehicleDistanceFromPoint(vehicleid, -1977.5437,880.6337,45.9114) > 3)
                {
                    ErrorMsg(playerid,"Jûsø maðina yra per toli.");
                }
                else
                {
                    if(PlayerDB[playerid][MoneyInPocket] < 1000)
                    {
                        new string[128];
                        format(string, 128, "• Nepakanka pinigø registravimo paslaugai (turi %d €, reikia 1000 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],1000 - PlayerDB[playerid][MoneyInPocket]);
                        SendClientMessage(playerid, RAUDONA, string);
                    }
                    else
                    {

                        if(VehicleDB[vehicleid][VehicleNumReg] == 0)
                        {
                            new info[300];
                            new plate[7];
                            format(plate, 7, "%s", VehicleNamePlateGenerator());
                            format(info, 300, "Jûsø pirmos maðinos pasas:\nModelis: %s\nNumeris: %s\nSavininkas: %s", vNames[GetVehicleModel(vehicleid) - 400],plate,Vardas(playerid));
                            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Maðinos pasas", info, "Gerai","");
                            PlayerDB[playerid][MoneyInPocket] -= 1000;
                            new query[400];
                            mysql_format(connectionHandle, query, 400, "UPDATE `nuosavostrpriemones` SET `RegistruotiNumeriai` = '1',`Numeriai` = '%e' WHERE `ID` = '%i' LIMIT 1;", plate,VehicleDB[vehicleid][VehicleDatabaseID]);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            VehicleDB[vehicleid][VehicleNumReg] = 1;
                            format(VehicleDB[vehicleid][VehicleNumbers], 8, "%s", plate);
                            SetVehicleNumberPlate(vehicleid, plate);
                            ReStreamVehicle(vehicleid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Maðina jau uþregistruota.");
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs neturite pirmos maðinos arba ji sudauþyta. Pabandykite /remont");
            }
        }
        else
        {
           if(PlayerDB[playerid][OwnedVehicle2] > 0)
            {
                new vehicleid = PlayerDB[playerid][OwnedVehicle2];
                if(GetVehicleDistanceFromPoint(vehicleid, -1976.9523,887.3963,45.9097) > 3 && GetVehicleDistanceFromPoint(vehicleid, -1977.5437,880.6337,45.9114) > 3)
                {
                    ErrorMsg(playerid,"Jûsø maðina yra per toli.");
                }
                else
                {
                    if(PlayerDB[playerid][MoneyInPocket] < 1000)
                    {
                        new string[105];
                        format(string, 105, "• Nepakanka pinigø registravimo paslaugai (turi %d €, reikia 1000 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],1000 - PlayerDB[playerid][MoneyInPocket]);
                        SendClientMessage(playerid, RAUDONA, string);
                    }
                    else
                    {

                        if(VehicleDB[vehicleid][VehicleNumReg] == 0)
                        {
                            new info[300];
                            new plate[7];
                            format(plate, 7, "%s", VehicleNamePlateGenerator());
                            format(info, 300, "Jûsø antros maðinos pasas:\nModelis: %s\nNumeris: %s\nSavininkas: %s", vNames[GetVehicleModel(vehicleid) - 400],plate,Vardas(playerid));
                            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Maðinos pasas", info, "Gerai","");
                            PlayerDB[playerid][MoneyInPocket] -= 1000;
                            new query[400];
                            mysql_format(connectionHandle, query, 400, "UPDATE `nuosavostrpriemones` SET `RegistruotiNumeriai` = '1',`Numeriai` = '%e' WHERE `ID` = '%i' LIMIT 1;", plate,VehicleDB[vehicleid][VehicleDatabaseID]);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            VehicleDB[vehicleid][VehicleNumReg] = 1;
                            format(VehicleDB[vehicleid][VehicleNumbers], 8, "%s", plate);
                            SetVehicleNumberPlate(vehicleid, plate);
                            ReStreamVehicle(vehicleid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Maðina jau uþregistruota.");
                        }
                    }
                }
            }
            else
            {
               SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}antras {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
            }
        }
    }
    if(dialogid == 53)
    {
        new AdministratoriausID = GetPVarInt(playerid, "GetOfferer");
        if(IsPlayerConnected(AdministratoriausID) && PlayerDB[AdministratoriausID][adminlvl] >= 2)
        {
            if(response)
            {
                SetPlayerArmedWeapon(playerid, 0);
                new Float:PlayerPreviousPos[3];
                GetPlayerPos(playerid, PlayerPreviousPos[0],PlayerPreviousPos[1],PlayerPreviousPos[2]);
                new PlayerPreviousVirtualWorld = GetPlayerVirtualWorld(playerid);
                new PlayerPreviousInterior = GetPlayerInterior(playerid);
                new Float:Cords[3];
                new AdminoVW,AdminoI;
                AdminoVW = GetPlayerVirtualWorld(AdministratoriausID);
                AdminoI = GetPlayerInterior(AdministratoriausID);
                SetPlayerVirtualWorld(playerid, AdminoVW);
                SetPlayerInterior(playerid, AdminoI);
                GetPlayerPos(AdministratoriausID, Cords[0], Cords[1], Cords[2]);
                SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                SendClientMessage(AdministratoriausID, ZALIA, "• Þaidëjas sutiko bûti atkeltas.");
                new string[93];
                format(string, 93, "• Jûs sutikote bûti atkeltas prie administratoriaus %s", Vardas(AdministratoriausID));
                SendClientMessage(playerid, ZALIA, string);
                new LabelText[100];
                format(LabelText, 100, "Administratorius %s atkëlë þaidëjà %s", Vardas(AdministratoriausID),Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, PlayerPreviousPos[0],PlayerPreviousPos[1],PlayerPreviousPos[2], 25.0,PlayerPreviousVirtualWorld,PlayerPreviousInterior, 0 ,25);
                format(LabelText, 100, "Administratorius %s atkëlë þaidëjà %s", Vardas(AdministratoriausID),Vardas(playerid));
                GetPlayerPos(AdministratoriausID, Cords[0], Cords[1], Cords[2]);
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 25.0,AdminoVW,AdminoI, 0 ,25);
            }
            else
            {
                SendClientMessage(AdministratoriausID, RAUDONA, "• Þaidëjas atsisakë bûti atkeltas.");
            }
        }
        else
        {
            SendClientMessage(playerid, PILKA, "• Pasiûlymas nebegalioja.");
        }
    }
    if(dialogid == 54)
    {
       if(response)
        {
            if(PlayerDB[playerid][OwnedVehicle1] > 0)
            {
                new vehicleid = PlayerDB[playerid][OwnedVehicle1];
                if(GetVehicleDistanceFromPoint(vehicleid, -1976.9523,887.3963,45.9097) > 3 && GetVehicleDistanceFromPoint(vehicleid, -1977.5437,880.6337,45.9114) > 3)
                {
                    ErrorMsg(playerid,"Jûsø maðina yra per toli.");
                }
                else
                {
                    if(PlayerDB[playerid][MoneyInPocket] < 3000)
                    {
                        new string[122];
                        format(string, 122, "• Nepakanka pinigø dujø árangai ir jos montavimo paslaugai (turi %d €, reikia 3000 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],3000 - PlayerDB[playerid][MoneyInPocket]);
                        SendClientMessage(playerid, RAUDONA, string);
                        ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                    }
                    else
                    {
                        new model = GetVehicleModel(vehicleid);
                        if(IsVehicleAircraft(model) == 1 || !IsVehicleModelWithEngine(model))
                        {
                            ErrorMsg(playerid,"• Jûsø transporto priemonëje negalima ámontuoti dujø árangos.");
                            ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                        }
                        else
                        {
                            if(VehicleDB[vehicleid][DujuIranga] == 1)
                            {
                                ErrorMsg(playerid,"• Jûsø transporto priemonëje jau yra dujø áranga.");
                                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                VehicleDB[vehicleid][DujuIranga] = 1;

                                VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] = 1;
                                PlayerDB[playerid][MoneyInPocket] -= 3000;
                                SendClientMessage(playerid, GELTONA, "• Á jûsø pirmà maðinà buvo sëkmingai ámontuota dujø áranga uþ 3000€.");
                                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                            }
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}pirmasis {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");

                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
            }
        }
        else
        {
           if(PlayerDB[playerid][OwnedVehicle2] > 0)
            {
                new vehicleid = PlayerDB[playerid][OwnedVehicle2];
                if(GetVehicleDistanceFromPoint(vehicleid, -1976.9523,887.3963,45.9097) > 3 && GetVehicleDistanceFromPoint(vehicleid, -1977.5437,880.6337,45.9114) > 3)
                {
                    ErrorMsg(playerid,"Jûsø maðina yra per toli.");
                }
                else
                {
                    if(PlayerDB[playerid][MoneyInPocket] < 3000)
                    {
                        new string[122];
                        format(string, 122, "• Nepakanka pinigø dujø árangai ir jos montavimo paslaugai (turi %d €, reikia 3000 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],3000 - PlayerDB[playerid][MoneyInPocket]);
                        SendClientMessage(playerid, RAUDONA, string);
                        ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                    }
                    else
                    {
                        new model = GetVehicleModel(vehicleid);
                        if(IsVehicleAircraft(model) == 1 || !IsVehicleModelWithEngine(model))
                        {
                            ErrorMsg(playerid,"• Jûsø transporto priemonëje negalima ámontuoti dujø árangos.");
                            ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                        }
                        else
                        {
                            if(VehicleDB[vehicleid][DujuIranga] == 1)
                            {
                                ErrorMsg(playerid,"• Jûsø transporto priemonëje jau yra dujø áranga.");
                                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                VehicleDB[vehicleid][DujuIranga] = 1;
                                VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] = 1;
                                PlayerDB[playerid][MoneyInPocket] -= 3000;
                                SendClientMessage(playerid, GELTONA, "• Á jûsø antrà maðinà buvo sëkmingai ámontuota dujø áranga uþ 3000€.");
                                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
                            }
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}antras {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
                ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "{AFAFAF}Paslaugos", "Uþregistruoti (BÛTINA) - 1.000€\nDujø áranga su montavimu 3.000€", "Toliau", "Atðaukti");
            }
        }
    }
    if(dialogid == 55)
    {
        if(response)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsPlayerInAnyVehicle(playerid) && VehicleDB[vehicleid][TURGUS] == 1)
            {
                new info[1024];
                strcat(info, "Áveskite norimà maðinos spalvà (0-255)\n");
                strcat(info, "Pagrindinës spalvos:\n");
                strcat(info, "Juoda 0\n");
                strcat(info, "Balta 1\n");
                strcat(info, "Þydra 2\n");
                strcat(info, "Raudona 3\n");
                strcat(info, "Geltona 6\n");
                strcat(info, "Pilka 13\n");
                strcat(info, "Þalia 86\n");
                strcat(info, "Visos spalvos http://wiki.sa-mp.com/wiki/Colors_List");
                ShowPlayerDialog(playerid, 56, DIALOG_STYLE_INPUT, "{AFAFAF}Pasirinkite norimà automobilio spalvà", info, "Toliau", "Atðaukti");
            }
            else
            {
                TogglePlayerControllable(playerid, 1);
            }
        }
        else
        {
            TogglePlayerControllable(playerid, 1);
            RemovePlayerFromVehicle(playerid);
        }
    }
    if(dialogid == 56)
    {
        if(response)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsPlayerInAnyVehicle(playerid) && VehicleDB[vehicleid][TURGUS] == 1)
            {
                ChangeVehicleColor(vehicleid, strval(inputdialogtext), 0);
                ShowPlayerDialog(playerid, 57, DIALOG_STYLE_MSGBOX, "{AFAFAF}Ar tinkama spalva", "Ar norite pirkti ðià maðinà,tokios spalvos?", "Pirkti", "Pakeisti");
            }
        }
        else
        {
            TogglePlayerControllable(playerid, 1);
            RemovePlayerFromVehicle(playerid);
        }
    }
    if(dialogid == 57)
    {
        if(response)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(PlayerDB[playerid][MoneyInPocket] < aKaina[GetVehicleModel(vehicleid) - 400])
            {
                new string[128];
                format(string, 128, "• Nepakanka pinigø ðios transporto priemonës ásigyjimui (turi %d €, reikia %d €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],aKaina[GetVehicleModel(vehicleid) - 400],aKaina[GetVehicleModel(vehicleid) - 400] - PlayerDB[playerid][MoneyInPocket]);
                SendClientMessage(playerid, RAUDONA, string);
                TogglePlayerControllable(playerid, 1);
                RemovePlayerFromVehicle(playerid);
                SetVehicleToRespawn(vehicleid);
            }
            else
            {
                if(PlayerDB[playerid][FirstOwnedVehicleID] < 0)
                {
                    new string[74];
                    format(string, 74, "Sveikiname! Jus nusipirkote %s uþ %s €.", vNames[GetVehicleModel(vehicleid) - 400],AddPoints(aKaina[GetVehicleModel(vehicleid) - 400]));
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    SendClientMessage(playerid, 0xe7ba21FF, "Maðinos valdymas: {DB881A}/mvaldymas");
                    SendClientMessage(playerid, 0xe7ba21FF, "Jûsø transporto priemonë pagaminta. Gero kelio!");
                    SendClientMessage(playerid, 0xe7ba21FF, "VIP gali nusigauti iki maðinos paraðæ {DB881A}/tpm");
                    SendClientMessage(playerid, 0xe7ba21FF, "BÛTINA uþregistruoti tr. priemonæ „Automobiliø paslaugø“ garaþe.");
                    SendClientMessage(playerid, 0xe7ba21FF, "Já rasi paraðæs {DB881A}/gps");
                    if(PlayerDB[playerid][Pasiekimas22] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,22);
                    }
                }
                else
                {
                    new string[74];
                    format(string, 74, "Sveikiname! Jus nusipirkote %s uþ %s €.", vNames[GetVehicleModel(vehicleid) - 400],AddPoints(aKaina[GetVehicleModel(vehicleid) - 400]));
                    SendClientMessage(playerid, 0xe7ba21FF, string);
                    SendClientMessage(playerid, 0xe7ba21FF, "Maðinos valdymas: {DB881A}/mvaldymas");
                    SendClientMessage(playerid, 0xe7ba21FF, "Jûsø transporto priemonë pagaminta. Gero kelio!");
                    SendClientMessage(playerid, 0xe7ba21FF, "VIP gali nusigauti iki maðinos paraðæ {DB881A}/tpm1");
                    SendClientMessage(playerid, 0xe7ba21FF, "BÛTINA uþregistruoti tr. priemonæ „Automobiliø paslaugø“ garaþe.");
                    SendClientMessage(playerid, 0xe7ba21FF, "Já rasi paraðæs {DB881A}/gps");
                    if(PlayerDB[playerid][Pasiekimas23] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,23);
                    }
                }
                PlayerDB[playerid][MoneyInPocket]-=aKaina[GetVehicleModel(vehicleid) - 400];
                new model = GetVehicleModel(vehicleid);
                new query[1000];
                new color1,color2;
                GetVehicleColor(vehicleid, color1, color2);
                new Year,Month,Day;
                getdate(Year, Month, Day);
                mysql_format(connectionHandle, query, 1000, "INSERT INTO `nuosavostrpriemones` (`ID`, `Savininkas`, `Modelis`, `X`, `Y`, `Z`, `Rotation`, `Color1`, `Color2`, `FuelType`, `Bendzinas`, `Dujos`, `Sudauzyta`, `Dauztumas`, `DujuIranga`,`DateOfBuying`) VALUES (NULL, '%e', '%i', '-2682.8950', '-22.7127', '4.4606', '179.6862', '%i', '%i', '0', '20', '0', '0', '0', '0','%d-%02d-%02d');", Vardas(playerid),model,color1,color2,Year,Month,Day);

                mysql_function_query(connectionHandle,query,true,"OnPlayerBoughtNewCar","d",playerid);

                SalesVehiclesInStock[model - 400]--;
                new LabelText[700];
                format(LabelText, 700, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
                vNames[model - 400],AddPoints(aKaina[model - 400]),AddPoints(floatround(aKaina[model - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[model - 400],AddPoints(VehicleBagazines[model - 400]),DegaluSanaudos[model - 400],MaxGreitis[model - 400]);
                UpdateDynamic3DTextLabelText(SalesVehiclesLabels[model-400], 0xe76518FF, LabelText);

                RemovePlayerFromVehicle(playerid);
                SetVehicleToRespawn(vehicleid);
            }
        }
        else
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsPlayerInAnyVehicle(playerid) && VehicleDB[vehicleid][TURGUS] == 1)
            {
                new info[1024];
                strcat(info, "Áveskite norimà maðinos spalvà (0-255)\n");
                strcat(info, "Pagrindinës spalvos:\n");
                strcat(info, "Juoda 0\n");
                strcat(info, "Balta 1\n");
                strcat(info, "Þydra 2\n");
                strcat(info, "Raudona 3\n");
                strcat(info, "Geltona 6\n");
                strcat(info, "Pilka 13\n");
                strcat(info, "Þalia 86\n");
                strcat(info, "Visos spalvos http://wiki.sa-mp.com/wiki/Colors_List");
                ShowPlayerDialog(playerid, 56, DIALOG_STYLE_INPUT, "{AFAFAF}Pasirinkite norimà automobilio spalvà", info, "Toliau", "Atðaukti");
            }
            else
            {
                TogglePlayerControllable(playerid, 1);
            }
        }
    }

    if(dialogid == 58)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                    new info[1048];
                    info = "{FFFFFF}Bagaþinëje turite:\n\n";
                    new string[80],WeaponName[30];
                    if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t1. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}1. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t2. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}2. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t3. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}3. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t4. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}4. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t5. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}5. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t6. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
                        format(string, 80, "{FFFFFF}6. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot1] == 0)
                    {
                        strcat(info, "{FFFFFF}\t7. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 80, "{FFFFFF}\t7. {62A5C4}%i {FFFFFF}g kanapiø\n", VehicleDB[vehicleid][DrugsSlot1]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot2] == 0)
                    {
                        strcat(info, "{FFFFFF}\t8. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 80, "{FFFFFF}\t8. {62A5C4}%i {FFFFFF}mg heroino\n", VehicleDB[vehicleid][DrugsSlot2]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot3] == 0)
                    {
                        strcat(info, "{FFFFFF}\t9. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 80, "{FFFFFF}\t9. {62A5C4}%i {FFFFFF}mg kokaino\n\n", VehicleDB[vehicleid][DrugsSlot3]);
                        strcat(info, string);
                    }
                    strcat(info, "{FFFFFF} Norëdami iðimti áveskite skaièiø nuo {62A5C4}1 {FFFFFF}iki {62A5C4}9");
                    ShowPlayerDialog(playerid, 59, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti", "Atðaukti");
                }
                case 1:
                {
                    ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
                }
            }
        }
    }
    if(dialogid == 59)
    {
        if(response)
        {
            new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
            new WeaponName[30];
            switch(strval(inputdialogtext))
            {
                case 1:
                {
                    if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á pirmà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
                        ShowPlayerDialog(playerid, 60, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 2:
                {
                    if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á antrà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
                        ShowPlayerDialog(playerid, 61, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 3:
                {
                    if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á treèià skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
                        ShowPlayerDialog(playerid, 62, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 4:
                {
                    if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á ketvirtà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
                        ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 5:
                {
                    if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á penktà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
                        ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 6:
                {
                    if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra ginklo padëto á ðeðtà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
                        format(info, 128, "{FFFFFF}Kiek {62A5C4}%s {FFFFFF}norite iðimti (turite {62A5C4}%i {FFFFFF}ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
                        ShowPlayerDialog(playerid, 65, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 7:
                {
                    if(VehicleDB[vehicleid][DrugsSlot1] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra narkotikø padëto á septintà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        format(info, 128, "{FFFFFF}Kiek kanapiø norite iðimti (turite {62A5C4}%i {FFFFFF}g)?", VehicleDB[vehicleid][DrugsSlot1]);
                        ShowPlayerDialog(playerid, 66, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 8:
                {
                    if(VehicleDB[vehicleid][DrugsSlot2] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra narkotikø padëto á aðtuntà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        format(info, 128, "{FFFFFF}Kiek heroino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot2]);
                        ShowPlayerDialog(playerid, 67, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                case 9:
                {
                    if(VehicleDB[vehicleid][DrugsSlot3] == 0)
                    {
                        ErrorMsg(playerid,"{62A5C4}• BAGAÞINË • {FFFFFF}Nëra narkotikø padëto á devintà skyriø.");
                    }
                    else
                    {
                        new info[128];
                        format(info, 128, "{FFFFFF}Kiek kokaino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot3]);
                        ShowPlayerDialog(playerid, 68, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
                    }
                }
                default:
                {
                    ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti nuo 1 iki 9.");
                    new info[1048];
                    info = "{FFFFFF}Bagaþinëje turite:\n\n";
                    new string[128];
                    if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t1. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}\t1. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t2. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}\t2. {62A5C4}%s - %i kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t3. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}3. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t4. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}\t4. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t5. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}\t5. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] == 0)
                    {
                        strcat(info, "{FFFFFF}\t6. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
                        format(string, 128, "{FFFFFF}\t6. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot1] == 0)
                    {
                        strcat(info, "{FFFFFF}\t7. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 128, "{FFFFFF}\t7. {62A5C4}%i {FFFFFF}g kanapiø\n", VehicleDB[vehicleid][DrugsSlot1]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot2] == 0)
                    {
                        strcat(info, "{FFFFFF}\t8. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 128, "{FFFFFF}\t8. {62A5C4}%i {FFFFFF}mg heroino\n", VehicleDB[vehicleid][DrugsSlot2]);
                        strcat(info, string);
                    }
                    if(VehicleDB[vehicleid][DrugsSlot3] == 0)
                    {
                        strcat(info, "{FFFFFF}\t9. {62A5C4}Tuðèia\n");
                    }
                    else
                    {
                        format(string, 128, "{FFFFFF}\t9. {62A5C4}%i {FFFFFF}mg kokaino\n\n", VehicleDB[vehicleid][DrugsSlot3]);
                        strcat(info, string);
                    }
                    strcat(info, "{FFFFFF}Norëdami iðimti áveskite skaièiø nuo {62A5C4}1 {FFFFFF}iki {62A5C4}9");
                    ShowPlayerDialog(playerid, 59, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti", "Atgal");
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinë", "{62A5C4}• {FFFFFF}Iðimti ginklus,narkotikus\n{62A5C4}• {FFFFFF}Padëti ginklus,narkotikus", "Pasirinkti", "Atðaukti");
        }
    }
    if((dialogid == 60 || dialogid == 61 || dialogid == 62 || dialogid == 63 || dialogid == 64 || dialogid == 65 || dialogid == 66 || dialogid == 67 || dialogid == 68) && !response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        new info[1048];
        info = "{FFFFFF}Bagaþinëje turite:\n\n";
        new string[128];
        new WeaponName[30];
        if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t1. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}\t1. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t2. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}\t2. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t3. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}3. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t4. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}\t4. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t5. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}\t5. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] == 0)
        {
            strcat(info, "{FFFFFF}\t6. {62A5C4}Tuðèia\n");
        }
        else
        {
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
            format(string, 128, "{FFFFFF}\t6. {62A5C4}%s - %i {FFFFFF}kulkø\n", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][DrugsSlot1] == 0)
        {
            strcat(info, "{FFFFFF}\t7. {62A5C4}Tuðèia\n");
        }
        else
        {
            format(string, 128, "{FFFFFF}\t7. {62A5C4}%i {FFFFFF}g kanapiø\n", VehicleDB[vehicleid][DrugsSlot1]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][DrugsSlot2] == 0)
        {
            strcat(info, "{FFFFFF}\t8. {62A5C4}Tuðèia\n");
        }
        else
        {
            format(string, 128, "{FFFFFF}\t8. {62A5C4}%i {FFFFFF}mg heroino\n", VehicleDB[vehicleid][DrugsSlot2]);
            strcat(info, string);
        }
        if(VehicleDB[vehicleid][DrugsSlot3] == 0)
        {
            strcat(info, "{FFFFFF}\t9. {62A5C4}Tuðèia\n");
        }
        else
        {
            format(string, 128, "{FFFFFF}\t9. {62A5C4}%i {FFFFFF}mg kokaino\n\n", VehicleDB[vehicleid][DrugsSlot3]);
            strcat(info, string);
        }
        strcat(info, "{FFFFFF}Norëdami iðimti áveskite skaièiø nuo {62A5C4}1 {FFFFFF}iki {62A5C4}9");
        ShowPlayerDialog(playerid, 59, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti", "Atgal");
    }
    if(dialogid == 60 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot1WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
            ShowPlayerDialog(playerid, 60, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot1WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot1WeaponBullets]);
            ShowPlayerDialog(playerid, 60, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot1WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot1WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot1WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot1WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i {FFFFFF}ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 61 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot2WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
            ShowPlayerDialog(playerid, 61, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot2WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot2WeaponBullets]);
            ShowPlayerDialog(playerid, 61, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot2WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot2WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot2WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot2WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i{FFFFFF} ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 62 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot3WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
            ShowPlayerDialog(playerid, 62, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot3WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot3WeaponBullets]);
            ShowPlayerDialog(playerid, 62, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot3WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot3WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot3WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot3WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i{FFFFFF} ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 63 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot4WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
            ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot4WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot4WeaponBullets]);
            ShowPlayerDialog(playerid, 63, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot4WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot4WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot4WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot4WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i{FFFFFF} ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 64 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot5WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
            ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot5WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot5WeaponBullets]);
            ShowPlayerDialog(playerid, 64, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot5WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot5WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot5WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot5WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i{FFFFFF} ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 65 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][WeaponSlot6WeaponBullets])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esanèiø ðoviniø skaièiø.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
            ShowPlayerDialog(playerid, 65, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128],WeaponName[30];
            GetWeaponName(VehicleDB[vehicleid][WeaponSlot6WeaponModel], WeaponName, 30);
            format(info, 128, "{FFFFFF}Kiek {62A5C4}%s ginklo {FFFFFF}norite iðimti (yra {62A5C4}%s{FFFFFF} ðoviniø)?", WeaponName,VehicleDB[vehicleid][WeaponSlot6WeaponBullets]);
            ShowPlayerDialog(playerid, 65, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][WeaponSlot6WeaponBullets]-=amount;
            GivePlayerWeaponEx(playerid, VehicleDB[vehicleid][WeaponSlot6WeaponModel], amount);
            if(VehicleDB[vehicleid][WeaponSlot6WeaponBullets] == 0)
            {
                VehicleDB[vehicleid][WeaponSlot6WeaponModel] = 0;
            }
            new string[128];
            format(string, 128, "• {FFFFFF}Pasirinktas ginklas buvo paimtas su {62A5C4}%i{FFFFFF} ðoviniø.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 66 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][DrugsSlot1])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esantá kanapiø kieká.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek kanapiø norite iðimti (turite {62A5C4}%i {FFFFFF}g)?", VehicleDB[vehicleid][DrugsSlot1]);
            ShowPlayerDialog(playerid, 66, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek kanapiø norite iðimti (turite {62A5C4}%i {FFFFFF}g)?", VehicleDB[vehicleid][DrugsSlot1]);
            ShowPlayerDialog(playerid, 66, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][DrugsSlot1]-=amount;
            PlayerDB[playerid][Kanapes]+=amount;

            new string[128];
            format(string, 128, "• {FFFFFF}Iðemëte {62A5C4}%i{FFFFFF} gramø kanapiø ið bagaþinës.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 67 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][DrugsSlot2])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esantá heroino kieká.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek heroino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot2]);
            ShowPlayerDialog(playerid, 67, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek heroino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot2]);
            ShowPlayerDialog(playerid, 67, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][DrugsSlot2]-=amount;
            PlayerDB[playerid][Heroinas]+=amount;

            new string[128];
            format(string, 128, "• {FFFFFF}Iðemëte {62A5C4}%i{FFFFFF} miligramø heroino ið bagaþinës.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 68 && response)
    {
        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
        if(strval(inputdialogtext) > VehicleDB[vehicleid][DrugsSlot3])
        {
            ErrorMsg(playerid,"• Jûsø nurodytas kiekis virðija bagaþinëje esantá kokaino kieká.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek kokaino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot3]);
            ShowPlayerDialog(playerid, 68, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else if(strval(inputdialogtext) <= 0)
        {
            ErrorMsg(playerid,"• Jûsø ávestas skaièius turi bûti didesnis nei 0.");
            new info[128];
            format(info, 128, "{62A5C4}• {FFFFFF}Kiek kokaino norite iðimti (turite {62A5C4}%i {FFFFFF}mg)?", VehicleDB[vehicleid][DrugsSlot3]);
            ShowPlayerDialog(playerid, 68, DIALOG_STYLE_INPUT, "{AFAFAF}Bagaþinë", info, "Iðimti","Atðaukti");
        }
        else
        {
            new amount = strval(inputdialogtext);
            VehicleDB[vehicleid][DrugsSlot3]-=amount;
            PlayerDB[playerid][Kokainas]+=amount;

            new string[128];
            format(string, 128, "• {FFFFFF}Iðemëte {62A5C4}%i{FFFFFF} miligramø kokaino ið bagaþinës.", amount);
            SendClientMessage(playerid, 0x62A5C4AA, string);
        }
    }
    if(dialogid == 69)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(GetPlayerWeapon(playerid) == 0)
                    {
                        ErrorMsg(playerid,"• Savo rankoje neturite jokio ginklo.");
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][Kanapes] == 0)
                    {
                        ErrorMsg(playerid,"• Neturite kanapiø kurias galëtumëte ádëti.");
                    }
                    else
                    {
                        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                        new info[400];
                        format(info, 400, "{FFFFFF}Jûs turite {62A5C4}%i {FFFFFF}gramø kanapiø.\n\n{FFFFFF}Transporto priemonëje ðiuo metu yra {62A5C4}%i {FFFFFF}gramø kanapiø.\n\nKiek gramø {62A5C4}kanapiø {FFFFFF}norësite padëti á bagaþinës skyriø?", PlayerDB[playerid][Kanapes],VehicleDB[vehicleid][DrugsSlot1]);
                        ShowPlayerDialog(playerid, 72, DIALOG_STYLE_INPUT, "{AFAFAF}Kanapiø padëjimas", info, "Padëti","Atðaukti");
                    }
                }
                case 2:
                {
                    if(PlayerDB[playerid][Heroinas] == 0)
                    {
                        ErrorMsg(playerid,"• Neturite heroino kurias galëtumëte ádëti.");
                    }
                    else
                    {
                        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                        new info[400];
                        format(info, 400, "{FFFFFF}Jûs turite {62A5C4}%i {FFFFFF}miligramø heroino.\n\n{FFFFFF}Transporto priemonëje ðiuo metu yra {62A5C4}%i {FFFFFF}miligramø heroino.\n\nKiek miligramø {62A5C4}heroino {FFFFFF}norësite padëti á bagaþinës skyriø?", PlayerDB[playerid][Heroinas],VehicleDB[vehicleid][DrugsSlot2]);
                        ShowPlayerDialog(playerid, 73, DIALOG_STYLE_INPUT, "{AFAFAF}Heroino padëjimas", info, "Padëti","Atðaukti");
                    }
                }
                case 3:
                {
                    if(PlayerDB[playerid][Kokainas] == 0)
                    {
                        ErrorMsg(playerid,"• Neturite kokaino kurias galëtumëte ádëti.");
                    }
                    else
                    {
                        new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                        new info[400];
                        format(info, 400, "{FFFFFF}Jûs turite {62A5C4}%i {FFFFFF}miligramø kokaino.\n\n{FFFFFF}Transporto priemonëje ðiuo metu yra {62A5C4}%i {FFFFFF}miligramø kokaino.\n\nKiek miligramø {62A5C4}kokaino {FFFFFF}norësite padëti á bagaþinës skyriø?", PlayerDB[playerid][Kokainas],VehicleDB[vehicleid][DrugsSlot3]);
                        ShowPlayerDialog(playerid, 74, DIALOG_STYLE_INPUT, "{AFAFAF}Kokaino padëjimas", info, "Padëti","Atðaukti");
                    }
                }
            }
        }
        else
                   {

        }
    }
    if(dialogid == 70)
    {
        if(response)
        {
            if(GetPlayerWeapon(playerid) == 0)
            {
                ErrorMsg(playerid,"• Savo rankoje neturite jokio ginklo.");
            }
            else
            {
                new placeid = strval(inputdialogtext);
                if(placeid <= 0 || placeid > 6)
                {
                    ErrorMsg(playerid,"• Skyriaus numeris á kurá norite padëti ginklà turi bûti nuo 1 iki 6.");
                    ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                }
                else
                {
                    new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                    switch(placeid)
                    {
                        case 1:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot1WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                        case 2:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot2WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                        case 3:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot3WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                        case 4:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot4WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                        case 5:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot5WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                        case 6:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] > 0 && VehicleDB[vehicleid][WeaponSlot6WeaponModel] != GetPlayerWeapon(playerid))
                            {
                                ErrorMsg(playerid,"• Ðis bagaþinës skyrius jau yra uþimtas.");
                                ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite á kurá bagaþinës skyriø (nuo {62A5C4}1{FFFFFF} iki {62A5C4}6{FFFFFF}) norësite padëti ginklà", "Toliau", "Atðaukti");
                            }
                            else
                            {
                                SetPVarInt(playerid, "BagazineSkyrius", placeid);
                                ShowPlayerDialog(playerid, 71, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklo ádëjimas", "{62A5C4}• {FFFFFF}Áraðykite kiek kulkø pasirinkto ginklo ádësite á bagaþinæ", "Padëti", "Atðaukti");
                            }
                        }
                    }
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
        }
    }
    if(dialogid == 71)
    {
        if(response)
        {
            if(GetPlayerWeapon(playerid) == 0)
            {
                ErrorMsg(playerid,"• Savo rankoje neturite jokio ginklo.");
            }
            else if(GetPlayerAmmo(playerid) < strval(inputdialogtext))
            {
                ErrorMsg(playerid,"• Neturi tiek ginklo ðoviniø.");
            }
            else
            {
                new amount = strval(inputdialogtext);
                if(amount < 50)
                {
                    ErrorMsg(playerid,"• Negali ádëti á bagaþine maþiau nei 50 ðoviniø.");
                }
                else
                {
                    new vehicleid = PlayerDB[playerid][MasinosKuriosBagazineID];
                    new model = GetVehicleModel(vehicleid);
                    new weapon = GetPlayerWeapon(playerid);
                    new weapons[13][2];
                    //Patikrinti ar tilps ir isgauti ar papildo ar ideda visiskai nauja ginkla..
                    switch(GetPVarInt(playerid, "BagazineSkyrius"))
                    {
                        case 1:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot1WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot1WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot1WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);


                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot1WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot1WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot1WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);

                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                        case 2:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot2WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot2WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot2WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot2WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot2WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot2WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                        case 3:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot3WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot3WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot3WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot3WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot3WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot3WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                        case 4:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot4WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot4WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot4WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot4WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot4WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot4WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                        case 5:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot5WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot5WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot5WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot5WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot5WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot5WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                        case 6:
                        {
                            if(VehicleDB[vehicleid][WeaponSlot6WeaponModel] == 0)
                            {
                                if(VehicleBagazines[model - 400] < amount)
                                {
                                    ErrorMsg(playerid,"• Ðiame skyriuje netilps tiek ðoviniø.");
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot6WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot6WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklas {62A5C4}%s {FFFFFF}buvo padëtas á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                            else
                            {
                                if(VehicleDB[vehicleid][WeaponSlot6WeaponBullets] + amount > VehicleBagazines[model - 400])
                                {
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ðiame skyriuje jau nebetilps toks kiekis ðoviniø.");
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                    format(string, 128, "• BAGAÞINË •{FFFFFF} Viename skyriuje telpa tik {62A5C4}%s{FFFFFF} ginklo ðoviniø.", AddPoints(VehicleBagazines[model - 400]));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                                else
                                {
                                    VehicleDB[vehicleid][WeaponSlot6WeaponModel] = weapon;
                                    VehicleDB[vehicleid][WeaponSlot6WeaponBullets]+= amount;

                                    for (new i = 0; i <= 12; i++)
                                    {
                                        GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
                                    }
                                    new weaponslot = GetWeaponSlot(weapon);
                                    SetPlayerAmmoEx(playerid, weapon, weapons[weaponslot][1] - amount);
                                    new string[128];
                                    format(string, 128, "• BAGAÞINË • {FFFFFF}Ginklo ðoviniai {62A5C4}%s {FFFFFF}buvo papildyti á pasirinktà bagaþinës skyriø.", AddPoints(amount));
                                    SendClientMessage(playerid, 0x62A5C4AA, string);
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
           ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
        }
    }
    if(dialogid == 72)
    {
        if(response)
        {
            new AmountOfKanapes = strval(inputdialogtext);
            if(AmountOfKanapes > PlayerDB[playerid][Kanapes])
            {
                ErrorMsg(playerid,"• Neturite tiek kanapiø.");
            }
            else
            {
                new model1 = GetVehicleModel(PlayerDB[playerid][MasinosKuriosBagazineID]);

                if(VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot1] + AmountOfKanapes > VehicleBagazines[model1 - 400])
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Á ðá bagaþinës skyriø netelpa toks {62A5C4}%s{FFFFFF} kiekis kanapiø.", AddPoints(amount));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûsø transporto priemonëje telpta iki {62A5C4}%s{FFFFFF} gramø kanapiø.", AddPoints(VehicleBagazines[model1 - 400]));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                }
                else
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûs ádëjote á automobilio bagaþinæ {62A5C4}%i{FFFFFF} gramø kanapiø.", AmountOfKanapes);
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    PlayerDB[playerid][Kanapes]-=AmountOfKanapes;
                    VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot1]+=AmountOfKanapes;
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
        }
    }
    if(dialogid == 73)
    {
        if(response)
        {
            new AmountOfHeroinas = strval(inputdialogtext);
            if(AmountOfHeroinas > PlayerDB[playerid][Heroinas])
            {
                ErrorMsg(playerid,"• Neturite tiek heroino.");
            }
            else
            {
                new model2 = GetVehicleModel(PlayerDB[playerid][MasinosKuriosBagazineID]);

                if(VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot2] + AmountOfHeroinas > VehicleBagazines[model2 - 400])
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Á ðá bagaþinës skyriø netelpa toks {62A5C4}%s{FFFFFF} kiekis heroino.", AddPoints(amount));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûsø transporto priemonëje telpta iki {62A5C4}%s{FFFFFF} miligramø heroino.", AddPoints(VehicleBagazines[model2 - 400]));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                }
                else
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûs ádëjote á automobilio bagaþinæ {62A5C4}%i{FFFFFF} miligramø heroino.", AmountOfHeroinas);
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    PlayerDB[playerid][Heroinas]-=AmountOfHeroinas;
                    VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot2]+=AmountOfHeroinas;
                }
            }
        }
        else
        {
           ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
        }
    }
    if(dialogid == 74)
    {
        if(response)
        {
            new AmountOfKokainas = strval(inputdialogtext);
            if(AmountOfKokainas > PlayerDB[playerid][Kokainas])
            {
                ErrorMsg(playerid,"• Neturite tiek kokaino.");
            }
            else
            {
                new model3 = GetVehicleModel(PlayerDB[playerid][MasinosKuriosBagazineID]);

                if(VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot3] + AmountOfKokainas > VehicleBagazines[model3 - 400])
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Á ðá bagaþinës skyriø netelpa toks {62A5C4}%s{FFFFFF} kiekis kokaino.", AddPoints(amount));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûsø transporto priemonëje telpta iki {62A5C4}%s{FFFFFF} miligramø kokaino.", AddPoints(VehicleBagazines[model3 - 400]));
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                }
                else
                {
                    new string[128];
                    format(string, 128, "• BAGAÞINË •{FFFFFF} Jûs ádëjote á automobilio bagaþinæ {62A5C4}%i{FFFFFF} miligramø kokaino.", AmountOfKokainas);
                    SendClientMessage(playerid, 0x62A5C4AA, string);
                    PlayerDB[playerid][Kokainas]-=AmountOfKokainas;
                    VehicleDB[PlayerDB[playerid][MasinosKuriosBagazineID]][DrugsSlot3]+=AmountOfKokainas;
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid, 69, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinës valdymas", "{62A5C4}• {FFFFFF}Padëti dabar turimà ginklà\n{62A5C4}• {FFFFFF}Padëti kanapes\n{62A5C4}• {FFFFFF}Padëti heroinà\n{62A5C4}• {FFFFFF}Padëti kokainà", "Pasirinkti","Atðaukti");
        }
    }
    if(dialogid == 75)
    {
        if(PlayerDB[playerid][CantPlayBecouseOfBan] == true && PlayerDB[playerid][BlokavimoTipas] == 0)
        {
            if(response)
            {
                if(PlayerDB[playerid][Credits] >= 100)
                {
                    PlayerDB[playerid][CantPlayBecouseOfBan] = false;
                    PlayerDB[playerid][Credits]-=100;
                    new query[200];
                    mysql_format(connectionHandle, query, 200, "DELETE FROM `bans` WHERE `Vardas` = '%e';", Vardas(playerid));
                    mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai atsiblokavote uþ 100 kreditø.");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite pakankamai kreditø.");
                    SendClientMessage(playerid, ZYDRA, "• Norite kreditø?");
                    SendClientMessage(playerid,GELTONA,"Siûskite SMS þinute numeriu 1398 su tekstu SAN1 Vardas_Pavarde þinutës kaina 1.5€. Uþ þinutæ gausite 100 kreditø.");
                    SendClientMessage(playerid,RAUDONA,"DËMESIO: Bûtina pirmàsias vardo ir pavardës raides raðyti ið didþiøjø raidþiø.");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
            }
            else
            {
                Kick(playerid);
            }
        }
        else
        {
            Kick(playerid);
        }
    }
    if(dialogid == 76)
    {
        if(PlayerDB[playerid][CantPlayBecouseOfBan] == true && PlayerDB[playerid][BlokavimoTipas] == 1)
        {
            if(response)
            {
                if(PlayerDB[playerid][Credits] >= 100)
                {
                    PlayerDB[playerid][CantPlayBecouseOfBan] = false;
                    PlayerDB[playerid][Credits]-=100;
                    new query[200];
                    mysql_format(connectionHandle, query, 200, "DELETE FROM `bans` WHERE `Vardas` = '%e';", Vardas(playerid));
                    mysql_function_query(connectionHandle,query,false,"SendQuery","");
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai atsiblokavote uþ 100 kreditø.");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite pakankamai kreditø.");
                    SendClientMessage(playerid, ZYDRA, "• Norite kreditø?");
                    SendClientMessage(playerid,GELTONA,"Siûskite SMS þinute numeriu 1398 su tekstu SAN1 Vardas_Pavarde þinutës kaina 1.5€. Uþ þinutæ gausite 100 kreditø.");
                    SendClientMessage(playerid,RAUDONA,"DËMESIO: Bûtina pirmàsias vardo ir pavardës raides raðyti ið didþiøjø raidþiø.");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
            }
            else
            {
                Kick(playerid);
            }
        }
        else
        {
            Kick(playerid);
        }
    }
    if(dialogid == 77)
    {
        if(response)
        {
            new id = GetPVarInt(playerid, "PatikrinimoTID");
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 3, Cords[0], Cords[1], Cords[2]))
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            if(PlayerDB[id][Kanapes] == 0 && PlayerDB[id][Heroinas] == 0 && PlayerDB[id][Kokainas] == 0)
                            {
                                ErrorMsg(playerid,"• Þaidëjas neturi kontrobandiniø medþiagø.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas turi kontrobandiniø medþ. galite já suimti.");
                            }
                        }
                        case 1:
                        {
                            if(IsPlayerInAnyVehicle(id))
                            {
                                new Dialog77VehicleID = GetPlayerVehicleID(id);
                                if(VehicleDB[Dialog77VehicleID][DrugsSlot1] == 0 && VehicleDB[Dialog77VehicleID][DrugsSlot2] == 0 && VehicleDB[Dialog77VehicleID][DrugsSlot3] == 0)
                                {
                                    ErrorMsg(playerid,"• Maðinoje nëra narkotikø.");
                                }
                                else
                                {
                                    SendClientMessage(playerid, RAUDONA, "• Maðinoje uþtikote narkotikus ir juos konfiskavote.");
                                    new string[128];
                                    format(string, 128, "[racija] %s: Konfiskavau: %ig. kanapiø, %img. kokaino, %img. heroino.",Vardas(playerid),VehicleDB[Dialog77VehicleID][DrugsSlot1],VehicleDB[Dialog77VehicleID][DrugsSlot2],VehicleDB[Dialog77VehicleID][DrugsSlot3]);
                                    VehicleDB[Dialog77VehicleID][DrugsSlot1] = 0;
                                    VehicleDB[Dialog77VehicleID][DrugsSlot2] = 0;
                                    VehicleDB[Dialog77VehicleID][DrugsSlot3] = 0;
                                    SendClientMessageToLaw(0x0099CC,string);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas nëra maðinoje.");
                            }
                        }
                        case 2:
                        {
                            if(GetPlayerDrunkLevel(id) < 400)
                            {
                                SendClientMessage(playerid, ZALIA, "• Zaidejas blaivus.");
                                SendClientMessage(id, ZALIA, "• Policija nustatë, kad jûs esate blaivus.");
                            }
                            else
                            {
                                new Float:Laipsnis = GetPlayerDrunkLevel(id) / 1000;
                                if(Laipsnis <= 1)
                                {
                                    new string[75];
                                    format(string, 75, "• Alkotesteris rodo:   %.1f promiliø. Tai lengvas girtumo laipsnis.", Laipsnis);
                                    SendClientMessage(playerid, MELYNA, string);
                                    SendClientMessage(id, MELYNA, string);
                                }
                                else if(Laipsnis > 1 && Laipsnis <= 2.5)
                                {
                                    new string[75];
                                    format(string, 75, "• Alkotesteris rodo:   %.1f promiliø. Tai vidutinis girtumo laipsnis.", Laipsnis);
                                    SendClientMessage(playerid, MELYNA, string);
                                    SendClientMessage(id, MELYNA, string);
                                }
                                else
                                {
                                    new string[75];
                                    format(string, 75, "• Alkotesteris rodo:   %.1f promiliø. Tai sunkus girtumo laipsnis.", Laipsnis);
                                    SendClientMessage(playerid, MELYNA, string);
                                    SendClientMessage(id, MELYNA, string);
                                }
                            }
                        }
                        case 3:
                        {
                            if(IsPlayerInAnyVehicle(id))
                            {
                                if(PlayerDB[id][SeatBelt] == 0)
                                {
                                    ErrorMsg(playerid,"• Þaidëjas neprisisegæs saugos dirþo! Turite teisæ já suimti!");
                                    ErrorMsg(id,"• Policijos pareigûnas pastebëjo,kad jûs esate neprisisegæs saugos dirþo.");
                                }
                                else
                                {
                                    SendClientMessage(playerid, ZALIA, "• Þaidëjas prisisegæs dirþà.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"Þaidëjas nëra maðinoje.");
                            }
                        }
                        case 4:
                        {
                            new info[24];
                            format(info, 24, "%i", id);
                            cmd_susalmu(playerid,info);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas neprisijungæs.");
            }
        }
    }
    if(dialogid == 78)
    {
        if(response)
        {
            ShowPlayerDialog(playerid, 78, DIALOG_STYLE_MSGBOX, "{AFAFAF}AFK", "Jûs esate AFK bûsenoje. Ar jau norite gráþti á þaidimà?", "Ne","Taip");
        }
        else
        {
            new string[110];
            new Laikas = PlayerDB[playerid][AfkTime];
            PlayerDB[playerid][AfkTime] = 0;
            PlayerDB[playerid][AfkState] = false;
            PlayerDB[playerid][AfkPoints] = 0;
            new valandos,minutes;
            while(Laikas >= 3600)
            {
                valandos++;
                Laikas-=3600;
            }
            while(Laikas >= 60)
            {
                minutes++;
                Laikas-=60;
            }
            format(string,110,"• AFK bûsenoje prabuvote: {40FF40}%02dh. %02dmin. %02dsek.",valandos,minutes,Laikas);
            SendClientMessage(playerid,0x00FF00FF,string);
            if(PlayerDB[playerid][GautosZinutes] > 0)
            {
                format(string, 110, "• Jûs turite %i praleistas þinutes. Norëdami perskaityti praleistas þinutes naudokite komandà /zinutes.", PlayerDB[playerid][GautosZinutes]);
                SendClientMessage(playerid, GELTONA, string);
                PlayerDB[playerid][GautosZinutes] = 0;
            }
            if(IsValidDynamic3DTextLabel(PlayerDB[playerid][PlayerAfkLabel]))
            {
                DestroyDynamic3DTextLabel(PlayerDB[playerid][PlayerAfkLabel]);
            }
            if(PlayerDB[playerid][SpentTimeInAFKArea] > 0)
            {
                minutes = 0;
                valandos = 0;
                while(PlayerDB[playerid][SpentTimeInAFKArea] >= 60)
                {
                    minutes+=1;
                    PlayerDB[playerid][SpentTimeInAFKArea]-=60;
                }
                while(minutes >= 60)
                {
                    valandos+=1;
                    minutes-=60;
                }
                format(string, sizeof(string), "Prabuvote AFK %d valandø, %d minutes AFK zonoje, ir gavote %d€ ir %dXP.", valandos,minutes,PlayerDB[playerid][ReceivedMoneyFromAFK],PlayerDB[playerid][ReceivedXPFromAFK]);
                SendClientMessage(playerid, 0x33AA33FF, string);
                PlayerDB[playerid][ReceivedMoneyFromAFK] = 0;
                PlayerDB[playerid][ReceivedXPFromAFK] = 0;
                PlayerDB[playerid][SpentTimeInAFKArea] = 0;
            }
        }
    }
    if(dialogid == 79)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SendClientMessage(playerid, GELTONA, "• Suvalgiai plovà..");
                    ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);
                }
                case 1:
                {
                    SendClientMessage(playerid, GELTONA, "• Suvalgiai kotletà..");
                    ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);
                }
                case 2:
                {
                    SendClientMessage(playerid, GELTONA, "• Iðgëriai kompoto..");
                    ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);
                }
            }
        }
    }
    if(dialogid == 80)
    {
        if(!response)
        {
            new string[50];
            format(string, 50, "LauktiListItem%iID", listitem);
            new SQLstring[200];
            mysql_format(connectionHandle, SQLstring, 200, "DELETE FROM `laukimai` WHERE laukimai.UniqueID = '%i' LIMIT 1;", GetPVarInt(playerid, string));
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SendClientMessage(playerid, GELTONA, "• Áraðas paðalintas.");
        }
    }
    if(dialogid == 81)
    {
        if(response)
        {
            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
            {
                new vid = PlayerDB[playerid][OwnedVehicle1];
                new Float:X,Float:Y,Float:Z;
                GetVehiclePos(vid, X, Y, Z);
                new bool:AutoPZonoje = false;
                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                {
                    AutoPZonoje = true;
                }
                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                {
                    AutoPZonoje = true;
                }
                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                {
                    AutoPZonoje = true;
                }
                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                {
                    AutoPZonoje = true;
                }
                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                {
                    AutoPZonoje = true;
                }

                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                {
                    AutoPZonoje = true;
                }
                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                {
                    if(strcmp(PlayerDB[playerid][SellVehToServerSCode], inputdialogtext) == 0)
                    {
                        new string[128];
                        new Model = VehicleBySlotInfo[playerid][0][ModelBySlot];
                        new SudevetumoVerte = floatround(aKaina[Model-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                        new Float:VertesSmukimas = SudevetumoVerte + (aKaina[Model-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                        new Verte = floatround(aKaina[Model-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                        if(Verte < floatround(aKaina[Model-400] * 0.1,floatround_round))
                        {
                            Verte = floatround(aKaina[Model-400] * 0.1,floatround_round);
                        }
                        format(string, 128, "• Pardavëte „%s“ uþ %s€.", vNames[Model-400],AddPoints(Verte));
                        SendClientMessage(playerid, GELTONA, string);
                        PlayerDB[playerid][MoneyInPocket]+=Verte;
                        mysql_format(connectionHandle, string, 128, "DELETE FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", VehicleDB[vid][VehicleDatabaseID]);
                        mysql_function_query(connectionHandle,string,false,"SendQuery","");
                        SalesVehiclesInStock[Model-400]+=1;
                        new LabelText[2048];
                        format(LabelText, 2048, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
                        vNames[Model - 400],AddPoints(aKaina[Model - 400]),AddPoints(floatround(aKaina[Model - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[Model - 400],AddPoints(VehicleBagazines[Model - 400]),DegaluSanaudos[Model - 400],MaxGreitis[Model - 400]);
                        UpdateDynamic3DTextLabelText(SalesVehiclesLabels[Model-400], 0xe76518FF, LabelText);
                        DestroyVehicle(vid);
                        PlayerDB[playerid][OwnedVehicle1]=-1;
                        PlayerDB[playerid][FirstOwnedVehicleID] = -1;


                        /*
                        new AutoPZona[6];
                        new Text3D:AutoPStatsLabel;
                        enum AutoPStats{
                            NickPS[24],
                            TrPS[32],
                            DataPS[17]
                        }
                        new AutoPStatistics[6][AutoPStats];
                        */
                        format(LabelText, 2048, "{FFFFFF}Paskutiniai {61210B}ðeði{FFFFFF} þmonës pardavæ transporto priemonæ serveriui:\n\n");
                        new strf[160];
                        AutoPVehiclesSold++;
                        if(AutoPVehiclesSold <= 6)
                        {
                            new NthSale = AutoPVehiclesSold;
                            if(NthSale == 1)
                            {
                                format(AutoPStatistics[0][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[0][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[0][NickPS], 24, "%s", Vardas(playerid));
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 2)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[1][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[1][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[1][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 3)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[2][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);

                                format(AutoPStatistics[2][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[2][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 4)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[3][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[3][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[3][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 5)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                format(AutoPStatistics[4][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[4][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[4][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }

                            else if(NthSale == 6)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                                strcat(LabelText,strf);
                                format(AutoPStatistics[5][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[5][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[5][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}6.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[5][NickPS],AutoPStatistics[5][TrPS],AutoPStatistics[5][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                        }
                        else
                        {
                            new NthSale = AutoPVehiclesSold % 6;
                            if(NthSale == 0)
                            {
                                format(AutoPStatistics[5][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[5][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[5][NickPS], 24, "%s", Vardas(playerid));
                            }
                            else
                            {
                                format(AutoPStatistics[NthSale-1][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[NthSale-1][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[NthSale-1][NickPS], 24, "%s", Vardas(playerid));
                            }

                            format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                            strcat(LabelText,strf);

                            format(strf, 160, "\n{61210B}6.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[5][NickPS],AutoPStatistics[5][TrPS],AutoPStatistics[5][DataPS]);
                            strcat(LabelText,strf);
                            UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);

                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalite parduoti maðinos serveriui, praðome bandyti dar kartà.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
            }
        }
    }
    if(dialogid == 90)
    {
        if(IsPlayerInAnyVehicle(playerid) && PlayerDB[playerid][Job] == 5)
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "{AFAFAF}PaintJobs", "PaintJob 1\nPaintJob 2\nPaintJob 3\nNuimti PaintJob\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 1:
                    {
                        new info[512];
                        strcat(info, "Áveskite norimà maðinos 1 spalvà (0-255)\n");
                        strcat(info, "Pagrindinës spalvos:\n");
                        strcat(info, "Juoda 0\n");
                        strcat(info, "Balta 1\n");
                        strcat(info, "Þydra 2\n");
                        strcat(info, "Raudona 3\n");
                        strcat(info, "Geltona 6\n");
                        strcat(info, "Pilka 13\n");
                        strcat(info, "Þalia 86\n");
                        strcat(info, "Visos spalvos http://wiki.sa-mp.com/wiki/Colors_List");
                        ShowPlayerDialog(playerid, 92, DIALOG_STYLE_INPUT, "{AFAFAF}Maðinos daþymas", info, "Uþdëti", "Atðaukti");
                    }
                    case 2:
                    {
                        ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "{AFAFAF}Hoods", "Champ Scoop\nFury Scoop\nRace Scoop\nWorx Scoop\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 3:
                    {
                        ShowPlayerDialog(playerid, 95, DIALOG_STYLE_LIST, "{AFAFAF}Vents", "Oval Vents\nSquare Vents\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 4:
                    {
                        ShowPlayerDialog(playerid, 96, DIALOG_STYLE_LIST, "{AFAFAF}Lights", "Round Fog\nSquare Fog\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 5:
                    {
                        ShowPlayerDialog(playerid, 97, DIALOG_STYLE_LIST, "{AFAFAF}Exhausts", "Upswept\nTwin\nLarge\nMedium\nSmall\nAlien\nX-Flow\nSlamin\nChrome\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 6:
                    {
                        ShowPlayerDialog(playerid, 98, DIALOG_STYLE_LIST, "{AFAFAF}Front Bumper", "Chrome\nSlamin\nAlien\nX-Flow\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 7:
                    {
                        ShowPlayerDialog(playerid, 99, DIALOG_STYLE_LIST, "{AFAFAF}Rear Bumper", "Chrome\nSlamin\nAlien\nX-Flow\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 8:
                    {
                        ShowPlayerDialog(playerid, 100, DIALOG_STYLE_LIST, "{AFAFAF}Roofs", "Roof Scoop\nAlien\nX-Flow\nCovertible\nHardtop\nSofttop\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 9:
                    {
                        ShowPlayerDialog(playerid, 101, DIALOG_STYLE_LIST, "{AFAFAF}Spoilers", "Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\nAlien\nX-Flow\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 10:
                    {
                        ShowPlayerDialog(playerid, 102, DIALOG_STYLE_LIST, "{AFAFAF}Side Skirts", "Sideskirt\nAlien Sideskirt\nX-Flow Sideskirt\nChrome Sideskirt\n`Chrome Flames` Sideskirt\n`Chrome Strip` Sideskirt\n`Chrome Arches`\n`Chrome Trim` Sideskirt\n`Wheelcovers` Sideskirt\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 11:
                    {
                        ShowPlayerDialog(playerid, 103, DIALOG_STYLE_LIST, "{AFAFAF}Wheels", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 12:
                    {
                        //Hydraulics
                        ShowPlayerDialog(playerid, 104, DIALOG_STYLE_LIST, "{AFAFAF}Hydraulics", "Ar norite montuoti hydraulikà?", "Montuoti", "Atðaukti");
                    }
                    case 13:
                    {
                        //Nitrous Oxide
                        ShowPlayerDialog(playerid, 105, DIALOG_STYLE_LIST, "{AFAFAF}Nitrous Oxide", "2x\n5x\n10x\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                }
            }
        }
    }
    if(dialogid == 91)
    {
        if(IsPlayerInAnyVehicle(playerid) && PlayerDB[playerid][Job] == 5)
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new bool:galima;
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        switch(GetVehicleModel(tmpVehicleID))
                        {
                            case 483:
                            {
                                galima = true;
                            }
                            case 534:
                            {
                                galima = true;
                            }
                            case 535:
                            {
                                galima = true;
                            }
                            case 536:
                            {
                                galima = true;
                            }
                            case 558..562:
                            {
                                galima = true;
                            }
                            case 565:
                            {
                                galima = true;
                            }
                            case 567:
                            {
                                galima = true;
                            }
                            case 575..576:
                            {
                                galima = true;
                            }
                            default:
                            {
                                galima = false;
                            }
                        }
                        if(galima == true)
                        {
                            ChangeVehiclePaintjob(tmpVehicleID, 0);
                            SendClientMessage(playerid, ZALIA, "• PaintJob atliktas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis PaintJob tipas netinka ðiai maðinai.");
                        }
                    }
                    case 1:
                    {
                        new bool:galima;
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        switch(GetVehicleModel(tmpVehicleID))
                        {
                            case 534..536:
                            {
                                galima = true;
                            }
                            case 558..562:
                            {
                                galima = true;
                            }
                            case 565:
                            {
                                galima = true;
                            }
                            case 567:
                            {
                                galima = true;
                            }
                            case 575..576:
                            {
                                galima = true;
                            }
                            default:
                            {
                                galima = false;
                            }
                        }
                        if(galima == true)
                        {
                            ChangeVehiclePaintjob(tmpVehicleID, 1);
                            SendClientMessage(playerid, ZALIA, "• PaintJob atliktas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis PaintJob tipas netinka ðiai maðinai.");
                        }
                    }
                    case 2:
                    {
                        new bool:galima;
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        switch(GetVehicleModel(tmpVehicleID))
                        {
                            case 534..536:
                            {
                                galima = true;
                            }
                            case 558..562:
                            {
                                galima = true;
                            }
                            case 565:
                            {
                                galima = true;
                            }
                            case 567:
                            {
                                galima = true;
                            }
                            case 576:
                            {
                                galima = true;
                            }
                            default:
                            {
                                galima = false;
                            }
                        }
                        if(galima == true)
                        {
                            ChangeVehiclePaintjob(tmpVehicleID, 2);
                            SendClientMessage(playerid, ZALIA, "• PaintJob atliktas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis PaintJob tipas netinka ðiai maðinai.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(GetVehiclePaintjob(tmpVehicleID) != 3)
                        {
                            ChangeVehiclePaintjob(tmpVehicleID, 3);
                            SendClientMessage(playerid, ZALIA, "• PaintJob nuvalytas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ant maðinos nëra PaintJob,kurá reiktu nuimti.");
                        }
                    }
                    case 4:
                    {
                        ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "{AFAFAF}PaintJobs", "PaintJob 1\nPaintJob 2\nPaintJob 3\nNuimti PaintJob\n   \nAtgal", "Rinktis", "Atðaukti");
                    }
                    case 5:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 92)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new value = strval(inputdialogtext);
                if(value < 0 || value > 255)
                {
                    ErrorMsg(playerid,"• Blogas spalvos ID.");
                }
                else
                {
                    new color1,color2;
                    new vid = GetPlayerVehicleID(playerid);
                    GetVehicleColor(vid, color1, color2);
                    ChangeVehicleColor(vid, value, color2);
                    VehicleDB[vid][VehicleColor1] = value;
                    SendClientMessage(playerid, ZALIA, "• Pirma maðinos spalva pakeista.");
                    new info[512];
                    strcat(info, "Áveskite norimà maðinos 2 spalvà (0-255)\n");
                    strcat(info, "Pagrindinës spalvos:\n");
                    strcat(info, "Juoda 0\n");
                    strcat(info, "Balta 1\n");
                    strcat(info, "Þydra 2\n");
                    strcat(info, "Raudona 3\n");
                    strcat(info, "Geltona 6\n");
                    strcat(info, "Pilka 13\n");
                    strcat(info, "Þalia 86\n");
                    strcat(info, "Visos spalvos http://wiki.sa-mp.com/wiki/Colors_List");
                    ShowPlayerDialog(playerid, 93, DIALOG_STYLE_INPUT, "{AFAFAF}Maðinos daþymas", info, "Uþdëti", "Atðaukti");
                }
            }
        }
    }
    if(dialogid == 93)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new value = strval(inputdialogtext);
                if(value < 0 || value > 255)
                {
                    ErrorMsg(playerid,"• Blogas spalvos ID.");
                }
                else
                {
                    new color1,color2;
                    new v = GetPlayerVehicleID(playerid);
                    GetVehicleColor(v, color1, color2);
                    ChangeVehicleColor(v, color1, value);
                    SendClientMessage(playerid, ZALIA, "• Antra maðinos spalva pakeista.");
                    VehicleDB[v][VehicleColor2] = value;
                    ShowPlayerTuningMeniu(playerid);
                }
            }
        }
    }
    if(dialogid == 94)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1004) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1004);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Champ Scoop sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1005) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1005);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Fury Scoop sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1011) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1011);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Race Scoop sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1012) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1012);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Worx Scoop sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4..5:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 95)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1142) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1142);
                            AddVehicleComponent(tmpVehicleID, 1143);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Oval Vents sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1144) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1144);
                            AddVehicleComponent(tmpVehicleID, 1145);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Square Vents sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2..3:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 96)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1013) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1013);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Round Fog Lamp sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1024) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1024);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Square Fog Lamp sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2..3:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 97)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1018) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1018);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Upswept Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1019) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1019);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Twin Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1020) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1020);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Large Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1021) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1021);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Medium Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1022) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1022);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Small Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 5:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1028) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1028);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1034) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1034);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1046) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1046);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1064) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1064);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1065) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1065);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1092) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1092);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1092) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1092);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• Alien Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 6:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1029) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1029);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1037) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1037);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1045) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1045);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1059) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1059);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1066) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1066);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1089) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1089);
                            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 7:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1043) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1043);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1105) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1105);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1114) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1114);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1127) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1127);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1132) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1132);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1135) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1135);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 8:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1044) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1044);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1104) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1104);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1113) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1113);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1126) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1126);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1129) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1129);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1136) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1136);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Exhaust sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 98)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1117) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1117);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1174) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1174);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1176) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1176);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1179) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1179);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1182) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1182);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1189) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1189);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1191) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1191);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Front Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1181) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1181);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1185) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1185);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1188) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1188);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1190) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1190);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Front Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1153) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1153);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1155) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1155);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1160) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1160);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1166) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1166);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1169) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1169);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1171) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1171);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Front Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1152) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1152);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1157) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1157);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1165) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1165);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1170) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1170);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1172) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1172);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1173) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1173);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Front Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"•• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 99)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1180) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1180);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1184) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1184);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1187) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1187);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1192) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1192);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Rear Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1193) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1193);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1186) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1186);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1183) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1183);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1178) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1178);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1179) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1179);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1175) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1175);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Slamin Rear Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1141) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1141);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1149) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1149);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1150) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1150);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1154) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1154);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1159) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1159);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1168) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1168);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Rear Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1140) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1140);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1148) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1148);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1151) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1151);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1156) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1156);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1161) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1161);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1167) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1167);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Rear Bumper sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 100)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1006) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1006);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Roof Scoop sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1032) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1032);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Roof Vent sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1038) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1038);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Roof Vent sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1054) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1054);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1067) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1067);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1088) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1088);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Roof sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1033) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1033);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof Vent sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1035) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1035);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof Vent sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1053) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1053);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1061) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1061);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1068) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1068);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1091) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1091);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Roof sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1103) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1103);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Covertible Roof sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1128) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1128);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Vinyl HardTop roof sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1130) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1130);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• HardTop roof sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 5:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1131) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1131);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Softtop roof sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 101)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1000) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1000);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Pro Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1001) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1001);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Win Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1002) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1002);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Drag Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1003) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1003);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alpha Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1014) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1014);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Champ Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 5:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1015) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1015);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Race Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 6:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1016) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1016);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Worx Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 7:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1023) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1023);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Fury Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 8:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1049) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1049);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1058) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1058);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1138) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1138);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1147) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1147);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1162) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1162);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1164) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1164);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 9:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1050) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1050);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1060) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1060);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1139) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1139);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1146) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1146);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1158) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1158);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1163) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1163);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Spoiler sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 102)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new tmpVehicleID = GetPlayerVehicleID(playerid);
                switch(listitem)
                {
                    case 0:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1007) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1007);
                            AddVehicleComponent(tmpVehicleID, 1017);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1026) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1026);
                            AddVehicleComponent(tmpVehicleID, 1027);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1036) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1036);
                            AddVehicleComponent(tmpVehicleID, 1040);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1047) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1047);
                            AddVehicleComponent(tmpVehicleID, 1051);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1056) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1056);
                            AddVehicleComponent(tmpVehicleID, 1062);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1069) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1069);
                            AddVehicleComponent(tmpVehicleID, 1071);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1090) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1090);
                            AddVehicleComponent(tmpVehicleID, 1094);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Alien Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1030) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1030);
                            AddVehicleComponent(tmpVehicleID, 1031);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1039) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1039);
                            AddVehicleComponent(tmpVehicleID, 1041);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1048) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1048);
                            AddVehicleComponent(tmpVehicleID, 1052);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1057) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1057);
                            AddVehicleComponent(tmpVehicleID, 1063);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1070) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1070);
                            AddVehicleComponent(tmpVehicleID, 1072);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1093) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1093);
                            AddVehicleComponent(tmpVehicleID, 1095);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• X-Flow Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1099) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1099);
                            AddVehicleComponent(tmpVehicleID, 1042);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• Chrome Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1101) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1101);
                            AddVehicleComponent(tmpVehicleID, 1122);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Flames` Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 5:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1102) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1102);
                            AddVehicleComponent(tmpVehicleID, 1133);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Strip` Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1107) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1107);
                            AddVehicleComponent(tmpVehicleID, 1108);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Strip` Sideskirt sëkmingai primontuotas.");
                        }
                        else if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1134) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1134);
                            AddVehicleComponent(tmpVehicleID, 1137);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Strip` Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 6:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1106) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1106);
                            AddVehicleComponent(tmpVehicleID, 1124);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Arches` Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 7:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1118) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1118);
                            AddVehicleComponent(tmpVehicleID, 1120);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Chrome Trim` Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 8:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1119) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1119);
                            AddVehicleComponent(tmpVehicleID, 1121);
                            PlayerPlaySound(playerid,1133,0,0,0);
                            SendClientMessage(playerid, ZALIA, "• `Wheelcovers` Sideskirt sëkmingai primontuotas.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 103)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new tmpVehicleID = GetPlayerVehicleID(playerid);
                switch(listitem)
                {
                    case 0:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1025) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1025);
                            SendClientMessage(playerid, ZALIA, "• Offroad ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1073) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1073);
                            SendClientMessage(playerid, ZALIA, "• Shadow ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1074) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1074);
                            SendClientMessage(playerid, ZALIA, "• Mega ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 3:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1075) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1075);
                            SendClientMessage(playerid, ZALIA, "• Rimshine ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 4:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1076) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1076);
                            SendClientMessage(playerid, ZALIA, "• Wires ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 5:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1077) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1077);
                            SendClientMessage(playerid, ZALIA, "• Classic ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 6:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1078) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1078);
                            SendClientMessage(playerid, ZALIA, "• Twist ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 7:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1079) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1079);
                            SendClientMessage(playerid, ZALIA, "• Cutter ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 8:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1080) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1080);
                            SendClientMessage(playerid, ZALIA, "• Switch ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 9:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1081) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1081);
                            SendClientMessage(playerid, ZALIA, "• Grove ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 10:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1082) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1082);
                            SendClientMessage(playerid, ZALIA, "• Import ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 11:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1083) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1083);
                            SendClientMessage(playerid, ZALIA, "• Dollar ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 12:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1084) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1084);
                            SendClientMessage(playerid, ZALIA, "• Trance ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 13:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1085) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1085);
                            SendClientMessage(playerid, ZALIA, "• Atomic ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 14:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1096) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1096);
                            SendClientMessage(playerid, ZALIA, "• Ahab ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 15:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1097) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1097);
                            SendClientMessage(playerid, ZALIA, "• Virtual ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 16:
                    {
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1098) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1098);
                            SendClientMessage(playerid, ZALIA, "• Access ratai sëkmingai uþmontuoti.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 104)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                new tmpVehicleID = GetPlayerVehicleID(playerid);
                if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1087) == 1)
                {
                    AddVehicleComponent(tmpVehicleID, 1087);
                    SendClientMessage(playerid, ZALIA, "• Hydraulinë sistema sëkmingai ámontuota.");
                    PlayerPlaySound(playerid,1133,0,0,0);
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                }
            }
        }
        else
        {
            ShowPlayerTuningMeniu(playerid);
        }
    }
    if(dialogid == 105)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid))
            {
                switch(listitem)
                {
                    case 0:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1009) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1009);
                            SendClientMessage(playerid, ZALIA, "• Nitrous Oxide 2x sëkmingai primontuotas.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 1:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1008) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1008);
                            SendClientMessage(playerid, ZALIA, "• Nitrous Oxide 5x sëkmingai primontuotas.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    case 2:
                    {
                        new tmpVehicleID = GetPlayerVehicleID(playerid);
                        if(IsValidComponentForVehicleModel(GetVehicleModel(tmpVehicleID),1010) == 1)
                        {
                            AddVehicleComponent(tmpVehicleID, 1010);
                            SendClientMessage(playerid, ZALIA, "• Nitrous Oxide 10x sëkmingai primontuotas.");
                            PlayerPlaySound(playerid,1133,0,0,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis komponentas ðiai maðinai netinka.");
                        }
                    }
                    default:
                    {
                        ShowPlayerTuningMeniu(playerid);
                    }
                }
            }
        }
    }
    if(dialogid == 106)
    {
        if(response)
        {
            if(A51_UZIMTA == 0)
            {
                A51_UZIMTA = PlayerDB[playerid][Direktorius];
                switch(A51_UZIMTA)
                {
                    case 1:
                    {
                        UpdateDynamic3DTextLabelText(A51ZonaText, 0xFF0000FF, "A51 zona uþimta Policijos.");
                    }
                    case 9:
                    {
                        UpdateDynamic3DTextLabelText(A51ZonaText, 0xFF0000FF, "A51 zona uþimta spec. bûrio „Aras“.");
                    }
                    case 11:
                    {
                        UpdateDynamic3DTextLabelText(A51ZonaText, 0xFF0000FF, "A51 zona uþimta SPD.");
                    }
                }
            }
        }
        return 1;
    }
    if(dialogid == 107)
    {
        if(response)
        {
            if(A51_UZIMTA == PlayerDB[playerid][Direktorius])
            {
                A51_UZIMTA = 0;
                UpdateDynamic3DTextLabelText(A51ZonaText, 0x00FF00FF, "Zona laisva");
            }
        }
        return 1;
    }
    if(dialogid == 108)
    {
        if(response)
        {
            if(A52_UZIMTA == 0)
            {
                A52_UZIMTA = PlayerDB[playerid][Direktorius];
                switch(A52_UZIMTA)
                {
                    case 1:
                    {
                        UpdateDynamic3DTextLabelText(A52ZonaText, 0xFF0000FF, "A52 zona uþimta Policijos.");
                    }
                    case 9:
                    {
                        UpdateDynamic3DTextLabelText(A52ZonaText, 0xFF0000FF, "A52 zona uþimta spec. bûrio aras.");
                    }
                    case 11:
                    {
                        UpdateDynamic3DTextLabelText(A52ZonaText, 0xFF0000FF, "A52 zona uþimta SPD.");
                    }
                }
            }
        }
        return 1;
    }
    if(dialogid == 109)
    {
        if(response)
        {
            if(A52_UZIMTA == PlayerDB[playerid][Direktorius])
            {
                A52_UZIMTA = 0;
                UpdateDynamic3DTextLabelText(A52ZonaText, 0x00FF00FF, "A52 zona laisva");
            }
        }
        return 1;
    }
    if(dialogid == 110)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(LuccheseMafiaSettings[LuccheseAmmoShotgun] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerLuccheseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 111, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 1:
                    {
                        if(LuccheseMafiaSettings[LuccheseAmmoDeagle] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerLuccheseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 112, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 2:
                    {
                        if(LuccheseMafiaSettings[LuccheseAmmoAK47] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerLuccheseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 113, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 3:
                    {
                        if(LuccheseMafiaSettings[LuccheseAmmoSniper] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerLuccheseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 114, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 4:
                    {
                        if(LuccheseGangZoneU == false)
                        {
                            if(PlayerDB[playerid][LastTimePlayerFought] + 10 >= gettime())
                            {
                                ErrorMsg(playerid,"• Jûs esate kovoje,todël negalite gydytis ar pasijimti Ðarvø.");
                                return 1;
                            }
                            else
                            {
                                SetPlayerHealthEx(playerid, 100);
                                SetPlayerArmourEx(playerid, 100);
                                SendClientMessage(playerid, ZALIA, "• Sëkmingai pasigydëte ir pasiëmete ðarvø.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Pasigydymo naudoti negalite, nes jûsø bazë yra grobimo bûsenoje.");
                        }
                        ShowPlayerLuccheseGunDialog(playerid);
                    }
                }
            }
        }
        return 1;
    }
    if(dialogid == 111)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(response)
            {
                new Ammo111 = strval(inputdialogtext);
                if(Ammo111 < 0)
                {
                    Ammo111 = Ammo111 * -1;
                }
                if(Ammo111 > 200)
                {
                    Ammo111 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo111 > LuccheseMafiaSettings[LuccheseAmmoShotgun])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_SHOTGUN,Ammo111);
                    LuccheseMafiaSettings[LuccheseAmmoShotgun]-=Ammo111;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d shotgun ginklui skirtø kulkø.", Ammo111);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio Shotgun su %i kulkø(-a)", Ammo111);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: Shotgun su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo111);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'7', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerLuccheseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 112)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(response)
            {
                new Ammo112 = strval(inputdialogtext);
                if(Ammo112 < 0)
                {
                    Ammo112 = Ammo112 * -1;
                }
                if(Ammo112 > 200)
                {
                    Ammo112 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo112 > LuccheseMafiaSettings[LuccheseAmmoDeagle])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_DEAGLE,Ammo112);
                    LuccheseMafiaSettings[LuccheseAmmoDeagle]-=Ammo112;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d Desert Eagle ginklui skirtø kulkø.", Ammo112);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio Desert Eagle su %i kulkø(-a)", Ammo112);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: Desert Eagle su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo112);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'7', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerLuccheseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 113)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(response)
            {
                new Ammo113 = strval(inputdialogtext);
                if(Ammo113 < 0)
                {
                    Ammo113 = Ammo113 * -1;
                }
                if(Ammo113 > 200)
                {
                    Ammo113 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo113 > LuccheseMafiaSettings[LuccheseAmmoAK47])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_AK47,Ammo113);
                    LuccheseMafiaSettings[LuccheseAmmoAK47]-=Ammo113;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d AK-47 ginklui skirtø kulkø.", Ammo113);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio AK-47 su %i kulkø(-a)", Ammo113);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: AK-47 su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo113);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'7', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerLuccheseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 114)
    {
        if(PlayerDB[playerid][Job] == 7)
        {
            if(response)
            {
                new Ammo114 = strval(inputdialogtext);
                if(Ammo114 < 0)
                {
                    Ammo114 = Ammo114 * -1;
                }
                if(Ammo114 > 200)
                {
                    Ammo114 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo114 > LuccheseMafiaSettings[LuccheseAmmoSniper])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_SNIPER,Ammo114);
                    LuccheseMafiaSettings[LuccheseAmmoSniper]-=Ammo114;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d Sniper Rifle ginklui skirtø kulkø.", Ammo114);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio Sniper Rifle su %i kulkø(-a)", Ammo114);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: Sniper Rifle su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo114);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'7', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerLuccheseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 115)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
                        if(GenoveseMafiaSettings[GenoveseAmmoShotgun] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerGenoveseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 116, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 1:
                    {
                        if(GenoveseMafiaSettings[GenoveseAmmoDeagle] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerGenoveseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 117, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 2:
                    {
                        if(GenoveseMafiaSettings[GenoveseAmmoAK47] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerGenoveseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 118, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 3:
                    {
                        if(GenoveseMafiaSettings[GenoveseAmmoSniper] == 0)
                        {
                            ErrorMsg(playerid,"• Amunicijos nëra.");
                            ShowPlayerGenoveseGunDialog(playerid);
                        }
                        else
                        {
                            ShowPlayerDialog(playerid, 119, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø sandelys", "Áraðykite kiek norësite pasiimti pasirinkto ginklo amunicijos.", "Gerai", "Atðaukti");
                        }
                    }
                    case 4:
                    {
                        if(GenoveseGangZoneU == false)
                        {
                            if(PlayerDB[playerid][LastTimePlayerFought] + 10 >= gettime())
                            {
                                ErrorMsg(playerid,"• Jûs esate kovoje,todël negalite gydytis ar pasijimti Ðarvø.");
                                return 1;
                            }
                            else
                            {
                                SetPlayerHealthEx(playerid, 100);
                                SetPlayerArmourEx(playerid, 100);
                                SendClientMessage(playerid, ZALIA, "• Sëkmingai pasigydëte ir pasiëmete ðarvø.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Pasigydymo naudoti negalite, nes jûsø bazë yra grobimo bûsenoje.");
                        }
                        ShowPlayerGenoveseGunDialog(playerid);
                    }
                }
            }
        }
        return 1;
    }
    if(dialogid == 116)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(response)
            {
                new Ammo116 = strval(inputdialogtext);
                if(Ammo116 < 0)
                {
                    Ammo116 = Ammo116 * -1;
                }
                if(Ammo116 > 200)
                {
                    Ammo116 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo116 > GenoveseMafiaSettings[GenoveseAmmoShotgun])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_SHOTGUN,Ammo116);
                    GenoveseMafiaSettings[GenoveseAmmoShotgun]-=Ammo116;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d shotgun ginklui skirtø kulkø.", Ammo116);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio ShotGun su %i kulkø(-a)", Ammo116);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: ShotGun su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo116);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'8', '%e');", string);

                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerGenoveseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 117)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(response)
            {
                new Ammo117 = strval(inputdialogtext);
                if(Ammo117 < 0)
                {
                    Ammo117 = Ammo117 * -1;
                }
                if(Ammo117 > 200)
                {
                    Ammo117 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo117 > GenoveseMafiaSettings[GenoveseAmmoDeagle])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_DEAGLE,Ammo117);
                    GenoveseMafiaSettings[GenoveseAmmoDeagle]-=Ammo117;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d Desert Eagle ginklui skirtø kulkø.", Ammo117);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio Desert Eagle su %i kulkø(-a)", Ammo117);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: Desert Eagle su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo117);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'8', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerGenoveseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 118)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(response)
            {
                new Ammo118 = strval(inputdialogtext);
                if(Ammo118 < 0)
                {
                    Ammo118 = Ammo118 * -1;
                }
                if(Ammo118 > 200)
                {
                    Ammo118 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo118 > GenoveseMafiaSettings[GenoveseAmmoAK47])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_AK47,Ammo118);
                    GenoveseMafiaSettings[GenoveseAmmoAK47]-=Ammo118;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d AK-47 ginklui skirtø kulkø.", Ammo118);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio AK-47 su %i kulkø(-a)", Ammo118);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: AK-47 su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo118);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'8', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerGenoveseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 119)
    {
        if(PlayerDB[playerid][Job] == 8)
        {
            if(response)
            {
                new Ammo119 = strval(inputdialogtext);
                if(Ammo119 < 0)
                {
                    Ammo119 = Ammo119 * -1;
                }
                if(Ammo119 > 200)
                {
                    Ammo119 = 200;
                    ErrorMsg(playerid,"• Per vienà kartà galima paimti iki 200 kulkø.");
                }
                if(Ammo119 > GenoveseMafiaSettings[GenoveseAmmoSniper])
                {
                    SendClientMessage(playerid, RAUDONA, "• Tiek amunicijos nëra.");
                }
                else
                {
                    GivePlayerWeaponEx(playerid,WEAPON_SNIPER,Ammo119);
                    GenoveseMafiaSettings[GenoveseAmmoSniper]-=Ammo119;
                    new string[144];
                    format(string, 144, "• Ið saugyklos pasiëmiai %d Sniper Rifle ginklui skirtø kulkø.", Ammo119);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 128, "paëmiau ið sandelio Sniper Rifle su %i kulkø(-a)", Ammo119);
                    cmd_r(playerid,string);
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    new QueryString[256];
                    format(string, 128, "%d-%d-%d, %s, paëmë ið sandelio: Sniper Rifle su %i kulkø(-a).", Year,Month,Day,Vardas(playerid),Ammo119);
                    mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `sandelioistorija`(`ID`, `DarboID`, `Irasas`) VALUES (NULL,'8', '%e');", string);
                    mysql_function_query( connectionHandle, QueryString, false, "", "" );
                }
            }
            ShowPlayerGenoveseGunDialog(playerid);
        }
        return 1;
    }
    if(dialogid == 120)
    {
        if(response)
        {
            new info[308];
            PlayerDB[playerid][TuriBankoSaskaita] = 1;
            PlayerDB[playerid][BankoSaskaitosPin] = (random(9)+1) * 1000 + (random(10) * 100) + (random(10) * 10) + random(10);
            format(info, 308, "Jûsø banko sàskaita buvo sëkmingai atidaryta,ja galite pradëti naudotis ið karto.\n{FF0000}Jûsø banko sàskaitos PIN kodas yra: %d.\n{FF0000}Praðome ðá kodà ásiminti bei nesidalyti su treèiaisiais asmenimis,jis yra reikalingas atlikti ávairius veiksmus susijûsius su jûsø banko sàskaita.", PlayerDB[playerid][BankoSaskaitosPin]);
            SendClientMessage(playerid, GELTONA, "• Praradus banko sàskaitos kodà praðome susisiekti su serverio administracija.");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Sàskaitos atidarymas", info, "Gerai", "");
            if(PlayerDB[playerid][Pasiekimas11] == 0)
            {
                PlayerCompletedPasiekimas(playerid,11);
            }
        }
        return 1;
    }
    if(dialogid == 121)
    {
        if(response)
        {
            if(strval(inputdialogtext) == PlayerDB[playerid][BankoSaskaitosPin])
            {
                ShowPlayerDialog(playerid, 11, DIALOG_STYLE_LIST, "{AFAFAF}SAN-ANDREAS.LT Bankas", "{FFFFFF}Balansas\n{FFFFFF}Padëti pinigus\n{FFFFFF}Iðimti pinigus\nTelefono sàskaita", "Pasirinkti","Baigti");
            }
            else
            {
                ErrorMsg(playerid,"• Neteisingai ávedëte banko sàskaitos PIN kodà.");
            }
        }
        return 1;
    }
    if(dialogid == 122)
    {
        if(response && BankSecurityDoorsOpen == false)
        {
            if(BankSecurityDoorsTimeLock >= gettime())
            {
                ErrorMsg(playerid,"#KLAIDA PRIE EIGA UÞDRAUSTA.");
                PlayerPlaySound(playerid, 1055, 0, 0, 0);
            }
            else
            {
                new kodas;
                if(sscanf(inputdialogtext, "d", kodas))
                {
                    ErrorMsg(playerid,"#KLAIDA PRIE EIGA UÞDRAUSTA 15SEK.");
                    PlayerPlaySound(playerid, 1055, 0, 0, 0);
                    SendClientMessage(playerid, GELTONA, "• Ðá laikà galite iðnaudoti bandymui prisiminti kodà.");
                    BankSecurityDoorsTimeLock = gettime() + 15;
                }
                else
                {

                    if(kodas == BankRealPin)
                    {
                        SendClientMessage(playerid, ZALIA, "Prie eiga suteikta,durys atidaromos.");
                        MoveDynamicObject(BankoSecurityDurys, 1375.8600, -963.8800, 199.9800, 0.05, 0, 0, -90);
                        SetTimer("CloseBankDoors1", 15 * 60000, false);
                        BankSecurityDoorsOpen = true;
                        BankSecurityDoorsDestroyed = false;
                        BankRealPin = (random(9)+1) * 1000 + (random(10) * 100) + (random(10) * 10) + random(10);
                    }
                    else
                    {
                        ErrorMsg(playerid,"#KLAIDA PRIE EIGA UÞDRAUSTA 15SEK.");
                        PlayerPlaySound(playerid, 1055, 0, 0, 0);
                        SendClientMessage(playerid, GELTONA, "• Ðá laikà galite iðnaudoti bandymui prisiminti kodà.");
                        BankSecurityDoorsTimeLock = gettime() + 15;
                    }
                }
            }
        }
        return 1;
    }
    //Moto laikymas
    if(dialogid == 131)
    {
        if(response)
        {

            PlayerDB[playerid][MoneyInPocket]-=500;
            new VehID131 = GetPlayerVehicleID(playerid);

            SetVehiclePos(VehID131, -2089.2859,-137.6326,34.8928);
            SetVehicleZAngle(VehID131, 180.9);

            SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("LetPlayerDrive", 2000, false, "d", playerid);
            SetPlayerRaceCheckpoint(playerid, 0, -2089.1521,-144.2441,35.3203,-2090.9241,-163.0309,34.8984, 2);
            PlayerDB[playerid][RaceCheckPointID] = 74;
            SendClientMessage(playerid, GELTONA,"------------------");
            SendClientMessage(playerid, -1, "Norëdami iðlaikyti ðá egzaminà praðome laikytis jums pateiktø instrukcijø.");
            SendClientMessage(playerid, -1, "Pirmiausia privalote uþsidëti motociklininko ðalmà ,tuomet uþvesti maðinà bei ájungti ðviesos þibintus.");
            SendClientMessage(playerid, -1, "Atlikus ðià uþduotá praðome vaþiuoti á pirmà raudonà taðkà.");
            SendClientMessage(playerid, -1, "Variklá uþvesite panaudojus komandà /variklis.");
            SendClientMessage(playerid, -1, "Salma galiteu uþsidëti panaudojus komandà /salmas.");
            SendClientMessage(playerid, -1, "Ðviesos þibintus ájungsite panaudojus komandà /sviesos.");
            SendClientMessage(playerid, GELTONA,"------------------");
        }
        else
        {
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        }
    }
    if(dialogid == 132)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(response)
            {
                if(PlayerDB[playerid][MoneyInPocket] < 1000)
                {
                    ErrorMsg(playerid,"Egzamino treèiojo etapo laikymo kaina 1.000€,taèiau jûs tiek neturite.");
                    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                    RemovePlayerFromVehicle(playerid);
                }
                else{
                    PlayerDB[playerid][MoneyInPocket]-=1000;
                    SendClientMessage(playerid, ZALIA, "Dabar galite pradëti laikyti vairavimo egzamino paskutinæ dalá.");
                    ErrorMsg(playerid,"Nevirðykite leistino greièio,bei sekite nurodymus.");
                    PlayerDB[playerid][RaceCheckPointID] = 15;
                    SetPlayerRaceCheckpoint(playerid, 0, -2060.1421,-96.7492,34.7905, -2044.8218,-84.8268,34.9456, 2);
                }
            }
            else
            {
                SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                PlayerDB[playerid][RaceCheckPointID] = 0;
                ErrorMsg(playerid,"Atlikti paskutinæ egzamino dalá galësite bet kada panorëje. Tam reikës álipti á vairavimo mokyklos maðinà.");
            }
        }
    }
    //Sunkv
    if(dialogid == 133)
    {
        if(response)
        {
            PlayerDB[playerid][MoneyInPocket]-=500;
            new vehicleid133 = GetPlayerVehicleID(playerid);
            SetVehiclePos(vehicleid133, -2020.5128,-146.6115,35.9292);
            SetVehicleZAngle(vehicleid133, 180.5);
            if(SunkvTrailerisSpawned == true)
            {
                DestroyVehicle(SunkvTraileris);
            }
            SunkvTraileris = CreateVehicle(435, -2020.1832,-129.0905,35.9067, 180.5, -1, -1, 600, 0);
            SunkvTrailerisSpawned = true;

            SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("LetPlayerDrive", 2000, false, "d", playerid);
            SetPlayerRaceCheckpoint(playerid, 0, -2020.2701,-158.7240,35.9263, -2020.8184,-191.8413,35.9614, 2);
            PlayerDB[playerid][RaceCheckPointID] = 92;
            SendClientMessage(playerid, GELTONA,"------------------");
            SendClientMessage(playerid, -1, "Norëdami iðlaikyti ðá egzaminà praðome laikytis jums pateiktø instrukcijø.");
            SendClientMessage(playerid, -1, "Pirmiausia privalote uþsisegti saugos dirþà,tuomet uþvesti maðinà bei ájungti ðviesos þibintus.");
            SendClientMessage(playerid, -1, "Atlikus ðià uþduotá praðome vaþiuoti á pirmà raudonà taðkà.");
            SendClientMessage(playerid, -1, "Saugos dirþà galite uþsisegti panaudojus komandà /dirzas.");
            SendClientMessage(playerid, -1, "Variklá uþvesite panaudojus komandà /variklis.");
            SendClientMessage(playerid, -1, "Ðviesos þibintus ájungsite panaudojus komandà /sviesos.");
            SendClientMessage(playerid, GELTONA,"------------------");
        }
        else
        {
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        }
    }
    if(dialogid == 134)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(response)
            {
                if(PlayerDB[playerid][MoneyInPocket] < 1000)
                {
                    ErrorMsg(playerid,"Egzamino treèiojo etapo laikymo kaina 1.000€,taèiau jûs tiek neturite.");
                    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                    RemovePlayerFromVehicle(playerid);
                }
                else
                {
                    PlayerDB[playerid][MoneyInPocket]-=1000;
                    SendClientMessage(playerid, ZALIA, "Dabar galite pradëti laikyti vairavimo egzamino paskutinæ dalá.");
                    ErrorMsg(playerid,"Nevirðykite leistino greièio,bei sekite nurodymus.");
                    SendClientMessage(playerid, ZALIA, "• Jûsø uþduotis vaþiuoti á ðiuos raudonus taðkus ir taip pasiekti egzamino finiðà.");
                    PlayerDB[playerid][RaceCheckPointID] = 101;
                    SetPlayerRaceCheckpoint(playerid, 0, -2044.7632,-84.3410,35.7553, -2022.3422,-72.7411,35.7671, 1.5);
                }
            }
            else
            {
                SetVehicleToRespawn(GetPlayerVehicleID(playerid));
                PlayerDB[playerid][RaceCheckPointID] = 0;
                ErrorMsg(playerid,"Atlikti paskutinæ egzamino dalá galësite bet kada panorëje. Tam reikës álipti á vairavimo mokyklos maðinà.");
            }
        }
    }
    //Pilotas
    if(dialogid == 135)
    {
        if(response)
        {
            PlayerDB[playerid][MoneyInPocket]-=500;
            SetCameraBehindPlayer(playerid);
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("LetPlayerDrive", 2000, false, "d", playerid);
            SetPlayerRaceCheckpoint(playerid, 3, -2024.9231,-27.4834,83.6507,-2114.6167,232.2158,118.4827, 3);
            PlayerDB[playerid][RaceCheckPointID] = 152;
            SendClientMessage(playerid, GELTONA,"------------------");
            SendClientMessage(playerid, -1, "Norëdami iðlaikyti ðá egzaminà praðome laikytis jums pateiktø instrukcijø.");
            SendClientMessage(playerid, -1, "Pirmiausia privalote uþsisegti saugos dirþà,tuomet uþvesti maðinà bei ájungti ðviesos þibintus.");
            SendClientMessage(playerid, -1, "Atlikus ðià uþduotá praðome vaþiuoti á pirmà raudonà taðkà.");
            SendClientMessage(playerid, -1, "Saugos dirþà galite uþsisegti panaudojus komandà /dirzas.");
            SendClientMessage(playerid, -1, "Variklá uþvesite panaudojus komandà /variklis.");
            SendClientMessage(playerid, -1, "Ðviesos þibintus ájungsite panaudojus komandà /sviesos.");
            SendClientMessage(playerid, GELTONA,"------------------");
        }
        else
        {
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
        }
    }
    if(dialogid == 137)
    {
        if(response)
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new vid = GetPlayerVehicleID(playerid);
                switch(listitem)
                {
                    case 0:
                    {
                        SendClientMessage(playerid, GELTONA, "• Radijas iðjungtas.");
                        VehicleDB[vid][RadijasStotis] = 0;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                StopAudioStreamForPlayer(i);
                            }
                        }
                    }
                    case 1:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Radio Centras (LT)");
                        VehicleDB[vid][RadijasStotis] = 1;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://84.46.205.13:80/rc128.mp3");
                            }
                        }
                    }
                    case 2:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : M-1 (LT)");
                        VehicleDB[vid][RadijasStotis] = 2;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://radio.m-1.fm/m1/mp3.m3u");
                            }
                        }
                    }
                    case 3:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Power Hit Radio (LT)");
                        VehicleDB[vid][RadijasStotis] = 3;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://power-stream.data.lt:8000/PHR");
                            }
                        }
                    }
                    case 4:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Zip FM (LT)");
                        VehicleDB[vid][RadijasStotis] = 4;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://84.46.205.13:80/zipfm128.mp3");
                            }
                        }
                    }
                    case 5:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Radio Skonto (LV)");
                        VehicleDB[vid][RadijasStotis] = 5;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://skonto.ls.lv:8002/mp3");
                            }
                        }
                    }
                    case 6:
                    {
                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Raadio Unno (EST)");
                        VehicleDB[vid][RadijasStotis] = 6;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://217.146.71.24:80/uuno_high.mp3");
                            }
                        }
                    }
                    case 7:
                    {

                        SendClientMessage(playerid, GELTONA, "• Dabar klausote : Radio ZET (PL)");
                        VehicleDB[vid][RadijasStotis] = 7;
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInVehicle(i, vid))
                            {
                                PlayAudioStreamForPlayer(i, "http://radiozetmp3-18.eurozet.pl:8400");
                            }
                        }
                    }
                }
            }
        }
    }

    if(dialogid == 143)
    {
        if(response)
        {
            if(PlayerDB[playerid][HousePlayerIsLookingAt] >= 0)
            {
                new NamoNumeris = PlayerDB[playerid][HousePlayerIsLookingAt];
                if(HouseInfo[NamoNumeris][HouseBought] == 1)
                {
                    ErrorMsg(playerid,"• Namas jau nupirktas.");
                }
                else
                {
                    if(HouseInfo[NamoNumeris][HouseForCredits] == 1)
                    {
                        if(PlayerDB[playerid][Credits] >= HouseInfo[NamoNumeris][HouseCost])
                        {
                            HouseInfo[NamoNumeris][HouseBought] = 1;
                            PlayerDB[playerid][Credits]-=HouseInfo[NamoNumeris][HouseCost];
                            format(HouseInfo[NamoNumeris][HouseOwner],24,"%s",Vardas(playerid));
                            DestroyPickup(HouseInfo[NamoNumeris][HousePickupID]);
                            new text[300];
                            format(text, 300, "%i Namas \n Kaina: {FF0000}%s {FF7B24}kreditø \n Savininkas: {FF0000}%s ", HouseInfo[NamoNumeris][HouseID],AddSpaces(HouseInfo[NamoNumeris][HouseCost]),HouseInfo[NamoNumeris][HouseOwner]);
                            UpdateDynamic3DTextLabelText(HouseInfo[NamoNumeris][HouseLabel], 0xFF7B24FF, text);
                            HouseInfo[NamoNumeris][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[NamoNumeris][HousePosX], HouseInfo[NamoNumeris][HousePosY],HouseInfo[NamoNumeris][HousePosZ], HouseInfo[NamoNumeris][HouseVirtualWorld]); // melynas
                            new QueryString[400];
                            mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `HouseOwner` = '%e',`HouseBought` = '1' WHERE `HouseID` = '%i';", Vardas(playerid),HouseInfo[NamoNumeris][HouseID]);
                            mysql_function_query(connectionHandle,QueryString,false,"","");
                            HousesWithOwners++;
                            SendClientMessage(playerid, ZALIA, "• Namas buvo nupirktas sëkmingai, namo valdymas /bustovaldymas.");
                            PlayerDB[playerid][TuriuNama] = 1;

                            if(PlayerDB[playerid][Pasiekimas19] == 0)
                            {
                                PlayerCompletedPasiekimas(playerid,19);
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûsø sàskaitoje nëra pakankamai kreditø ðio namo pirkimui.");
                        }
                    }
                    else
                    {
                        if(PlayerDB[playerid][MoneyInPocket] >= HouseInfo[NamoNumeris][HouseCost])
                        {
                            HouseInfo[NamoNumeris][HouseBought] = 1;
                            PlayerDB[playerid][MoneyInPocket]-=HouseInfo[NamoNumeris][HouseCost];
                            format(HouseInfo[NamoNumeris][HouseOwner],24,"%s",Vardas(playerid));
                            DestroyPickup(HouseInfo[NamoNumeris][HousePickupID]);
                            new text[300];
                            format(text, 300, "%i Namas \n Kaina: {FF0000}%s {FF7B24}€ \n Savininkas: {FF0000}%s ", HouseInfo[NamoNumeris][HouseID],AddSpaces(HouseInfo[NamoNumeris][HouseCost]),HouseInfo[NamoNumeris][HouseOwner]);
                            UpdateDynamic3DTextLabelText(HouseInfo[NamoNumeris][HouseLabel], 0xFF7B24FF, text);
                            HouseInfo[NamoNumeris][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[NamoNumeris][HousePosX], HouseInfo[NamoNumeris][HousePosY],HouseInfo[NamoNumeris][HousePosZ], HouseInfo[NamoNumeris][HouseVirtualWorld]); // melynas
                            new QueryString[400];
                            mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `HouseOwner` = '%e',`HouseBought` = '1' WHERE `HouseID` = '%i';", Vardas(playerid),HouseInfo[NamoNumeris][HouseID]);
                            mysql_function_query(connectionHandle,QueryString,false,"","");
                            HousesWithOwners++;
                            SendClientMessage(playerid, ZALIA, "• Namas buvo nupirktas sëkmingai, namo valdymas /bustovaldymas.");
                            PlayerDB[playerid][TuriuNama] = 1;

                            if(PlayerDB[playerid][Pasiekimas19] == 0)
                            {
                                PlayerCompletedPasiekimas(playerid,19);
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûsø kiðenëje nëra pakankamai pinigø ðio namo pirkimui.");
                        }
                    }
                }
            }
        }
    }
    if(dialogid == 144)
    {
        if(response)
        {
            new PlayerInterior = GetPlayerInterior(playerid);
            if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
            {
                new PlayerVW = GetPlayerVirtualWorld(playerid);
                if(PlayerVW >= 3)
                {
                    if(HouseInfo[PlayerVW-3][HouseID] >= 0)
                    {
                        if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                        {
                            new CostOfHouseTS = floatround(HouseInfo[PlayerVW-3][HouseCost] * 0.9, floatround_ceil);
                            switch(HouseInfo[PlayerVW-3][HouseForCredits])
                            {
                                case 0:
                                {

									PlayerDB[playerid][MoneyInPocket]+=CostOfHouseTS;
                                    PlayerDB[playerid][MoneyInPocket]-=HouseInfo[PlayerVW-3][HouseMokesciai];
                                    OnPlayerPickUpDynamicPickup(playerid, ExitFromHouse[0]);
                                    HouseInfo[PlayerVW-3][HouseBought] = 0;
                                    format(HouseInfo[PlayerVW-3][HouseOwner],24,"");
                                    HouseInfo[PlayerVW-3][Siuksles] = 0;
                                    HouseInfo[PlayerVW-3][HouseMokesciai] = 0;
                                    HouseInfo[PlayerVW-3][VaistaiNamie] = 0;
                                    HouseInfo[PlayerVW-3][HouseMoneyInside] = 0;
                                    HouseInfo[PlayerVW-3][NarkSlotState] = 0;
                                    HouseInfo[PlayerVW-3][NarkHome] = 0;
                                    HouseInfo[PlayerVW-3][NarkHomeHeroinas] = 0;
                                    HouseInfo[PlayerVW-3][NarkHomeKokainas] = 0;
                                    HouseInfo[PlayerVW-3][KiekTelpaNarku] = 100;
                                    HouseInfo[PlayerVW-3][SviesaIjungta] = 0;
                                    SendClientMessage(playerid, ZALIA, "• Namas buvo sëkmingai parduotas serveriui.");
                                    PlayerDB[playerid][TuriuNama] = 0;
                                    DestroyPickup(HouseInfo[PlayerVW-3][HousePickupID]);
                                    new text[300];
                                    format(text, 300, "%i Namas \n Kaina: {FF0000}%s {FF7B24}€ \n Savininkas: {FF0000}Nëra ", HouseInfo[PlayerVW-3][HouseID],AddSpaces(HouseInfo[PlayerVW-3][HouseCost]));
                                    UpdateDynamic3DTextLabelText(HouseInfo[PlayerVW-3][HouseLabel], 0xFF7B24FF, text);
                                    HouseInfo[PlayerVW-3][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[PlayerVW-3][HousePosX], HouseInfo[PlayerVW-3][HousePosY],HouseInfo[PlayerVW-3][HousePosZ], HouseInfo[PlayerVW-3][HouseVirtualWorld]); // melynas
                                    new QueryString[400];
                                    mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `HouseOwner` = '%e',`HouseBought` = '0',`HouseMoneyInside` = '0', `Siuksles` = '0', `NarkSlotState` = '0',`NarkHome` = '0', `NarkHomeHeroinas` = '0',`NarkHomeKokainas` = '0',`KiekTelpaNarku` = '100', `Mokesciai` = '0', `SviesaIjungta` = '0' WHERE `HouseID` = '%i';", "Nëra",HouseInfo[PlayerVW-3][HouseID]);
                                    mysql_function_query(connectionHandle,QueryString,false,"","");
                                    HousesWithOwners--;



                                }
                                case 1:
                                {
                                    PlayerDB[playerid][Credits]+=CostOfHouseTS;
                                    OnPlayerPickUpDynamicPickup(playerid, ExitFromHouse[0]);
                                    HouseInfo[PlayerVW-3][HouseBought] = 0;
                                    format(HouseInfo[PlayerVW-3][HouseOwner],24,"");
                                    SendClientMessage(playerid, ZALIA, "• Namas buvo sëkmingai parduotas serveriui.");
									PlayerDB[playerid][TuriuNama] = 0;

         							HouseInfo[PlayerVW-3][Siuksles] = 0;
                                    HouseInfo[PlayerVW-3][HouseMokesciai] = 0;
                                    HouseInfo[PlayerVW-3][VaistaiNamie] = 0;
                                    HouseInfo[PlayerVW-3][HouseMoneyInside] = 0;
                                    HouseInfo[PlayerVW-3][NarkSlotState] = 0;
                                    HouseInfo[PlayerVW-3][NarkHome] = 0;
                                    HouseInfo[PlayerVW-3][NarkHomeHeroinas] = 0;
                                    HouseInfo[PlayerVW-3][NarkHomeKokainas] = 0;
                                    HouseInfo[PlayerVW-3][KiekTelpaNarku] = 100;
                                    HouseInfo[PlayerVW-3][SviesaIjungta] = 0;
                                    
                                    DestroyPickup(HouseInfo[PlayerVW-3][HousePickupID]);
                                    new text[300];
                                    format(text, 300, "%i Namas \n Kaina: {FF0000}%s {FF7B24}kreditø \n Savininkas: {FF0000}Nëra ", HouseInfo[PlayerVW-3][HouseID],AddSpaces(HouseInfo[PlayerVW-3][HouseCost]));
                                    UpdateDynamic3DTextLabelText(HouseInfo[PlayerVW-3][HouseLabel], 0xFF7B24FF, text);
                                    HouseInfo[PlayerVW-3][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[PlayerVW-3][HousePosX], HouseInfo[PlayerVW-3][HousePosY],HouseInfo[PlayerVW-3][HousePosZ], HouseInfo[PlayerVW-3][HouseVirtualWorld]); // melynas
                                    new QueryString[400];
                                    mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `HouseOwner` = '%e',`HouseBought` = '0',`HouseMoneyInside` = '0', `Siuksles` = '0', `NarkSlotState` = '0',`NarkHome` = '0', `NarkHomeHeroinas` = '0',`NarkHomeKokainas` = '0',`KiekTelpaNarku` = '100', `Mokesciai` = '0', `SviesaIjungta` = '0' WHERE `HouseID` = '%i';", "Nëra",HouseInfo[PlayerVW-3][HouseID]);
                                    mysql_function_query(connectionHandle,QueryString,false,"","");
                                    HousesWithOwners--;

                                }
                            }

                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Turite bûti namo viduje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Turite bûti namo viduje.");
            }
        }
    }
    //
    if(dialogid == 146)
    {
        new HouseTrueOwner;
        if(response)
        {
            sscanf(HouseInfo[PlayerDB[playerid][HouseWasOffered]][HouseOwner], "u", HouseTrueOwner);
            if(IsPlayerConnected(HouseTrueOwner))
            {
                new hIDAS = PlayerDB[playerid][HouseWasOffered];
                if(HouseInfo[hIDAS][HouseOfferedCost] <= PlayerDB[playerid][MoneyInPocket])
                {
                    PlayerDB[playerid][MoneyInPocket]-=HouseInfo[hIDAS][HouseOfferedCost];
                    PlayerDB[HouseTrueOwner][MoneyInPocket]+=HouseInfo[hIDAS][HouseOfferedCost];
                    SendClientMessage(HouseTrueOwner, ZALIA, "• Namas buvo parduotas.");
                    //PRAVERIT
                    PlayerDB[HouseTrueOwner][TuriuNama] = 0;
                    PlayerDB[HouseTrueOwner][MoneyInPocket] -= HouseInfo[HouseTrueOwner][HouseMokesciai];
                    //
                    format(HouseInfo[hIDAS][HouseOwner],24,"%s",Vardas(playerid));
                    DestroyPickup(HouseInfo[hIDAS][HousePickupID]);
                    new text[300];
                    format(text, 300, "%i Namas \n Kaina: {FF0000}%s {FF7B24}€ \n Savininkas: {FF0000}%s ", HouseInfo[hIDAS][HouseID],AddSpaces(HouseInfo[hIDAS][HouseCost]),HouseInfo[hIDAS][HouseOwner]);
                    UpdateDynamic3DTextLabelText(HouseInfo[hIDAS][HouseLabel], 0xFF7B24FF, text);
                    HouseInfo[hIDAS][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[hIDAS][HousePosX], HouseInfo[hIDAS][HousePosY],HouseInfo[hIDAS][HousePosZ], HouseInfo[hIDAS][HouseVirtualWorld]); // melynas
                    new QueryString[400];
                    mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `HouseOwner` = '%e' WHERE `HouseID` = '%i';", Vardas(playerid),HouseInfo[hIDAS][HouseID]);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                    SendClientMessage(playerid, ZALIA, "• Sveikiname ásigyjus namà. Visas namø komandas rasite /namai.");
                    PlayerDB[playerid][TuriuNama] = 1;
                    if(PlayerDB[playerid][Pasiekimas19] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,19);
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite pakankamai pinigø ásigyti ðá namà.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Namo savininkas nëra prisijungæs.");

            }
        }
        else
        {
            SendClientMessage(playerid, RAUDONA, "• Atsisakëte pasiûlymo.");
            sscanf(HouseInfo[PlayerDB[playerid][HouseWasOffered]][HouseOwner], "u", HouseTrueOwner);
            if(IsPlayerConnected(HouseTrueOwner))
            {
                new string[128];
                format(string, 128, "• %s(%i) atsisakë jûsø pasiûlymo pirkti namà.", Vardas(playerid),playerid);
                SendClientMessage(HouseTrueOwner, RAUDONA, string);
            }
        }
        PlayerDB[playerid][PlayerOfferHouseTo] = -1;
        PlayerDB[playerid][PlayerOfferHouseCost] = -1;
        PlayerDB[playerid][HouseWasOffered] = -1;
        PlayerDB[HouseTrueOwner][PlayerOfferHouseTo] = -1;
        PlayerDB[HouseTrueOwner][PlayerOfferHouseCost] = -1;
        PlayerDB[HouseTrueOwner][HouseWasOffered] = -1;
    }
    if(dialogid == 147)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new PlayerVW = GetPlayerVirtualWorld(playerid);
                    new string[128];
                    format(string, 128, "• Ðiame name dabar yra padëta %s €.", AddSpaces(HouseInfo[PlayerVW-3][HouseMoneyInside]));
                    SendClientMessage(playerid, GELTONA, string);
                    cmd_pinigainame(playerid,"");
                }
                case 1:
                {
                    ShowPlayerDialog(playerid, 148, DIALOG_STYLE_INPUT, "{AFAFAF}Padëti pinigus", "Áraðykite sumà pinigø kiek norite palikti namuose.", "Padëti", "Atðaukti");
                }
                case 2:
                {
                    ShowPlayerDialog(playerid, 149, DIALOG_STYLE_INPUT, "{AFAFAF}Paimti pinigus", "Áraðykite sumà pinigø kiek norite pasiimti ið namø.", "Paimti", "Atðaukti");
                }
            }
        }
    }
    if(dialogid == 148)
    {
        if(response)
        {
            new Amount = strval(inputdialogtext);
            if(Amount > 0)
            {
                if(PlayerDB[playerid][MoneyInPocket] >= Amount)
                {
                    new PlayerVW = GetPlayerVirtualWorld(playerid);
                    new string[128];
                    PlayerDB[playerid][MoneyInPocket]-=Amount;
                    HouseInfo[PlayerVW-3][HouseMoneyInside]+=Amount;
                    format(string, 128, "• Padëjote %s € ,dabar name yra padëta %s €.",AddSpaces(Amount),AddSpaces(HouseInfo[PlayerVW-3][HouseMoneyInside]));
                    SendClientMessage(playerid, GELTONA, string);
                    cmd_pinigainame(playerid,"");
                    SaveMoneyInHouse(PlayerVW-3);


                }
                else
                {
                    ErrorMsg(playerid,"• Tiek pinigø neturite.");
                    ShowPlayerDialog(playerid, 148, DIALOG_STYLE_INPUT, "{AFAFAF}Padëti pinigus", "Áraðykite sumà pinigø kiek norite palikti namuose.", "Padëti", "Atðaukti");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Pinigø kiekis kurá norite padëti turi bûti naturalusis skaièius.");
                ShowPlayerDialog(playerid, 148, DIALOG_STYLE_INPUT, "{AFAFAF}Padëti pinigus", "Áraðykite sumà pinigø kiek norite palikti namuose.", "Padëti", "Atðaukti");
            }
        }
        else
        {
            cmd_pinigainame(playerid,"");
        }
    }


    if(dialogid == 149)
    {
        if(response)
        {
            new Amount = strval(inputdialogtext);
            if(Amount > 0)
            {
                new PlayerVW = GetPlayerVirtualWorld(playerid);
                if(HouseInfo[PlayerVW-3][HouseMoneyInside] >= Amount)
                {
                    new string[128];
                    PlayerDB[playerid][MoneyInPocket]+=Amount;
                    HouseInfo[PlayerVW-3][HouseMoneyInside]-=Amount;
                    format(string, 128, "• Paëmëte %s € ,dabar name yra padëta %s €.",AddSpaces(Amount),AddSpaces(HouseInfo[PlayerVW-3][HouseMoneyInside]));
                    SendClientMessage(playerid, GELTONA, string);
                    cmd_pinigainame(playerid,"");
                    SaveMoneyInHouse(PlayerVW-3);

                }
                else
                {
                    ErrorMsg(playerid,"• Tiek pinigø ðiame name nëra.");
                    ShowPlayerDialog(playerid, 149, DIALOG_STYLE_INPUT, "{AFAFAF}Paimti pinigus", "Áraðykite sumà pinigø kiek norite pasiimti ið namø.", "Paimti", "Atðaukti");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Pinigø kiekis kurá norite paimti turi bûti naturalusis skaièius.");
                ShowPlayerDialog(playerid, 149, DIALOG_STYLE_INPUT, "{AFAFAF}Paimti pinigus", "Áraðykite sumà pinigø kiek norite pasiimti ið namø.", "Paimti", "Atðaukti");
            }
        }
        else
        {
            cmd_pinigainame(playerid,"");
        }
    }
    if(dialogid == 150)
    {
        if(response)
        {
            if(PlayerDB[playerid][Uzdarbis])
            {
                PlayerDB[playerid][MoneyInPocket] +=PlayerDB[playerid][Uzdarbis];
                new text[144];
                format(text, 144, "• Sëkmingai atsiëmete savo uþdirbá (%s €).", AddSpaces(PlayerDB[playerid][Uzdarbis]));
                SendClientMessage(playerid, GELTONA, text);
                if(PlayerDB[playerid][Uzdarbis] >= 100000)
                {
                    if(PlayerDB[playerid][Pasiekimas26] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,26);
                    }
                }
                if(PlayerDB[playerid][Uzdarbis] >= 200000)
                {
                    if(PlayerDB[playerid][Pasiekimas27] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,27);
                    }
                }
                PlayerDB[playerid][Uzdarbis] = 0;
            }
        }
    }
    if(dialogid == 151)
    {
        if(response)
        {
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                if(PavaduotojaiNustatymai[PlayerDB[playerid][Direktorius]][PavIsLoaded] == true)
                {
                    if(listitem == 0)
                    {
                        new QueryString[256];
                        mysql_format(connectionHandle, QueryString, 256, "SELECT `Name` FROM `players` WHERE `Pavaduotojas` = '%i' LIMIT 1;", PlayerDB[playerid][Direktorius]);
                        mysql_function_query(connectionHandle, QueryString, true, "OnLoadPavaduotojoSkirimoForma", "d", playerid);
                    }
                    else if(listitem == 1)
                    {
                        new DarboNumTMP = PlayerDB[playerid][Direktorius];
                        new info[1024];
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToInvite] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë priimti naujus darbuotojus á darbà\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë priimti naujus darbuotojus á darbà\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToKickFromJob] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë iðmesti darbuotojà ið darbo\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë iðmesti darbuotojà ið darbo\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWrite] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë raðyti visiems per /d atstovaujant organizacijà\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë raðyti visiems per /d atstovaujant organizacijà\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWarn] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë áspëti darbuotojus áspëjimais taip pat juos ir nuimti\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë áspëti darbuotojus áspëjimais taip pat juos ir nuimti\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToGiveBonuses] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë skirti premijas darbuotojams (pinigai keliauja ið darbo fondo)\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë skirti premijas darbuotojams (pinigai keliauja ið darbo fondo)\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToLockGarage] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë uþrakinti poþeminá garaþà\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë uþrakinti poþeminá garaþà\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateFund] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë valdyti darbo fondà\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë valdyti darbo fondà\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToSetARank] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë skirstyti darbuotojø rangus\n");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë skirstyti darbuotojø rangus\n");
                        }
                        if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateRanks] == 1)
                        {
                            strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë valdyti rangus");
                        }
                        else
                        {
                            strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë valdyti rangus");
                        }

                        ShowPlayerDialog(playerid, 153, DIALOG_STYLE_LIST, "{AFAFAF}Pavaduotojo teisiø nustatymas", info, "Nustatyti", "Atgal");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Dar nëra uþkrauti pavaduotojo nustatymai.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
            }
        }
    }
    if(dialogid == 152)
    {
        if(response)
        {
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                if(PavaduotojaiNustatymai[PlayerDB[playerid][Direktorius]][PavIsLoaded] == true)
                {
                    if(strcmp(inputdialogtext, "Nusalinti", false) == 0)
                    {
                        new QueryString[128];
                        mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `Pavaduotojas` = '0' WHERE `Pavaduotojas` = '%d';", PlayerDB[playerid][Direktorius]);
                        mysql_function_query(connectionHandle, QueryString, false, "", "");
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(PlayerDB[i][Pavaduotojas] == PlayerDB[playerid][Direktorius])
                            {
                                PlayerDB[i][Pavaduotojas] = 0;
                                SavePlayerData(i);
                                SendClientMessage(i, RAUDONA, "• Jûs buvote nuðalintas nuo pavaduotojo pareigø.");
                            }
                        }
                        SendClientMessage(playerid, ZALIA, "• Jûsø pavaduotojas buvo nuðalintas.");
                    }
                    else
                    {
                        if(strcmp(Vardas(playerid), inputdialogtext, true) == 0)
                        {
                            ErrorMsg(playerid,"• Savæs negalite paskirti pavaduotojo pareigoms.");
                            return 1;
                        }
                        new id;
                        sscanf(inputdialogtext, "u", id);
                        if(IsPlayerConnected(id))
                        {
                            if(PlayerDB[id][Job] == PlayerDB[playerid][Direktorius])
                            {
                                PlayerDB[id][Pavaduotojas] = PlayerDB[playerid][Direktorius];

                                new Year,Month,Day;
                                getdate(Year, Month, Day);
                                new string[128];
                                format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                                mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecamePav` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(id));
                                mysql_function_query( connectionHandle, string, false, "", "");
                                SavePlayerData(id);
                                SendClientMessage(id,ZALIA, "• Direktorius paskyrë jus eiti pavaduojanèio pareigas.");
                            }
                        }
                        else
                        {
                            new QueryString[160];
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            mysql_format(connectionHandle, QueryString, 160, "UPDATE `players` SET `Pavaduotojas` = '%d',`DatePlayerBecamePav` = '%04d-%02d-%02d' WHERE `Name` = '%e' AND `Job` = '%i' LIMIT 1;", PlayerDB[playerid][Direktorius],Year,Month,Day,inputdialogtext,PlayerDB[playerid][Direktorius]);
                            mysql_function_query(connectionHandle, QueryString, false, "", "");
                            SendClientMessage(playerid, ZALIA, "• Jei þaidëjo vardas buvo nurodytas teisingai, þaidëjas bus paskirtas eiti jûsø pavaduotojo pareigas.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Dar nëra uþkrauti pavaduotojo nustatymai.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
            }
        }
    }
    if(dialogid == 153)
    {
        if(response)
        {
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                if(PavaduotojaiNustatymai[PlayerDB[playerid][Direktorius]][PavIsLoaded] == true)
                {
                    new DarboNumTMP = PlayerDB[playerid][Direktorius];
                    switch(listitem)
                    {
                        case 0:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToInvite] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToInvite] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToInvite] = 0;
                            }
                        }
                        case 1:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToKickFromJob] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToKickFromJob] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToKickFromJob] = 0;
                            }
                        }
                        case 2:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWrite] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToWrite] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToWrite] = 0;
                            }
                        }
                        case 3:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWarn] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToWarn] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToWarn] = 0;
                            }
                        }
                        case 4:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToGiveBonuses] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToGiveBonuses] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToGiveBonuses] = 0;
                            }
                        }
                        case 5:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToLockGarage] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToLockGarage] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToLockGarage] = 0;
                            }
                        }
                        case 6:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateFund] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateFund] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateFund] = 0;
                            }
                        }
                        case 7:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToSetARank] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToSetARank] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToSetARank] = 0;
                            }
                        }
                        case 8:
                        {
                            if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateRanks] == 0)
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateRanks] = 1;
                            }
                            else
                            {
                                PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateRanks] = 0;
                            }
                        }
                    }
                    new info[1024];
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToInvite] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë priimti naujus darbuotojus á darbà\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë priimti naujus darbuotojus á darbà\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToKickFromJob] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë iðmesti darbuotojà ið darbo\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë iðmesti darbuotojà ið darbo\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWrite] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë raðyti visiems per /d atstovaujant organizacijà\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë raðyti visiems per /d atstovaujant organizacijà\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToWarn] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë áspëti darbuotojus áspëjimais taip pat juos ir nuimti\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë áspëti darbuotojus áspëjimais taip pat juos ir nuimti\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToGiveBonuses] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë skirti premijas darbuotojams (pinigai keliauja ið darbo fondo)\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë skirti premijas darbuotojams (pinigai keliauja ið darbo fondo)\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToLockGarage] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë uþrakinti poþeminá garaþà\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë uþrakinti poþeminá garaþà\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateFund] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë valdyti darbo fondà\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë valdyti darbo fondà\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToSetARank] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë skirstyti darbuotojø rangus\n");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë skirstyti darbuotojø rangus\n");
                    }
                    if(PavaduotojaiNustatymai[DarboNumTMP][PavRightToAdministrateRanks] == 1)
                    {
                        strcat(info, "{FFFFFF}[{00FF00}+{FFFFFF}] Teisë valdyti rangus");
                    }
                    else
                    {
                        strcat(info, "{FFFFFF}[{FF0000}-{FFFFFF}] Teisë valdyti rangus");
                    }

                    ShowPlayerDialog(playerid, 153, DIALOG_STYLE_LIST, "{AFAFAF}Pavaduotojo teisiø nustatymas", info, "Nustatyti", "Atgal");
                }
                else
                {
                    ErrorMsg(playerid,"• Dar nëra uþkrauti pavaduotojo nustatymai.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
            }
        }
        else
        {
            cmd_dpavaduotojas(playerid,"");
        }
    }
    if(dialogid == 154)
    {
        if(PlayerDB[playerid][WantedLevel] > 0)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= PlayerDB[playerid][WantedLevel] * 150)
            {
                PlayerDB[playerid][MoneyInPocket]-= PlayerDB[playerid][WantedLevel] * 150;
                new radio[144];
                format(radio, 144, "[racija] þaidëjas %s susimokëjo baudà San-Fierro policijos departamente!", Vardas(playerid));
                SendClientMessageToLaw(0x0099CCFF,radio);
                PlayerDB[playerid][WantedLevel] = 0;
                foreach(new i : Player)
                {
                    if(PlayerDB[i][SekimoBusena] == true && PlayerDB[i][SekimoTaikinys] == playerid && IsJobFromLaw(PlayerDB[i][Job]) )
                    {
                        SendClientMessage(i, RAUDONA, "• Jûsø sekamas þaidëjas neteko gaudomumo lygio.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Baudai susimokëti jûsø pinigø neuþteko.");
                new string[144];
                format(string, 144, "• Þaidëjas %s neturëjo pakankamai pinigø sumokëti baudai.", Vardas(playerid));
                ErrorMsg(PlayerDB[playerid][BaudaSkyresPlayeris],string);
            }
        }
        return 1;
    }
    if(dialogid == 155)
    {
        if(response)
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2000)
            {
                new string[144];
                format(string, 144, "• Nepakanka ðalmo pirkimui (turi %d €, reikia 2000 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],2000 - PlayerDB[playerid][MoneyInPocket]);
                SendClientMessage(playerid, RAUDONA, string);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-=2000;
                PlayerDB[playerid][Salmas18645] = 1;
                SendClientMessage(playerid, ZALIA, "• Sëkmingai ásigyjote ðalmà,já uþsidëti galite su komanda /salmas.");
            }
        }
        return 1;
    }
    if(dialogid == 156)
    {
        if(response)
        {
            // Pagal bendrà patirtá\nPagal patirtá darbuose\nPagal ðiandien praleistà laikà serveryje
            switch(listitem)
            {
                case 0:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`XP` FROM `players` WHERE  `adminlvl` < 4 ORDER BY `XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByXP", "d", playerid);
                }
                case 1:
                {
                    ShowPlayerDialog(playerid, 157, DIALOG_STYLE_LIST, "{AFAFAF}Patirties topas pagal darbà", "Policija\nMedikai\nTaxi\nMechanikai\nLucchese Mafija\nGenovese Mafija\nSpec. burys „Aras“\nRadistai\nFûristai", "Rinktis", "Atðaukti");
                }
                case 2:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`SiandienZaista` FROM `players` WHERE `SiandienZaista` > 0 AND `adminlvl` < 4 ORDER BY `SiandienZaista` DESC LIMIT 10;", true, "OnPlayerRequestTopByPlayedToday", "d", playerid);
                }
                case 3:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`ZaistaTotal` FROM `players` WHERE `ZaistaTotal` > 0 AND `adminlvl` < 4  ORDER BY `ZaistaTotal` DESC LIMIT 10;", true, "OnPlayerRequestTopByPlayed", "d", playerid);
                }
                case 4:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,(`Job1XP` + `Job9XP`) AS `TeisesaugosXP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `TeisesaugosXP` DESC LIMIT 10;", true, "OnPlayerRequestTopByLawXP", "d", playerid);
                }
                case 5:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,(`Job7XP` + `Job8XP`) AS `MafijosXP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `MafijosXP` DESC LIMIT 10;", true, "OnPlayerRequestTopByMafXP", "d", playerid);
                }
                case 6:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`UzdarbisSiandien` FROM `players` WHERE `UzdarbisSiandien` > 0 AND `adminlvl` < 4 ORDER BY `UzdarbisSiandien` DESC LIMIT 10;", true, "OnPlayerRequestTopByUzdarbisS", "d", playerid);
                }
                case 7:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Uzdarbis` FROM `players` WHERE `Uzdarbis` > 0 AND `adminlvl` < 4  ORDER BY `Uzdarbis` DESC LIMIT 10;", true, "OnPlayerRequestTopByUzdarbis", "d", playerid);
                }
                case 8:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`UogosToday` FROM `players` WHERE `UogosToday` > 0  ORDER BY `UogosToday` DESC LIMIT 10;", true, "OnPlayerRequestTopByUogosToday", "d", playerid);
                }
                case 9:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`UogosTotal` FROM `players` WHERE `UogosTotal` > 0  ORDER BY `UogosTotal` DESC LIMIT 10;", true, "OnPlayerRequestTopByUogosTotal", "d", playerid);
                }

                case 10:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`MathToday` FROM `players` WHERE `MathToday` > 0  ORDER BY `MathToday` DESC LIMIT 10;", true, "OnPlayerRequestTopByMathToday", "d", playerid);
                }
                case 11:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`MathTotal` FROM `players` WHERE `MathTotal` > 0  ORDER BY `MathTotal` DESC LIMIT 10;", true, "OnPlayerRequestTopByMathTotal", "d", playerid);
                }

                case 12:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`KartsLaimejoSiandien` FROM `players` WHERE `KartsLaimejoSiandien` > 0  ORDER BY `KartsLaimejoSiandien` DESC LIMIT 10;", true, "OnPlayerRequestTopByKartsToday", "d", playerid);
                }
                case 13:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`KartsLaimejoTotal` FROM `players` WHERE `KartsLaimejoTotal` > 0  ORDER BY `KartsLaimejoTotal` DESC LIMIT 10;", true, "OnPlayerRequestTopByKartsTotal", "d", playerid);
                }
            }
        }
    }
    if(dialogid == 157)
    {
        if(response)
        {
            //
            switch(listitem)
            {
                case 0:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job1XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job1XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job1XP]);
                }
                case 1:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job2XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job2XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job2XP]);
                }
                case 2:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job4XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job4XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job4XP]);
                }
                case 3:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job5XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job5XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job5XP]);
                }
                case 4:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job7XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job7XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job7XP]);
                }
                case 5:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job8XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job8XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job8XP]);
                }
                case 6:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job9XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job9XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job9XP]);
                }
                case 7:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job10XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job10XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job10XP]);
                }
                case 8:
                {
                    mysql_function_query(connectionHandle, "SELECT `Name`,`Job21XP` FROM `players` WHERE `adminlvl` < 4  ORDER BY `Job21XP` DESC LIMIT 10;", true, "OnPlayerRequestTopByWXP", "dd", playerid,PlayerDB[playerid][Job21XP]);
                }
            }
        }
        else
        {
            cmd_top(playerid,"");
        }
        return 1;
    }
    if(dialogid == 158)
    {
        if(response)
        {
            if(listitem == 0)
            {
                ShowPlayerDialog(playerid, 159, DIALOG_STYLE_LIST, "{AFAFAF}Ávairios prekës", "Tel.sàskaita\nFotoaparatas( 20 kadrø )", "Rinktis", "Atgal");
            }
            else if(listitem == 1)
            {
                ShowPlayerDialog(playerid, 161, DIALOG_STYLE_LIST, "{AFAFAF}Gërimai", "Coca Cola 6€\nSprite 5€\nÐampanas 9€\nVynas 13€\nAlus 8€\nDegtinë 23€\nBrendis 31€", "Rinktis", "Atgal");
            }
            else if(listitem == 2)
            {
                ShowPlayerDialog(playerid, 162, DIALOG_STYLE_LIST, "{AFAFAF}Uþkandþiai", "Bulviø traðkuèiai 3€\nÐokoladas 2€\nSaulëgràþos (nelukðtentos) 2€\nSausainiai 3€", "Rinktis", "Atgal");
            }
        }
        return 1;
    }
    if(dialogid == 160)
    {
        if(response)
        {
            new amount160;
            amount160 = strval(inputdialogtext);
            if(amount160 > PlayerDB[playerid][MoneyInPocket])
            {
                ErrorMsg(playerid,"• Ðiai operacijai atlikti neturite pakankamai pinigø!");
                ShowPlayerDialog(playerid, 160, DIALOG_STYLE_INPUT, "{AFAFAF}Tel.sàskaita", "Áraðykite sumà uþ kurià norite pasipildyti telefono sàskaità.", "Pildyti", "Atgal");

            }
            else if(amount160 <= 0)
            {
                ErrorMsg(playerid,"• Suma kurià norite panaudoti saskaitos papildymui turi bûti bent 1€!");
                ShowPlayerDialog(playerid, 160, DIALOG_STYLE_INPUT, "{AFAFAF}Tel.sàskaita", "Áraðykite sumà uþ kurià norite pasipildyti telefono sàskaità.", "Pildyti", "Atgal");
            }
            else if(amount160 <= PlayerDB[playerid][MoneyInPocket])
            {
                PlayerDB[playerid][MoneyInPocket]-=amount160;
                PlayerDB[playerid][PhoneBalance]+=amount160;
                new OutputStr[100];
                format(OutputStr, 100, "• Pasipildei  sàskaità uþ %s€", AddPoints(amount160));
                SendClientMessage(playerid, Bright_YELLOW, OutputStr);
                format(OutputStr, 100, "• Ðiuo metu jûsø sàskaitoje yra %s€", AddPoints(PlayerDB[playerid][PhoneBalance]));
                SendClientMessage(playerid, Bright_YELLOW, OutputStr);
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }
        else
        {
            OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
        }
        return 1;
    }
    if(dialogid == 161)
    {
        if(response)
        {
            switch(listitem)
            {
                //Coca Cola 6€\nSprite 5€\nÐampanas 9€\nVynas 13€\nAlus 8€\nDegtinë 23€\nBrendis 31€
                case 0:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 6)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                        PlayerDB[playerid][MoneyInPocket]-=6;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Coca Colos uþ 6€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 5)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                        PlayerDB[playerid][MoneyInPocket]-=5;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Sprite uþ 5€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 2:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 9)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                        PlayerDB[playerid][MoneyInPocket]-=9;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Ðampano uþ 9€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 3:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 13)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                        PlayerDB[playerid][MoneyInPocket]-=13;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Vyno uþ 13€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 4:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 8)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
                        PlayerDB[playerid][MoneyInPocket]-=8;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Alaus uþ 8€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 5:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 23)
                    {
                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                        PlayerDB[playerid][MoneyInPocket]-=23;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Degtinës uþ 23€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
            }
            OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
        }
        else
        {
            OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
        }
        return 1;
    }
    if(dialogid == 162)
    {
        if(response)
        {
            switch(listitem)
            {
                //Bulviø traðkuèiai 3€\nÐokoladas 2€\nSaulëgràþos (nelukðtentos) 2€\nSausainiai 3€
                case 0:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 3)
                    {
                        PlayerDB[playerid][MoneyInPocket]-=3;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote bulviø traðkuèiø uþ 3€");

                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 2)
                    {
                        PlayerDB[playerid][MoneyInPocket]-=2;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Ðokolado uþ 2€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 2:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 2)
                    {
                        PlayerDB[playerid][MoneyInPocket]-=2;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Saulëgraþø uþ 2€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
                case 3:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 3)
                    {
                        PlayerDB[playerid][MoneyInPocket]-=3;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote Sausainiø uþ 3€");
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø.");
                    }
                }
            }
            OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
        }
        else
        {
            OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
        }
        return 1;
    }
    if(dialogid == 163)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    ShowPlayerDialog(playerid, 164, DIALOG_STYLE_LIST, "{AFAFAF}Svarbios vietos", "San-Fierro traukiniø stotis\nBokso salë\niRoad centrinis bankas\nNuosavos maðinos atkelimo aikðtelë\nSan-Fierro savivaldybë\nVairavimo mokykla\nKonfiskuotø maðinø aikðtelë\nTechninës apþiûros punktas\nLigoninë\niRoad.LT vaistinë\nNekilnojamo Turto Agentûra", "Rinktis", "Atgal");
                }
                case 1:
                {
                    ShowPlayerDialog(playerid, 165, DIALOG_STYLE_LIST, "{AFAFAF}Darbai su pakvietimais", "Policija\nSpec. burys „Aras“\nTaxi Firma\nMechanikai\nFûristai\nMedikai\nLucchese(Mafija)\nGenovese(Mafija)\nRadistai", "Rinktis", "Atgal");
                }
                case 2:
                {
                    ShowPlayerDialog(playerid, 166, DIALOG_STYLE_LIST, "{AFAFAF}Darbai be pakvietimo", "Ugnegesiai gelbëtojai\nValytojai\nAutobuso vairuotojai\nBurgerShot iðveþiotojas (1)\nBurgerShot iðveþiotojas (2)\nOro ir Vandens kurjeriai", "Rinktis", "Atgal");
                }
                case 3:
                {
                    new info[1024];
                    strcat(info, "Uþkandinë „BurgerShot“ (1)\n");
                    strcat(info, "Uþkandinë „BurgerShot“ (2)\n");
                    strcat(info, "Uþkandinë „Pizza“\n");
                    strcat(info, "Uþkandinë „CluckinBell“ (1)\n");
                    strcat(info, "Uþkandinë „CluckinBell“ (2)\n");
                    strcat(info, "Degalinë „Xoomer“ (1)\n");
                    strcat(info, "Degalinë „Xoomer“ (2)\n");
                    strcat(info, "Degalinë „Orlen“\n");
                    strcat(info, "Ávairiø transporto priemoniø nuomos punktas\n");
                    strcat(info, "Automobiliø nuomos punktas\n");
                    strcat(info, "Spaudos kioskas\n");
                    strcat(info, "San-Fierro miesto centrinis namø kvartalas\n");
                    strcat(info, "Prabangiø maðinø salonas\n");
                    strcat(info, "Vidutinës klasës maðinø salonas\n");
                    strcat(info, "Pigiø maðinø salonas\n");
                    strcat(info, "Ginklinë „Ammu-Nation“\n");
                    strcat(info, "Þolës rovimo vieta\n");
                    strcat(info, "Transporto priemoniø pardavimø punktas\n");
                    strcat(info, "Uogø rinkimas\n");
                    strcat(info, "AFK zona\n");
                    strcat(info, "Kartingai");
                    ShowPlayerDialog(playerid, 167, DIALOG_STYLE_LIST, "{AFAFAF}Ávairios kitos vietos", info, "Rinktis", "Atgal");
                }
                case 4:
                {
            		cmd_gps(playerid,"");
                }
                case 5:
                {
                	if(PlayerDB[playerid][FirstBusinessSlot] > -1)
                 	{
                  		new Float:Cords[3];//Vietos
                    	new MarsrutasPav[50];
                     	for(new i = 0;i<VerslaiPoolSize+1;i++)
                      	{
                      	    //printf("Kiek i: %i", i);
                            //printf("First Slot: %i", PlayerDB[playerid][FirstBusinessSlot]);
							//printf("VDB_SQLID: %i", VerslaiDB[i][VDB_SQLID]);
                       		if(VerslaiDB[i][VDB_SQLID] == PlayerDB[playerid][FirstBusinessSlot])
                         	{
								Cords[0] = VerslaiDB[i][VDB_X];
                            	Cords[1] = VerslaiDB[i][VDB_Y];
                             	Cords[2] = VerslaiDB[i][VDB_Z];
                             	printf("Verslo 1 koordinates: ");
                             	printf("Verslo X: %0.2f", VerslaiDB[i][VDB_X]);
								printf("Verslo Y: %0.2f", VerslaiDB[i][VDB_Y]);
								printf("Verslo Z: %0.2f", VerslaiDB[i][VDB_Z]);
								break;
                            }
                       	}
                        format(MarsrutasPav, 50, "Pirmas verslas");

						new message[128],Float:Atstumas;
      					Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
      					SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
      					SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
      					format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
      					SendClientMessage(playerid, 0xAD5BFFFF, message);
           			}
              		else
                	{
                 		cmd_gps(playerid,"");
                   		ErrorMsg(playerid,"• Neturite pirmo verslo.");
                  	}
                }
                case 6:
                {
                	if(PlayerDB[playerid][SecondBusinessSlot] > -1)
                	{
                 		new Float:Cords[3];//Vietos
                   		new MarsrutasPav[50];
                     	for(new i = 0;i<VerslaiPoolSize+1;i++)
                        {
                            //printf("Kiek i: %i", i);
                            //printf("Sec Slot: %i", PlayerDB[playerid][SecondBusinessSlot]);
							//printf("VDB_SQLID: %i", VerslaiDB[i][VDB_SQLID]);
							
                   			if(VerslaiDB[i][VDB_SQLID] == PlayerDB[playerid][SecondBusinessSlot])
                   			{
		                   		Cords[0] = VerslaiDB[i][VDB_X];
		                     	Cords[1] = VerslaiDB[i][VDB_Y];
		                     	Cords[2] = VerslaiDB[i][VDB_Z];
								printf("Verslo X: %0.2f", VerslaiDB[i][VDB_X]);
								printf("Verslo Y: %0.2f", VerslaiDB[i][VDB_Y]);
								printf("Verslo Z: %0.2f", VerslaiDB[i][VDB_Z]);
	                      		break;
                            }
                       	}
                        format(MarsrutasPav, 50, "Antras verslas");

						new message[128],Float:Atstumas;
						Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
						SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
						SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
						format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
						SendClientMessage(playerid, 0xAD5BFFFF, message);
      				}
          			else
          			{
             			cmd_gps(playerid,"");
             			ErrorMsg(playerid,"• Neturite antro verslo.");
                	}
                }
				case 7:
    			{
       				SendClientMessage(playerid, 0xAD5BFFFF, "• {FFFFFF}Nutraukëte vietos rodymà {AD5BFF}GPS{FFFFFF} sistemoje.");
           			RemovePlayerMapIcon(playerid, 97);//Targeto ICON
              		DisablePlayerCheckpoint(playerid);
                    //}
                }
                default:
                {
                    cmd_gps(playerid,"");
                }
            }
        }
        return 1;
    }
    if(dialogid == 164)
    {
        if(response)
        {
            new Float:Cords[3];//Vietos
            new MarsrutasPav[50];
            switch(listitem)
            {
                case 0:
                {
                    Cords[0] = -1982.1831;
                    Cords[1] = 146.8192;
                    Cords[2] = 27.6875;
                    format(MarsrutasPav, 50, "San-Fierro traukiniø stotis");
                }
                case 1:
                {
                    Cords[0] = -2166.6248;
                    Cords[1] = 252.1216;
                    Cords[2] = 35.3203;
                    format(MarsrutasPav, 50, "Bokso salë");
                }
                case 2:
                {
                    Cords[0] = -2760.9099;
                    Cords[1] = 375.3242;
                    Cords[2] = 5.0165;
                    format(MarsrutasPav, 50, "iRoad.LT centrinis bankas");
                }
                case 3:
                {
                    Cords[0] = -2668.3130;
                    Cords[1] = -1.9594;
                    Cords[2] = 6.1328;
                    format(MarsrutasPav, 50, "Nuosavos maðinos atkelimo aikðtelë");
                }
                case 4:
                {
                    Cords[0] = -2723.8005;
                    Cords[1] = -315.0634;
                    Cords[2] = 7.1843;
                    format(MarsrutasPav, 50, "San-Fierro savivaldybë");
                }
                case 5:
                {
                    Cords[0] = -2047.3846;
                    Cords[1] = -77.8068;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "Vairavimo mokykla");
                }
                case 6:
                {
                    Cords[0] = -2156.2727;
                    Cords[1] = -749.9160;
                    Cords[2] = 32.0234;
                    format(MarsrutasPav, 50, "Konfiskuotø maðinø aikðtelë");
                }
                case 7:
                {
                    Cords[0] = -1994.4501;
                    Cords[1] = 884.0284;
                    Cords[2] = 45.4453;
                    format(MarsrutasPav, 50, "Techninës apþiûros punktas");
                }
                case 8:
                {
                    Cords[0] = -2654.7207;
                    Cords[1] = 636.0814;
                    Cords[2] = 14.4531;
                    format(MarsrutasPav, 50, "Ligoninë");
                }
                case 9:
                {
                    Cords[0] = -1858.2648;
                    Cords[1] = 487.0911;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "iRoad.LT vaistinë");
                }
                case 10:
                {
                    Cords[0] = -2649.5066;
                    Cords[1] = 376.0516;
                    Cords[2] = 6.1593;
                    format(MarsrutasPav, 50, "Nekilnojamo Turto Agentûra");
                }
            }
            new message[128],Float:Atstumas;
            Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
            SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
            SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
            format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,(Atstumas / 1000));
            SendClientMessage(playerid, 0xAD5BFFFF, message);
        }
        else
        {
            cmd_gps(playerid,"");
        }
    }
    if(dialogid == 165)
    {
        if(response)
        {
            new Float:Cords[3];//Vietos
            new MarsrutasPav[50];
            switch(listitem)
            {
                case 0:
                {
                    Cords[0] = -1605.4299;
                    Cords[1] = 717.9474;
                    Cords[2] = 11.9613;
                    format(MarsrutasPav, 50, "Policija");
                }
                case 1:
                {
                    Cords[0] = -2127.0686;
                    Cords[1] = -80.2469;
                    Cords[2] = 35.3233;
                    format(MarsrutasPav, 50, "Spec. burys „Aras“");
                }
                case 2:
                {
                    Cords[0] = -2566.8633;
                    Cords[1] = 554.1053;
                    Cords[2] = 14.4609;
                    format(MarsrutasPav, 50, "Taxi Firma");
                }
                case 3:
                {
                    Cords[0] = -1753.6924;
                    Cords[1] = -116.3034;
                    Cords[2] = 3.5547;
                    format(MarsrutasPav, 50, "Mechanikai");
                }
                case 4:
                {
                    Cords[0] = 297.7413;
                    Cords[1] = 1411.3589;
                    Cords[2] = 9.7081;
                    format(MarsrutasPav, 50, "Fûristai");
                }
                case 5:
                {
                    Cords[0] = -2654.7207;
                    Cords[1] = 636.0814;
                    Cords[2] = 14.4531;
                    format(MarsrutasPav, 50, "Medikai");
                }
                case 6:
                {
                    Cords[0] = -719.1827;
                    Cords[1] = 972.2941;
                    Cords[2] = 12.1328;
                    format(MarsrutasPav, 50, "Lucchese mafija");
                }
                case 7:
                {
                    Cords[0] = -1055.4519;
                    Cords[1] = -1255.3007;
                    Cords[2] = 128.6310;
                    format(MarsrutasPav, 50, "Genovese mafija");
                }
                case 8:
                {
                    Cords[0] = -2177.5657;
                    Cords[1] = -90.5262;
                    Cords[2] = 35.3430;
                    format(MarsrutasPav, 50, "Radistai");
                }
            }
            new message[128],Float:Atstumas;
            Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
            SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
            SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
            format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
            SendClientMessage(playerid, 0xAD5BFFFF, message);
        }
        else
        {
            cmd_gps(playerid,"");
        }
    }
    if(dialogid == 166)
    {
        if(response)
        {
            new Float:Cords[3];//Vietos
            new MarsrutasPav[50];
            switch(listitem)
            {
                case 0:
                {
                    Cords[0] = -2016.1985;
                    Cords[1] = 77.2423;
                    Cords[2] = 27.8261;
                    format(MarsrutasPav, 50, "Ugnegesiai gelbëtojai");
                }
                case 1:
                {
                    Cords[0] = -1992.9388;
                    Cords[1] = 945.2415;
                    Cords[2] = 45.4453;
                    format(MarsrutasPav, 50, "Valytojai");
                }
                case 2:
                {
                    Cords[0] = -2187.7700;
                    Cords[1] = 1014.4716;
                    Cords[2] = 80.0078;
                    format(MarsrutasPav, 50, "Autobuso vairuotojai");
                }
                case 3:
                {
                    Cords[0] = -2354.7952;
                    Cords[1] = 989.1740;
                    Cords[2] = 50.6953;
                    format(MarsrutasPav, 50, "BurgerShot iðveþiotojas(1)");
                }
                case 4:
                {
                    Cords[0] = -2330.7683;
                    Cords[1] = -172.3537;
                    Cords[2] = 35.3203;
                    format(MarsrutasPav, 50, "BurgerShot iðveþiotojas(2)");
                }
                case 5:
                {
                    Cords[0] = -1263.9423;
                    Cords[1] = 157.2865;
                    Cords[2] = 14.1484;
                    format(MarsrutasPav, 50, "Oro ir Vandens kurjeriai");
                }
            }
            new message[128],Float:Atstumas;
            Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
            SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
            SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
            format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
            SendClientMessage(playerid, 0xAD5BFFFF, message);
        }
        else
        {
            cmd_gps(playerid,"");
        }
    }
    if(dialogid == 167)
    {
        if(response)
        {
            new Float:Cords[3];//Vietos
            new MarsrutasPav[50];
            switch(listitem)
            {
                case 0:
                {
                    Cords[0] = -2335.3896;
                    Cords[1] = -171.5991;
                    Cords[2] = 35.3203;
                    format(MarsrutasPav, 50, "Uþkandinë „BurgerShot“ (1)");
                }
                case 1:
                {
                    Cords[0] = -2359.5022;
                    Cords[1] = 1007.6956;
                    Cords[2] = 50.6953;
                    format(MarsrutasPav, 50, "Uþkandinë „BurgerShot“ (2)");
                }
                case 2:
                {
                    Cords[0] = -1722.7998;
                    Cords[1] = 1361.7649;
                    Cords[2] = 7.1875;
                    format(MarsrutasPav, 50, "Uþkandinë „Pizza“");
                }
                case 3:
                {
                    Cords[0] = -1816.4760;
                    Cords[1] = 615.9841;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "Uþkandinë „CluckinBell“ (1)");
                }
                case 4:
                {
                    Cords[0] = -2672.1309;
                    Cords[1] = 262.2483;
                    Cords[2] = 4.6328;
                    format(MarsrutasPav, 50, "Uþkandinë „CluckinBell“ (2)");
                }
                case 5:
                {
                    Cords[0] = -2254.9783;
                    Cords[1] = 534.8567;
                    Cords[2] = 35.1792;
                    format(MarsrutasPav, 50, "Degalinë „Xoomer“ (1)");
                }
                case 6:
                {
                    Cords[0] = -2416.1104;
                    Cords[1] = 969.6426;
                    Cords[2] = 45.2969;
                    format(MarsrutasPav, 50, "Degalinë „Xoomer“ (2)");
                }
                case 7:
                {
                    Cords[0] = -1675.4897;
                    Cords[1] = 413.3540;
                    Cords[2] = 7.1797;
                    format(MarsrutasPav, 50, "Degalinë „Orlen“");
                }
                case 8:
                {
                    Cords[0] = -1980.6229;
                    Cords[1] = 200.5928;
                    Cords[2] = 27.7101;
                    format(MarsrutasPav, 50, "Ávairiø transporto priemoniø nuomos punktas");
                }
                case 9:
                {
                    Cords[0] = -1947.3423;
                    Cords[1] = 580.4995;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "Automobiliø nuomos punktas");
                }
                case 10:
                {
                    Cords[0] = -1991.1841;
                    Cords[1] = 210.4167;
                    Cords[2] = 27.6799;
                    format(MarsrutasPav, 50, "Spaudos kioskas");
                }
                case 11:
                {
                    Cords[0] = -2015.0388;
                    Cords[1] = 353.8754;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "San-Fierro miesto centrinis namø kvartalas");
                }
                case 12:
                {
                    Cords[0] = -1647.0139;
                    Cords[1] = 1204.8783;
                    Cords[2] = 7.2500;
                    format(MarsrutasPav, 50, "Prabangiø maðinø salonas");
                }
                case 13:
                {
                    Cords[0] = -1969.0487;
                    Cords[1] = 289.8640;
                    Cords[2] = 35.1719;
                    format(MarsrutasPav, 50, "Vidutinës klasës maðinø salonas");
                }
                case 14:
                {
                    Cords[0] = -2122.1262;
                    Cords[1] = 493.0847;
                    Cords[2] = 35.1935;
                    format(MarsrutasPav, 50, "Pigiø maðinø salonas");
                }
                case 15:
                {
                    Cords[0] = -2626.2219;
                    Cords[1] = 211.7973;
                    Cords[2] = 4.6089;
                    format(MarsrutasPav, 50, "Ginklinë „Ammu-Nation“");
                }
                case 16:
                {
                    Cords[0] = -42.3656;
                    Cords[1] = 73.8112;
                    Cords[2] = 3.1172;
                    format(MarsrutasPav, 50, "Þolës rovimo vieta");
                }
                case 17:
                {
                    Cords[0] = -2078.5645;
                    Cords[1] = 1367.3749;
                    Cords[2] = 7.1016;
                    format(MarsrutasPav, 50, "Transporto priemoniø pardavimø punktas");
                }
                case 18:
                {
                    Cords[0] = -1740.2303;
                    Cords[1] = -930.5070;
                    Cords[2] = 76.0386;
                    format(MarsrutasPav, 50, "Uogø rinkimas");
                }
                //
                case 19:
                {
                    Cords[0] = -2672.8997;
                    Cords[1] = 258.1514;
                    Cords[2] = 4.3290;
                    format(MarsrutasPav, 50, "AFK zona");
                }
                case 20:
                {
                    Cords[0] = -1909.9999;
                    Cords[1] = -858.9926;
                    Cords[2] = 32.0234;
                    format(MarsrutasPav, 50, "Kartingai");
                }
            }
            new message[128],Float:Atstumas;
            Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
            SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
            SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
            format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
            SendClientMessage(playerid, 0xAD5BFFFF, message);
        }
        else
        {
            cmd_gps(playerid,"");
        }
    }
    if(dialogid == 168)
    {
        if(response)
        {
            new Float:Cords[3];//Vietos
            new MarsrutasPav[50];
            switch(listitem)
            {
                case 0:
                {
                    Cords[0] = 953.6377;
                    Cords[1] = 2112.2312;
                    Cords[2] = 11.8269;
                    format(MarsrutasPav, 50, "Maisto pasikrovimo punktas");
                }
                case 1:
                {
                    Cords[0] = 1576.7886;
                    Cords[1] = 1762.9585;
                    Cords[2] = 10.7022;
                    format(MarsrutasPav, 50, "Vaistø pasikrovimo punktas");
                }
                case 2:
                {
                    Cords[0] = 283.3030;
                    Cords[1] = -238.0345;
                    Cords[2] = 2.5910;
                    format(MarsrutasPav, 50, "Elektronikos pasikrovimo punktas");
                }
                case 3:
                {
                    Cords[0] = 2655.2859;
                    Cords[1] = -2099.5149;
                    Cords[2] = 13.5469;
                    format(MarsrutasPav, 50, "Degalø terminalas");
                }
            }
            new message[128],Float:Atstumas;
            Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
            SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
            SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
            format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,Atstumas / 1000);
            SendClientMessage(playerid, 0xAD5BFFFF, message);
        }
        else
        {
			SendClientMessage(playerid, ZALIA, "• Sëkmës :)");
        }
    }

    if(dialogid == 179)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                new skinID = strval(inputdialogtext);
                if(skinID > 0 && skinID <= 311)
                {
                    switch(skinID)
                    {
                        case 0, 164, 165, 166, 265, 266, 267, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311:
                        {
                            ShowPlayerBuySkinDialog(playerid);
                            ErrorMsg(playerid,"• Ðios iðvaizdos pirkimas yra uþdraustas.");
                        }
                        default:
                        {
                            new QueryString[128];
                            mysql_format(connectionHandle, QueryString, 128, "SELECT NULL FROM `clothesforcredits` WHERE `PlayerName` = '%e' AND `SkinID` = '%i' LIMIT 1;", Vardas(playerid),skinID);
                            mysql_function_query(connectionHandle, QueryString, true, "OnPlayerRequestBuyClothes", "dd", playerid,skinID);
                        }
                    }
                }
                else
                {
                    ShowPlayerBuySkinDialog(playerid);
                    ErrorMsg(playerid,"• Galimø iðvaizdø ID yra nuo 1 iki 299.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
    }
    if(dialogid == 182)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                if(PlayerDB[playerid][FirstOwnedVehicleID] > -1)
                {
                    if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
                    {
                        ErrorMsg(playerid,"• Pirmiausia turite susiremontuoti savo tr. priemonæ.");
                        ShowPlayerCreditsMeniu(playerid);
                    }
                    else
                    {
                        if(strlen(inputdialogtext) <= 6 && strlen(inputdialogtext) >= 2)
                        {
                            PlayerDB[playerid][Credits]-=50;
                            new v182 = PlayerDB[playerid][OwnedVehicle1];
                            format(VehicleDB[v182][VehicleNumbers], 8, "%s", inputdialogtext);
                            VehicleDB[v182][VehicleNumReg] = 1;
                            GameTextForPlayer(playerid, "~g~KEICIAMI NUMERIAI", 3000, 4);
                            ReStreamVehicle(v182);
                            SetVehicleNumberPlate(v182, VehicleDB[v182][VehicleNumbers]);
                            SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Pirmos tr. priemonës vardiniai numeriai“.");
                            ShowPlayerCreditsMeniu(playerid);

                        }
                        else
                        {
                            ErrorMsg(playerid,"• Transporto priemonës numerius turi sudaryti maþiausiai 2 simboliai ir daugiausia 6.");
                            ShowPlayerDialog(playerid, 182, DIALOG_STYLE_INPUT, "Pirmos tr. priemonës vardiniai numeriai", "Norëdami ásigyti pirmos tr. priemonës vardinius numerius jûs turite ávesti á þemiau esantá laukelá savo norimus numerius ir spausti „Toliau“.", "Pirkti", "Atgal");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs neturite pirmos tr. priemonës.");
                    ShowPlayerCreditsMeniu(playerid);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
    }

    if(dialogid == 183)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                if(PlayerDB[playerid][SecondOwnedVehicleID] > -1)
                {
                    if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
                    {
                        ErrorMsg(playerid,"• Pirmiausia turite susiremontuoti savo tr. priemonæ.");
                        ShowPlayerCreditsMeniu(playerid);
                    }
                    else
                    {
                        if(strlen(inputdialogtext) <= 6 && strlen(inputdialogtext) >= 2)
                        {
                            PlayerDB[playerid][Credits]-=50;
                            new v183 = PlayerDB[playerid][OwnedVehicle2];
                            format(VehicleDB[v183][VehicleNumbers], 8, "%s", inputdialogtext);
                            VehicleDB[v183][VehicleNumReg] = 1;
                            GameTextForPlayer(playerid, "~g~KEICIAMI NUMERIAI", 3000, 4);
                            ReStreamVehicle(v183);
                            SetVehicleNumberPlate(v183, VehicleDB[v183][VehicleNumbers]);
                            SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Antros tr. priemonës vardiniai numeriai“.");
                            ShowPlayerCreditsMeniu(playerid);

                        }
                        else
                        {
                            ErrorMsg(playerid,"• Transporto priemonës numerius turi sudaryti maþiausiai 2 simboliai ir daugiausia 6.");
                            ShowPlayerDialog(playerid, 183, DIALOG_STYLE_INPUT, "Antros tr. priemonës vardiniai numeriai", "Norëdami ásigyti antros tr. priemonës vardinius numerius jûs turite ávesti á þemiau esantá laukelá savo norimus numerius ir spausti „Toliau“.", "Pirkti", "Atgal");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs neturite antros tr. priemonës.");
                    ShowPlayerCreditsMeniu(playerid);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
    }


    if(dialogid == 189)
    {
        if(response)
        {
            if(listitem >= 0 && listitem < 22)
            {
                if(GarazaiInfo[listitem][GarazasNupirktas] == 1)
                {
                    GarazuNuoma1Display(playerid);
                    ErrorMsg(playerid,"• Ðis garaþas yra iðnuomotas.");
                }
                else
                {
                    new info[700];
                    strcat(info, "{26e4b2}Garaþas uþ krëditus - 30 dienø\n");
                    strcat(info, "\t{FFFFFF}» Jûs pasirinkote {26e4b2}- Garaþas uþ krëditus - 30 dienø\n");
                    strcat(info, "\t{FFFFFF}» Visuomet turësite vietà kur galësite laikyti savo maðinà\n");
                    strcat(info, "\t{FFFFFF}» Garaþà galësite atidaryti su {26e4b2}„SPACE“{FFFFFF} mygtuku.\n\n\n");
                    strcat(info, "\t{FF0000}» Atlikus ðá pirkimà kreditai gràþinami  - NEBUS.\n");
                    strcat(info, "\t{FFFFFF}» Ar tikrai norite nusipirkti Garaþà uþ kreditus - 30 dienø uþ  {26e4b2}-  100 Kreditø?\n\n\n");
                    PlayerDB[playerid][GarageNumber] = listitem;
                    ShowPlayerDialog(playerid, 190, DIALOG_STYLE_MSGBOX, "Garaþas uþ kreditus - 30 dienø", info, "Taip", "Ne");
                }
            }
        }
    }
    if(dialogid == 190)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                for(new g = 0;g<32;g++)
                {
                    if(GarazaiInfo[g][GarazasNupirktas] == 1)
                    {
                        if(strcmp(GarazaiInfo[g][GarazoSavininkas], Vardas(playerid), true) == 0)
                        {
                            ErrorMsg(playerid,"• Jûs jau turite vienà garaþà."); //kurcebele
                            return 1;
                        }
                    }
                }
                new i = PlayerDB[playerid][GarageNumber];
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    ErrorMsg(playerid,"• Kaþkas ðá garaþà spëjo iðsinuomoti greièiau nei jûs.");
                    GarazuNuoma1Display(playerid);
                }
                else
                {
                    PlayerDB[playerid][Credits]-=100;
                    GarazaiInfo[i][GarazasNupirktasIki] = gettime() + 30*86400;
                    GarazaiInfo[i][GarazasNupirktas] = 1;
                    format(GarazaiInfo[i][GarazoSavininkas], 24, "%s", Vardas(playerid));
                    new QueryString[200];
                    mysql_format(connectionHandle, QueryString, 200, "UPDATE `garazai` SET `Nupirktas`='1',`Savininkas`='%e',`IkiKadaPirktas`='%i' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),GarazaiInfo[i][GarazasNupirktasIki],i+1);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, GELTONA, "Iðsinuomavote Garaþà 30 dienø uþ 100 Kreditø. Savo garaþà galite atidaryti su „Space“.");
                    DestroyDynamic3DTextLabel(GarazaiInfo[i][GarazoLabel]);
                    format(QueryString, 200, "Garaþas uþ kreditus (100 kreditø/30dienø)\nGaraþo numeris: {66ff66}%i\n{99cc33}Ðis garaþas yra iðnuomotas\nÐiuo metu garaþas priklauso {66ff66}%s", i,GarazaiInfo[i][GarazoSavininkas]);
                    GarazaiInfo[i][GarazoLabel] = CreateDynamic3DTextLabel(QueryString, 0x99cc33FF, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jums nepakanka kreditø garaþo nuomai.");
            }
        }
    }
    /////
    if(dialogid == 191)
    {
        if(response)
        {
            if(listitem >= 0 && listitem < 10)
            {
                if(GarazaiInfo[listitem+22][GarazasNupirktas] == 1)
                {
                    GarazuNuoma2Display(playerid);
                    ErrorMsg(playerid,"• Ðis garaþas yra iðnuomotas.");
                }
                else
                {
                    new info[700];
                    strcat(info, "{26e4b2}Garaþas uþ krëditus - 30 dienø\n");
                    strcat(info, "\t{FFFFFF}» Jûs pasirinkote {26e4b2}- Garaþas uþ krëditus - 30 dienø\n");
                    strcat(info, "\t{FFFFFF}» Visuomet turësite vietà kur galësite laikyti savo maðinà\n");
                    strcat(info, "\t{FFFFFF}» Garaþà galësite atidaryti su {26e4b2}„SPACE“{FFFFFF} mygtuku.\n\n\n");
                    strcat(info, "\t{FF0000}» Atlikus ðá pirkimà kreditai gràþinami  - NEBUS.\n");
                    strcat(info, "\t{FFFFFF}» Ar tikrai norite nusipirkti Garaþà uþ kreditus - 30 dienø uþ  {26e4b2}-  100 Kreditø?\n\n\n");
                    PlayerDB[playerid][GarageNumber] = listitem+22;
                    ShowPlayerDialog(playerid, 192, DIALOG_STYLE_MSGBOX, "Garaþas uþ kreditus - 30 dienø", info, "Taip", "Ne");
                }
            }
        }
    }
    if(dialogid == 192)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                for(new g = 0;g<32;g++)
                {
                    if(GarazaiInfo[g][GarazasNupirktas] == 1)
                    {
                        if(strcmp(GarazaiInfo[g][GarazoSavininkas], Vardas(playerid), true) == 0)
                        {
                            ErrorMsg(playerid,"• Jûs jau turite vienà garaþà.");
                            return 1;
                        }
                    }
                }
                new i = PlayerDB[playerid][GarageNumber];
                if(GarazaiInfo[i][GarazasNupirktas] == 1)
                {
                    ErrorMsg(playerid,"• Kaþkas ðá garaþà spëjo iðsinuomoti greièiau nei jûs.");
                    GarazuNuoma2Display(playerid);
                }
                else
                {
                    PlayerDB[playerid][Credits]-=100;
                    GarazaiInfo[i][GarazasNupirktasIki] = gettime() + 30*86400;
                    GarazaiInfo[i][GarazasNupirktas] = 1;
                    format(GarazaiInfo[i][GarazoSavininkas], 24, "%s", Vardas(playerid));
                    new QueryString[200];
                    mysql_format(connectionHandle, QueryString, 200, "UPDATE `garazai` SET `Nupirktas`='1',`Savininkas`='%e',`IkiKadaPirktas`='%i' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),GarazaiInfo[i][GarazasNupirktasIki],i+1);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, GELTONA, "Iðsinuomavote Garaþà 30 dienø uþ 100 Kreditø. Savo garaþà galite atidaryti su „Space“.");
                    DestroyDynamic3DTextLabel(GarazaiInfo[i][GarazoLabel]);
                    format(QueryString, 200, "Garaþas uþ kreditus (100 kreditø/30dienø)\nGaraþo numeris: {66ff66}%i\n{99cc33}Ðis garaþas yra iðnuomotas\nÐiuo metu garaþas priklauso {66ff66}%s", i,GarazaiInfo[i][GarazoSavininkas]);
                    GarazaiInfo[i][GarazoLabel] = CreateDynamic3DTextLabel(QueryString, 0x99cc33FF, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);

                }
            }
            else
            {
                ErrorMsg(playerid,"• Jums nepakanka kreditø garaþo nuomai.");
            }
        }
    }
    //
    if(dialogid == 205)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    mysql_function_query(connectionHandle, "SELECT NULL FROM `players` WHERE `DirektoriuPriziuretojas` = 1 LIMIT 1;", true, "OnValdytiPriziuretojus1", "d", playerid);
                }
                case 1:
                {
                    mysql_function_query(connectionHandle, "SELECT NULL FROM `players` WHERE `UnBanPriziuretojas` = 1 LIMIT 1;", true, "OnValdytiPriziuretojus2", "d", playerid);
                }
                case 2:
                {
                    mysql_function_query(connectionHandle, "SELECT NULL FROM `players` WHERE `PrivPriziuretojas` = 1 LIMIT 1;", true, "OnValdytiPriziuretojus4", "d", playerid);
                }
                case 3:
                {
                    mysql_function_query(connectionHandle, "SELECT NULL FROM `players` WHERE `LyderiuPriziuretojas` = 1 LIMIT 1;", true, "OnValdytiPriziuretojus5", "d", playerid);
                }
            }
        }
    }
    if(dialogid == 206)
    {
        if(response)
        {
            if(IsValidNickName(inputdialogtext))
            {
                new QueryString[128];
                mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `DirektoriuPriziuretojas` = 1 WHERE `Name` = '%e' LIMIT 1;", inputdialogtext);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, -1, "• Jei nurodëte teisingà V_P þaidëjas sëkmingai bus paskirtas priþiûrëtoju, taèiau þaidëjas uþdëjimo metu turi bûti atsijungæs.");
                cmd_valdytipriziuretojus(playerid,"");
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjo V_P áraðyti netinkamo formato.");
                ShowPlayerDialog(playerid, 206, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Direktoriø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
            }
        }
        else
        {
            cmd_valdytipriziuretojus(playerid,"");
        }
    }
    if(dialogid == 207)
    {
        if(response)
        {
            mysql_function_query(connectionHandle, "UPDATE `players` SET `DirektoriuPriziuretojas` = '0';", false, "", "");
            SendClientMessage(playerid, -1, "• Jei priþiûrëtojas tuo metu buvo prisijungæs, ði komanda neásigalioja.");
        }
        cmd_valdytipriziuretojus(playerid,"");
    }
    if(dialogid == 208)
    {
        if(response)
        {
            if(IsValidNickName(inputdialogtext))
            {
                new QueryString[128];
                mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `UnBanPriziuretojas` = 1 WHERE `Name` = '%e' LIMIT 1;", inputdialogtext);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, -1, "• Jei nurodëte teisingà V_P þaidëjas sëkmingai bus paskirtas priþiûrëtoju,taèiau þaidëjas uþdëjimo metu turi bûti atsijungæs.");
                cmd_valdytipriziuretojus(playerid,"");
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjo V_P áraðyti netinkamo formato.");
                ShowPlayerDialog(playerid, 208, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà UnBan priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
            }
        }
        else
        {
            cmd_valdytipriziuretojus(playerid,"");
        }
    }
    if(dialogid == 209)
    {
        if(response)
        {
            mysql_function_query(connectionHandle, "UPDATE `players` SET `UnBanPriziuretojas` = '0';", false, "", "");
            SendClientMessage(playerid, -1, "• Jei priþiûrëtojas tuo metu buvo prisijungæs, ði komanda neásigalioja.");
        }
        cmd_valdytipriziuretojus(playerid,"");
    }
    if(dialogid == 212)
    {
        if(response)
        {
            if(IsValidNickName(inputdialogtext))
            {
                new QueryString[128];
                mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `PrivPriziuretojas` = 1 WHERE `Name` = '%e' LIMIT 1;", inputdialogtext);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, -1, "• Jei nurodëte teisingà V_P þaidëjas sëkmingai bus paskirtas priþiûrëtoju,taèiau þaidëjas uþdëjimo metu turi bûti atsijungæs.");
                cmd_valdytipriziuretojus(playerid,"");
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjo V_P áraðyti netinkamo formato.");
                ShowPlayerDialog(playerid, 212, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Privilegijuotø þaidëjø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
            }
        }
        else
        {
            cmd_valdytipriziuretojus(playerid,"");
        }
    }
    if(dialogid == 213)
    {
        if(response)
        {
            mysql_function_query(connectionHandle, "UPDATE `players` SET `PrivPriziuretojas` = '0';", false, "", "");
            SendClientMessage(playerid, -1, "• Jei priþiûrëtojas tuo metu buvo prisijungæs,ði komanda neásigalioja.");
        }
        cmd_valdytipriziuretojus(playerid,"");
    }
    if(dialogid == 214)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 200)
            {
                if(PlayerDB[playerid][PilotoLicense] == 0)
                {
                    PlayerDB[playerid][Credits]-=200;
                    PlayerDB[playerid][PilotoLicense] = 1;
                    SendClientMessage(playerid, GELTONA, "Nusipirkote pilotavimo teises uþ 200 Kreditø.");
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs jau turite pilotavimo teises.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs neturite pakankamai kreditø ðios paslaugos ásigyjimui.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 215)
    {
        if(response)
        {
            if(listitem == 0)
            {
                SetPlayerColor(playerid, NematomaPilka);
                SendClientMessage(playerid, -1, "• Pakeitëte savo spalvà á paprasto þaidëjo.");
            }
            else if(listitem == 1)
            {
                if(PlayerDB[playerid][adminlvl] > 0)
                {
                    switch(PlayerDB[playerid][adminlvl])
                    {
                        case 1..3:
                        {
                            SetPlayerColor(playerid, (0x33CC00FF & 0xFFFFFF00));//ZALIA
                        }
                        case 4..5:
                        {
                            SetPlayerColor(playerid, (RAUDONA & 0xFFFFFF00));//ZALIA
                        }
                    }
                    SendClientMessage(playerid, -1, "• Pakeitëte savo spalvà á Administratoriaus.");
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs ne Administratoriaus.");
                }
            }
            else if(listitem == 2)
            {
                if(PlayerDB[playerid][VIP] == 1 && PlayerDB[playerid][VIPLaikoPabaiga] > gettime())
                {
                    SetPlayerColor(playerid, (0xFFCC00FF & 0xFFFFFF00));//VIP gelton
                    SendClientMessage(playerid, -1, "• Pakeitëte savo spalvà á VIP.");
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs ne VIP.");
                }
            }
        }
    }
    if(dialogid == 216)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    //Paprastø þaidëjø

                    new info[1400];
                    strcat(info,"Serverio taisyklës kuriø privalote laikytis:\n");
                    strcat(info,"\n");
                    strcat(info,"Draudþiama naudoti èytus (áskaitomi ir visokie ledo modai), kurie palengvina ar trigdo þaidimà.\n");
                    strcat(info,"Draudþiama naudoti bugus. Apie juos turite praneðti Administratoriui Spirit_Jones arba forume BUG skiltyje.\n");
                    strcat(info,"Draudþiama reklamuoti kitus SA:MP serverius, apie tai patariam net nekalbëti. Grieþtai bus sekama ir blokuojama.\n");
                    strcat(info,"Draudþiama pardavinëti serverio valiutà, maðinas, verslus, namus, vartotojus ir kitus dalykus (UÞ TIKRUS PINIGUS).\n");
                    strcat(info,"Draudþiama apgaudinëti serverio þaidëjus, tokie dalykai gali privesti ne tik iki bano, bet ir daug grieþèiau.\n");
                    strcat(info,"Draudþiama turëti èytus, kurie palengvina, trigdo þaidimà. Turëjimas = naudojimas.\n");
                    strcat(info,"Draudþiama naujokui trugdyti pradëti þaidimà. Pvz: trugdyti laikytis teises.\n");
                    strcat(info,"Draudþiama stumti kitø þaidëjø nuosavas maðinas á vandená, ar kaþkaip kitaip stengtis jas sunaikinti.\n");
                    strcat(info,"Civiliams draudþiama lysti á narkotikø sandelius, kai ten ðaudosi teisësauga/mafija.\n");
                    strcat(info,"Draudþiama naudoti /adminams ne pagal paskirtá. Ði komanda yra skirta papraðyti administratoriø pagalbos.\n");
                    strcat(info,"Draudþiama ant skelbimø lentø raðyti áþeidimus, keiksmaþodþius ar kaþkà panaðaus.\n");
                    strcat(info,"Laikytis KET.\n");
                    strcat(info,"Privalote paklusti teisësaugininkui, kitaip bûsite atitinkamai baudþiami.\n");
                    strcat(info,"Norint peikti ar pateikti informacija apie þaidëjà ar kt. darykite árodymus (F8).\n");
                    strcat(info,"Taisykliø neþinojimas neatleidþia nuo atsakomybës.");
                    ShowPlayerDialog(playerid, 217, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendrosios taisyklës", info, "Atgal","");
                }
                case 1:
                {
                    //VIP
                    new info[900];
                    strcat(info,"1. Draudþiama reklamuoti kitus serverius per /vchat ir per /v.\n");
                    strcat(info,"2. Komanda /v leidþiama naudoti tik skelbiant svarbià su serveriu susijusia informacija.\n");
                    strcat(info,"3. Draudþiama piktybiðkai naudoti /sk komanda.\n");
                    strcat(info,"4. Draudþiama áþeidinëti ar keiktis per /v ar /vchat pokalbius.\n");
                    strcat(info,"5. Draudþiama vesti renginá/eventà kai vyksta kitas renginys/eventas.\n");
                    strcat(info,"6. Draudþiama floodinti per /vchat ir /v komandà.\n");
                    strcat(info,"7. Gerbti kitus serverio þaidëjus, esant reikalui padëti þaidëjams.\n");
                    strcat(info,"8. Draudþiama ðaudyti vieðose vietose bei rodyti ginklus (/vipginklai).\n");
                    strcat(info,"9. Draudþiama naudotis èytais, bugais, bei kitaip sukèiauti.\n");
                    strcat(info,"10. Draudþiama keiktis bei áþeidinëti kitus serverio þaidëjus.\n");
                    strcat(info,"11. Laikytis bendrø serverio taisykliø.\n");
                    strcat(info,"12. Laikytis visø ðiø taisykliø, prieðingu atvëju bûsite atitinkamai baudþiami.\n");
                    strcat(info,"13. Taisykliø neþinojimas neatleidþia nuo atsakomybës.");
                    ShowPlayerDialog(playerid, 217, DIALOG_STYLE_MSGBOX, "{AFAFAF}VIP taisyklës", info, "Atgal","");
                }
                case 2:
                {
                    //ADMINISTRATORIAUS
                    new info[1400];
                    strcat(info,"1. Laikytis bendrø serverio taisykliø.\n");
                    strcat(info,"2. Administratoriø komandas naudoti tik pagal paskirtá.\n");
                    strcat(info,"3. Draudþiama keiktis, gràsinti, áþeidinëti kitus serverio þaidëjus, laikyti save virðesniu uþ kitus. Visi - lygus.\n");
                    strcat(info,"4. Prieð baudþiant þaidëja (/ban, /banex, /jail, /mute) privalote turëti vaizdinius árodymus, árodanèia þaidëjo paþeidimà.\n");
                    strcat(info,"Juos saugoti 24 valandas po paþeidimo uþfiksavimo (video/foto).\n");
                    strcat(info,"5. Kas 24 valandas kiekvienas administratorius privalo tikrinti papeikimø skiltá bei atsibaninimo skiltá ir pateikti\n");
                    strcat(info,"tam tikrus árodymus,árodanèius þaidëjo kaltæ.\n");
                    strcat(info,"6. /unjail naudoti tik tuo atvëju, kai administratorius arba kitas þaidëjas buvo ákalintas neteisingai.\n");
                    strcat(info,"7. /unmute naudoti tik tuo atvëju, kai administratorius arba kitas þaidëjas buvo uþtildytas neteisingai.\n");
                    strcat(info,"8. Á papeikimus atsakyti per 24 valandas, to nepadarius administratorius yra baudþiamas, gali bûti baudþiamas\n");
                    strcat(info,"áspëjimais ir/arba administratoriaus statuso atëmimu ir/arba banu.\n");
                    strcat(info,"9. Draudþiama ðaudyti bei rodyti vieðose vietose admin ginklus (/ginklai).\n");
                    strcat(info,"10. Komanda /s leidþiama naudoti tik skelbiant svarbià su serveriu susijusia informacija.\n");
                    strcat(info,"11. Padëti kitiems þaidëjams.\n");
                    strcat(info,"12. Atsakinëti á kylanèius klausimus kuriuos paraðo jums privaèia þinute arba á /admin.\n");
                    strcat(info,"13. Laikytis visø ðiø taisykliø, prieðingu atvëju bûsite atitinkamai baudþiami.\n");
                    strcat(info,"14. Taisykliø neþinojimas neatleidþia nuo atsakomybës.");
                    ShowPlayerDialog(playerid, 217, DIALOG_STYLE_MSGBOX, "{AFAFAF}Administratoriø taisyklës", info, "Atgal","");
                }

            }
        }
    }
    if(dialogid == 217)
    {
        cmd_taisykles(playerid,"");
    }
    if(dialogid == 218)
    {
        if(response)
        {
            if(IsValidNickName(inputdialogtext))
            {
                new QueryString[128];
                mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `LyderiuPriziuretojas` = 1 WHERE `Name` = '%e' LIMIT 1;", inputdialogtext);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, -1, "• Jei nurodëte teisingà V_P þaidëjas sëkmingai bus paskirtas priþiûrëtoju,taèiau þaidëjas uþdëjimo metu turi bûti atsijungæs.");
                cmd_valdytipriziuretojus(playerid,"");
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjo V_P áraðyti netinkamo formato.");
                ShowPlayerDialog(playerid, 219, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Lyderiø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
            }
        }
        else
        {
            cmd_valdytipriziuretojus(playerid,"");
        }
    }
    if(dialogid == 219)
    {
        if(response)
        {
            mysql_function_query(connectionHandle, "UPDATE `players` SET `LyderiuPriziuretojas` = '0';", false, "", "");
            SendClientMessage(playerid, -1, "• Jei priþiûrëtojas tuo metu buvo prisijungæs,ði komanda neásigalioja.");
        }
        cmd_valdytipriziuretojus(playerid,"");
    }
    if(dialogid == 220)
    {
        if(response)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= 500)
            {
                if(PlayerDB[playerid][LigoninesLaikas] > 0)
                {
                    PlayerDB[playerid][LigoninesLaikas] = 0;
                    PlayerDB[playerid][MoneyInPocket]-=500;
                    GameTextForPlayer(playerid, "~y~JUS PALEISTAS IS LIGONINES", 3000, 5);
                    SetPlayerPos(playerid, -2666.0913,638.1700,14.4531);
                    SetPlayerFacingAngle(playerid, 173.5226);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerInterior(playerid, 0);
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai nusipirkote ðià paslaugà,esate paleidþiamas ið ligoninës.");
                }
                else
                {
                    ErrorMsg(playerid,"• Paslaugos suteikti jau nebe galima.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Paslaugos kaina 500€.");
            }
        }
    }
    if(dialogid == 221)
    {
        if(response)
        {
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                new string[128];
                switch(PlayerDB[playerid][Direktorius])
                {
                    case 1:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}policijos {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 2:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}medikø {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 4:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}taxi firmos {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 5:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}mechanikø {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 7:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}lucchese mafijos {ffffff}vado pareigø.",Vardas(playerid));
                    }
                    case 8:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}genovese mafijos {ffffff}vado pareigø.",Vardas(playerid));
                    }
                    case 9:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}spec. bûrio „Aras“ {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 10:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}radistø {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 11:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}„SPD“ {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                    case 21:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}tolimûjø reisø vairuotojø {ffffff}direktoriaus pareigø.",Vardas(playerid));
                    }
                }
                SendClientMessageToAll(0xFFFFFF00, string);
                if(PlayerDB[playerid][Direktorius] == 7 || PlayerDB[playerid][Direktorius] == 8)
                {
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[playerid][Direktorius] == PlayerDB[i][Job])
                        {
                            PlayerDB[i][DarboSutartiesPabaiga] = 0;
                            SendClientMessage(i, GELTONA, "[racija] Sistema: Jûsø mafijos vadas atsisakë savo posto, todël jûsø darbo sutartis panaikinta !");
                        }
                    }
                    mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DarboSutartiesPabaiga` = '0' WHERE `Job` = '%i' LIMIT 1;", PlayerDB[playerid][Direktorius]);
                    mysql_function_query( connectionHandle, string, false, "", "");
                }
                else
                {
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[playerid][Direktorius] == PlayerDB[i][Job])
                        {
                            PlayerDB[i][DarboSutartiesPabaiga] = 0;
                            SendClientMessage(i, GELTONA, "[racija] Sistema: Jûsø darbo direktorius atsisakë savo posto, todël jûsø darbo sutartis panaikinta !");
                        }
                    }
                    mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DarboSutartiesPabaiga` = '0' WHERE `Job` = '%i' LIMIT 1;", PlayerDB[playerid][Direktorius]);
                    mysql_function_query( connectionHandle, string, false, "", "");
                }
                PlayerDB[playerid][Direktorius] = 0;
                SavePlayerData(playerid);
            }
        }
    }
    if(dialogid == 222)
    {
        if(response)
        {
            if(PlayerDB[playerid][Pavaduotojas] > 0)
            {
                new string[128];
                switch(PlayerDB[playerid][Pavaduotojas])
                {
                    case 1:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}policijos {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 2:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}medikø {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 4:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}taksi {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 5:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}mechanikø {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 7:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}„Lucchese“ mafijos {FFFFFF}padejëjo pareigø.",Vardas(playerid));
                    }
                    case 8:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}„Genovese“ mafijos {FFFFFF}padejëjo pareigø.",Vardas(playerid));
                    }
                    case 9:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}spec. bûrio „Aras“ {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 10:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}radistø {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 11:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}slaptosios policijos {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                    case 21:
                    {
                        format(string,128,"Þaidëjas {d1bd39}%s{ffffff} atsisakë {d1bd39}fûristø {FFFFFF}pavaduotojo pareigø.",Vardas(playerid));
                    }
                }
                SendClientMessageToAll(0xffffffff, string);
                PlayerDB[playerid][Pavaduotojas] = 0;
                SavePlayerData(playerid);
            }
        }
    }
    if(dialogid == 223)
    {
        if(response)
        {
            new info[200];
            switch(listitem)
            {
                case 0: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}policijos{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 1: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}spec. bûrio „Aras“{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 2: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}taksi{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 3: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}fûristo{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 4: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}radijos{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 5: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}medikø{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 6: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}mechanikø{ffffff} darbui, minimali suma: {d1bd39}1.000€");
                case 7: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}„Lucchese“{ffffff} mafijai, minimali suma: {d1bd39}1.000€");
                case 8: format(info,200,"{ffffff}Áraðyk pinigø kieká kurá norëtumët paaukoti {d1bd39}„Genovese“{ffffff} mafijai, minimali suma: {d1bd39}1.000€");
            }
            PlayerDB[playerid][SelectionListItemAukos] = listitem;
            ShowPlayerDialog(playerid, 224, DIALOG_STYLE_INPUT, "{AFAFAF}Aukojimas darbø fondams", info, "Aukoti", "Atðaukti");
        }
    }
    if(dialogid == 224)
    {
        if(response)
        {
            new value = strval(inputdialogtext);
            if(value < 1000)
            {
                ErrorMsg(playerid,"• Maþiausia suma yra 1000€.");
                OnPlayerPickUpDynamicPickup(playerid, AukotiFondasPickup);
                return 1;
            }
            if(PlayerDB[playerid][MoneyInPocket] >= value)
            {
                new DarboNumeris;
                new string[128];
                switch(PlayerDB[playerid][SelectionListItemAukos])
                {
                    case 0:
                    {
                        DarboNumeris = 1;

                        format(string, sizeof(string), "• Paaukojote policijos darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 1:
                    {
                        DarboNumeris = 9;

                        format(string, sizeof(string), "• Paaukojote Arui darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 2:
                    {
                        DarboNumeris = 4;

                        format(string, sizeof(string), "• Paaukojote taksistø darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 3:
                    {
                        DarboNumeris = 21;

                        format(string, sizeof(string), "• Paaukojote fûristø darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 4:
                    {
                        DarboNumeris = 10;

                        format(string, sizeof(string), "• Paaukojote radistø darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 5:
                    {
                        DarboNumeris = 2;

                        format(string, sizeof(string), "• Paaukojote medikø darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 6:
                    {
                        DarboNumeris = 5;

                        format(string, sizeof(string), "• Paaukojote mechanikø darbui %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 7:
                    {
                        DarboNumeris = 7;

                        format(string, sizeof(string), "• Paaukojote lucchese mafijai %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                    case 8:
                    {
                        DarboNumeris = 8;
                        format(string, sizeof(string), "• Paaukojote genoveses mafijai %s€.", AddPoints(value));
                        SendClientMessage(playerid, 0x33AA33FF, string);
                    }
                }
                PlayerDB[playerid][MoneyInPocket]-=value;
                DarboInformacija[DarboNumeris][DarboFondas]+=value;
                format(string, 128, "Þaidëjas {0099CC}%s {99D6EB}paaukojo á jûsø darbo fondà: {0099CC}%i€.", Vardas(playerid),value);
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(PlayerDB[i][Job] == DarboNumeris)
                        {
                            SendClientMessage(i, 0x99D6EBFF, string);
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tiek pinigø neturite.");
                OnPlayerPickUpDynamicPickup(playerid, AukotiFondasPickup);
            }
        }
        else
        {
            OnPlayerPickUpDynamicPickup(playerid, AukotiFondasPickup);
        }
    }

    if(dialogid == 225)
    {
        if(response)
        {
            new TNumeris = CheckIsPlayerCallingT(playerid,listitem);
            if(TNumeris >= 0)
            {
                new string[128];
                switch(listitem)
                {
                    case 0:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}policija{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 1:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}medikai{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 2:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}taxi{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 3:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}mechanikai{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 4:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}radistai{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 5:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}mafijos{ffca16}. Kviesti galësite tik po 2min.");
                    }
                    case 6:
                    {
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Atðaukei nurodytà tarnyba: {f99c00}picerininkai{ffca16}. Kviesti galësite tik po 2min.");
                    }
                }
                SendClientMessage(playerid, 0xf99c00FF, string);
                if(Iskvietimas[TNumeris][IskvietimasPriimtas] == true)
                {
                    new Vairuotojas = Iskvietimas[TNumeris][VaziuojantisID];
                    PlayerDB[Vairuotojas][SekimoBusena] = false;
                    DestroySekimoTD(Vairuotojas);
                    RemovePlayerMapIcon(Vairuotojas, 90);
                    DisablePlayerCheckpoint(Vairuotojas);
                    format(string,128,"[IÐKVIETIMAS]: {ffca16}Iðkvietëjas %s atðaukë iðkvietimà.",Vardas(playerid));
                    SendClientMessage(Vairuotojas, 0xffca16FF, string);
                }
                CantCallT[playerid][listitem] = gettime() + 120;
                DeleteIskvietimas(TNumeris);
                return 1;
            }
            if(CantCallT[playerid][listitem] > gettime())
      		{
    			ErrorMsg(playerid, "• Iðkviesti negalite nes nepraejo 2 min nuo paskutinio ðios tarnybos iðkvietimo.");
				return 1;
            }
       	    switch(listitem)
            {
                case 0:
                {
                    new string[128];
                    new Count;
                    new MentaiDirba;
                    format(string, 128, "[racija] Operatorë: %s kvieèia policijà, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 1)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;
                            
            				new bool:AFK,bool:Dirba;
			               	AFK = PlayerDB[i][AfkState];
			               	if(IsPlayerInAnyVehicle(i))
							{
							    new vehicle = GetPlayerVehicleID(i);
							    if(VehicleDB[vehicle][DARBOMASINA] == true && VehicleDB[vehicle][DARBOID] == PlayerDB[i][Job])
								{
									Dirba = true;
								}
							}
							switch(AFK)
							{
								case false:
								{
									switch(Dirba)
									{
										case true:
										{
											MentaiDirba++;
										}
								 	}
							 	}
							}
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}policija{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        format(string, 128, "[IÐKVIETIMAS]: Aktyvûs darbuotojai, kurie nëra AFK ir dirba su darbine maðina: {f99c00}%i.",MentaiDirba);
                        SendClientMessage(playerid, GELTONA, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 1:
                {
                    new string[128];
                    new Count;
                    new MedikaiDirba;
                    format(string, 128, "[racija] Operatorë: %s kvieèia medikus, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 2)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;

							new bool:AFK,bool:Dirba;
			               	AFK = PlayerDB[i][AfkState];
			               	if(IsPlayerInAnyVehicle(i))
							{
							    new vehicle = GetPlayerVehicleID(i);
							    if(VehicleDB[vehicle][DARBOMASINA] == true && VehicleDB[vehicle][DARBOID] == PlayerDB[i][Job])
								{
									Dirba = true;
								}
							}
							switch(AFK)
							{
								case false:
								{
									switch(Dirba)
									{
										case true:
										{
											MedikaiDirba++;
										}
								 	}
							 	}
							}
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}medikai{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        format(string, 128, "[IÐKVIETIMAS]: Aktyvûs darbuotojai, kurie nëra AFK ir dirba su darbine maðina: {f99c00}%i.",MedikaiDirba);
                        SendClientMessage(playerid, GELTONA, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 2:
                {
                    new string[128];
                    new Count;
                    new TaksiDirba;
                    format(string, 128, "[racija] Operatorë: %s kvieèia taxi, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 4)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;

							new bool:AFK,bool:Dirba;
			               	AFK = PlayerDB[i][AfkState];
			               	if(IsPlayerInAnyVehicle(i))
							{
							    new vehicle = GetPlayerVehicleID(i);
							    if(VehicleDB[vehicle][DARBOMASINA] == true && VehicleDB[vehicle][DARBOID] == PlayerDB[i][Job])
								{
									Dirba = true;
								}
							}
							switch(AFK)
							{
								case false:
								{
									switch(Dirba)
									{
										case true:
										{
											TaksiDirba++;
										}
								 	}
							 	}
							}
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}taksi{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        format(string, 128, "[IÐKVIETIMAS]: Aktyvûs darbuotojai, kurie nëra AFK ir dirba su darbine maðina: {f99c00}%i.",TaksiDirba);
                        SendClientMessage(playerid, GELTONA, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 3:
                {
                    new string[128];
                    new Count;
                    new MechDirba;
                    format(string, 128, "[racija] Operatorë: %s kvieèia mechanikus, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 5)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;

							new bool:AFK,bool:Dirba;
			               	AFK = PlayerDB[i][AfkState];
			               	if(IsPlayerInAnyVehicle(i))
							{
							    new vehicle = GetPlayerVehicleID(i);
							    if(VehicleDB[vehicle][DARBOMASINA] == true && VehicleDB[vehicle][DARBOID] == PlayerDB[i][Job])
								{
									Dirba = true;
								}
							}
							switch(AFK)
							{
								case false:
								{
									switch(Dirba)
									{
										case true:
										{
											MechDirba++;
										}
								 	}
							 	}
							}
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}mechanikai{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        format(string, 128, "[IÐKVIETIMAS]: Aktyvûs darbuotojai, kurie nëra AFK ir dirba su darbine maðina: {f99c00}%i.",MechDirba);
                        SendClientMessage(playerid, GELTONA, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 4:
                {
                    new string[128];
                    new Count;
                    new RadDirba;
                    format(string, 128, "[racija] Operatorë: %s kvieèia radistus, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 10)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;

							new bool:AFK,bool:Dirba;
			               	AFK = PlayerDB[i][AfkState];
			               	if(IsPlayerInAnyVehicle(i))
							{
							    new vehicle = GetPlayerVehicleID(i);
							    if(VehicleDB[vehicle][DARBOMASINA] == true && VehicleDB[vehicle][DARBOID] == PlayerDB[i][Job])
								{
									Dirba = true;
								}
							}
							switch(AFK)
							{
								case false:
								{
									switch(Dirba)
									{
										case true:
										{
											RadDirba++;
										}
								 	}
							 	}
							}
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}radistai{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        format(string, 128, "[IÐKVIETIMAS]: Aktyvûs darbuotojai, kurie nëra AFK ir dirba su darbine maðina: {f99c00}%i.",RadDirba);
                        SendClientMessage(playerid, GELTONA, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 5:
                {
                    new string[128];
                    new Count;
                    format(string, 128, "[racija] Operatorë: %s kvieèia mafijozus, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 7 || PlayerDB[i][Job] == 8)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei {f99c00}mafijozus{ffca16}, online mafijozai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
                case 6:
                {
                    new string[128];
                    new Count;
                    format(string, 128, "[racija] Operatorë: %s kvieèia picerininkus, /vaziuoju %s.", Vardas(playerid),Vardas(playerid));
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Job] == 19)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                            Count++;
                        }
                    }
                    if(Count == 0)
                    {
                        ErrorMsg(playerid,"• Iðkvietimas negalimas, nëra ðios tarnybos darbuotojø.");
                    }
                    else
                    {
                        CreateIskvietimas(playerid,listitem);
                        format(string, 128, "[IÐKVIETIMAS]:{ffca16} Sëkmingai iðkvietei nurodytà tarnyba: {f99c00}picerininkai{ffca16}, online darbuotojai: {f99c00}%i.",Count);
                        SendClientMessage(playerid, 0xf99c00FF, string);
                        SendClientMessage(playerid, 0xf99c00FF, "[IÐKVIETIMAS]: {ffca16}Apie patvirtintà iðkvietimà, bus praneðta asmeniðkai.");
                    }
                }
            }
        }
    }
    if(dialogid == 226)
    {
        if(PlayerDB[playerid][ReceivedWeaponsOffer] == true)
        {
            if(IsJobFromMafia(PlayerDB[PlayerDB[playerid][WeaponsOfferGiverID]][Job]) == 1 || PlayerDB[PlayerDB[playerid][WeaponsOfferGiverID]][adminlvl] > 3)
            {
                new Float:Cords[3];
                GetPlayerPos(PlayerDB[playerid][WeaponsOfferGiverID], Cords[0], Cords[1], Cords[2]);

                if(IsPlayerInRangeOfPoint(playerid, 12, Cords[0], Cords[1], Cords[2]))
                {
                    if(response)
                    {
                        if(strcmp(PlayerDB[playerid][WeaponsOfferSCode], inputdialogtext) == 0)
                        {
                            new GiverID = PlayerDB[playerid][WeaponsOfferGiverID];
                            if(PlayerWeapons[GiverID][GetWeaponSlot(PlayerDB[playerid][WeaponsOfferWeaponID])] == PlayerDB[playerid][WeaponsOfferWeaponID])
                            {
                                if(PlayerWeaponAmmo[GiverID][GetWeaponSlot(PlayerDB[playerid][WeaponsOfferWeaponID])] >= PlayerDB[playerid][WeaponsOfferAmmo])
                                {
                                    if(PlayerDB[playerid][WeaponsOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                    {
                                        ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø ðiam ginklø sanderiui.");
                                        new string[128];
                                        format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø ginklams ásigyti.", Vardas(playerid));
                                        SendClientMessage(GiverID, RAUDONA, string);
                                    }
                                    else
                                    {
                                        PlayerDB[playerid][MoneyInPocket] -= PlayerDB[playerid][WeaponsOfferSum];
                                        PlayerDB[GiverID][MoneyInPocket]+=PlayerDB[playerid][WeaponsOfferSum];
                                        GivePlayerWeaponEx(GiverID,PlayerDB[playerid][WeaponsOfferWeaponID],PlayerDB[playerid][WeaponsOfferAmmo] * -1);
                                        GivePlayerWeaponEx(playerid,PlayerDB[playerid][WeaponsOfferWeaponID],PlayerDB[playerid][WeaponsOfferAmmo]);
                                        new string[128];
                                        new WeaponName[30];
                                        GetWeaponName(PlayerDB[playerid][WeaponsOfferWeaponID], WeaponName, 30);
                                        format(string, 128, "• Ásigijote %s ginklà su %i kulkom(-omis) uþ %s€.", WeaponName,PlayerDB[playerid][WeaponsOfferAmmo],AddPoints(PlayerDB[playerid][WeaponsOfferSum]));
                                        SendClientMessage(playerid, ZALIA, string);
                                        format(string, 128, "Sëkmingai pardavëte þaidëjui %s ginklà.",Vardas(playerid));
                                        SendClientMessage(GiverID, ZALIA, string);
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Prekeivis nebeturi tiek amunicijos kiek buvo pasiûlyta.");
                                    new string[128];
                                    format(string, 128, "• Neturite pakankamai amunicijos kurià jûs siûlëte pirkëjui %s.", Vardas(playerid));
                                    SendClientMessage(GiverID, RAUDONA, string);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Prekeivis nebeturi ðio ginklo.");
                                new string[128];
                                format(string, 128, "• Neturite ginklo kurá siûlëte pirkëjui %s.", Vardas(playerid));
                                SendClientMessage(GiverID, RAUDONA, string);
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalësite gauti naujo pasiûlymo dar 30sek.");
                            PlayerDB[playerid][WeaponsOfferCanGetAt] = gettime() + 29;
                            new string[128];
                            format(string, 128, "• Pirkëjas %s neteisingai ávedë pirkimo patvirtinimo kodà,todël naujo pasiûlymo negali gauti 30sek.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][WeaponsOfferGiverID], RAUDONA, string);
                        }
                        PlayerDB[playerid][WeaponsOfferGiverID] = -1;
                        PlayerDB[playerid][WeaponsOfferWeaponID] = -1;
                        PlayerDB[playerid][WeaponsOfferAmmo] = 0;
                        PlayerDB[playerid][WeaponsOfferSum] = 0;
                        PlayerDB[playerid][ReceivedWeaponsOffer] = false;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Atsisakëte pirkti ginklus ið mafijozo.");
                        new string[128];
                        format(string, 128, "Þaidëjas %s atsisakë pirkti ginklus.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][WeaponsOfferGiverID], RAUDONA, string);// Mafijozui
                        PlayerDB[playerid][WeaponsOfferGiverID] = -1;
                        PlayerDB[playerid][WeaponsOfferWeaponID] = -1;
                        PlayerDB[playerid][WeaponsOfferAmmo] = 0;
                        PlayerDB[playerid][WeaponsOfferSum] = 0;
                        PlayerDB[playerid][ReceivedWeaponsOffer] = false;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Prekeivis yra per toli nuo jûsø.");
                    PlayerDB[playerid][WeaponsOfferGiverID] = -1;
                    PlayerDB[playerid][WeaponsOfferWeaponID] = -1;
                    PlayerDB[playerid][WeaponsOfferAmmo] = 0;
                    PlayerDB[playerid][WeaponsOfferSum] = 0;
                    PlayerDB[playerid][ReceivedWeaponsOffer] = false;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas neturi teisës jums siûlyti ginklø.");
                PlayerDB[playerid][WeaponsOfferGiverID] = -1;
                PlayerDB[playerid][WeaponsOfferWeaponID] = -1;
                PlayerDB[playerid][WeaponsOfferAmmo] = 0;
                PlayerDB[playerid][WeaponsOfferSum] = 0;
                PlayerDB[playerid][ReceivedWeaponsOffer] = false;
            }
        }
    }

    if(dialogid == 227)
    {
        if(PlayerDB[playerid][ReceivedDrugsOffer] == true)
        {
            if(IsJobFromMafia(PlayerDB[PlayerDB[playerid][DrugsOfferGiverID]][Job]) == 1 || PlayerDB[PlayerDB[playerid][DrugsOfferGiverID]][adminlvl] > 3)
            {
                new Float:Cords[3];
                GetPlayerPos(PlayerDB[playerid][DrugsOfferGiverID], Cords[0], Cords[1], Cords[2]);

                if(IsPlayerInRangeOfPoint(playerid, 12, Cords[0], Cords[1], Cords[2]))
                {
                    if(response)
                    {
                        if(strcmp(PlayerDB[playerid][DrugsOfferSCode], inputdialogtext) == 0)
                        {
                            new GiverID = PlayerDB[playerid][DrugsOfferGiverID];
                            switch(PlayerDB[playerid][DrugsOfferDrugID])
                            {
                                case 1:
                                {
                                    if(PlayerDB[GiverID][Kanapes] >= PlayerDB[playerid][DrugsOfferAmount])
                                    {
                                            if(PlayerDB[playerid][DrugsOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                            {
                                                ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø ðiam narkotikø sanderiui.");
                                                new string[128];
                                                format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø narkotikams ásigyti.", Vardas(playerid));
                                                SendClientMessage(GiverID, RAUDONA, string);
                                            }
                                            else
                                            {
                                                PlayerDB[playerid][MoneyInPocket] -= PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][MoneyInPocket]+=PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][Kanapes]-=PlayerDB[playerid][DrugsOfferAmount];
                                                PlayerDB[playerid][Kanapes]+=PlayerDB[playerid][DrugsOfferAmount];
                                                new string[128];
                                                format(string, 128, "• Ásigijote %ig þolës uþ %s€.",PlayerDB[playerid][DrugsOfferAmount],AddPoints(PlayerDB[playerid][DrugsOfferSum]));
                                                SendClientMessage(playerid, ZALIA, string);
                                                format(string, 128, "Sëkmingai pardavëte þaidëjui %s narkotikus.",Vardas(playerid));
                                                SendClientMessage(GiverID, ZALIA, string);
                                            }
                                    }
                                    else
                                    {
                                            ErrorMsg(playerid,"• Prekeivis nebeturi tiek þolës,kiek buvo pasiûlyta.");
                                            new string[128];
                                            format(string, 128, "• Neturite tiek þolës,kiek jûs siûlëte pirkëjui %s.", Vardas(playerid));
                                            SendClientMessage(GiverID, RAUDONA, string);
                                    }
                                }
                                case 2:
                                {
                                    if(PlayerDB[GiverID][Kokainas] >= PlayerDB[playerid][DrugsOfferAmount])
                                    {
                                            if(PlayerDB[playerid][DrugsOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                            {
                                                ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø ðiam narkotikø sanderiui.");
                                                new string[128];
                                                format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø narkotikams ásigyti.", Vardas(playerid));
                                                SendClientMessage(GiverID, RAUDONA, string);
                                            }
                                            else
                                            {
                                                PlayerDB[playerid][MoneyInPocket] -= PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][MoneyInPocket]+=PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][Kokainas]-=PlayerDB[playerid][DrugsOfferAmount];
                                                PlayerDB[playerid][Kokainas]+=PlayerDB[playerid][DrugsOfferAmount];
                                                new string[128];
                                                format(string, 128, "• Ásigijote %img kokaino uþ %s€.",PlayerDB[playerid][DrugsOfferAmount],AddPoints(PlayerDB[playerid][DrugsOfferSum]));
                                                SendClientMessage(playerid, ZALIA, string);
                                                format(string, 128, "Sëkmingai pardavëte þaidëjui %s narkotikus.",Vardas(playerid));
                                                SendClientMessage(GiverID, ZALIA, string);
                                            }
                                    }
                                    else
                                    {
                                            ErrorMsg(playerid,"• Prekeivis nebeturi tiek kokaino,kiek buvo pasiûlyta.");
                                            new string[128];
                                            format(string, 128, "• Neturite tiek kokaino,kiek jûs siûlëte pirkëjui %s.", Vardas(playerid));
                                            SendClientMessage(GiverID, RAUDONA, string);
                                    }
                                }
                                case 3:
                                {
                                    if(PlayerDB[GiverID][Heroinas] >= PlayerDB[playerid][DrugsOfferAmount])
                                    {
                                            if(PlayerDB[playerid][DrugsOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                            {
                                                ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø ðiam narkotikø sanderiui.");
                                                new string[128];
                                                format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø narkotikams ásigyti.", Vardas(playerid));
                                                SendClientMessage(GiverID, RAUDONA, string);
                                            }
                                            else
                                            {
                                                PlayerDB[playerid][MoneyInPocket] -= PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][MoneyInPocket]+=PlayerDB[playerid][DrugsOfferSum];
                                                PlayerDB[GiverID][Heroinas]-=PlayerDB[playerid][DrugsOfferAmount];
                                                PlayerDB[playerid][Heroinas]+=PlayerDB[playerid][DrugsOfferAmount];
                                                new string[128];
                                                format(string, 128, "• Ásigijote %img heroino uþ %s€.",PlayerDB[playerid][DrugsOfferAmount],AddPoints(PlayerDB[playerid][DrugsOfferSum]));
                                                SendClientMessage(playerid, ZALIA, string);
                                                format(string, 128, "Sëkmingai pardavëte þaidëjui %s narkotikus.",Vardas(playerid));
                                                SendClientMessage(GiverID, ZALIA, string);
                                            }
                                    }
                                    else
                                    {
                                            ErrorMsg(playerid,"• Prekeivis nebeturi tiek heroino,kiek buvo pasiûlyta.");
                                            new string[128];
                                            format(string, 128, "• Neturite tiek heroino,kiek jûs siûlëte pirkëjui %s.", Vardas(playerid));
                                            SendClientMessage(GiverID, RAUDONA, string);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalësite gauti naujo pasiûlymo dar 30sek.");
                            PlayerDB[playerid][DrugsOfferCanGetAt] = gettime() + 29;
                            new string[128];
                            format(string, 128, "• Pirkëjas %s neteisingai ávedë pirkimo patvirtinimo kodà,todël naujo pasiûlymo negali gauti 30sek.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][DrugsOfferGiverID], RAUDONA, string);
                        }
                        PlayerDB[playerid][DrugsOfferGiverID] = -1;
                        PlayerDB[playerid][DrugsOfferDrugID] = -1;
                        PlayerDB[playerid][DrugsOfferAmount] = 0;
                        PlayerDB[playerid][DrugsOfferSum] = 0;
                        PlayerDB[playerid][ReceivedDrugsOffer] = false;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Atsisakëte pirkti narkotikø ið mafijozo.");
                        new string[128];
                        format(string, 128, "Þaidëjas %s atsisakë pirkti narkotikus.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][DrugsOfferGiverID], RAUDONA, string);// Mafijozui
                        PlayerDB[playerid][DrugsOfferGiverID] = -1;
                        PlayerDB[playerid][DrugsOfferDrugID] = -1;
                        PlayerDB[playerid][DrugsOfferAmount] = 0;
                        PlayerDB[playerid][DrugsOfferSum] = 0;
                        PlayerDB[playerid][ReceivedDrugsOffer] = false;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Prekeivis yra per toli nuo jûsø.");
                    PlayerDB[playerid][DrugsOfferGiverID] = -1;
                    PlayerDB[playerid][DrugsOfferAmount] = 0;
                    PlayerDB[playerid][DrugsOfferDrugID] = -1;
                    PlayerDB[playerid][DrugsOfferSum] = 0;
                    PlayerDB[playerid][ReceivedDrugsOffer] = false;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas neturi teisës jums siûlyti ásigyti narkotikø.");
                PlayerDB[playerid][DrugsOfferGiverID] = -1;
                PlayerDB[playerid][DrugsOfferAmount] = 0;
                PlayerDB[playerid][DrugsOfferDrugID] = -1;
                PlayerDB[playerid][DrugsOfferSum] = 0;
                PlayerDB[playerid][ReceivedDrugsOffer] = false;
            }
        }
    }
//
    if(dialogid == 228)
    {
        if(PlayerDB[playerid][ReceivedArmourOffer] == true)
        {
            if(PlayerDB[PlayerDB[playerid][ArmourOfferGiverID]][Job] == 2)
            {
                new Float:Cords[3];
                GetPlayerPos(PlayerDB[playerid][ArmourOfferGiverID], Cords[0], Cords[1], Cords[2]);

                if(IsPlayerInRangeOfPoint(playerid, 12, Cords[0], Cords[1], Cords[2]))
                {
                    if(response)
                    {
                        if(strcmp(PlayerDB[playerid][ArmourOfferSCode], inputdialogtext) == 0)
                        {
                            new Float:Armour;
                            GetPlayerArmour(playerid, Armour);
                            if(Armour == 100)
                            {
                                ErrorMsg(playerid,"• Jûs jau turite ðarvus,todël ásigyti naujø jums nereikia.");
                                new string[128];
                                format(string, 128, "• Pirkëjas %s jau turi ðarvus,kuriø taisyti nereikia.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][ArmourOfferGiverID], RAUDONA, string);
                            }
                            else
                            {
                                new GiverID = PlayerDB[playerid][ArmourOfferGiverID];
                                if(PlayerDB[playerid][ArmourOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                {
                                    ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø ðarvø ásigyjimui.");
                                    new string[128];
                                    format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø ðarvams ásigyti.", Vardas(playerid));
                                    SendClientMessage(GiverID, RAUDONA, string);
                                }
                                else
                                {
                                    PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][ArmourOfferSum];
                                    PlayerDB[GiverID][MoneyInPocket]+=floatround(PlayerDB[playerid][ArmourOfferSum] / 2, floatround_round);
                                    DarboInformacija[2][DarboFondas]+=PlayerDB[playerid][ArmourOfferSum] - floatround(PlayerDB[playerid][ArmourOfferSum] / 2, floatround_round);
                                    SetPlayerArmourEx(playerid,100.0);
                                    new string[128];
                                    format(string, 128, "• Ásigijote ðarvus uþ %d€.",PlayerDB[playerid][ArmourOfferSum]);
                                    SendClientMessage(playerid, ZALIA, string);
                                    format(string, 128, "Sëkmingai pardavëte þaidëjui %s ðarvus.",Vardas(playerid));
                                    SendClientMessage(GiverID, ZALIA, string);
                                    format(string, 128, "[racija] Medikas %s pardavë þaidëjui %s ðarvus uþ %d €.", Vardas(GiverID),Vardas(playerid),PlayerDB[playerid][ArmourOfferSum]);
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(IsPlayerConnected(i))
                                        {
                                            if(PlayerDB[i][Job] == 2)
                                            {
                                                SendClientMessage(i, 0x0099CCFF, string);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalësite gauti naujo pasiûlymo dar 30sek.");
                            PlayerDB[playerid][ArmourOfferCanGetAt] = gettime() + 29;
                            new string[128];
                            format(string, 128, "• Pirkëjas %s neteisingai ávedë pirkimo patvirtinimo kodà,todël naujo pasiûlymo negali gauti 30sek.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][ArmourOfferGiverID], RAUDONA, string);
                        }
                        PlayerDB[playerid][ArmourOfferGiverID] = -1;
                        PlayerDB[playerid][ArmourOfferSum] = 0;
                        PlayerDB[playerid][ReceivedArmourOffer] = false;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Atsisakëte pirkti ðarvus ið mediko.");
                        new string[128];
                        format(string, 128, "Þaidëjas %s atsisakë pirkti ðarvus.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][ArmourOfferGiverID], RAUDONA, string);// Mafijozui
                        PlayerDB[playerid][ArmourOfferGiverID] = -1;
                        PlayerDB[playerid][ArmourOfferSum] = 0;
                        PlayerDB[playerid][ReceivedArmourOffer] = false;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Medikas yra per toli nuo jûsø.");
                    PlayerDB[playerid][ArmourOfferGiverID] = -1;
                    PlayerDB[playerid][ArmourOfferSum] = 0;
                    PlayerDB[playerid][ReceivedArmourOffer] = false;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas neturi teisës jums siûlyti ásigyti ðarvø.");
                PlayerDB[playerid][ArmourOfferGiverID] = -1;
                PlayerDB[playerid][DrugsOfferSum] = 0;
                PlayerDB[playerid][ReceivedArmourOffer] = false;
            }
        }
    }
    if(dialogid == 330)
    {
        if(PlayerDB[playerid][ReceivedVaistuOffer] == true)
        {
            if(PlayerDB[PlayerDB[playerid][VaistuOfferGiverID]][Job] == 2)
            {
                new Float:Cords[3];
                GetPlayerPos(PlayerDB[playerid][VaistuOfferGiverID], Cords[0], Cords[1], Cords[2]);

                if(IsPlayerInRangeOfPoint(playerid, 12, Cords[0], Cords[1], Cords[2]))
                {
                    if(response)
                    {
                        if(strcmp(PlayerDB[playerid][VaistuOfferSCode], inputdialogtext) == 0)
                        {
                            if(PlayerDB[playerid][TuriuNamoVaistu] == 5)
                            {
                                ErrorMsg(playerid,"• Jûs jau turite vaistineles, todël pirma padëkite su /pmedikamentus.");
                                new string[128];
                                format(string, 128, "• Pirkëjas %s jau turi vaistineles.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][VaistuOfferGiverID], RAUDONA, string);
                            }
                            else
                            {
                                new GiverID = PlayerDB[playerid][VaistuOfferGiverID];
                                if(PlayerDB[playerid][VaistuOfferSum] > PlayerDB[playerid][MoneyInPocket])
                                {
                                    ErrorMsg(playerid,"• Jûs neturite pakankamai pinigø vaistineliø ásigyjimui.");
                                    new string[128];
                                    format(string, 128, "• Pirkëjas %s neturi pakankamai pinigø vaistinëlems ásigyti.", Vardas(playerid));
                                    SendClientMessage(GiverID, RAUDONA, string);
                                }
                                else
                                {
                                    PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][VaistuOfferSum];
                                    PlayerDB[GiverID][MoneyInPocket]+=floatround(PlayerDB[playerid][VaistuOfferSum] / 2, floatround_round);
                                    DarboInformacija[2][DarboFondas]+=PlayerDB[playerid][VaistuOfferSum] - floatround(PlayerDB[playerid][VaistuOfferSum] / 2, floatround_round);
                                    PlayerDB[playerid][Vaistineles] +=5;
				    				PlayerDB[GiverID][Vaistineles] -=5;
                                    new string[128];
                                    format(string, 128, "• Ásigijote vaistineles uþ %d€.",PlayerDB[playerid][VaistuOfferSum]);
                                    SendClientMessage(playerid, ZALIA, string);
                                    format(string, 128, "Sëkmingai pardavëte þaidëjui %s vaistinëles.",Vardas(playerid));
                                    SendClientMessage(GiverID, ZALIA, string);
                                    /*format(string, 128, "[racija] Medikas %s pardavë þaidëjui %s  uþ %d €.", Vardas(GiverID),Vardas(playerid),PlayerDB[playerid][ArmourOfferSum]);
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(IsPlayerConnected(i))
                                        {
                                            if(PlayerDB[i][Job] == 2)
                                            {
                                                SendClientMessage(i, 0x0099CCFF, string);
                                            }
                                        }
                                    }*/
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalësite gauti naujo pasiûlymo dar 30sek.");
                            PlayerDB[playerid][VaistuOfferCanGetAt] = gettime() + 29;
                            new string[128];
                            format(string, 128, "• Pirkëjas %s neteisingai ávedë pirkimo patvirtinimo kodà, todël naujo pasiûlymo negali gauti 30sek.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][VaistuOfferGiverID], RAUDONA, string);
                        }
                        PlayerDB[playerid][VaistuOfferGiverID] = -1;
                        PlayerDB[playerid][VaistuOfferSum] = 0;
                        PlayerDB[playerid][ReceivedVaistuOffer] = false;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Atsisakëte pirkti vaistinëles ið mediko.");
                        new string[128];
                        format(string, 128, "Þaidëjas %s atsisakë pirkti ðarvus.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][VaistuOfferGiverID], RAUDONA, string);// Mafijozui
                        PlayerDB[playerid][VaistuOfferGiverID] = -1;
                        PlayerDB[playerid][VaistuOfferSum] = 0;
                        PlayerDB[playerid][ReceivedVaistuOffer] = false;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Medikas yra per toli nuo jûsø.");
                    PlayerDB[playerid][VaistuOfferGiverID] = -1;
                    PlayerDB[playerid][VaistuOfferSum] = 0;
                    PlayerDB[playerid][ReceivedVaistuOffer] = false;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas neturi teisës jums siûlyti ásigyti vaistinëles.");
                PlayerDB[playerid][VaistuOfferGiverID] = -1;
                PlayerDB[playerid][VaistuOfferSum] = 0;
                PlayerDB[playerid][ReceivedVaistuOffer] = false;
            }
        }
    }
    if(dialogid == 229)
    {
        if(response)
        {
            PlayerDB[playerid][SelectedMGVItem] = MGVMeniuItemsIDS[playerid][listitem];
            ShowPlayerDialog(playerid, 230, DIALOG_STYLE_LIST, "{AFAFAF}Pasirinkote produktà", "Vartoti\nIðmesti", "Pasirinkti", "Atgal");
        }
    }
    if(dialogid == 230)
    {
        if(response)
        {
            new QueryString[256];
            mysql_format(connectionHandle, QueryString, 256, "SELECT `FoodName`, `NutritionWorth`, `TimeItsFresh` FROM `foodinventor` WHERE `PlayerSQLID` = '%i' AND `ItemID` = '%i' LIMIT 1;", PlayerDB[playerid][SQLID],PlayerDB[playerid][SelectedMGVItem]);
            mysql_function_query(connectionHandle, QueryString, true, "OnSelectFoodAction","dd",playerid,listitem);
        }
        else
        {
            cmd_mgv(playerid,"");
        }
    }
    if(dialogid == 231)
    {
        if(response)
        {
            PlayerDB[playerid][SelectedFoodItem] = listitem;
            ShowPlayerDialog(playerid, 232, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", "{E3F77E}» {FFFFFF}Pirkti valgymui èia\n{E3F77E}» {FFFFFF}Pirkti iðsineðimui", "Rinktis", "Atgal");
        }
    }
    if(dialogid == 232)
    {
        OnPlayerPickUpDynamicPickup(playerid, BurgerShot_Maistas);
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new Float:NutritionWorth = 0;
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    switch(PlayerDB[playerid][SelectedFoodItem])
                    {
                        case 0:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Tamsios duonos sumuðtiná{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 20;
                        }
                        case 1:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 4)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 4;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Mësainá su sûriu{FFFFFF} uþ {E3F77E}4€");
                            NutritionWorth = 15;
                        }
                        case 2:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Mësainá{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 12;
                        }
                        case 3:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Mësainá su ðonine{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 15;
                        }
                        case 4:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 6)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 6;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Sumuðtiná su viðtiena{FFFFFF} uþ {E3F77E}6€");
                            NutritionWorth = 20;
                        }
                        case 5:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 5)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 5;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Sumuðtiná su þuvimi{FFFFFF} uþ {E3F77E}5€");
                            NutritionWorth = 15;
                        }
                        case 6:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 14)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 14;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}„BurgerShot“ mësainá{FFFFFF} uþ {E3F77E}14€");
                            NutritionWorth = 25;
                        }
                        case 7:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 3.5;
                        }
                        case 8:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Arbatà{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 2;
                        }
                        case 9:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Kavà{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 4;
                        }
                        case 10:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Obuoliø sultis{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 2.5;
                        }
                    }
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                    else
                    {
                        new Float:NewHunger = PlayerDB[playerid][Hunger] - NutritionWorth;
                        if(NewHunger < 0)
                        {
                            NewHunger = 0;
                        }
                        PlayerDB[playerid][Hunger] = NewHunger;
                    }


                }
                case 1:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorBS","d",playerid);
                }
            }
        }
    }
//

    if(dialogid == 233)
    {
        if(response)
        {
            PlayerDB[playerid][SelectedFoodItem] = listitem;
            ShowPlayerDialog(playerid, 234, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", "{E3F77E}» {FFFFFF}Pirkti valgymui èia\n{E3F77E}» {FFFFFF}Pirkti iðsineðimui", "Rinktis", "Atgal");
        }
    }
    if(dialogid == 234)
    {
        OnPlayerPickUpDynamicPickup(playerid, XoomerDegalineShop);
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new Float:NutritionWorth = 0;
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    switch(PlayerDB[playerid][SelectedFoodItem])
                    {
                        case 0:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Kebabà su kiauliena{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 35.0;
                        }
                        case 1:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Submarinà su kumpiu{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 14;
                        }
                        case 2:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 5)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 5;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Submarinas su viðtiena{FFFFFF} uþ {E3F77E}5€");
                            NutritionWorth = 12;
                        }
                        case 3:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 6)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 6;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Sumuðtiná „Panini“{FFFFFF} uþ {E3F77E}6€");
                            NutritionWorth = 10.5;
                        }
                        case 4:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 5)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 5;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Submarinas su kiauliena ir agurkais{FFFFFF} uþ {E3F77E}5€");
                            NutritionWorth = 12.5;
                        }
                        case 5:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 4)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 4;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Kavos{FFFFFF} uþ {E3F77E}4€");
                            NutritionWorth = 4;
                        }
                        case 6:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Fantos{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 3.5;
                        }
                    }
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                    else
                    {
                        new Float:NewHunger = PlayerDB[playerid][Hunger] - NutritionWorth;
                        if(NewHunger < 0)
                        {
                            NewHunger = 0;
                        }
                        PlayerDB[playerid][Hunger] = NewHunger;
                    }
                }
                case 1:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorXO","d",playerid);
                }
            }
        }
    }

//
    if(dialogid == 235)
    {
        if(response)
        {
            PlayerDB[playerid][SelectedFoodItem] = listitem;
            ShowPlayerDialog(playerid, 236, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", "{E3F77E}» {FFFFFF}Pirkti valgymui èia\n{E3F77E}» {FFFFFF}Pirkti iðsineðimui", "Rinktis", "Atgal");
        }
    }
    if(dialogid == 236)
    {
        OnPlayerPickUpDynamicPickup(playerid, CluckinBell_Maistas);
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new Float:NutritionWorth = 0;
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    switch(PlayerDB[playerid][SelectedFoodItem])
                    {
                        case 0:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 8)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 8;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Mësainá su suriu{FFFFFF} uþ {E3F77E}8€");
                            NutritionWorth = 10.0;
                        }
                        case 1:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 13)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 13;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}„CluckinBell“ mësainá{FFFFFF} uþ {E3F77E}13€");
                            NutritionWorth = 15;
                        }
                        case 2:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 10)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 10;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Havajø pica{FFFFFF} uþ {E3F77E}10€");
                            NutritionWorth = 25;
                        }
                        case 3:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 7)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 7;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Submarinà su kumpiu{FFFFFF} uþ {E3F77E}7€");
                            NutritionWorth = 14.0;
                        }
                        case 4:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Kavà{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 4;
                        }
                        case 5:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 5)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 5;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}5€");
                            NutritionWorth = 3.5;
                        }
                    }
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                    else
                    {
                        new Float:NewHunger = PlayerDB[playerid][Hunger] - NutritionWorth;
                        if(NewHunger < 0)
                        {
                            NewHunger = 0;
                        }
                        PlayerDB[playerid][Hunger] = NewHunger;
                    }
                }
                case 1:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorCl","d",playerid);
                }
            }
        }
    }
    //
    if(dialogid == 237)
    {
        if(response)
        {
            PlayerDB[playerid][SelectedFoodItem] = listitem;
            ShowPlayerDialog(playerid, 238, DIALOG_STYLE_LIST, "{AFAFAF}Valgiaraðtis", "{E3F77E}» {FFFFFF}Pirkti valgymui èia\n{E3F77E}» {FFFFFF}Pirkti iðsineðimui", "Rinktis", "Atgal");
        }
    }
    if(dialogid == 238)
    {
        OnPlayerPickUpDynamicPickup(playerid, WellPica_Maistas);
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    new Float:NutritionWorth = 0;
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    switch(PlayerDB[playerid][SelectedFoodItem])
                    {
                        case 0:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 8)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 8;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Studentø picà{FFFFFF} uþ {E3F77E}8€");
                            NutritionWorth = 15.0;
                        }
                        case 1:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 9)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 9;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Vezuvijaus picà{FFFFFF} uþ {E3F77E}9€");
                            NutritionWorth = 20;
                        }
                        case 2:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 10)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 10;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Havajø pica{FFFFFF} uþ {E3F77E}10€");
                            NutritionWorth = 25;
                        }
                        case 3:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 9)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 9;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Karpio pica{FFFFFF} uþ {E3F77E}9€");
                            NutritionWorth = 20;
                        }
                        case 4:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 12)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 12;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Suvalgëte {E3F77E}Saliami pica{FFFFFF} uþ {E3F77E}12€");
                            NutritionWorth = 30;
                        }
                        case 5:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 3)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 3;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Kavà{FFFFFF} uþ {E3F77E}3€");
                            NutritionWorth = 4;
                        }
                        case 6:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 4)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 4;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Sulèiø{FFFFFF} uþ {E3F77E}4€");
                            NutritionWorth = 2.5;
                        }
                        case 7:
                        {
                            if(PlayerDB[playerid][MoneyInPocket] < 2)
                            {
                                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                                return 1;
                            }
                            else
                            {
                                PlayerDB[playerid][MoneyInPocket]-= 2;
                            }
                            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Iðgërete {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}2€");
                            NutritionWorth = 3.5;
                        }
                    }
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                    else
                    {
                        new Float:NewHunger = PlayerDB[playerid][Hunger] - NutritionWorth;
                        if(NewHunger < 0)
                        {
                            NewHunger = 0;
                        }
                        PlayerDB[playerid][Hunger] = NewHunger;
                    }
                }
                case 1:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorW","d",playerid);
                }
            }
        }
    }


    if(dialogid == 239)
    {
        if(response)
        {
            if(PlayerDB[playerid][FirstOwnedVehicleID] == -1 && PlayerDB[playerid][SecondOwnedVehicleID] == -1)
            {
                ErrorMsg(playerid,"• Neturite nuosavos tr. priemonës.");
            }
            else
            {
                if(PlayerDB[playerid][FirstOwnedVehicleID] >= 0 && PlayerDB[playerid][SecondOwnedVehicleID] >= 0)
                {
                    switch(listitem)
                    {
                        case 2:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new message[128],Float:Atstumas;
                                new Float:Cords[3];
                                GetVehiclePos(PlayerDB[playerid][OwnedVehicle1], Cords[0],Cords[1],Cords[2]);
                                Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
                                SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
                                SetPlayerMapIcon(playerid, 97, Cords[0], Cords[1], Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);

                                format(message, 128,"• {FFFFFF}Jûsø tr. priemonë yra {AD5BFF}%0.2f KM {FFFFFF}nuo jûsø. Vieta paþymëta raudonu kryþiuku.",Atstumas / 1000);
                                SendClientMessage(playerid, 0xAD5BFFFF, message);
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 3:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                for(new i = 0;i <= GetPlayerPoolSize();i++)
                                {
                                    if(IsPlayerConnected(i))
                                    {
                                        if(i != playerid)
                                        {
                                            if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle1]))
                                            {
                                                RemovePlayerFromVehicle(i);
                                                SendClientMessage(i, RAUDONA, "• Maðinos savininkas iðmetë jus ið tr.priemonës.");
                                            }
                                        }
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "• Iðmetëte visus þaidëjus ið savo tr.priemonës.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 4:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle1];
                                if(VehicleDB[vid][VehicleLocked] == 1)
                                {
                                    GameTextForPlayer(playerid, "~g~Atrakinote~w~ pirmaja tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 0;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                                else
                                {
                                    GameTextForPlayer(playerid, "~r~Uzrakinote~w~ pirmaja tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 1;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 5:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle1];
                                new Float:X,Float:Y,Float:Z;
                                GetVehiclePos(vid, X, Y, Z);
                                new bool:AutoPZonoje = false;

                                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }

                                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                                {
                                    new info[1024];
                                    new string[128];
                                    new VModelis = VehicleBySlotInfo[playerid][0][ModelBySlot];
                                    new SudevetumoVerte = floatround(aKaina[VModelis-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                                    new Float:VertesSmukimas = SudevetumoVerte + (aKaina[VModelis-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                                    new Verte = floatround(aKaina[VModelis-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                                    if(Verte < floatround(aKaina[VModelis-400] * 0.1,floatround_round))
                                    {
                                        Verte = floatround(aKaina[VModelis-400] * 0.1,floatround_round);
                                    }
                                    format(string, 128, "{FFFFFF}Pasiûlëtë savo automobilá {62A5C4}%s {ffffff} parduoti serveriui uþ {62A5C4}%s€{FFFFFF}.\n\n",vNames[VModelis-400],AddPoints(Verte));
                                    strcat(info, string);
                                    strcat(info, "Jûsø bagaþinëje yra:\n\n\t");
                                    new WeaponName[30];
                                    if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot1] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot1]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot2] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot2]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot3] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\n\n\t", VehicleDB[vid][DrugsSlot3]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\n\n\t");
                                    }
                                    new SCode[5];
                                    randomString(SCode,5);
                                    format(PlayerDB[playerid][SellVehToServerSCode], 6, "%s", SCode);
                                    strcat(info, "{ffffff}Norëdamas parduoti automobilá á laukelá áraðykite: ");
                                    format(string,128, "{62A5C4}%s{ffffff}, norëdamas atðaukti siûlymà paspauskite pasirinkimà 'Atðaukti'.",PlayerDB[playerid][SellVehToServerSCode]);
                                    strcat(info, string);
                                    ShowPlayerDialog(playerid, 81, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavimas", info, "Parduoti", "Atðaukti");
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 6:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 7:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                if(IsPlayerInAnyVehicle(playerid))
                                {
                                    ErrorMsg(playerid,"• Iðlipkite ið maðinos norëdami atidaryti bagaþinæ.");
                                }
                                else
                                {
                                    new Model = GetVehicleModel(PlayerDB[playerid][OwnedVehicle1]);

                                    new Float:Cords[3],Float:Offsets[3];
                                    GetVehicleModelInfo(Model, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
                                    GetVehicleRelativePos(PlayerDB[playerid][OwnedVehicle1], Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                                    if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                                    {
                                        if(VehicleBagazines[Model-400] == 0)
                                        {
                                            ErrorMsg(playerid,"• Tr.priemonë neturi bagaþinës.");
                                        }
                                        else
                                        {
                                            ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinë", "Iðimti ginklus,narkotikus\nPadëti ginklus,narkotikus", "Pasirinkti", "Atðaukti");
                                            PlayerDB[playerid][MasinosKuriosBagazineID] = PlayerDB[playerid][OwnedVehicle1];
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Turite bûti prie maðinos bagaþinës.");
                                    }
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 8:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
                            {
                                new Modelis = VehicleBySlotInfo[playerid][0][ModelBySlot];
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil))
                                {
                                    new SQLstring[128];
                                    PlayerDB[playerid][MoneyInPocket]-=floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil);

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `nuosavostrpriemones` SET `Sudauzyta` = '0' WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][FirstOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, false, "", "");

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][FirstOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, true, "OnRepairFirstCar","d",playerid);
                                }
                                else
                                {
                                    new string[128];
                                    format(string, 128, "• Nepakanka pinigø maðinos remontui (turi %s €, reikia %s €, trûksta %s €).", AddPoints(PlayerDB[playerid][MoneyInPocket]),AddPoints(floatround(aKaina[Modelis - 400] * 0.07,floatround_round)),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round) - PlayerDB[playerid][MoneyInPocket]));
                                    SendClientMessage(playerid, RAUDONA, string);
                                    //format(string, 128, "• Nepakanka pinigø maðinos remontui (turi %s €, reikia %s €, trûksta %s €).", AddPoints(PlayerDB[playerid][MoneyInPocket]),AddPoints(floatround(aKaina[VehicleBySlotInfo[playerid][1][ModelBySlot] - 400] * 0.07, floatround_ceil)),AddPoints(floatround(aKaina[VehicleBySlotInfo[playerid][1][ModelBySlot] - 400] * 0.07, floatround_ceil)) - PlayerDB[playerid][MoneyInPocket]));
                                    //SendClientMessage(playerid, RAUDONA, string);
                                    //floatround(aKaina[VehicleBySlotInfo[playerid][1][ModelBySlot] - 400] * 0.07, floatround_ceil))
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë nëra sudauþyta.");
                            }
                        }

                        case 9:
                        {
                        	if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
		                        new strf[128];
		                        new info[1024];
		                        new Modelis = VehicleBySlotInfo[playerid][0][ModelBySlot] - 400;
		                        new v183 = PlayerDB[playerid][OwnedVehicle1];
		                        format(strf, sizeof(strf), "{62A5C4}• {FFFFFF}Automobilio {62A5C4}%s{FFFFFF} informacija:\n\n",vNames[Modelis]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}1. {FFFFFF}Automobilio kuro sànaudos: {62A5C4}%dl/100km\n",DegaluSanaudos[Modelis]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}2. {FFFFFF}Automobilio bako talpa: {62A5C4}%dl\n",DegaluTalpa[Modelis]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}3. {FFFFFF}Automobilio maksimalus greitis: {62A5C4}%dkm/h\n",MaxGreitis[Modelis]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}4. {FFFFFF}Automobilio remonto kaina: {62A5C4}%s €\n",AddPoints(floatround(aKaina[Modelis] * 0.07,floatround_round)));
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}5. {FFFFFF}Automobilio numeriai: {62A5C4}%s\n", VehicleDB[v183][VehicleNumbers]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}6. {FFFFFF}Naujo automobilio vertë: {62A5C4}%s €\n",AddPoints(aKaina[Modelis]));
		                        strcat(info, strf);
		                        new Number = floatround(aKaina[Modelis] * 0.5 * (1 - (VehicleBySlotInfo[playerid][0][BrokenTimesBySlot] * 0.02)) ,floatround_round);
		                        if(Number < 0)
		                        {
		                        	Number = 0;
		                        }
		                        format(strf, sizeof(strf), "\t{62A5C4}7. {FFFFFF}Kaina parduodant þaidejui nuo: {62A5C4}%s €\n",AddPoints(Number));
		                        strcat(info, strf);
		                        if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
		                        {
			                        format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleDB[PlayerDB[playerid][OwnedVehicle1]][Rida]);
			                        strcat(info, strf);
		                        }
		                        else
		                        {
			                        format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%01.2f km\n",VehicleBySlotInfo[playerid][0][RidaBySlot]);
			                        strcat(info, strf);
		                        }
		                        if(VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] == 1)
		                        {
		                        	format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Imontuota\n");
		                        }
		                        else
		                        {
		                        	format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Neimontuota\n");
		                        }
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}11. {FFFFFF}Dauþtumas: {62A5C4}%d kartø(-us)\n",VehicleBySlotInfo[playerid][0][BrokenTimesBySlot]);
		                        strcat(info, strf);
		                        format(strf, sizeof(strf), "\t{62A5C4}12. {FFFFFF}Pirkimo data: {62A5C4}%s\n",VehicleBySlotInfo[playerid][0][DateOfBuyingBySlot]);
		                        strcat(info, strf);
		                        ShowPlayerDialog(playerid, 241, DIALOG_STYLE_MSGBOX, "{AFAFAF}Automobilio informacija", info, "Gerai", "Atgal");
	                        }
	                        else
	                        {
	                            ErrorMsg(playerid, "• Pirma suremontuokite maðinà.");
	                        }
                        }
                        case 10:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle1];
                                if(IsPlayerInVehicle(playerid, VID))
                                {
                                    if(VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] == 1)
                                    {
                                        switch(VehicleDB[VID][FuelType])
                                        {
                                            case 0:
                                            {
                                                VehicleDB[VID][FuelType] = 1;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}dujas{FFFFFF} !");
                                            }
                                            case 1:
                                            {
                                                VehicleDB[VID][FuelType] = 0;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}benzinà{FFFFFF} !");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Jûsø tr.priemonë neturi ádiegtos dujø árangos.");
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Turite bûti savo pasirinktoje tr. priemonëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 11:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle1];

                                if(VehicleDB[VID][Pardavinejama] == true)
                                {
                                    VehicleDB[VID][Pardavinejama] = false;
                                    if(IsValidDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]))
                                    {
                                        DestroyDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]);
                                    }
                                    SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina nebus {62A5C4}pardavinëjama{FFFFFF} !");
                                }
                                else
                                {
                                    ShowPlayerDialog(playerid, 242, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavinëjimas", "{62A5C4}Apaèioje laukelyje áraðykite pardavinëjamos transporto priemonës Jums tenkinamà kainà. Áraðius á laukelá {FFFFFF}0 {62A5C4}- kaina bus sutartinë.", "Toliau", "Atgal");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }

                        case 15:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new message[128],Float:Atstumas;
                                new Float:Cords[3];
                                GetVehiclePos(PlayerDB[playerid][OwnedVehicle2], Cords[0],Cords[1],Cords[2]);
                                Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
                                SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
                                SetPlayerMapIcon(playerid, 97, Cords[0], Cords[1], Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);

                                format(message, 128,"• {FFFFFF}Jûsø tr. priemonë yra {AD5BFF}%0.2f KM {FFFFFF}nuo jûsø. Vieta paþymëta raudonu kryþiuku.",Atstumas / 1000);
                                SendClientMessage(playerid, 0xAD5BFFFF, message);
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 16:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                for(new i = 0;i <= GetPlayerPoolSize();i++)
                                {
                                    if(IsPlayerConnected(i))
                                    {
                                        if(i != playerid)
                                        {
                                            if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle2]))
                                            {
                                                RemovePlayerFromVehicle(i);
                                                SendClientMessage(i, RAUDONA, "• Maðinos savininkas iðmetë jus ið tr.priemonës.");
                                            }
                                        }
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "• Iðmetëte visus þaidëjus ið savo tr.priemonës.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 17:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle2];
                                if(VehicleDB[vid][VehicleLocked] == 1)
                                {
                                    GameTextForPlayer(playerid, "~g~Atrakinote~w~ antra tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 0;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                                else
                                {
                                    GameTextForPlayer(playerid, "~r~Uzrakinote~w~ antra tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 1;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 18:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle2];
                                new Float:X,Float:Y,Float:Z;
                                GetVehiclePos(vid, X, Y, Z);
                                new bool:AutoPZonoje = false;

                                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }

                                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                                {
                                    new info[1024];
                                    new string[128];
                                    new VModelis = VehicleBySlotInfo[playerid][1][ModelBySlot];
                                    new SudevetumoVerte = floatround(aKaina[VModelis-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                                    new Float:VertesSmukimas = SudevetumoVerte + (aKaina[VModelis-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                                    new Verte = floatround(aKaina[VModelis-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                                    if(Verte < floatround(aKaina[VModelis-400] * 0.1,floatround_round))
                                    {
                                        Verte = floatround(aKaina[VModelis-400] * 0.1,floatround_round);
                                    }
                                    format(string, 128, "{FFFFFF}Pasiûlëtë savo automobilá {62A5C4}%s {ffffff} parduoti serveriui uþ {62A5C4}%s€{FFFFFF}.\n\n",vNames[VModelis-400],AddPoints(Verte));
                                    strcat(info, string);
                                    strcat(info, "Jûsø bagaþinëje yra:\n\n\t");
                                    new WeaponName[30];
                                    if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot1] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot1]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot2] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot2]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot3] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\n\n\t", VehicleDB[vid][DrugsSlot3]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\n\n\t");
                                    }
                                    new SCode[5];
                                    randomString(SCode,5);
                                    format(PlayerDB[playerid][SellVehToServerSCode], 6, "%s", SCode);
                                    strcat(info, "{ffffff}Norëdamas parduoti automobilá á laukelá áraðykite: ");
                                    format(string,128, "{62A5C4}%s{ffffff}, norëdamas atðaukti siûlymà paspauskite pasirinkimà 'Atðaukti'.",PlayerDB[playerid][SellVehToServerSCode]);
                                    strcat(info, string);
                                    ShowPlayerDialog(playerid, 240, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavimas", info, "Parduoti", "Atðaukti");
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 19:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 20:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                if(IsPlayerInAnyVehicle(playerid))
                                {
                                    ErrorMsg(playerid,"• Iðlipkite ið maðinos norëdami atidaryti bagaþinæ.");
                                }
                                else
                                {
                                    new Model = GetVehicleModel(PlayerDB[playerid][OwnedVehicle2]);

                                    new Float:Cords[3],Float:Offsets[3];
                                    GetVehicleModelInfo(Model, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
                                    GetVehicleRelativePos(PlayerDB[playerid][OwnedVehicle2], Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                                    if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                                    {
                                        if(VehicleBagazines[Model-400] == 0)
                                        {
                                            ErrorMsg(playerid,"• Tr.priemonë neturi bagaþinës.");
                                        }
                                        else
                                        {
                                            ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinë", "Iðimti ginklus,narkotikus\nPadëti ginklus,narkotikus", "Pasirinkti", "Atðaukti");
                                            PlayerDB[playerid][MasinosKuriosBagazineID] = PlayerDB[playerid][OwnedVehicle2];
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Turite bûti prie maðinos bagaþinës.");
                                    }
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }

                        case 21:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
                            {
                                new Modelis = VehicleBySlotInfo[playerid][1][ModelBySlot];
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil))
                                {
                                    new SQLstring[128];
                                    PlayerDB[playerid][MoneyInPocket]-=floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil);

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `nuosavostrpriemones` SET `Sudauzyta` = '0' WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][SecondOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, false, "", "");

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][SecondOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, true, "OnRepairSecondCar","d",playerid);
                                }
                                else
                                {
                                    new string[128];
                                    format(string, 128, "• Nepakanka pinigø maðinos remontui (turi %s €, reikia %s €, trûksta %s €).", AddPoints(PlayerDB[playerid][MoneyInPocket]),AddPoints(floatround(aKaina[Modelis - 400] * 0.07,floatround_round)),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round) - PlayerDB[playerid][MoneyInPocket]));
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë nëra sudauþyta.");
                            }
                        }

                        case 22:
                        {
                        	if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                        	{
	                            new strf[128];
	                            new info[1024];
	                            new Modelis = VehicleBySlotInfo[playerid][1][ModelBySlot] - 400;
	                            new v183 = PlayerDB[playerid][OwnedVehicle2];
	                            format(strf, sizeof(strf), "{62A5C4}• {FFFFFF}Automobilio {62A5C4}%s{FFFFFF} informacija:\n\n",vNames[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}1. {FFFFFF}Automobilio kuro sànaudos: {62A5C4}%dl/100km\n",DegaluSanaudos[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}2. {FFFFFF}Automobilio bako talpa: {62A5C4}%dl\n",DegaluTalpa[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}3. {FFFFFF}Automobilio maksimalus greitis: {62A5C4}%dkm/h\n",MaxGreitis[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}4. {FFFFFF}Automobilio remonto kaina: {62A5C4}%s €\n",AddPoints(floatround(aKaina[Modelis] * 0.07,floatround_round)));
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}5. {FFFFFF}Automobilio numeriai: {62A5C4}%s\n", VehicleDB[v183][VehicleNumbers]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}6. {FFFFFF}Naujo automobilio vertë: {62A5C4}%s €\n",AddPoints(aKaina[Modelis]));
	                            strcat(info, strf);
	                            new Number = floatround(aKaina[Modelis] * 0.5 * (1 - (VehicleBySlotInfo[playerid][1][BrokenTimesBySlot] * 0.02)) ,floatround_round);
	                            if(Number < 0)
	                            {
	                                Number = 0;
	                            }
	                            format(strf, sizeof(strf), "\t{62A5C4}7. {FFFFFF}Kaina parduodant þaidejui nuo: {62A5C4}%s €\n",AddPoints(Number));
	                            strcat(info, strf);
	                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleDB[PlayerDB[playerid][OwnedVehicle2]][Rida]);
	                                strcat(info, strf);
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleBySlotInfo[playerid][1][RidaBySlot]);
	                                strcat(info, strf);
	                            }
	                            if(VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] == 1)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Imontuota\n");
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Neimontuota\n");
	                            }
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}11. {FFFFFF}Dauþtumas: {62A5C4}%d kartø(-us)\n",VehicleBySlotInfo[playerid][1][BrokenTimesBySlot]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}12. {FFFFFF}Pirkimo data: {62A5C4}%s\n",VehicleBySlotInfo[playerid][1][DateOfBuyingBySlot]);
	                            strcat(info, strf);
	                            ShowPlayerDialog(playerid, 241, DIALOG_STYLE_MSGBOX, "{AFAFAF}Automobilio informacija", info, "Gerai", "Atgal");
                         	}
                         	else
                         	{
                         		ErrorMsg(playerid, "• Pirma suremontuokite maðinà.");
                         	}
                        }
                        case 23:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle2];
                                if(IsPlayerInVehicle(playerid, VID))
                                {
                                    if(VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] == 1)
                                    {
                                        switch(VehicleDB[VID][FuelType])
                                        {
                                            case 0:
                                            {
                                                VehicleDB[VID][FuelType] = 1;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}dujas{FFFFFF} !");
                                            }
                                            case 1:
                                            {
                                                VehicleDB[VID][FuelType] = 0;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}benzinà{FFFFFF} !");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Jûsø tr.priemonë neturi ádiegtos dujø árangos.");
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Turite bûti savo pasirinktoje tr. priemonëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 24:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle2];

                                if(VehicleDB[VID][Pardavinejama] == true)
                                {
                                    VehicleDB[VID][Pardavinejama] = false;
                                    if(IsValidDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]))
                                    {
                                        DestroyDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]);
                                    }
                                    SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina nebus {62A5C4}pardavinëjama{FFFFFF} !");
                                }
                                else
                                {
                                    ShowPlayerDialog(playerid, 248, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavinëjimas", "{62A5C4}Apaèioje laukelyje áraðykite pardavinëjamos transporto priemonës Jums tenkinamà kainà. Áraðius á laukelá {FFFFFF}0 {62A5C4}- kaina bus sutartinë.", "Toliau", "Atgal");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        default:
                        {
                            cmd_mvaldymas(playerid,"");
                        }
                    }
                }
                else if(PlayerDB[playerid][FirstOwnedVehicleID] >= 0)
                {
                    switch(listitem)
                    {
                        case 2:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new message[128],Float:Atstumas;
                                new Float:Cords[3];
                                GetVehiclePos(PlayerDB[playerid][OwnedVehicle1], Cords[0],Cords[1],Cords[2]);
                                Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
                                SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
                                SetPlayerMapIcon(playerid, 97, Cords[0], Cords[1], Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);

                                format(message, 128,"• {FFFFFF}Jûsø tr. priemonë yra {AD5BFF}%0.2f KM {FFFFFF}nuo jûsø. Vieta paþymëta raudonu kryþiuku.",Atstumas / 1000);
                                SendClientMessage(playerid, 0xAD5BFFFF, message);
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 3:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                for(new i = 0;i <= GetPlayerPoolSize();i++)
                                {
                                    if(IsPlayerConnected(i))
                                    {
                                        if(i != playerid)
                                        {
                                            if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle1]))
                                            {
                                                RemovePlayerFromVehicle(i);
                                                SendClientMessage(i, RAUDONA, "• Maðinos savininkas iðmetë jus ið tr.priemonës.");
                                            }
                                        }
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "• Iðmetëte visus þaidëjus ið savo tr.priemonës.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 4:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle1];
                                if(VehicleDB[vid][VehicleLocked] == 1)
                                {
                                    GameTextForPlayer(playerid, "~g~Atrakinote~w~ pirmaja tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 0;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                                else
                                {
                                    GameTextForPlayer(playerid, "~r~Uzrakinote~w~ pirmaja tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 1;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 5:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle1];
                                new Float:X,Float:Y,Float:Z;
                                GetVehiclePos(vid, X, Y, Z);
                                new bool:AutoPZonoje = false;

                                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }

                                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                                {
                                    new info[1024];
                                    new string[128];
                                    new VModelis = VehicleBySlotInfo[playerid][0][ModelBySlot];
                                    new SudevetumoVerte = floatround(aKaina[VModelis-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                                    new Float:VertesSmukimas = SudevetumoVerte + (aKaina[VModelis-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                                    new Verte = floatround(aKaina[VModelis-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                                    if(Verte < floatround(aKaina[VModelis-400] * 0.1,floatround_round))
                                    {
                                        Verte = floatround(aKaina[VModelis-400] * 0.1,floatround_round);
                                    }
                                    format(string, 128, "{FFFFFF}Pasiûlëtë savo automobilá {62A5C4}%s {ffffff} parduoti serveriui uþ {62A5C4}%s€{FFFFFF}.\n\n",vNames[VModelis-400],AddPoints(Verte));
                                    strcat(info, string);
                                    strcat(info, "Jûsø bagaþinëje yra:\n\n\t");
                                    new WeaponName[30];
                                    if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot1] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot1]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot2] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot2]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot3] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\n\n\t", VehicleDB[vid][DrugsSlot3]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\n\n\t");
                                    }
                                    new SCode[5];
                                    randomString(SCode,5);
                                    format(PlayerDB[playerid][SellVehToServerSCode], 6, "%s", SCode);
                                    strcat(info, "{ffffff}Norëdamas parduoti automobilá á laukelá áraðykite: ");
                                    format(string,128, "{62A5C4}%s{ffffff}, norëdamas atðaukti siûlymà paspauskite pasirinkimà 'Atðaukti'.",PlayerDB[playerid][SellVehToServerSCode]);
                                    strcat(info, string);
                                    ShowPlayerDialog(playerid, 81, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavimas", info, "Parduoti", "Atðaukti");
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 6:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 7:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                if(IsPlayerInAnyVehicle(playerid))
                                {
                                    ErrorMsg(playerid,"• Iðlipkite ið maðinos norëdami atidaryti bagaþinæ.");
                                }
                                else
                                {
                                    new Model = GetVehicleModel(PlayerDB[playerid][OwnedVehicle1]);

                                    new Float:Cords[3],Float:Offsets[3];
                                    GetVehicleModelInfo(Model, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
                                    GetVehicleRelativePos(PlayerDB[playerid][OwnedVehicle1], Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                                    if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                                    {
                                        if(VehicleBagazines[Model-400] == 0)
                                        {
                                            ErrorMsg(playerid,"• Tr.priemonë neturi bagaþinës.");
                                        }
                                        else
                                        {
                                            ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinë", "Iðimti ginklus,narkotikus\nPadëti ginklus,narkotikus", "Pasirinkti", "Atðaukti");
                                            PlayerDB[playerid][MasinosKuriosBagazineID] = PlayerDB[playerid][OwnedVehicle1];
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Turite bûti prie maðinos bagaþinës.");
                                    }
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 8:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
                            {
                                new Modelis = VehicleBySlotInfo[playerid][0][ModelBySlot];
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil))
                                {
                                    new SQLstring[128];
                                    PlayerDB[playerid][MoneyInPocket]-=floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil);

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `nuosavostrpriemones` SET `Sudauzyta` = '0' WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][FirstOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, false, "", "");

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][FirstOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, true, "OnRepairFirstCar","d",playerid);
                                }
                                else
                                {
                                    new string[128];
                                    format(string, 128, "• Nepakanka pinigø maðinos remontui (turi %s €, reikia %s €, trûksta %s €).", AddPoints(PlayerDB[playerid][MoneyInPocket]),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round)),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round) - PlayerDB[playerid][MoneyInPocket]));
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë nëra sudauþyta.");
                            }
                        }

                        case 9:
                        {
                        	if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                        	{
	                            new strf[128];
	                            new info[1024];
	                            new Modelis = VehicleBySlotInfo[playerid][0][ModelBySlot] - 400;
	                            new v183 = PlayerDB[playerid][OwnedVehicle1];
	                            format(strf, sizeof(strf), "{62A5C4}• {FFFFFF}Automobilio {62A5C4}%s{FFFFFF} informacija:\n\n",vNames[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}1. {FFFFFF}Automobilio kuro sànaudos: {62A5C4}%dl/100km\n",DegaluSanaudos[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}2. {FFFFFF}Automobilio bako talpa: {62A5C4}%dl\n",DegaluTalpa[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}3. {FFFFFF}Automobilio maksimalus greitis: {62A5C4}%dkm/h\n",MaxGreitis[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}4. {FFFFFF}Automobilio remonto kaina: {62A5C4}%s €\n",AddPoints(floatround(aKaina[Modelis] * 0.07,floatround_round)));
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}5. {FFFFFF}Automobilio numeriai: {62A5C4}%s\n",VehicleDB[v183][VehicleNumbers]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}6. {FFFFFF}Naujo automobilio vertë: {62A5C4}%s €\n",AddPoints(aKaina[Modelis]));
	                            strcat(info, strf);
	                            new Number = floatround(aKaina[Modelis] * 0.5 * (1 - (VehicleBySlotInfo[playerid][0][BrokenTimesBySlot] * 0.02)) ,floatround_round);
	                            if(Number < 0)
	                            {
	                                Number = 0;
	                            }
	                            format(strf, sizeof(strf), "\t{62A5C4}7. {FFFFFF}Kaina parduodant þaidejui nuo: {62A5C4}%s €\n",AddPoints(Number));
	                            strcat(info, strf);
	                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleDB[PlayerDB[playerid][OwnedVehicle1]][Rida]);
	                                strcat(info, strf);
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%01.2f km\n",VehicleBySlotInfo[playerid][0][RidaBySlot]);
	                                strcat(info, strf);
	                            }
	                            if(VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] == 1)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Imontuota\n");
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Neimontuota\n");
	                            }
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}11. {FFFFFF}Dauþtumas: {62A5C4}%d kartø(-us)\n",VehicleBySlotInfo[playerid][0][BrokenTimesBySlot]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}12. {FFFFFF}Pirkimo data: {62A5C4}%s\n",VehicleBySlotInfo[playerid][0][DateOfBuyingBySlot]);
	                            strcat(info, strf);
	                            ShowPlayerDialog(playerid, 241, DIALOG_STYLE_MSGBOX, "{AFAFAF}Automobilio informacija", info, "Gerai", "Atgal");
							}
	   						else
	   						{
	   						    ErrorMsg(playerid, "• Pirma suremontuokite maðinà.");
	   						}
                        }
                        case 10:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle1];
                                if(IsPlayerInVehicle(playerid, VID))
                                {
                                    if(VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] == 1)
                                    {
                                        switch(VehicleDB[VID][FuelType])
                                        {
                                            case 0:
                                            {
                                                VehicleDB[VID][FuelType] = 1;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}dujas{FFFFFF} !");
                                            }
                                            case 1:
                                            {
                                                VehicleDB[VID][FuelType] = 0;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}benzinà{FFFFFF} !");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Jûsø tr.priemonë neturi ádiegtos dujø árangos.");
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Turite bûti savo pasirinktoje tr. priemonëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 11:
                        {
                            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle1];

                                if(VehicleDB[VID][Pardavinejama] == true)
                                {
                                    VehicleDB[VID][Pardavinejama] = false;
                                    if(IsValidDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]))
                                    {
                                        DestroyDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]);
                                    }
                                    SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina nebus {62A5C4}pardavinëjama{FFFFFF} !");
                                }
                                else
                                {
                                    ShowPlayerDialog(playerid, 242, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavinëjimas", "{62A5C4}Apaèioje laukelyje áraðykite pardavinëjamos transporto priemonës Jums tenkinamà kainà. Áraðius á laukelá {FFFFFF}0 {62A5C4}- kaina bus sutartinë.", "Toliau", "Atgal");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        default:
                        {
                            cmd_mvaldymas(playerid,"");
                        }
                    }

                }

                else if(PlayerDB[playerid][SecondOwnedVehicleID] >= 0)
                {
                    switch(listitem)
                    {
                        case 4:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new message[128],Float:Atstumas;
                                new Float:Cords[3];
                                GetVehiclePos(PlayerDB[playerid][OwnedVehicle2], Cords[0],Cords[1],Cords[2]);
                                Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
                                SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
                                SetPlayerMapIcon(playerid, 97, Cords[0], Cords[1], Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);

                                format(message, 128,"• {FFFFFF}Jûsø tr. priemonë yra {AD5BFF}%0.2f KM {FFFFFF}nuo jûsø. Vieta paþymëta raudonu kryþiuku.",Atstumas / 1000);
                                SendClientMessage(playerid, 0xAD5BFFFF, message);
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 5:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                for(new i = 0;i <= GetPlayerPoolSize();i++)
                                {
                                    if(IsPlayerConnected(i))
                                    {
                                        if(i != playerid)
                                        {
                                            if(IsPlayerInVehicle(i, PlayerDB[playerid][OwnedVehicle2]))
                                            {
                                                RemovePlayerFromVehicle(i);
                                                SendClientMessage(i, RAUDONA, "• Maðinos savininkas iðmetë jus ið tr.priemonës.");
                                            }
                                        }
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "• Iðmetëte visus þaidëjus ið savo tr.priemonës.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 6:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle2];
                                if(VehicleDB[vid][VehicleLocked] == 1)
                                {
                                    GameTextForPlayer(playerid, "~g~Atrakinote~w~ antra tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 0;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                                else
                                {
                                    GameTextForPlayer(playerid, "~r~Uzrakinote~w~ antra tr.priemone", 3000, 3);
                                    VehicleDB[vid][VehicleLocked] = 1;
                                    new engine, lights, alarm, doors, bonnet, boot, objective;
                                    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                                    SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
                                    SetTimerEx("DisableVehicleAlarm", 1000, false, "d", vid);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 7:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle2];
                                new Float:X,Float:Y,Float:Z;
                                GetVehiclePos(vid, X, Y, Z);
                                new bool:AutoPZonoje = false;

                                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }

                                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                                {
                                    AutoPZonoje = true;

                                }
                                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                                {
                                    new info[1024];
                                    new string[128];
                                    new VModelis = VehicleBySlotInfo[playerid][1][ModelBySlot];
                                    new SudevetumoVerte = floatround(aKaina[VModelis-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                                    new Float:VertesSmukimas = SudevetumoVerte + (aKaina[VModelis-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                                    new Verte = floatround(aKaina[VModelis-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                                    if(Verte < floatround(aKaina[VModelis-400] * 0.1,floatround_round))
                                    {
                                        Verte = floatround(aKaina[VModelis-400] * 0.1,floatround_round);
                                    }
                                    format(string, 128, "{FFFFFF}Pasiûlëtë savo automobilá {62A5C4}%s {ffffff} parduoti serveriui uþ {62A5C4}%s€{FFFFFF}.\n\n",vNames[VModelis-400],AddPoints(Verte));
                                    strcat(info, string);
                                    strcat(info, "Jûsø bagaþinëje yra:\n\n\t");
                                    new WeaponName[30];
                                    if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                    {
                                        GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                        format(string, 128, "{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\n\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot1] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot1]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot2] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\n\t", VehicleDB[vid][DrugsSlot2]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.\n\t");
                                    }
                                    if(VehicleDB[vid][DrugsSlot3] > 0)
                                    {
                                        format(string, 128, "{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\n\n\t", VehicleDB[vid][DrugsSlot3]);
                                        strcat(info, string);
                                    }
                                    else
                                    {
                                        strcat(info, "{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\n\n\t");
                                    }
                                    new SCode[5];
                                    randomString(SCode,5);
                                    format(PlayerDB[playerid][SellVehToServerSCode], 6, "%s", SCode);
                                    strcat(info, "{ffffff}Norëdamas parduoti automobilá á laukelá áraðykite: ");
                                    format(string,128, "{62A5C4}%s{ffffff}, norëdamas atðaukti siûlymà paspauskite pasirinkimà 'Atðaukti'.",PlayerDB[playerid][SellVehToServerSCode]);
                                    strcat(info, string);
                                    ShowPlayerDialog(playerid, 240, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavimas", info, "Parduoti", "Atðaukti");
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 8:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 9:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                if(IsPlayerInAnyVehicle(playerid))
                                {
                                    ErrorMsg(playerid,"• Iðlipkite ið maðinos norëdami atidaryti bagaþinæ.");
                                }
                                else
                                {
                                    new Model = GetVehicleModel(PlayerDB[playerid][OwnedVehicle2]);

                                    new Float:Cords[3],Float:Offsets[3];
                                    GetVehicleModelInfo(Model, VEHICLE_MODEL_INFO_SIZE, Offsets[0], Offsets[1], Offsets[2]);
                                    GetVehicleRelativePos(PlayerDB[playerid][OwnedVehicle2], Cords[0],Cords[1],Cords[2], 0.0, -(Offsets[1] / 2), 0.0);
                                    if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                                    {
                                        if(VehicleBagazines[Model-400] == 0)
                                        {
                                            ErrorMsg(playerid,"• Tr.priemonë neturi bagaþinës.");
                                        }
                                        else
                                        {
                                            ShowPlayerDialog(playerid, 58, DIALOG_STYLE_LIST, "{AFAFAF}Bagaþinë", "Iðimti ginklus,narkotikus\nPadëti ginklus,narkotikus", "Pasirinkti", "Atðaukti");
                                            PlayerDB[playerid][MasinosKuriosBagazineID] = PlayerDB[playerid][OwnedVehicle2];
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Turite bûti prie maðinos bagaþinës.");
                                    }
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }

                        case 10:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
                            {
                                new Modelis = VehicleBySlotInfo[playerid][1][ModelBySlot];
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil))
                                {
                                    new SQLstring[128];
                                    PlayerDB[playerid][MoneyInPocket]-=floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil);

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `nuosavostrpriemones` SET `Sudauzyta` = '0' WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][SecondOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, false, "", "");

                                    mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", PlayerDB[playerid][SecondOwnedVehicleID]);
                                    mysql_function_query(connectionHandle, SQLstring, true, "OnRepairSecondCar","d",playerid);
                                }
                                else
                                {
                                    new string[128];
                                    format(string, 128, "• Nepakanka pinigø maðinos remontui (turi %s €, reikia %s €, trûksta %s €).", AddPoints(PlayerDB[playerid][MoneyInPocket]),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round)),AddPoints(floatround(aKaina[Modelis - 400] * 0.7,floatround_round) - PlayerDB[playerid][MoneyInPocket]));
                                    SendClientMessage(playerid, RAUDONA, string);
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë nëra sudauþyta.");
                            }
                        }

                        case 11:
                        {
                        	if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                        	{
	                            new strf[128];
	                            new info[1024];
	                            new Modelis = VehicleBySlotInfo[playerid][1][ModelBySlot] - 400;
								new v183 = PlayerDB[playerid][OwnedVehicle2];
	                            format(strf, sizeof(strf), "{62A5C4}• {FFFFFF}Automobilio {62A5C4}%s{FFFFFF} informacija:\n\n",vNames[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}1. {FFFFFF}Automobilio kuro sànaudos: {62A5C4}%dl/100km\n",DegaluSanaudos[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}2. {FFFFFF}Automobilio bako talpa: {62A5C4}%dl\n",DegaluTalpa[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}3. {FFFFFF}Automobilio maksimalus greitis: {62A5C4}%dkm/h\n",MaxGreitis[Modelis]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}4. {FFFFFF}Automobilio remonto kaina: {62A5C4}%s €\n",AddPoints(floatround(aKaina[Modelis] * 0.07,floatround_round)));
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}5. {FFFFFF}Automobilio numeriai: {62A5C4}%s\n",VehicleDB[v183][VehicleNumbers]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}6. {FFFFFF}Naujo automobilio vertë: {62A5C4}%s €\n",AddPoints(aKaina[Modelis]));
	                            strcat(info, strf);
	                            new Number = floatround(aKaina[Modelis] * 0.5 * (1 - (VehicleBySlotInfo[playerid][1][BrokenTimesBySlot] * 0.02)) ,floatround_round);
	                            if(Number < 0)
	                            {
	                                Number = 0;
	                            }
	                            format(strf, sizeof(strf), "\t{62A5C4}7. {FFFFFF}Kaina parduodant þaidejui nuo: {62A5C4}%s €\n",AddPoints(Number));
	                            strcat(info, strf);
	                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleDB[PlayerDB[playerid][OwnedVehicle2]][Rida]);
	                                strcat(info, strf);
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}9. {FFFFFF}Automobilio rida: {62A5C4}%02.1f km\n",VehicleBySlotInfo[playerid][1][RidaBySlot]);
	                                strcat(info, strf);
	                            }
	                            if(VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] == 1)
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Imontuota\n");
	                            }
	                            else
	                            {
	                                format(strf, sizeof(strf), "\t{62A5C4}10. {FFFFFF}Duju áranga: {62A5C4}Neimontuota\n");
	                            }
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}11. {FFFFFF}Dauþtumas: {62A5C4}%d kartø(-us)\n",VehicleBySlotInfo[playerid][1][BrokenTimesBySlot]);
	                            strcat(info, strf);
	                            format(strf, sizeof(strf), "\t{62A5C4}12. {FFFFFF}Pirkimo data: {62A5C4}%s\n",VehicleBySlotInfo[playerid][1][DateOfBuyingBySlot]);
	                            strcat(info, strf);
	                            ShowPlayerDialog(playerid, 241, DIALOG_STYLE_MSGBOX, "{AFAFAF}Automobilio informacija", info, "Gerai", "Atgal");
        					}
	   						else
	   						{
	   						    ErrorMsg(playerid, "• Pirma suremontuokite maðinà.");
	   						}
                        }
                        case 12:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle2];
                                if(IsPlayerInVehicle(playerid, VID))
                                {
                                    if(VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] == 1)
                                    {
                                        switch(VehicleDB[VID][FuelType])
                                        {
                                            case 0:
                                            {
                                                VehicleDB[VID][FuelType] = 1;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}dujas{FFFFFF} !");
                                            }
                                            case 1:
                                            {
                                                VehicleDB[VID][FuelType] = 0;
                                                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Pasikeitëte kuro tipà á {62A5C4}benzinà{FFFFFF} !");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Jûsø tr.priemonë neturi ádiegtos dujø árangos.");
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Turite bûti savo pasirinktoje tr. priemonëje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        case 13:
                        {
                            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
                            {
                                new VID = PlayerDB[playerid][OwnedVehicle2];

                                if(VehicleDB[VID][Pardavinejama] == true)
                                {
                                    VehicleDB[VID][Pardavinejama] = false;
                                    if(IsValidDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]))
                                    {
                                        DestroyDynamic3DTextLabel(VehicleDB[VID][PardavimoLabel]);
                                    }
                                    SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina nebus {62A5C4}pardavinëjama{FFFFFF} !");
                                }
                                else
                                {
                                    ShowPlayerDialog(playerid, 248, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pardavinëjimas", "{62A5C4}Apaèioje laukelyje áraðykite pardavinëjamos transporto priemonës Jums tenkinamà kainà. Áraðius á laukelá {FFFFFF}0 {62A5C4}- kaina bus sutartinë.", "Toliau", "Atgal");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
                            }
                        }
                        default:
                        {
                            cmd_mvaldymas(playerid,"");
                        }
                    }
                }
            }
        }
    }
    if(dialogid == 240)
    {
        if(response)
        {
            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
            {
                new vid = PlayerDB[playerid][OwnedVehicle2];
                new Float:X,Float:Y,Float:Z;
                GetVehiclePos(vid, X, Y, Z);
                new bool:AutoPZonoje = false;
                if(IsPointInDynamicArea(AutoPZona[0], X,Y,Z))
                {
                    AutoPZonoje = true;

                }
                else if(IsPointInDynamicArea(AutoPZona[1], X,Y,Z))
                {
                    AutoPZonoje = true;

                }
                else if(IsPointInDynamicArea(AutoPZona[2], X,Y,Z))
                {
                    AutoPZonoje = true;

                }
                else if(IsPointInDynamicArea(AutoPZona[3], X,Y,Z))
                {
                    AutoPZonoje = true;

                }
                else if(IsPointInDynamicArea(AutoPZona[4], X,Y,Z))
                {
                    AutoPZonoje = true;

                }

                else if(IsPointInDynamicArea(AutoPZona[5], X,Y,Z))
                {
                    AutoPZonoje = true;

                }
                if(AutoPZonoje == true && GetVehicleVirtualWorld(vid) == 0)
                {
                    if(strcmp(PlayerDB[playerid][SellVehToServerSCode], inputdialogtext) == 0)
                    {
                        new string[128];
                        new Model = VehicleBySlotInfo[playerid][1][ModelBySlot];
                        new SudevetumoVerte = floatround(aKaina[Model-400] * 0.00025 * VehicleDB[vid][Rida], floatround_round);
                        new Float:VertesSmukimas = SudevetumoVerte + (aKaina[Model-400] * 0.05 * VehicleDB[vid][VehicleDauztumas]);
                        new Verte = floatround(aKaina[Model-400] * 0.9,floatround_round) - SudevetumoVerte - floatround(VertesSmukimas,floatround_round);
                        if(Verte < floatround(aKaina[Model-400] * 0.1,floatround_round))
                        {
                            Verte = floatround(aKaina[Model-400] * 0.1,floatround_round);
                        }
                        format(string, 128, "• Pardavëte „%s“ uþ %s€.", vNames[Model-400],AddPoints(Verte));
                        SendClientMessage(playerid, GELTONA, string);
                        PlayerDB[playerid][MoneyInPocket]+=Verte;
                        mysql_format(connectionHandle, string, 128, "DELETE FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;", VehicleDB[vid][VehicleDatabaseID]);
                        mysql_function_query(connectionHandle,string,false,"SendQuery","");
                        SalesVehiclesInStock[Model-400]+=1;
                        new LabelText[700];
                        format(LabelText, 700, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
                        vNames[Model - 400],AddPoints(aKaina[Model - 400]),AddPoints(floatround(aKaina[Model - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[Model - 400],AddPoints(VehicleBagazines[Model - 400]),DegaluSanaudos[Model - 400],MaxGreitis[Model - 400]);
                        UpdateDynamic3DTextLabelText(SalesVehiclesLabels[Model-400], 0xe76518FF, LabelText);
                        DestroyVehicle(vid);
                        PlayerDB[playerid][OwnedVehicle2]=-1;
                        PlayerDB[playerid][SecondOwnedVehicleID] = -1;

/*
new AutoPZona[6];
new Text3D:AutoPStatsLabel;
enum AutoPStats{
    NickPS[24],
    TrPS[32],
    DataPS[17]
}
new AutoPStatistics[6][AutoPStats];
*/
                        format(LabelText, 1024, "{FFFFFF}Paskutiniai {61210B}ðeði{FFFFFF} þmonës pardavæ transporto priemonæ serveriui:\n\n");
                        new strf[160];
                        AutoPVehiclesSold++;
                        if(AutoPVehiclesSold <= 6)
                        {
                            new NthSale = AutoPVehiclesSold;
                            if(NthSale == 1)
                            {
                                format(AutoPStatistics[0][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[0][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[0][NickPS], 24, "%s", Vardas(playerid));
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 2)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[1][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[1][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[1][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 3)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[2][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);

                                format(AutoPStatistics[2][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[2][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 4)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);

                                format(AutoPStatistics[3][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[3][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[3][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                            else if(NthSale == 5)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                format(AutoPStatistics[4][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[4][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[4][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }

                            else if(NthSale == 6)
                            {
                                format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                                strcat(LabelText,strf);
                                format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                                strcat(LabelText,strf);
                                format(AutoPStatistics[5][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[5][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[5][NickPS], 24, "%s", Vardas(playerid));

                                format(strf, 160, "\n{61210B}6.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[5][NickPS],AutoPStatistics[5][TrPS],AutoPStatistics[5][DataPS]);
                                strcat(LabelText,strf);
                                UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);
                            }
                        }
                        else
                        {
                            new NthSale = AutoPVehiclesSold % 6;
                            if(NthSale == 0)
                            {
                                format(AutoPStatistics[5][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[5][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[5][NickPS], 24, "%s", Vardas(playerid));
                            }
                            else
                            {
                                format(AutoPStatistics[NthSale-1][TrPS], 32, "%s", vNames[Model-400]);
                                new Year,Month,Day,Hour,Minute;
                                getdate(Year,Month,Day);
                                gettime(Hour, Minute);
                                format(AutoPStatistics[NthSale-1][DataPS], 17, "%d-%02d-%02d %02d:%02d", Year,Month,Day,Hour,Minute);
                                format(AutoPStatistics[NthSale-1][NickPS], 24, "%s", Vardas(playerid));
                            }

                            format(strf, 160, "{61210B}1.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[0][NickPS],AutoPStatistics[0][TrPS],AutoPStatistics[0][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}2.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[1][NickPS],AutoPStatistics[1][TrPS],AutoPStatistics[1][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}3.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[2][NickPS],AutoPStatistics[2][TrPS],AutoPStatistics[2][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}4.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[3][NickPS],AutoPStatistics[3][TrPS],AutoPStatistics[3][DataPS]);
                            strcat(LabelText,strf);
                            format(strf, 160, "\n{61210B}5.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[4][NickPS],AutoPStatistics[4][TrPS],AutoPStatistics[4][DataPS]);
                            strcat(LabelText,strf);

                            format(strf, 160, "\n{61210B}6.{FFFFFF} Pardavëjas: {61210B}%s{FFFFFF} tr.priemonë: {61210B}%s{FFFFFF}, data: {61210B}%s", AutoPStatistics[5][NickPS],AutoPStatistics[5][TrPS],AutoPStatistics[5][DataPS]);
                            strcat(LabelText,strf);
                            UpdateDynamic3DTextLabelText(AutoPStatsLabel, 0xFFFFFFFF, LabelText);

                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Saugos kodas nesutapo su jûsø ávestu kodu, todël negalite parduoti maðinos serveriui, praðome bandyti dar kartà.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûsø tr. priemonë privalo bûti automobiliø pardavimo aikðtelëje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
            }
        }
    }
    if(dialogid == 241 && !response)
    {
        cmd_mvaldymas(playerid,"");
    }
    if(dialogid == 242)
    {
        if(response)
        {
            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
            {
                new dinputval = strval(inputdialogtext);
                if(dinputval > 0)
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle1]][PardavimoKaina] = dinputval;
                }
                else
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle1]][PardavimoKaina] = 0;
                }
                new tmpVehicleID = PlayerDB[playerid][OwnedVehicle1];
                if(IsValidDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]))
                {
                    DestroyDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]);
                }
                new Float:Cords[3];
                GetVehiclePos(tmpVehicleID, Cords[0],Cords[1],Cords[2]);
                new string[500];
                if(VehicleDB[tmpVehicleID][PardavimoKaina] == 0)
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[tmpVehicleID][Rida]);
                }
                else
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[tmpVehicleID][PardavimoKaina]),VehicleDB[tmpVehicleID][Rida]);
                }
                VehicleDB[tmpVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, Cords[0],Cords[1],Cords[2], 15, INVALID_PLAYER_ID, tmpVehicleID, 0, -1,-1);
                VehicleDB[tmpVehicleID][Pardavinejama] = true;
                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina bus {62A5C4}pardavinëjama{FFFFFF} !");
            }
            else
            {
                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
            }
        }
        else
        {
            cmd_mvaldymas(playerid,"");
        }
    }
    if(dialogid == 243)
    {
        if(response)
        {
            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
            {
                new dinputval = strval(inputdialogtext);
                if(dinputval > 0)
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle2]][PardavimoKaina] = dinputval;
                }
                else
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle2]][PardavimoKaina] = 0;
                }
                new tmpVehicleID = PlayerDB[playerid][OwnedVehicle2];
                if(IsValidDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]))
                {
                    DestroyDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]);
                }
                new Float:Cords[3];
                GetVehiclePos(tmpVehicleID, Cords[0],Cords[1],Cords[2]);
                new string[500];
                if(VehicleDB[tmpVehicleID][PardavimoKaina] == 0)
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[tmpVehicleID][Rida]);
                }
                else
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[tmpVehicleID][PardavimoKaina]),VehicleDB[tmpVehicleID][Rida]);
                }
                VehicleDB[tmpVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, Cords[0],Cords[1],Cords[2], 15, INVALID_PLAYER_ID, tmpVehicleID, 0, -1,-1);
                VehicleDB[tmpVehicleID][Pardavinejama] = true;
                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina bus {62A5C4}pardavinëjama{FFFFFF} !");
            }
            else
            {
                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
            }
        }
        else
        {
            cmd_mvaldymas(playerid,"");
        }
    }
    if(dialogid == 244)
    {
        if(response)
        {
            new id,cost;
            if(sscanf(inputdialogtext, "u d", id,cost))
            {
                ErrorMsg(playerid,"• Blogai ávesti parametrai.");
                ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
            }
            else
            {
                if(IsPlayerConnected(id))
                {
                    new Modelis = VehicleBySlotInfo[playerid][0][ModelBySlot];

                    if(cost < 0)
                    {
                        ErrorMsg(playerid,"• Maþiausia ámanoma kaina yra 0€.");
                        ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                    }
                    else if(cost > 100000000)
                    {
                        ErrorMsg(playerid,"• Didþiausia ámanoma kaina yra 100 milijonø.");
                        ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                    }
                    else
                    {
                        new Number = floatround(aKaina[Modelis-400] * 0.5 * (1 - (VehicleBySlotInfo[playerid][0][BrokenTimesBySlot] * 0.02)) ,floatround_round);
                        if(Number < 0)
                        {
                            Number = 0;
                        }
                        if(cost < Number)
                        {
                            new str[88];
                            format(str, sizeof(str), "• Suma uþ kurià galite pigiausiai parduoti ðià tr. priemonæ yra %s €.", AddPoints(Number));
                            ErrorMsg(playerid,str);
                            ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                        }
                        else
                        {
                            if(GetPlayerDialogID(id) == -1)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle1];
                                new info[1560];
                                new str[160];
                                format(str,sizeof(str), "{FFFFFF}Þaidëjas {62A5C4}%s {ffffff}Jums siûlo pirkti jo transporto priemonæ.\n\n{FFFFFF}Transporto priemonës informacija:",Vardas(playerid));

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}• Automobilis: {62A5C4}%s.\n\t{FFFFFF}• Bagaþinës talpa: {62A5C4}%i vnt.",vNames[Modelis-400],VehicleBagazines[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Numeriai: {62A5C4}%s{FFFFFF}\n\t{FFFFFF}» Naujos vertë: {62A5C4}%d{FFFFFF} €",VehicleBySlotInfo[playerid][0][VehicleNumbersBySlot],aKaina[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Rida: {62A5C4}%02.1fKM{FFFFFF}\n\t{FFFFFF}» Pardavëjo siûloma kaina uþ automobilá: {62A5C4}%s{FFFFFF} €",VehicleBySlotInfo[playerid][0][RidaBySlot],AddPoints(cost));

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Dauþtumas: {62A5C4}%i {FFFFFF}karta(-us)\n\t{FFFFFF}» Maksimalus greitis: {62A5C4}%i{FFFFFF} km/h",VehicleBySlotInfo[playerid][0][BrokenTimesBySlot],MaxGreitis[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\n{FFFFFF}Bagaþinës informacija:\n\t");
                                strcat(info,str);
                                new WeaponName[30];
                                if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][DrugsSlot1] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot1]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][DrugsSlot2] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot2]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.");
                                }
                                if(VehicleDB[vid][DrugsSlot3] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot3]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\t");
                                }

                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][BuyVehicleFPlayerSCode1], 6, "%s", SCode);
                                PlayerDB[id][ReceivedOfferTBV1] = true;
                                PlayerDB[id][OfferExpiresAtTBV1] = gettime()+30;
                                PlayerDB[id][OfferTBV1GiverID] = playerid;
                                PlayerDB[id][OfferTBV1GiverSQLID] = PlayerDB[playerid][SQLID];
                                PlayerDB[id][OfferTBV1Sum] = cost;
                                format(str,sizeof(str), "\n\n\t{ffffff}Norëdamas nusipirkti ðià transporto priemonæ á laukelá áraðykite: {62A5C4}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'.",PlayerDB[id][BuyVehicleFPlayerSCode1]);
                                strcat(info,str);
                                ShowPlayerDialog(id, 245, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pirkimas", info, "Pirkti", "Atðaukti");
                                format(str, sizeof(str), "Pasiûlëte þaidëjui %s pirkti %s, uþ %i €.", Vardas(id),vNames[Modelis-400],cost);
                                SendClientMessage(playerid, 0x33cc33AA, str);//

                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas ðiuo metu turi kità GUI dialogà, todël pasiûlyti pirkti tr.priemonës negalite.");
                            }
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                    ShowPlayerDialog(playerid, 244, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                }
            }
        }
        else
        {
            cmd_mvaldymas(playerid,"");
        }
    }
    if(dialogid == 245)
    {
        if(PlayerDB[playerid][ReceivedOfferTBV1] == true)
        {
            if(PlayerDB[playerid][OfferExpiresAtTBV1] >= gettime())
            {
                if(PlayerDB[playerid][OfferTBV1GiverSQLID] != PlayerDB[PlayerDB[playerid][OfferTBV1GiverID]][SQLID])
                {
                    ErrorMsg(playerid,"• Pasiûlymas nebe galioja.");
                    return 1;
                }
                if(PlayerDB[PlayerDB[playerid][OfferTBV1GiverID]][FirstOwnedVehicleID] == -1)
                {
                    ErrorMsg(playerid,"• Pasiûlymas nebe galioja.");
                    return 1;
                }
                if(response)
                {
                    if(strcmp(PlayerDB[playerid][BuyVehicleFPlayerSCode1], inputdialogtext) == 0)
                    {
                        if(PlayerDB[playerid][FirstOwnedVehicleID] == -1)
                        {
                            if(PlayerDB[playerid][OfferTBV1Sum] > PlayerDB[playerid][MoneyInPocket])
                            {
                                PlayerDB[playerid][ReceivedOfferTBV1] = false;
                                new str[128];
                                format(str, 128, "• Jûs neturite pinigø kad ásigytumëte transporto priemonæ, trûksta: %s €.",PlayerDB[playerid][OfferTBV1Sum]-PlayerDB[playerid][MoneyInPocket]);
                                ErrorMsg(playerid, str);
                                format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá, kadangi neturi pakankamai pinigø.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][OfferTBV1GiverID], RAUDONA, str);
                            }
                            else
                            {
                                new GID = PlayerDB[playerid][OfferTBV1GiverID];
                                PlayerDB[playerid][FirstOwnedVehicleID] = PlayerDB[GID][FirstOwnedVehicleID];
                                PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][OfferTBV1Sum];
                                PlayerDB[GID][MoneyInPocket] += PlayerDB[playerid][OfferTBV1Sum];
                                PlayerDB[playerid][OwnedVehicle1] = PlayerDB[GID][OwnedVehicle1];
                                new string[128];
                                format(string, 128, "•{FFFFFF} Nusipirkote {62A5C4}%s {FFFFFF}tr.priemone, uþ {62A5C4}%s €.", vNames[VehicleBySlotInfo[GID][0][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV1Sum]));
                                SendClientMessage(playerid, 0x62A5C4FF, string);
                                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Daugiau informacijos apie jûsø transporto priemonæ: {62A5C4}/mvaldymas > Transporto informacija");


                                format(string, 128, "UPDATE `nuosavostrpriemones` SET `Savininkas` = '%e' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),PlayerDB[playerid][FirstOwnedVehicleID]);
                                mysql_function_query(connectionHandle, string, false,"","");


                                SaveOwnedVehicle(PlayerDB[GID][OwnedVehicle1]);
                                DestroyVehicle(PlayerDB[GID][OwnedVehicle1]);
                                PlayerDB[GID][OwnedVehicle1] = -1;
                                PlayerDB[GID][FirstOwnedVehicleID] = -1;
                                format(string, 128, "• PARDAVIMAS • {FFFFFF}Pardavëte {62A5C4}%s {FFFFFF}tr.priemone uþ {62A5C4} %s €.",  vNames[VehicleBySlotInfo[GID][0][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV1Sum]));
                                SendClientMessage(GID, 0x62A5C4FF, string);
                                new SQLstring[100];
                                mysql_format(connectionHandle, SQLstring, 100, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][FirstOwnedVehicleID]);
                                mysql_function_query(connectionHandle,SQLstring,true,"OnLoadFirstOwnedVehicle","d",playerid);

                            }
                        }
                        else if(PlayerDB[playerid][SecondOwnedVehicleID] == -1)
                        {
                            if(PlayerDB[playerid][OfferTBV1Sum] > PlayerDB[playerid][MoneyInPocket])
                            {
                                PlayerDB[playerid][ReceivedOfferTBV1] = false;
                                new str[128];
                                format(str, 128, "• Jûs neturite pinigø kad ásigytumëte transporto priemonæ, trûksta: %s €.",PlayerDB[playerid][OfferTBV1Sum]-PlayerDB[playerid][MoneyInPocket]);
                                ErrorMsg(playerid, str);
                                format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá, kadangi neturi pakankamai pinigø.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][OfferTBV1GiverID], RAUDONA, str);
                            }
                            else
                            {
                                new GID = PlayerDB[playerid][OfferTBV1GiverID];
                                PlayerDB[playerid][SecondOwnedVehicleID] = PlayerDB[GID][FirstOwnedVehicleID];
                                PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][OfferTBV1Sum];
                                PlayerDB[GID][MoneyInPocket] += PlayerDB[playerid][OfferTBV1Sum];
                                PlayerDB[playerid][OwnedVehicle2] = PlayerDB[GID][OwnedVehicle1];
                                new string[128];
                                format(string, 128, "•{FFFFFF} Nusipirkote {62A5C4}%s {FFFFFF}tr.priemone, uþ {62A5C4}%s €.", vNames[VehicleBySlotInfo[GID][0][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV1Sum]));
                                SendClientMessage(playerid, 0x62A5C4FF, string);
                                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Daugiau informacijos apie jûsø transporto priemonæ: {62A5C4}/mvaldymas > Transporto informacija");


                                format(string, 128, "UPDATE `nuosavostrpriemones` SET `Savininkas` = '%e' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),PlayerDB[playerid][SecondOwnedVehicleID]);
                                mysql_function_query(connectionHandle, string, false,"","");

                                SaveOwnedVehicle(PlayerDB[GID][OwnedVehicle1]);
                                DestroyVehicle(PlayerDB[GID][OwnedVehicle1]);
                                PlayerDB[GID][OwnedVehicle1] = -1;
                                PlayerDB[GID][FirstOwnedVehicleID] = -1;
                                format(string, 128, "• PARDAVIMAS • {FFFFFF}Pardavëte {62A5C4}%s {FFFFFF}tr.priemone uþ {62A5C4} %s €.",  vNames[VehicleBySlotInfo[GID][0][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV1Sum]));
                                SendClientMessage(GID, 0x62A5C4FF, string);
                                new SQLstring[100];
                                mysql_format(connectionHandle, SQLstring, 100, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][SecondOwnedVehicleID]);
                                mysql_function_query(connectionHandle,SQLstring,true,"OnLoadSecondOwnedVehicle","d",playerid);

                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûs jau turite 2 tr. priemones.");
                            PlayerDB[playerid][ReceivedOfferTBV1] = false;
                            new str[128];
                            format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][OfferTBV1GiverID], RAUDONA, str);// Mafijozui
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"Kodas ávestas klaidingai, ásigyti transporto priemonës negalite, bandydami kità kartà, nesuklyskite vesdami saugos kodo !");
                        PlayerDB[playerid][ReceivedOfferTBV1] = false;
                        new str[128];
                        format(str, 128, "Þaidëjas %s suklydo saugos kodà, todël negali ásigyti automobilio.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][OfferTBV1GiverID], RAUDONA, str);// Mafijozui
                    }
                }
                else
                {
                    PlayerDB[playerid][ReceivedOfferTBV1] = false;
                    new str[128];
                    format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá.", Vardas(playerid));
                    SendClientMessage(PlayerDB[playerid][OfferTBV1GiverID], RAUDONA, str);// Mafijozui
                }
            }
            else
            {
                ErrorMsg(playerid,"• Pasiûlymas nebegalioja.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Pasiûlymas kurá buvote gavæs nebe galioja.");
        }
    }


    ///


    if(dialogid == 246)
    {
        if(response)
        {
            new id,cost;
            if(sscanf(inputdialogtext, "u d", id,cost))
            {
                ErrorMsg(playerid,"• Blogai ávesti parametrai.");
                ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
            }
            else
            {
                if(IsPlayerConnected(id))
                {
                    new Modelis = VehicleBySlotInfo[playerid][1][ModelBySlot];

                    if(cost < 0)
                    {
                        ErrorMsg(playerid,"• Maþiausia ámanoma kaina yra 0€.");
                        ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                    }
                    else if(cost > 100000000)
                    {
                        ErrorMsg(playerid,"• Didþiausia ámanoma kaina yra 100 milijonø.");
                        ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                    }
                    else
                    {
                        new Number = floatround(aKaina[Modelis-400] * 0.5 * (1 - (VehicleBySlotInfo[playerid][1][BrokenTimesBySlot] * 0.02)) ,floatround_round);
                        if(Number < 0)
                        {
                            Number = 0;
                        }
                        if(cost < Number)
                        {
                            new str[88];
                            format(str, sizeof(str), "• Suma uþ kurià galite pigiausiai parduoti ðià tr. priemonæ yra %s €.", AddPoints(Number));
                            ErrorMsg(playerid,str);
                            ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                        }
                        else
                        {
                            if(GetPlayerDialogID(id) == -1)
                            {
                                new vid = PlayerDB[playerid][OwnedVehicle2];
                                new info[1560];
                                new str[160];
                                format(str,sizeof(str), "{FFFFFF}Þaidëjas {62A5C4}%s {ffffff}Jums siûlo pirkti jo transporto priemonæ.\n\n{FFFFFF}Transporto priemonës informacija:",Vardas(playerid));

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}• Automobilis: {62A5C4}%s.\n\t{FFFFFF}• Bagaþinës talpa: {62A5C4}%i vnt.",vNames[Modelis-400],VehicleBagazines[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Numeriai: {62A5C4}%s{FFFFFF}\n\t{FFFFFF}» Naujos vertë: {62A5C4}%d{FFFFFF} €",VehicleBySlotInfo[playerid][1][VehicleNumbersBySlot],aKaina[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Rida: {62A5C4}%02.1fKM{FFFFFF}\n\t{FFFFFF}» Pardavëjo siûloma kaina uþ automobilá: {62A5C4}%s{FFFFFF} €",VehicleBySlotInfo[playerid][1][RidaBySlot],AddPoints(cost));

                                strcat(info,str);
                                format(str,sizeof(str), "\n\t{FFFFFF}» Dauþtumas: {62A5C4}%i {FFFFFF}karta(-us)\n\t{FFFFFF}» Maksimalus greitis: {62A5C4}%i{FFFFFF} km/h",VehicleBySlotInfo[playerid][1][BrokenTimesBySlot],MaxGreitis[Modelis-400]);

                                strcat(info,str);
                                format(str,sizeof(str), "\n\n{FFFFFF}Bagaþinës informacija:\n\t");
                                strcat(info,str);
                                new WeaponName[30];
                                if(VehicleDB[vid][WeaponSlot1WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot1WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}1. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot1WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}1. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][WeaponSlot2WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot2WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}2. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot2WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}2. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][WeaponSlot3WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot3WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}3. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot3WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}3. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][WeaponSlot4WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot4WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}4. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot4WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}4. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][WeaponSlot5WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot5WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}5. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot5WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}5. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][WeaponSlot6WeaponBullets] > 0)
                                {
                                    GetWeaponName(VehicleDB[vid][WeaponSlot6WeaponModel],WeaponName,30);
                                    format(str, 128, "\n\t{FFFFFF}6. {62A5C4}%s - %d kulkø{FFFFFF}.\t", WeaponName,VehicleDB[vid][WeaponSlot6WeaponBullets]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}6. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][DrugsSlot1] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}7. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot1]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}7. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][DrugsSlot2] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}8. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot2]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}8. {62A5C4}Tusèia{FFFFFF}.\t");
                                }
                                if(VehicleDB[vid][DrugsSlot3] > 0)
                                {
                                    format(str, 128, "\n\t{FFFFFF}9. {62A5C4}%ig - kanapiø{FFFFFF}.\t", VehicleDB[vid][DrugsSlot3]);
                                    strcat(info, str);
                                }
                                else
                                {
                                    strcat(info, "\n\t{FFFFFF}9. {62A5C4}Tusèia{FFFFFF}.\t");
                                }

                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][BuyVehicleFPlayerSCode2], 6, "%s", SCode);
                                PlayerDB[id][ReceivedOfferTBV2] = true;
                                PlayerDB[id][OfferExpiresAtTBV2] = gettime()+30;
                                PlayerDB[id][OfferTBV2GiverID] = playerid;
                                PlayerDB[id][OfferTBV2GiverSQLID] = PlayerDB[playerid][SQLID];
                                PlayerDB[id][OfferTBV2Sum] = cost;
                                format(str,sizeof(str), "\n\n\t{ffffff}Norëdamas nusipirkti ðià transporto priemonæ á laukelá áraðykite: {62A5C4}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'.",PlayerDB[id][BuyVehicleFPlayerSCode2]);
                                strcat(info,str);
                                ShowPlayerDialog(id, 247, DIALOG_STYLE_INPUT, "{AFAFAF}Automobilio pirkimas", info, "Pirkti", "Atðaukti");
                                format(str, sizeof(str), "Pasiûlëte þaidëjui %s pirkti %s, uþ %i €.", Vardas(id),vNames[Modelis-400],cost);
                                SendClientMessage(playerid, 0x33cc33AA, str);//

                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas ðiuo metu turi kità GUI dialogà, todël pasiûlyti pirkti tr.priemonës negalite.");
                            }
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                    ShowPlayerDialog(playerid, 246, DIALOG_STYLE_INPUT, "{AFAFAF}Pardavimas", "{62A5C4}Norint parduoti savo tr.priemonæ apaèioje duotas pavizdys kaip turite áraðyti á apaèioje esantá laukelá.\n\n{FFFFFF}PAVYZDYS: Vardenis_Pavardenis 50000", "Toliau", "Atgal");
                }
            }
        }
        else
        {
            cmd_mvaldymas(playerid,"");
        }
    }
    if(dialogid == 247)
    {
        if(PlayerDB[playerid][ReceivedOfferTBV2] == true)
        {
            if(PlayerDB[playerid][OfferExpiresAtTBV2] >= gettime())
            {
                if(PlayerDB[playerid][OfferTBV2GiverSQLID] != PlayerDB[PlayerDB[playerid][OfferTBV2GiverID]][SQLID])
                {
                    ErrorMsg(playerid,"• Pasiûlymas nebe galioja.");
                    return 1;
                }
                if(PlayerDB[PlayerDB[playerid][OfferTBV2GiverID]][SecondOwnedVehicleID] == -1)
                {
                    ErrorMsg(playerid,"• Pasiûlymas nebe galioja.");
                    return 1;
                }
                if(response)
                {
                    if(strcmp(PlayerDB[playerid][BuyVehicleFPlayerSCode2], inputdialogtext) == 0)
                    {
                        if(PlayerDB[playerid][FirstOwnedVehicleID] == -1)
                        {
                            if(PlayerDB[playerid][OfferTBV2Sum] > PlayerDB[playerid][MoneyInPocket])
                            {
                                PlayerDB[playerid][ReceivedOfferTBV2] = false;
                                new str[128];
                                format(str, 128, "• Jûs neturite pinigø kad ásigytumëte transporto priemonæ, trûksta: %s €.",PlayerDB[playerid][OfferTBV2Sum]-PlayerDB[playerid][MoneyInPocket]);
                                ErrorMsg(playerid, str);
                                format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá, kadangi neturi pakankamai pinigø.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][OfferTBV2GiverID], RAUDONA, str);
                            }
                            else
                            {
                                new GID = PlayerDB[playerid][OfferTBV2GiverID];
                                PlayerDB[playerid][FirstOwnedVehicleID] = PlayerDB[GID][SecondOwnedVehicleID];
                                PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][OfferTBV2Sum];
                                PlayerDB[GID][MoneyInPocket] += PlayerDB[playerid][OfferTBV2Sum];
                                PlayerDB[playerid][OwnedVehicle1] = PlayerDB[GID][OwnedVehicle2];
                                new string[128];
                                format(string, 128, "•{FFFFFF} Nusipirkote {62A5C4}%s {FFFFFF}tr.priemone, uþ {62A5C4}%s €.", vNames[VehicleBySlotInfo[GID][1][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV2Sum]));
                                SendClientMessage(playerid, 0x62A5C4FF, string);
                                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Daugiau informacijos apie jûsø transporto priemonæ: {62A5C4}/mvaldymas > Transporto informacija");



                                format(string, 128, "UPDATE `nuosavostrpriemones` SET `Savininkas` = '%e' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),PlayerDB[playerid][FirstOwnedVehicleID]);
                                mysql_function_query(connectionHandle, string, false,"","");



                                SaveOwnedVehicle(PlayerDB[GID][OwnedVehicle2]);
                                DestroyVehicle(PlayerDB[GID][OwnedVehicle2]);
                                PlayerDB[GID][OwnedVehicle2] = -1;
                                PlayerDB[GID][SecondOwnedVehicleID] = -1;
                                format(string, 128, "• PARDAVIMAS • {FFFFFF}Pardavëte {62A5C4}%s {FFFFFF}tr.priemone uþ {62A5C4} %s €.",  vNames[VehicleBySlotInfo[GID][1][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV2Sum]));
                                SendClientMessage(GID, 0x62A5C4FF, string);
                                new SQLstring[100];
                                mysql_format(connectionHandle, SQLstring, 100, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][FirstOwnedVehicleID]);
                                mysql_function_query(connectionHandle,SQLstring,true,"OnLoadFirstOwnedVehicle","d",playerid);
                            }
                        }
                        else if(PlayerDB[playerid][SecondOwnedVehicleID] == -1)
                        {
                            if(PlayerDB[playerid][OfferTBV2Sum] > PlayerDB[playerid][MoneyInPocket])
                            {
                                PlayerDB[playerid][ReceivedOfferTBV2] = false;
                                new str[128];
                                format(str, 128, "• Jûs neturite pinigø kad ásigytumëte transporto priemonæ, trûksta: %s €.",PlayerDB[playerid][OfferTBV2Sum]-PlayerDB[playerid][MoneyInPocket]);
                                ErrorMsg(playerid, str);
                                format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá, kadangi neturi pakankamai pinigø.", Vardas(playerid));
                                SendClientMessage(PlayerDB[playerid][OfferTBV2GiverID], RAUDONA, str);
                            }
                            else
                            {
                                new GID = PlayerDB[playerid][OfferTBV2GiverID];
                                PlayerDB[playerid][SecondOwnedVehicleID] = PlayerDB[GID][SecondOwnedVehicleID];
                                PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][OfferTBV2Sum];
                                PlayerDB[GID][MoneyInPocket] += PlayerDB[playerid][OfferTBV2Sum];
                                PlayerDB[playerid][OwnedVehicle2] = PlayerDB[GID][OwnedVehicle2];
                                new string[128];
                                format(string, 128, "•{FFFFFF} Nusipirkote {62A5C4}%s {FFFFFF}tr.priemone, uþ {62A5C4}%s €.", vNames[VehicleBySlotInfo[GID][1][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV2Sum]));
                                SendClientMessage(playerid, 0x62A5C4FF, string);
                                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Daugiau informacijos apie jûsø transporto priemonæ: {62A5C4}/mvaldymas > Transporto informacija");



                                format(string, 128, "UPDATE `nuosavostrpriemones` SET `Savininkas` = '%e' WHERE `ID` = '%i' LIMIT 1;", Vardas(playerid),PlayerDB[playerid][SecondOwnedVehicleID]);
                                mysql_function_query(connectionHandle, string, false,"","");


                                SaveOwnedVehicle(PlayerDB[GID][OwnedVehicle2]);
                                DestroyVehicle(PlayerDB[GID][OwnedVehicle2]);
                                PlayerDB[GID][OwnedVehicle2] = -1;
                                PlayerDB[GID][SecondOwnedVehicleID] = -1;
                                format(string, 128, "• PARDAVIMAS • {FFFFFF}Pardavëte {62A5C4}%s {FFFFFF}tr.priemone uþ {62A5C4} %s €.",  vNames[VehicleBySlotInfo[GID][1][ModelBySlot]-400],AddPoints(PlayerDB[playerid][OfferTBV2Sum]));
                                SendClientMessage(GID, 0x62A5C4FF, string);
                                new SQLstring[100];
                                mysql_format(connectionHandle, SQLstring, 100, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][SecondOwnedVehicleID]);
                                mysql_function_query(connectionHandle,SQLstring,true,"OnLoadSecondOwnedVehicle","d",playerid);
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûs jau turite 2 tr. priemones.");
                            PlayerDB[playerid][ReceivedOfferTBV2] = false;
                            new str[128];
                            format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá.", Vardas(playerid));
                            SendClientMessage(PlayerDB[playerid][OfferTBV2GiverID], RAUDONA, str);
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"Kodas ávestas klaidingai, ásigyti transporto priemonës negalite, bandydami kità kartà, nesuklyskite vesdami saugos kodo !");
                        PlayerDB[playerid][ReceivedOfferTBV2] = false;
                        new str[128];
                        format(str, 128, "Þaidëjas %s suklydo saugos kodà, todël negali ásigyti automobilio.", Vardas(playerid));
                        SendClientMessage(PlayerDB[playerid][OfferTBV2GiverID], RAUDONA, str);
                    }
                }
                else
                {
                    PlayerDB[playerid][ReceivedOfferTBV2] = false;
                    new str[128];
                    format(str, 128, "Þaidëjas %s atsisakë pirkti automobilá.", Vardas(playerid));
                    SendClientMessage(PlayerDB[playerid][OfferTBV2GiverID], RAUDONA, str);// Mafijozui
                }
            }
            else
            {
                ErrorMsg(playerid,"• Pasiûlymas nebegalioja.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Pasiûlymas kurá buvote gavæs nebe galioja.");
        }
    }
    if(dialogid == 248)
    {
        if(response)
        {
            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
            {
                new dinputval = strval(inputdialogtext);
                if(dinputval > 0)
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle2]][PardavimoKaina] = dinputval;
                }
                else
                {
                    VehicleDB[PlayerDB[playerid][OwnedVehicle2]][PardavimoKaina] = 0;
                }
                new tmpVehicleID = PlayerDB[playerid][OwnedVehicle2];
                if(IsValidDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]))
                {
                    DestroyDynamic3DTextLabel(VehicleDB[tmpVehicleID][PardavimoLabel]);
                }
                new Float:Cords[3];
                GetVehiclePos(tmpVehicleID, Cords[0],Cords[1],Cords[2]);
                new string[500];
                if(VehicleDB[tmpVehicleID][PardavimoKaina] == 0)
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[tmpVehicleID][Rida]);
                }
                else
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[tmpVehicleID][PardavimoKaina]),VehicleDB[tmpVehicleID][Rida]);
                }
                VehicleDB[tmpVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, Cords[0],Cords[1],Cords[2], 15, INVALID_PLAYER_ID, tmpVehicleID, 0, -1,-1);
                VehicleDB[tmpVehicleID][Pardavinejama] = true;
                SendClientMessage(playerid, 0x62A5C4FF, "• {FFFFFF}Maðina bus {62A5C4}pardavinëjama{FFFFFF} !");
            }
            else
            {
                ErrorMsg(playerid,"• Jûsø tr.priemonë yra sudauþyta, naudokite komandà /mvaldymas ir suremontuokite.");
            }
        }
        else
        {
            cmd_mvaldymas(playerid,"");
        }
    }
    if(dialogid == 249)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    ShowPlayerDialog(playerid, 160, DIALOG_STYLE_INPUT, "{AFAFAF}Tel.sàskaita", "Áraðykite sumà uþ kurià norite pasipildyti telefono sàskaità.", "Pildyti", "Atgal");
                }
                case 1:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorK","dd",playerid,0);
                }
                case 2:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorK","dd",playerid,1);//Traskuèiai
                }
                case 3:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorK","dd",playerid,2);//Sausainiai
                }
                case 4:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorK","dd",playerid,3);//Cola
                }
                case 5:
                {
                    new QueryString[100];
                    mysql_format(connectionHandle, QueryString, 100, "SELECT NULL FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
                    mysql_function_query(connectionHandle, QueryString, true,"OnBuyFoodToInventorK","dd",playerid,4);//Sprite
                }
                case 6:
                {
                    //Fotoaparatas
                    if(PlayerDB[playerid][MoneyInPocket] >= 35)
                    {
                        GivePlayerWeaponEx(playerid, WEAPON_CAMERA, 20);
                        PlayerDB[playerid][MoneyInPocket]-=35;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote kamerà su 20 kadrø juostele.");
                        OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø fotoaparato pirkimui.");
                        OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
                    }
                }
                case 7:
                {
                    //Geles
                    if(PlayerDB[playerid][MoneyInPocket] >= 5)
                    {
                        GivePlayerWeaponEx(playerid, WEAPON_FLOWER, 1);
                        PlayerDB[playerid][MoneyInPocket]-=5;
                        SendClientMessage(playerid, ZALIA, "• Nusipirkote gëliø.");
                        OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
                    }
                    else
                    {
                        SendClientMessage(playerid, RAUDONA, "• Neturi pakankamai pinigø gelëms pirkti.");
                        OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
                    }
                }
            }
        }
    }
    if(dialogid == 250)
    {
        if(response)
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new vid = GetPlayerVehicleID(playerid);
                if(IsVehicleModelWithEngine(GetVehicleModel(vid)))
                {
                    switch(listitem)
                    {
                        case 0:
                        {
                            if(VehicleDB[vid][VehicleEngineState] == 0)
                            {
                                GameTextForPlayer(playerid, "~g~Uzvedei varikli", 5000, 5);
                                SetVehicleEngineState(vid,1);
                            }
                            else
                            {
                                GameTextForPlayer(playerid, "~g~Uzgesinai varikli", 5000, 5);
                                SetVehicleEngineState(vid,0);
                            }
                            new info[64];
                            if(VehicleDB[vid][VehicleEngineState] == 0)
                            {
                                strcat(info, "{FFFFFF}• Ájungti variklá.");
                            }
                            else
                            {
                                strcat(info, "{FFFFFF}• Iðjungti variklá.");
                            }
                            if(VehicleDB[vid][VehicleLights] == 0)
                            {
                                strcat(info, "\n{FFFFFF}• Ájungti ðviesas.");
                            }
                            else
                            {
                                strcat(info, "\n{FFFFFF}• Iðjungti ðviesas.");
                            }
                            ShowPlayerDialog(playerid, 250, DIALOG_STYLE_LIST, "{AFAFAF}Maðinos valdymas", info, "Rinktis", "Atðaukti");
                        }
                        case 1:
                        {
                            new engine, lights, alarm, doors, bonnet, boot, objective;
                            GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
                            if(VehicleDB[vid][VehicleLights] == 1)
                            {
                                SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
                                VehicleDB[vid][VehicleLights] = 0;
                                GameTextForPlayer(playerid, "~r~Isjungei sviesas", 5000, 5);

                            }
                            else
                            {
                                SetVehicleParamsEx(vid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
                                VehicleDB[vid][VehicleLights] = 1;
                                GameTextForPlayer(playerid, "~g~Ijungei sviesas", 5000, 5);
                            }
                            new info[64];
                            if(VehicleDB[vid][VehicleEngineState] == 0)
                            {
                                strcat(info, "{FFFFFF}• Ájungti variklá.");
                            }
                            else
                            {
                                strcat(info, "{FFFFFF}• Iðjungti variklá.");
                            }
                            if(VehicleDB[vid][VehicleLights] == 0)
                            {
                                strcat(info, "\n{FFFFFF}• Ájungti ðviesas.");
                            }
                            else
                            {
                                strcat(info, "\n{FFFFFF}• Iðjungti ðviesas.");
                            }
                            ShowPlayerDialog(playerid, 250, DIALOG_STYLE_LIST, "{AFAFAF}Maðinos valdymas", info, "Rinktis", "Atðaukti");

                        }
                    }
                }
            }
        }
    }
    if(dialogid == 251)
    {
        if(response)
        {
            if(RadistaiGarazas == true)
            {
                GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
                return 1;
            }
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerPosExt(playerid,-2192.9800,-112.9362,46.9190,354.7249);
                }
                case 1:
                {
                    SetPlayerPosExt(playerid,-2197.1104,-111.4050,35.3749,357.7011);
                }
            }

        }
    }
    if(dialogid == 252)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerPosExt(playerid,-2192.9800,-112.9362,46.9190,354.7249);
                }
                case 1:
                {
                    if(RadistaiGarazas == true)
                    {
                        GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
                        return 1;
                    }
                    SetPlayerPosExt(playerid,-2233.6433,-88.8245,-16.8022,271.7398);
                }
            }

        }
    }
    if(dialogid == 253)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerPosExt(playerid,-2197.1104,-111.4050,35.3749,357.7011);
                }
                case 1:
                {
                    if(RadistaiGarazas == true)
                    {
                        GameTextForPlayer(playerid, "~r~UZRAKINTA!", 3000, 3);
                        return 1;
                    }
                    SetPlayerPosExt(playerid,-2233.6433,-88.8245,-16.8022,271.7398);
                }
            }
        }
    }
    if(dialogid == 254)
    {
        if(IsPlayerInVehicle(playerid, AfterUpdateEventCar) == 0)
        {
            return 1;
        }
        if(response)
        {
            if(AUEventCarStarted == true)
            {
                if(AUEventCarsLeft == 0)
                {
                    ErrorMsg(playerid,"• Vienetø nëra");
                }
                else if(PlayerDB[playerid][FirstOwnedVehicleID] > -1 && PlayerDB[playerid][SecondOwnedVehicleID] > -1)
                {
                    ErrorMsg(playerid,"• Jau turite 2 tr. priemones.");
                }
                else
                {
                    if(PlayerDB[playerid][MoneyInPocket] < 521)
                    {
                        ErrorMsg(playerid,"• Maðinos kaina yra 521€, taèiau jûs tiek neturite.");
                    }
                    else
                    {
                        if(PlayerDB[playerid][FirstOwnedVehicleID] < 0)
                        {
                            SendClientMessage(playerid, 0xe7ba21FF, "Sveikiname! Jus nusipirkote Sabre uþ 521 €.");
                            SendClientMessage(playerid, 0xe7ba21FF, "Maðinos valdymas: {DB881A}/mvaldymas");
                            SendClientMessage(playerid, 0xe7ba21FF, "Jûsø transporto priemonë pagaminta. Gero kelio!");
                            SendClientMessage(playerid, 0xe7ba21FF, "VIP gali nusigauti iki maðinos paraðæ {DB881A}/tpm");
                            SendClientMessage(playerid, 0xe7ba21FF, "BÛTINA uþregistruoti tr. priemonæ „Automobiliø paslaugø“ garaþe.");
                            SendClientMessage(playerid, 0xe7ba21FF, "Já rasi paraðæs {DB881A}/gps");
                            if(PlayerDB[playerid][Pasiekimas22] == 0)
                            {
                                PlayerCompletedPasiekimas(playerid,22);
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, 0xe7ba21FF, "Sveikiname! Jus nusipirkote Sabre uþ 521 €.");
                            SendClientMessage(playerid, 0xe7ba21FF, "Maðinos valdymas: {DB881A}/mvaldymas");
                            SendClientMessage(playerid, 0xe7ba21FF, "Jûsø transporto priemonë pagaminta. Gero kelio!");
                            SendClientMessage(playerid, 0xe7ba21FF, "VIP gali nusigauti iki maðinos paraðæ {DB881A}/tpm1");
                            SendClientMessage(playerid, 0xe7ba21FF, "BÛTINA uþregistruoti tr. priemonæ „Automobiliø paslaugø“ garaþe.");
                            SendClientMessage(playerid, 0xe7ba21FF, "Já rasi paraðæs {DB881A}/gps");
                            if(PlayerDB[playerid][Pasiekimas23] == 0)
                            {
                                PlayerCompletedPasiekimas(playerid,23);
                            }
                        }
                        PlayerDB[playerid][MoneyInPocket]-=521;
                        new query[1000];
                        new color1 = 128 + random(126);
                        new color2 = 128 + random(126);
                        new Year,Month,Day;
                        getdate(Year, Month, Day);
                        mysql_format(connectionHandle, query, 1000, "INSERT INTO `nuosavostrpriemones` (`ID`, `Savininkas`, `Modelis`, `X`, `Y`, `Z`, `Rotation`, `Color1`, `Color2`, `FuelType`, `Bendzinas`, `Dujos`, `Sudauzyta`, `Dauztumas`, `DujuIranga`,`DateOfBuying`) VALUES (NULL, '%e', '%i', '-2682.8950', '-22.7127', '4.4606', '179.6862', '%i', '%i', '0', '20', '0', '0', '0', '0','%d-%02d-%02d');", Vardas(playerid),475,color1,color2,Year,Month,Day);

                        mysql_function_query(connectionHandle,query,true,"OnPlayerBoughtNewCar","d",playerid);
                        PlayerDB[playerid][BoughtRareSabre] = 1;
                        AUEventCarsLeft-=1;
                        new string[128];
                        format(string, 128, "[%s]: {FFFFFF}Pagaliau ! nusipirkau {ee5555}Sabre {FFFFFF}automobilá uþ {ee5555}521 € {FFFFFF}!",Vardas(playerid));
                        SendClientMessageToAll(0xee5555FF, string);
                        if(AUEventCarsLeft == 0)
                        {
                            SendClientMessageToAll(0xee5555FF, "• Sabre automobiliai iðparduoti, administracija dëkojà kad esate su mumis !");
                            format(query, sizeof(query), "{ee5555}•• ÈIA BUVO PARDUODAMAS SABRE AUTOMOBILIS ••\n\n{FFFFFF}Paskutiniai 6 þaidëjai nupirko ðá automobilá:\n{ee5555}1. {FFFFFF}%s\n{ee5555}2. {FFFFFF}%s\n{ee5555}3. {FFFFFF}%s\n{ee5555}4. {FFFFFF}%s\n{ee5555}5. {FFFFFF}%s\n{ee5555}6. {FFFFFF}%s\n", AUEVentCarBought[0],AUEVentCarBought[1],AUEVentCarBought[2],AUEVentCarBought[3],AUEVentCarBought[4],Vardas(playerid));
                            UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, query);
                            DestroyVehicle(AfterUpdateEventCar);
                            AfterUpdateEventCar = -1;
                        }
                        else
                        {
                            switch(AUEventCarsLeft)
                            {
                                case 5:
                                {
                                    format(AUEVentCarBought[0], 24, "%s", Vardas(playerid));
                                    UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, "•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}5 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.");
                                }
                                case 4:
                                {
                                    format(AUEVentCarBought[1], 24, "%s", Vardas(playerid));
                                    UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, "•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}4 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.");

                                }
                                case 3:
                                {
                                    format(AUEVentCarBought[2], 24, "%s", Vardas(playerid));
                                    UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, "•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}3 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.");

                                }
                                case 2:
                                {
                                    format(AUEVentCarBought[3], 24, "%s", Vardas(playerid));
                                    UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, "•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}2 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.");

                                }
                                case 1:
                                {
                                    format(AUEVentCarBought[4], 24, "%s", Vardas(playerid));
                                    UpdateDynamic3DTextLabelText(AUEventCarLabel, 0xee5555FF, "•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}1 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.");
                                }
                            }
                        }
                    }
                }
            }
        }
        RemovePlayerFromVehicle(playerid);
        SetVehicleToRespawn(vehicleid);
    }
    if(dialogid == 255)
    {
        if(PlayerDB[playerid][RecKauliukaiOffer] == true)
        {
            if(response)
            {
                new pID = -1;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][SQLID] == PlayerDB[playerid][KauliukaiOfferIniciatorID])
                        {
                            pID = i;
                            break;
                        }
                    }
                }
                if(pID >= 0)
                {
                    if(PlayerDB[playerid][KauliukaiMoney] > PlayerDB[pID][MoneyInPocket] || PlayerDB[playerid][MoneyInPocket] < PlayerDB[playerid][KauliukaiMoney])
                    {
                        ErrorMsg(playerid,"• Vienas ið jûsø arba abu neturite pakankamai pinigø þaidimui kauliukais.");
                        ErrorMsg(pID,"• Vienas ið jûsø arba abu neturite pakankamai pinigø þaidimui kauliukais.");
                    }
                    else if(strcmp(PlayerDB[playerid][KauliukaiCode], inputdialogtext, false) == 0)
                    {
                        new Random1 = random(6)+1;//pID
                        new Random2 = random(6)+1;//Playerid
                        new string[128];
                        if(Random1 == Random2)
                        {
                            //Nieks nelaimejo
                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, suþaidëte lygiosiomis.",Vardas(pID),Random1,Random2);
                            SendClientMessage(playerid, 0x33AA33FF, string);

                            //Nieks nelaimejo
                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, suþaidëte lygiosiomis.",Vardas(playerid),Random1,Random2);
                            SendClientMessage(pID, 0x33AA33FF, string);
                        }
                        else if(Random1 > Random2)
                        {
                            //Laimejo kitas zmogus
                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, todël jûs pralaimëjote %s €.",Vardas(pID),Random1,Random2,AddPoints(PlayerDB[playerid][KauliukaiMoney]));
                            SendClientMessage(playerid, 0x33AA33FF, string);

                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, todël jûs laimëjote %s €.",Vardas(playerid),Random2,Random1,AddPoints( floatround(PlayerDB[playerid][KauliukaiMoney] * 0.95,floatround_round)));
                            SendClientMessage(pID, 0x33AA33FF, string);
                            PlayerDB[playerid][MoneyInPocket]-=PlayerDB[playerid][KauliukaiMoney];
                            PlayerDB[pID][MoneyInPocket]+=floatround(PlayerDB[playerid][KauliukaiMoney] * 0.95);
                        }
                        else
                        {
                            //Laimejau
                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, todël jûs laimëjote %s €.",Vardas(pID),Random1,Random2,AddPoints( floatround(PlayerDB[playerid][KauliukaiMoney] * 0.95,floatround_round)));
                            SendClientMessage(playerid, 0x33AA33FF, string);

                            format(string,128,"• Þaidþiate kauliukais su {6EF83C}%s {33AA33}jam iðkrito %i, o jums %i, todël jûs pralaimëjote %s €.",Vardas(playerid),Random2,Random1,AddPoints(PlayerDB[playerid][KauliukaiMoney]));
                            SendClientMessage(pID, 0x33AA33FF, string);
                            PlayerDB[pID][MoneyInPocket]-=PlayerDB[playerid][KauliukaiMoney];
                            PlayerDB[playerid][MoneyInPocket]+=floatround(PlayerDB[playerid][KauliukaiMoney] * 0.95);
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Blogai suvedëte CAPTCHA kodà, todël kauliukø metimas su þaidëju nutrauktas.");
                        SendClientMessage(pID, RAUDONA, "• Þaidëjas blogai ávedë CAPTCHA koda, todël kauliukø metimas nutrauktas.");
                    }

                    PlayerDB[pID][RecKauliukaiOffer] = false;
                    PlayerDB[pID][RecKauliukaiOfferTill] = 0;
                    PlayerDB[pID][SentKauliukaiOfferUntill] = 0;
                    PlayerDB[pID][SentKauliukaiOffer] = false;
                    PlayerDB[pID][KauliukaiMoney] = 0;
                    PlayerDB[pID][KauliukaiOfferIniciatorID] = -1;
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas pasiûlæs þaisti yra atsijungæs.");
                }
            }
            else
            {
                new pID = -1;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][SQLID] == PlayerDB[playerid][KauliukaiOfferIniciatorID])
                        {
                            pID = i;
                            break;
                        }
                    }
                }
                if(pID >= 0)
                {
                    PlayerDB[pID][RecKauliukaiOffer] = false;
                    PlayerDB[pID][RecKauliukaiOfferTill] = 0;
                    PlayerDB[pID][SentKauliukaiOfferUntill] = 0;
                    PlayerDB[pID][SentKauliukaiOffer] = false;
                    PlayerDB[pID][KauliukaiMoney] = 0;
                    PlayerDB[pID][KauliukaiOfferIniciatorID] = -1;
                    SendClientMessage(pID, RAUDONA, " • Þaidëjas atsisakë þaisti kauliukais.");
                }
            }
        }
        PlayerDB[playerid][RecKauliukaiOffer] = false;
        PlayerDB[playerid][RecKauliukaiOfferTill] = 0;
        PlayerDB[playerid][SentKauliukaiOfferUntill] = 0;
        PlayerDB[playerid][SentKauliukaiOffer] = false;
        PlayerDB[playerid][KauliukaiMoney] = 0;
        PlayerDB[playerid][KauliukaiOfferIniciatorID] = -1;
    }
    if(dialogid == 256)
    {
        if(response)
        {
            if(PlayerDB[playerid][SelectedVerslasID] > -1)
            {
                new vid = PlayerDB[playerid][SelectedVerslasID];
                if(VerslaiDB[vid][VDB_Nupirktas] == 0)
                {
                    if(PlayerDB[playerid][FirstBusinessSlot] == -1 || (PlayerDB[playerid][SecondBusinessSlotBought] == 1 && PlayerDB[playerid][SecondBusinessSlot] == -1))
                    {
                        if(PlayerDB[playerid][MoneyInPocket] >= VerslaiDB[vid][VDB_Kaina])
                        {
                            if(PlayerDB[playerid][FirstBusinessSlot] == -1)
                            {
                                PlayerDB[playerid][FirstBusinessSlot] = VerslaiDB[vid][VDB_SQLID];
                            }
                            else
                            {
                                PlayerDB[playerid][SecondBusinessSlot] = VerslaiDB[vid][VDB_SQLID];
                            }
                            VerslaiDB[vid][VDB_Nupirktas] = 1;
                            PlayerDB[playerid][MoneyInPocket] -= VerslaiDB[vid][VDB_Kaina];
                            format(VerslaiDB[vid][VDB_SavininkoVardas],24,"%s",Vardas(playerid));
                            VerslaiDB[vid][VDB_SavininkoSQLID] = PlayerDB[playerid][SQLID];

                            DestroyDynamicPickup(VerslaiDB[vid][VDB_Pickup]);
                            DestroyDynamic3DTextLabel(VerslaiDB[vid][VDB_Label]);
                            new LabelText[420];
                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[vid][VDB_Pavadinimas],VerslaiDB[vid][VDB_SavininkoVardas],AddPoints(VerslaiDB[vid][VDB_Kaina]),VerslaiDB[vid][VDB_Pajamos],VerslaiDB[vid][VDB_Lygis]);
                            VerslaiDB[vid][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[vid][VDB_X],VerslaiDB[vid][VDB_Y],VerslaiDB[vid][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[vid][VDB_WorldID], VerslaiDB[vid][VDB_InteriorID]);
                            VerslaiDB[vid][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[vid][VDB_X],VerslaiDB[vid][VDB_Y],VerslaiDB[vid][VDB_Z], VerslaiDB[vid][VDB_WorldID], VerslaiDB[vid][VDB_InteriorID]);
                            SendClientMessage(playerid, 0x96A677FF, "• {FFFFFF}Sëkmingai ásigyjote ðá verslà.");
                            VerslaiDB[vid][VDB_StopsGivingIncomeAt] = gettime()+ (7*24*60*60);
                            VerslaiDB[vid][VDB_RinkosKaina] = VerslaiDB[vid][VDB_Kaina];
                        }
                        else
                        {
                            SendClientMessage(playerid, 0x96A677FF, "• {FFFFFF}Jums neuþtenka pinigø ðio verslo ásigyjimui.");
                        }
                    }
                    else
                    {
                        if(PlayerDB[playerid][SecondBusinessSlotBought] == 0)
                        {
                            ErrorMsg(playerid,"• Jûs jau turite vienà verslà, taèiau galite ásigyti antro verslo sloto paslaugà,leidþianèià pirkti antrà verslà.");
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûs jau turite du verslus, todël negalite pirkti dar vieno.");
                        }
                    }
                }
            }
        }
    }
    if(dialogid == 257)
    {
        if(response)
        {
            new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
            for(new i = 0;i<=VerslaiPoolSize;i++)
            {
                if(V_SQLID == VerslaiDB[i][VDB_SQLID])
                {
                    if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                    {
                        switch(listitem)
                        {
                            case 0:
                            {
                                new info[2048];
                                new string[128];
                                format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo pavadinimas: {96A677}%s \n",VerslaiDB[i][VDB_Pavadinimas]);
                                strcat(info, string);
                                if(VerslaiDB[i][VDB_Parduodamas] == 1)
                                {
                                    format(string, sizeof(string), "{96A677}• {FFFFFF}Verslas: {96A677}parduodamas uþ %s€\n", AddPoints(VerslaiDB[i][VDB_Kaina]));
                                    strcat(info, string);
                                }
                                else
                                {
                                    strcat(info, "{96A677}• {FFFFFF}Verslas: {96A677}neparduodamas\n");
                                }

                                format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo rinkos kaina: {96A677}%s€\n",AddPoints(VerslaiDB[i][VDB_RinkosKaina]));
                                strcat(info, string);

                                switch(VerslaiDB[i][VDB_Lygis])
                                {
                                    case 0:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/2.5val\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }

                                    case 1:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/2val\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }

                                    case 2:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/1.5val\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }

                                    case 3:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/1val\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }

                                    case 4:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/30min\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }

                                    case 5:
                                    {
                                        format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/15min\n",VerslaiDB[i][VDB_Pajamos]);
                                        strcat(info, string);
                                    }
                                }
                                strcat(info, "{96A677}• {FFFFFF}Verslo tipas: {96A677}Virtualus\n");
                                format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[i][VDB_Lygis]);
                                strcat(info, string);
                                ShowPlayerDialog(playerid, 292, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo informacija", info, "Gerai", "");
                            }
                            case 1:
                            {
                                new info[512];
                                format(info, sizeof(info), "{96A677}• {FFFFFF}Uþdirbote ið verslo: {96A677}%s€\n\t{FFFFFF}Ðiandien: {96A677}%s€\n", AddPoints(VerslaiDB[i][VDB_VersloPelnas]),AddPoints(VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien]));
                                //Pelnas
                                if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                                {
                                    new days,hours,mins,secs;
                                    secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                    while(secs >= 60)
                                    {
                                        secs-=60;
                                        mins+=1;
                                    }
                                    while(mins >= 60)
                                    {
                                        mins-=60;
                                        hours+=1;
                                    }
                                    while(hours >= 24)
                                    {
                                        hours-=24;
                                        days+=1;
                                    }
                                    new string[128];
                                    format(string, 128, "{96A677}• {FFFFFF}Verslo pelnas: {96A677}gaunamas(%dd, %02dval, %02dmin, %02dsec).\n", days,hours,mins,secs);
                                    strcat(info, string);
                                }
                                else
                                {
                                    strcat(info, "{96A677}• {FFFFFF}Verslo pelnas: {96A677}negaunamas\n");
                                }
                                strcat(info, "{96A677}• {FFFFFF}Norint atsiimti uþdirbtus pinigus spauskite{96A677} 'Atsiimti'.");
                                ShowPlayerDialog(playerid, 258, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo pelnas", info, "Atsiimti", "Atgal");
                            }
                            case 2:
                            {
                                //Pardavinejimas zaidejams
                                switch(VerslaiDB[i][VDB_Parduodamas])
                                {
                                    case 1:
                                    {
                                        SendClientMessage(playerid, 0x33AA33FF, "» Verslas nebus pardavinëjamas.");
                                        VerslaiDB[i][VDB_Parduodamas] = 0;
                                        DestroyDynamic3DTextLabel(VerslaiDB[i][VDB_Label]);
                                        DestroyDynamicPickup(VerslaiDB[i][VDB_Pickup]);
                                        new LabelText[420];
                                        format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_Kaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis]);
                                        VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        new caption[90];
                                        format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                                        new info[2024];
                                        new string[128];

                                        strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                                        strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                                        switch(VerslaiDB[i][VDB_Parduodamas])
                                        {
                                            case 0:
                                            {
                                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                                            }
                                            case 1:
                                            {
                                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                                            }
                                        }
                                        strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                                        new days,hours,mins,secs;
                                        if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                                        {
                                            secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                            while(secs >= 60)
                                            {
                                                secs-=60;
                                                mins+=1;
                                            }
                                            while(mins >= 60)
                                            {
                                                mins-=60;
                                                hours+=1;
                                            }
                                            while(hours >= 24)
                                            {
                                                hours-=24;
                                                days+=1;
                                            }
                                        }
                                        format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                                        strcat(info, string);
                                        strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                                        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                                    }
                                    case 0:
                                    {
                                        ShowPlayerDialog(playerid, 293, DIALOG_STYLE_INPUT, "{AFAFAF}Verslo pardavinëjimas", "{FFFFFF}Apaèioje áraðykite sumà uþ verslà,\nkurià norësite gauti vos þaidëjui nupirkus jûsø verslà.", "Toliau", "Atgal");
                                    }
                                }
                            }
                            case 3:
                            {
                                switch(VerslaiDB[i][VDB_Lygis])
                                {
                                    case 0:
                                    {
                                        new info[700];
                                        new string[80];
                                        format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                        strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}0/5{FFFFFF}, pelno gavimas yra kas {96A677}2 val 30min\n");
                                        strcat(info,"{FFFFFF}Norint pakelti verslo lygá á pirmàjá Jums reikës:\n");
                                        strcat(info, string);
                                        strcat(info, "\n");
                                        strcat(info,"{FFFFFF}Pakëlus verslo lygá á pirmàjá:\n");

                                        strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 2 val.\n");
                                        strcat(info,"       \n");
                                        strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                        strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                        strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                        ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                                    }
                                    case 1:
                                    {
                                        new info[700];
                                        new string[80];
                                        format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                        strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}1/5{FFFFFF}, pelno gavimas yra kas {96A677}2 val\n");
                                        strcat(info,"{FFFFFF}Norint pakelti verslo lygá á antrà Jums reikës:\n");
                                        strcat(info, string);
                                        strcat(info, "\n");
                                        strcat(info,"{FFFFFF}Pakëlus verslo lygá á antràjá:\n");

                                        strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 1 val 30min.\n");
                                        strcat(info,"       \n");
                                        strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                        strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                        strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                        ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                                    }
                                    case 2:
                                    {
                                        new info[700];
                                        new string[80];
                                        format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                        strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}2/5{FFFFFF}, pelno gavimas yra kas {96A677}1 val 30min\n");
                                        strcat(info,"{FFFFFF}Norint pakelti verslo lygá á treèià Jums reikës:\n");
                                        strcat(info, string);
                                        strcat(info, "\n");
                                        strcat(info,"{FFFFFF}Pakëlus verslo lygá á treèiàjá:\n");

                                        strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 1 val.\n");
                                        strcat(info,"       \n");
                                        strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                        strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                        strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                        ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                                    }
                                    case 3:
                                    {
                                        new info[700];
                                        new string[80];
                                        format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                        strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}3/5{FFFFFF}, pelno gavimas yra kas {96A677}1 val\n");
                                        strcat(info,"{FFFFFF}Norint pakelti verslo lygá á ketvirtà Jums reikës:\n");
                                        strcat(info, string);
                                        strcat(info, "\n");
                                        strcat(info,"{FFFFFF}Pakëlus verslo lygá á ketvirtàjá:\n");

                                        strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 30 min.\n");
                                        strcat(info,"       \n");
                                        strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                        strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                        strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                        ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                                    }
                                    case 4:
                                    {
                                        new info[700];
                                        new string[120];
                                        format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n\t{FFFFFF}Turëti {96A677}100{FFFFFF} kreditø\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                        strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}4/5{FFFFFF}, pelno gavimas yra kas {96A677}30 min\n");
                                        strcat(info,"{FFFFFF}Norint pakelti verslo lygá á penktà Jums reikës:\n");
                                        strcat(info, string);
                                        strcat(info, "\n");
                                        strcat(info,"{FFFFFF}Pakëlus verslo lygá á penktàjá:\n");

                                        strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 15 min.\n");
                                        strcat(info,"       \n");
                                        strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                        strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                        strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                        ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                                    }
                                    case 5:
                                    {
                                        ErrorMsg(playerid,"• Pasiektas maksimalus verslo lygis.");
                                        new caption[90];
                                        format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                                        new info[1024];
                                        new string[128];

                                        strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                                        strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                                        switch(VerslaiDB[i][VDB_Parduodamas])
                                        {
                                            case 0:
                                            {
                                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                                            }
                                            case 1:
                                            {
                                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                                            }
                                        }
                                        strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                                        new days,hours,mins,secs;
                                        if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                                        {
                                            secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                            while(secs >= 60)
                                            {
                                                secs-=60;
                                                mins+=1;
                                            }
                                            while(mins >= 60)
                                            {
                                                mins-=60;
                                                hours+=1;
                                            }
                                            while(hours >= 24)
                                            {
                                                hours-=24;
                                                days+=1;
                                            }
                                        }
                                        format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                                        strcat(info, string);
                                        strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                                        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                                    }
                                }

                                //Lygio kelimas
                            }
                            default:
                            {
                                new caption[90];
                                format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                                new info[1024];
                                new string[128];

                                strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                                strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                                switch(VerslaiDB[i][VDB_Parduodamas])
                                {
                                    case 0:
                                    {
                                        strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                                    }
                                    case 1:
                                    {
                                        strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                                    }
                                }
                                strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                                new days,hours,mins,secs;
                                if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                                {
                                    secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                    while(secs >= 60)
                                    {
                                        secs-=60;
                                        mins+=1;
                                    }
                                    while(mins >= 60)
                                    {
                                        mins-=60;
                                        hours+=1;
                                    }
                                    while(hours >= 24)
                                    {
                                        hours-=24;
                                        days+=1;
                                    }
                                }
                                format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                                strcat(info, string);
                                strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                                ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                            }
                        }
                    }
                    break;
                }
            }
        }
    }

    if(dialogid == 258)
    {
        new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            if(V_SQLID == VerslaiDB[i][VDB_SQLID])
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    new string[128];
                    if(response)
                    {
                        if(VerslaiDB[i][VDB_VersloPelnas] == 0)
                        {
                            SendClientMessage(playerid, 0xFF0000FF, "» Ið verslo nieko neuþdirbote, todël neturite ko iðsiimti.");
                        }
                        else
                        {
                            format(string, sizeof(string), "» Iðsiemëte ið verslo %s€, verslo pinigai perkelti á uþdarbá.",AddPoints(VerslaiDB[i][VDB_VersloPelnas]));
                            SendClientMessage(playerid, 0x33AA33FF, string);
                            PlayerDB[playerid][Uzdarbis] += VerslaiDB[i][VDB_VersloPelnas];
                            PlayerDB[playerid][UzdarbisSiandien] += VerslaiDB[i][VDB_VersloPelnas];
                            if(VerslaiDB[i][VDB_VersloPelnas] >= 50000)
                            {
                                PlayerCompletedPasiekimas(playerid,20);
                            }
                            else if(VerslaiDB[i][VDB_VersloPelnas] >= 150000)
                            {
                                PlayerCompletedPasiekimas(playerid,21);
                            }
                            VerslaiDB[i][VDB_VersloPelnas] = 0;
                        }
                        VerslaiDB[i][VDB_StopsGivingIncomeAt] = gettime()+ (7*24*60*60);
                    }

                    new caption[90];
                    format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                    new info[2024];

                    strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                    strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                    switch(VerslaiDB[i][VDB_Parduodamas])
                    {
                        case 0:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                        }
                        case 1:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                        }
                    }
                    strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                    new days,hours,mins,secs;
                    if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                    {
                        secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                        while(secs >= 60)
                        {
                            secs-=60;
                            mins+=1;
                        }
                        while(mins >= 60)
                        {
                            mins-=60;
                            hours+=1;
                        }
                        while(hours >= 24)
                        {
                            hours-=24;
                            days+=1;
                        }
                    }
                    format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                    strcat(info, string);
                    strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                    ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                }
            }
        }
    }
    if(dialogid == 259)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerDB[playerid][Krepselis] == 0)
                    {
                        if(PlayerDB[playerid][MoneyInPocket] >= 75)
                        {
                            SendClientMessage(playerid, 0x99CCFFFF, "• {FFFFFF}Nusipirkote {99CCFF}krepðelá uogoms rinkti {FFFFFF}uþ {99CCFF}75 €.");
                            PlayerDB[playerid][Krepselis] = 1;
                            PlayerDB[playerid][MoneyInPocket]-=75;
                            KrepseliaiSkaicius--;
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Neturite pakankamai pinigø krepðelio pirkimui.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûs jau turite krepðelá.");
                    }
                    OnPlayerPickUpDynamicPickup(playerid, UogosShop);
                }
                case 2:
                {
                    if(PlayerDB[playerid][Krepselis] == 1)
                    {
                        new info[600];
                        new string[128];
                        strcat(info,"Uoga\t Kaina (vnt) \t Kiekis \t Bendra suma");
                        format(string, sizeof(string), "\n{99CCFF}• {FFFFFF}Braðkës \t 9 € \t %d  \t %d €",PlayerDB[playerid][Braskes],PlayerDB[playerid][Braskes]*9);
                        strcat(info, string);

                        format(string, sizeof(string), "\n{99CCFF}• {FFFFFF}Avietës \t 6 € \t %d \t %d €",PlayerDB[playerid][Avietes],PlayerDB[playerid][Avietes]*6);
                        strcat(info, string);

                        format(string, sizeof(string), "\n{99CCFF}• {FFFFFF}Bruknës \t 30 € \t %d \t %d €",PlayerDB[playerid][Bruknes],PlayerDB[playerid][Bruknes]*30);
                        strcat(info, string);

                        format(string, sizeof(string), "\n{99CCFF}• {FFFFFF}Þemuogës \t 30 € \t %d \t %d €",PlayerDB[playerid][Zemuoges],PlayerDB[playerid][Zemuoges]*30);
                        strcat(info, string);

                        format(string, sizeof(string), "\n{99CCFF}• {FFFFFF}Melynës \t 30 € \t %d \t %d €",PlayerDB[playerid][Melynes],PlayerDB[playerid][Melynes]*30);
                        strcat(info, string);

                        strcat(info, "\n             \n");

                        format(string, sizeof(string), "{99CCFF}• {FFFFFF}Parduoti %d uogas uþ %d €",PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes],    PlayerDB[playerid][Braskes]*9+PlayerDB[playerid][Avietes]*6+PlayerDB[playerid][Bruknes]*30+PlayerDB[playerid][Zemuoges]*30+PlayerDB[playerid][Melynes]*30);
                        strcat(info, string);

                        ShowPlayerDialog(playerid, 261, DIALOG_STYLE_TABLIST_HEADERS, "{AFAFAF}Uogø pardavimas", info, "Rinktis","Atgal");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite krepðelio.");
                    }
                }
                default:
                {
                    OnPlayerPickUpDynamicPickup(playerid, UogosShop);
                }
            }
        }
    }
    if(dialogid == 260)
    {
        new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            if(V_SQLID == VerslaiDB[i][VDB_SQLID])
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    new caption[90];
                    format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                    new info[2024];
                    new string[128];
                    format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo pavadinimas: {96A677}%s \n",VerslaiDB[i][VDB_Pavadinimas]);
                    strcat(info, string);
                    format(string, sizeof(string), "{96A677}• {FFFFFF}Verslas: {96A677}parduodamas uþ %s€\n", AddPoints(VerslaiDB[i][VDB_Kaina]));
                    strcat(info, string);
                    format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo rinkos kaina: {96A677}%s€\n",AddPoints(VerslaiDB[i][VDB_RinkosKaina]));
                    strcat(info, string);

                    switch(VerslaiDB[i][VDB_Lygis])
                    {
                        case 0:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/2.5val\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }

                        case 1:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/2val\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }

                        case 2:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/1.5val\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }

                        case 3:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/1val\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }

                        case 4:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/30min\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }
                        case 5:
                        {
                            format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo uþdarbis: {96A677}%d€/15min\n",VerslaiDB[i][VDB_Pajamos]);
                            strcat(info, string);
                        }
                    }
                    strcat(info, "{96A677}• {FFFFFF}Verslo tipas: {96A677}Virtualus\n");
                    format(string, sizeof(string), "{96A677}• {FFFFFF}Verslo lygis: {96A677}%i/5\n\n",VerslaiDB[i][VDB_Lygis]);
                    strcat(info, string);

                    strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                    switch(VerslaiDB[i][VDB_Parduodamas])
                    {
                        case 0:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                        }
                        case 1:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                        }
                    }
                    strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n        \n");
                    strcat(info, "{96A677}• {FFFFFF}Verslo informacija");
                    ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                }
            }
        }
    }
    if(dialogid == 261)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerDB[playerid][Braskes] > 0)
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d braðkæs(-ë){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Braskes],PlayerDB[playerid][Braskes]*9);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+=PlayerDB[playerid][Braskes]*9;
                        Stats_Braskes+=PlayerDB[playerid][Braskes];
                        Stats_Total += PlayerDB[playerid][Braskes];
                        Stats_TotalToday+=PlayerDB[playerid][Braskes];
                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Braskes];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Braskes];
                        PlayerDB[playerid][Braskes] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite braðkiø kurias galëtumëte parduoti.");
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][Avietes] > 0)
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d avietes(-ë){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Avietes],PlayerDB[playerid][Avietes]*6);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+=PlayerDB[playerid][Avietes]*6;
                        Stats_Avietes+=PlayerDB[playerid][Avietes];
                        Stats_Total += PlayerDB[playerid][Avietes];
                        Stats_TotalToday+=PlayerDB[playerid][Avietes];
                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Avietes];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Avietes];
                        PlayerDB[playerid][Avietes] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite avieèiø kurias galëtumëte parduoti.");
                    }
                }
                case 2:
                {
                    if(PlayerDB[playerid][Bruknes] > 0)
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d bruknes(-ë){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Bruknes],PlayerDB[playerid][Bruknes]*30);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+=PlayerDB[playerid][Bruknes]*30;
                        Stats_Bruknes+=PlayerDB[playerid][Bruknes];
                        Stats_Total += PlayerDB[playerid][Bruknes];
                        Stats_TotalToday+=PlayerDB[playerid][Bruknes];
                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Bruknes];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Bruknes];
                        PlayerDB[playerid][Bruknes] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite brukniø kurias galëtumëte parduoti.");
                    }
                }
                case 3:
                {
                    if(PlayerDB[playerid][Zemuoges] > 0)
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d þemuoges(-ë){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Zemuoges],PlayerDB[playerid][Zemuoges]*30);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+=PlayerDB[playerid][Zemuoges]*30;
                        Stats_Zemuoges+=PlayerDB[playerid][Zemuoges];

                        Stats_Total += PlayerDB[playerid][Zemuoges];

                        Stats_TotalToday+=PlayerDB[playerid][Zemuoges];

                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Zemuoges];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Zemuoges];
                        PlayerDB[playerid][Zemuoges] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite þemuogiø kurias galëtumëte parduoti.");
                    }
                }
                case 4:
                {
                    if(PlayerDB[playerid][Melynes] > 0)
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d melynes(-ë){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Melynes],PlayerDB[playerid][Melynes]*30);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+=PlayerDB[playerid][Melynes]*30;

                        Stats_Melynes+=PlayerDB[playerid][Melynes];

                        Stats_Total += PlayerDB[playerid][Melynes];
                        Stats_TotalToday+=PlayerDB[playerid][Melynes];

                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Zemuoges];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Zemuoges];
                        PlayerDB[playerid][Melynes] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite melyniø kurias galëtumëte parduoti.");
                    }
                }
                case 6:
                {
                    if(PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes] == 0)
                    {
                        SendClientMessage(playerid, 0xFF0000FF, "• Neturite uogø kurias galëtumëte parduoti.");
                    }
                    else
                    {
                        new string[128];
                        format(string, sizeof(string), "• {FFFFFF}Pardavëte {99CCFF}%d uogas(-ø){FFFFFF} uþ {99CCFF}%d €",PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes],PlayerDB[playerid][Braskes]*9+PlayerDB[playerid][Avietes]*6+PlayerDB[playerid][Bruknes]*30+PlayerDB[playerid][Zemuoges]*30+PlayerDB[playerid][Melynes]*30);
                        SendClientMessage(playerid, 0x99CCFFFF,string);
                        PlayerDB[playerid][MoneyInPocket]+= PlayerDB[playerid][Braskes]*9+PlayerDB[playerid][Avietes]*6+PlayerDB[playerid][Bruknes]*30+PlayerDB[playerid][Zemuoges]*30+PlayerDB[playerid][Melynes]*30;

                        Stats_Total += PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                        Stats_TotalToday += PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];

                        Stats_Braskes+=PlayerDB[playerid][Braskes];
                        Stats_Avietes+=PlayerDB[playerid][Avietes];
                        Stats_Bruknes+=PlayerDB[playerid][Bruknes];
                        Stats_Zemuoges+=PlayerDB[playerid][Zemuoges];
                        Stats_Melynes+=PlayerDB[playerid][Melynes];

                        PlayerDB[playerid][UogosToday]+=PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                        PlayerDB[playerid][UogosTotal]+=PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];

                        PlayerDB[playerid][Braskes] = 0;
                        PlayerDB[playerid][Avietes] = 0;
                        PlayerDB[playerid][Bruknes] = 0;
                        PlayerDB[playerid][Zemuoges] = 0;
                        PlayerDB[playerid][Melynes] = 0;
                    }
                }
            }
            new UogosText[600];
            new str[128];
            strcat(UogosText, "„San-Fierro parduotø uogø statistika“\n");
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Iðviso parduota: {99CCFF}%d {FFFFFF}uogø.\n",Stats_Total);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota avieèiø: {99CCFF}%d\n",Stats_Avietes);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota brukniø: {99CCFF}%d\n",Stats_Bruknes);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota þemuogiø: {99CCFF}%d\n",Stats_Zemuoges);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota melyniø: {99CCFF}%d\n",Stats_Melynes);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Parduota braðkiø: {99CCFF}%d\n",Stats_Braskes);
            strcat(UogosText, str);
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Ðiandien parduota: {99CCFF}%d {FFFFFF}uogø.",Stats_TotalToday);
            strcat(UogosText, str);
            UpdateDynamic3DTextLabelText(UogosStats, 0x99CCFFFF, UogosText);
            if(PlayerDB[playerid][SuKrepsiuAntRanku] == true)
            {
                new count = PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                if(count < 20)
                {
                    SetPlayerAttachedObject(playerid,0,19639,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                }
            }
            OnPlayerPickUpDynamicPickup(playerid, UogosShop);
        }
        else
        {
            OnPlayerPickUpDynamicPickup(playerid, UogosShop);
        }
    }
    if(dialogid == 262)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    switch(PlayerDB[playerid][SuKrepsiuAntRanku])
                    {
                        case false:
                        {
                            new count = PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes];
                            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                            if(count < 20)
                            {
                                SetPlayerAttachedObject(playerid,0,19639,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                            }
                            else
                            {
                                switch(random(3))
                                {
                                    case 0:
                                    {
                                        SetPlayerAttachedObject(playerid,0,19636,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                    }
                                    case 1:
                                    {
                                        SetPlayerAttachedObject(playerid,0,19637,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                    }
                                    case 2:
                                    {
                                        SetPlayerAttachedObject(playerid,0,19638,6,-0.006000,0.069000,-0.181999,-107.599967,-6.399999,-7.399993,1.000000,1.000000,1.000000);
                                    }
                                }
                            }

                            PlayerDB[playerid][SuKrepsiuAntRanku] = true;
                        }
                        case true:
                        {
                            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                            RemovePlayerAttachedObject(playerid, 0);
                            PlayerDB[playerid][SuKrepsiuAntRanku] = false;
                        }
                    }
                    cmd_ui(playerid,"");
                }
                default:
                {
                    cmd_ui(playerid,"");
                }
            }
        }
    }
    if(dialogid == 263)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    switch(PlayerDB[playerid][RodoAlki])
                    {
                        case false:
                        {
                            PlayerDB[playerid][RodoAlki] = true;
                            Alkis[playerid][0] = CreatePlayerTextDraw(playerid,610.000000, 137.000000, "BG");
                            PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][0], 255);
                            PlayerTextDrawFont(playerid,Alkis[playerid][0], 1);
                            PlayerTextDrawLetterSize(playerid,Alkis[playerid][0], 0.000000, 0.099999);
                            PlayerTextDrawColor(playerid,Alkis[playerid][0], -1);
                            PlayerTextDrawSetOutline(playerid,Alkis[playerid][0], 0);
                            PlayerTextDrawSetProportional(playerid,Alkis[playerid][0], 1);
                            PlayerTextDrawSetShadow(playerid,Alkis[playerid][0], 1);
                            PlayerTextDrawUseBox(playerid,Alkis[playerid][0], 1);
                            PlayerTextDrawBoxColor(playerid,Alkis[playerid][0], 255);
                            PlayerTextDrawTextSize(playerid,Alkis[playerid][0], 496.000000, 0.000000);
                            PlayerTextDrawSetSelectable(playerid,Alkis[playerid][0], 0);

                            Alkis[playerid][1] = CreatePlayerTextDraw(playerid,608.500000, 138.500000, "BG");
                            PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][1], 255);
                            PlayerTextDrawFont(playerid,Alkis[playerid][1], 1);
                            PlayerTextDrawLetterSize(playerid,Alkis[playerid][1], 0.000000, -0.200000);
                            PlayerTextDrawColor(playerid,Alkis[playerid][1], -1);
                            PlayerTextDrawSetOutline(playerid,Alkis[playerid][1], 0);
                            PlayerTextDrawSetProportional(playerid,Alkis[playerid][1], 1);
                            PlayerTextDrawSetShadow(playerid,Alkis[playerid][1], 1);
                            PlayerTextDrawUseBox(playerid,Alkis[playerid][1], 1);
                            PlayerTextDrawBoxColor(playerid,Alkis[playerid][1], -238809227);
                            PlayerTextDrawTextSize(playerid,Alkis[playerid][1], 497.000000, 0.000000);
                            PlayerTextDrawSetSelectable(playerid,Alkis[playerid][1], 0);

                            Alkis[playerid][2] = CreatePlayerTextDraw(playerid,500.500000, 138.500000, "BAR");
                            PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][2], 255);
                            PlayerTextDrawFont(playerid,Alkis[playerid][2], 1);
                            PlayerTextDrawLetterSize(playerid,Alkis[playerid][2], 0.000000, -0.200000);
                            PlayerTextDrawColor(playerid,Alkis[playerid][2], -1);
                            PlayerTextDrawSetOutline(playerid,Alkis[playerid][2], 0);
                            PlayerTextDrawSetProportional(playerid,Alkis[playerid][2], 1);
                            PlayerTextDrawSetShadow(playerid,Alkis[playerid][2], 1);
                            PlayerTextDrawUseBox(playerid,Alkis[playerid][2], 1);
                            PlayerTextDrawBoxColor(playerid,Alkis[playerid][2], -238809089);
                            PlayerTextDrawTextSize(playerid,Alkis[playerid][2], 500.500000, 0.000000);
                            PlayerTextDrawSetSelectable(playerid,Alkis[playerid][2], 0);

                            Alkis[playerid][3] = CreatePlayerTextDraw(playerid,510.000000, 124.500000, "Alkis:");
                            PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][3], 255);
                            PlayerTextDrawFont(playerid,Alkis[playerid][3], 2);
                            PlayerTextDrawLetterSize(playerid,Alkis[playerid][3], 0.200000, 1.000000);
                            PlayerTextDrawColor(playerid,Alkis[playerid][3], -1);
                            PlayerTextDrawSetOutline(playerid,Alkis[playerid][3], 1);
                            PlayerTextDrawSetProportional(playerid,Alkis[playerid][3], 1);
                            PlayerTextDrawSetSelectable(playerid,Alkis[playerid][3], 0);

                            Alkis[playerid][4] = CreatePlayerTextDraw(playerid,498.000000, 124.000000, "hud:radar_burgerShot");
                            PlayerTextDrawBackgroundColor(playerid,Alkis[playerid][4], 255);
                            PlayerTextDrawFont(playerid,Alkis[playerid][4], 4);
                            PlayerTextDrawLetterSize(playerid,Alkis[playerid][4], 0.500000, 1.000000);
                            PlayerTextDrawColor(playerid,Alkis[playerid][4], -1);
                            PlayerTextDrawSetOutline(playerid,Alkis[playerid][4], 0);
                            PlayerTextDrawSetProportional(playerid,Alkis[playerid][4], 1);
                            PlayerTextDrawSetShadow(playerid,Alkis[playerid][4], 1);
                            PlayerTextDrawUseBox(playerid,Alkis[playerid][4], 1);
                            PlayerTextDrawBoxColor(playerid,Alkis[playerid][4], 255);
                            PlayerTextDrawTextSize(playerid,Alkis[playerid][4], 10.000000, 10.000000);
                            PlayerTextDrawSetSelectable(playerid,Alkis[playerid][4], 0);
                            UpdateHungerTimer[playerid] = SetTimerEx("UpdateHunger", 800, true, "d", playerid);
                        }
                        case true:
                        {
                            PlayerDB[playerid][RodoAlki] = false;
                            KillTimer(UpdateHungerTimer[playerid]);

                            PlayerTextDrawHide(playerid, Alkis[playerid][0]);
                            PlayerTextDrawHide(playerid, Alkis[playerid][1]);
                            PlayerTextDrawHide(playerid, Alkis[playerid][2]);
                            PlayerTextDrawHide(playerid, Alkis[playerid][3]);
                            PlayerTextDrawHide(playerid, Alkis[playerid][4]);

                            PlayerTextDrawDestroy(playerid, Alkis[playerid][0]);
                            PlayerTextDrawDestroy(playerid, Alkis[playerid][1]);
                            PlayerTextDrawDestroy(playerid, Alkis[playerid][2]);
                            PlayerTextDrawDestroy(playerid, Alkis[playerid][3]);
                            PlayerTextDrawDestroy(playerid, Alkis[playerid][4]);
                        }
                    }
                }
                case 1:
                {
                    switch(PlayerDB[playerid][RodoItarima])
                    {
                        case false:
                        {
                            PlayerDB[playerid][RodoItarima] = true;

                            WantedDraw1[playerid] = CreatePlayerTextDraw(playerid,502.000000, 107.000000, "]");
                            PlayerTextDrawBackgroundColor(playerid,WantedDraw1[playerid], 255);
                            PlayerTextDrawFont(playerid,WantedDraw1[playerid], 0);
                            PlayerTextDrawLetterSize(playerid,WantedDraw1[playerid], 0.329998, 1.099999);
                            PlayerTextDrawColor(playerid,WantedDraw1[playerid], -6422273);
                            PlayerTextDrawSetOutline(playerid,WantedDraw1[playerid], 1);
                            PlayerTextDrawSetProportional(playerid,WantedDraw1[playerid], 1);
                            PlayerTextDrawSetSelectable(playerid,WantedDraw1[playerid], 0);

                            WantedDraw2[playerid] = CreatePlayerTextDraw(playerid,516.000000, 106.000000, "~g~0 ~w~lygis");
                            PlayerTextDrawBackgroundColor(playerid,WantedDraw2[playerid], 255);
                            PlayerTextDrawFont(playerid,WantedDraw2[playerid], 2);
                            PlayerTextDrawLetterSize(playerid,WantedDraw2[playerid], 0.209999, 1.199999);
                            PlayerTextDrawColor(playerid,WantedDraw2[playerid], 16711935);
                            PlayerTextDrawSetOutline(playerid,WantedDraw2[playerid], 1);
                            PlayerTextDrawSetProportional(playerid,WantedDraw2[playerid], 1);
                            PlayerTextDrawSetSelectable(playerid,WantedDraw2[playerid], 0);

                            PlayerTextDrawShow(playerid, WantedDraw1[playerid]);
                            PlayerTextDrawShow(playerid, WantedDraw2[playerid]);


                            new string[50];
                            if(PlayerDB[playerid][WantedLevel] < 16)
                            {
                                format(string, sizeof(string), "~g~%d ~w~lygis", PlayerDB[playerid][WantedLevel]);
                            }
                            else
                            {
                                format(string, sizeof(string), "~r~%d ~w~lygis", PlayerDB[playerid][WantedLevel]);
                            }
                            PlayerTextDrawSetString(playerid, WantedDraw2[playerid], string);
                        }
                        case true:
                        {
                            PlayerDB[playerid][RodoItarima] = false;
                            PlayerTextDrawDestroy(playerid, WantedDraw2[playerid]);
                            PlayerTextDrawDestroy(playerid, WantedDraw1[playerid]);
                        }
                    }
                }
                case 2:
                {
                    switch(PlayerDB[playerid][RodoLaikrodi])
                    {
                        case false:
                        {
                            PlayerDB[playerid][RodoLaikrodi] = true;
                            TextDrawShowForPlayer(playerid, Datarodis);
                            TextDrawShowForPlayer(playerid, Laikrodis);

                        }
                        case true:
                        {
                            PlayerDB[playerid][RodoLaikrodi] = false;
                            TextDrawHideForPlayer(playerid, Datarodis);
                            TextDrawHideForPlayer(playerid, Laikrodis);
                        }
                    }
                }
            }
            cmd_slepti(playerid,"");
        }
    }

    if(dialogid == 264)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 500)
                    {
                        SendClientMessage(playerid,0x33AA33FF,"• Nusipirkote bilietà 15 minuèiø vaþinëti su kartingais.");
                        SendClientMessage(playerid,0x33AA33FF,"• Dabar galite siûlyti varþytis ið pinigø su komanda /kartingai.");
                        if(PlayerDB[playerid][KartingaiTicket] > gettime())
                        {
                            PlayerDB[playerid][KartingaiTicket]+=15*60;
                        }
                        else
                        {

                            PlayerDB[playerid][KartingaiTicket] = gettime() + 15*60;
                        }
                        PlayerDB[playerid][MoneyInPocket]-=500;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite pakankamai pinigø ðiam bilietui ásigyti.");
                    }
                }
                case 1:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 1000)
                    {
                        SendClientMessage(playerid,0x33AA33FF,"• Nusipirkote bilietà 30 minuèiø vaþinëti su kartingais.");
                        SendClientMessage(playerid,0x33AA33FF,"• Dabar galite siûlyti varþytis ið pinigø su komanda /kartingai.");
                        if(PlayerDB[playerid][KartingaiTicket] > gettime())
                        {
                            PlayerDB[playerid][KartingaiTicket]+=30*60;
                        }
                        else
                        {

                            PlayerDB[playerid][KartingaiTicket] = gettime() + 30*60;
                        }
                        PlayerDB[playerid][MoneyInPocket]-=1000;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite pakankamai pinigø ðiam bilietui ásigyti.");
                    }
                }
                case 2:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 2000)
                    {
                        SendClientMessage(playerid,0x33AA33FF,"• Nusipirkote bilietà 60 minuèiø vaþinëti su kartingais.");
                        SendClientMessage(playerid,0x33AA33FF,"• Dabar galite siûlyti varþytis ið pinigø su komanda /kartingai.");
                        if(PlayerDB[playerid][KartingaiTicket] > gettime())
                        {
                            PlayerDB[playerid][KartingaiTicket]+=60*60;
                        }
                        else
                        {

                            PlayerDB[playerid][KartingaiTicket] = gettime() + 60*60;
                        }
                        PlayerDB[playerid][MoneyInPocket]-=2000;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite pakankamai pinigø ðiam bilietui ásigyti.");
                    }
                }
                case 4:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 10000)
                    {
                        SendClientMessage(playerid,0x33AA33FF,"• Nusipirkote abonimentà vaþinëti su kartingais 3 dienoms.");
                        SendClientMessage(playerid,0x33AA33FF,"• Dabar galite siûlyti varþytis ið pinigø su komanda /kartingai.");
                        if(PlayerDB[playerid][KartingaiTicket] > gettime())
                        {
                            PlayerDB[playerid][KartingaiTicket]+=60*60*24*3;
                        }
                        else
                        {

                            PlayerDB[playerid][KartingaiTicket] = gettime() + 60*60*24*3;
                        }
                        PlayerDB[playerid][MoneyInPocket]-=10000;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite pakankamai pinigø ðiam abonimentui ásigyti.");
                    }
                }
                case 5:
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 20000)
                    {
                        SendClientMessage(playerid,0x33AA33FF,"• Nusipirkote abonimentà vaþinëti su kartingais 7 dienoms.");
                        SendClientMessage(playerid,0x33AA33FF,"• Dabar galite siûlyti varþytis ið pinigø su komanda /kartingai.");
                        if(PlayerDB[playerid][KartingaiTicket] > gettime())
                        {
                            PlayerDB[playerid][KartingaiTicket]+=60*60*24*7;
                        }
                        else
                        {

                            PlayerDB[playerid][KartingaiTicket] = gettime() + 60*60*24*7;
                        }
                        PlayerDB[playerid][MoneyInPocket]-=20000;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Neturite pakankamai pinigø ðiam abonimentui ásigyti.");
                    }
                }

            }
            OnPlayerPickUpDynamicPickup(playerid, KartingaiKasa);
        }
    }

    if(dialogid == 265)
    {

/*

    bool:ZaidziaKartingais,
    bool:ReceivedKartsOffer,
    KartsOfferExpiresAt,
    KartOfferSenderSQLid,
    KartsOfferMoney,
    KartsRatai,
    KartsCode[6]
*/

        if(PlayerDB[playerid][ReceivedKartsOffer] == true && PlayerDB[playerid][KartsOfferExpiresAt] >= gettime())
        {
            if(response)
            {
                new pID = -1;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][SQLID] == PlayerDB[playerid][KartOfferSenderSQLid])
                        {
                            pID = i;
                            break;
                        }
                    }
                }
                if(pID >= 0)
                {
                    if(PlayerDB[playerid][KartsOfferMoney] > PlayerDB[pID][MoneyInPocket] || PlayerDB[playerid][MoneyInPocket] < PlayerDB[playerid][KartsOfferMoney])
                    {
                        ErrorMsg(playerid,"• Vienas ið jûsø arba abu neturite pakankamai pinigø statymui.");
                        ErrorMsg(pID,"• Vienas ið jûsø arba abu neturite pakankamai pinigø statymui.");
                    }
                    else if(strcmp(PlayerDB[playerid][KartsCode], inputdialogtext, false) == 0)
                    {
                        CreateCartsGame(playerid,pID,PlayerDB[playerid][KartsOfferMoney],PlayerDB[playerid][KartsRatai]);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Blogai suvedëte CAPTCHA kodà, todël lenktynës negalimos.");
                        SendClientMessage(pID, RAUDONA, "• Þaidëjas blogai ávedë CAPTCHA koda, todël lenktynës negalimos.");
                    }

                    //Nulint
                    PlayerDB[playerid][ReceivedKartsOffer] = false;
                    PlayerDB[playerid][KartsOfferExpiresAt] = 0;
                    //
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas pasiûlæs þaisti yra atsijungæs.");
                }
            }
            else
            {
                new pID = -1;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][SQLID] == PlayerDB[playerid][KartOfferSenderSQLid])
                        {
                            pID = i;
                            break;
                        }
                    }
                }
                if(pID >= 0)
                {
                    PlayerDB[playerid][ReceivedKartsOffer] = false;
                    PlayerDB[playerid][KartsOfferExpiresAt] = 0;
                    PlayerDB[playerid][KartOfferSenderSQLid] = -1;
                    SendClientMessage(pID, RAUDONA, " • Þaidëjas atsisakë lenktiniauti.");
                }
            }
        }
        PlayerDB[playerid][ReceivedKartsOffer] = false;
        PlayerDB[playerid][KartsOfferExpiresAt] = 0;
    }
    if(dialogid == 266)
    {
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
                    switch(PlayerDB[playerid][IPApsauga])
                    {
                        case 0:
                        {
                            SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Sëkmingai aktyvavote IP apsauga, nuo ðiol prisijungimas prie ðio vartotojo bus galimas tik ið jûsø IP adreso.");
                            PlayerDB[playerid][IPApsauga] = 1;
                        }
                        case 1:
                        {
                            SendClientMessage(playerid, 0xFF0000FF, "•{FFFFFF} IP apsauga iðjungta, prisijungimas prie ðio vartotojo bus galimas ið,bet kokio IP adreso.");
                            PlayerDB[playerid][IPApsauga] = 0;
                        }
                    }
                    cmd_saugumas(playerid,"");
                }
                case 3:
                {
                    switch(PlayerDB[playerid][SecurityCodeCheck])
                    {
                        case 0:
                        {
                            ShowPlayerDialog(playerid, 267, DIALOG_STYLE_INPUT, "{AFAFAF}Antro slaptaþodþio nustatymas", "Áraðykite savo pageidaujamà slaptaþodá,kuris bus bûtinas norint prisijungti prie ðios paskyros.\nSëkmingai nustaèius ðá slaptaþodá, jûs privalësite já ávesti,kas kartà prisijungiant prie ðios paskyros.", "Toliau", "Atgal");
                        }
                        case 1:
                        {
                            SendClientMessage(playerid, 0xFF0000FF, "•{FFFFFF} Sëkmingai iðjungëte antro slaptaþodþio reikalavimà.");
                            PlayerDB[playerid][SecurityCodeCheck] = 0;
                            cmd_saugumas(playerid,"");

                        }
                    }
                }
                case 5:
                {
                    cmd_keistislaptazodi(playerid,"");
                }
                default:
                {
                    cmd_saugumas(playerid,"");
                }
            }
        }
    }
    if(dialogid == 267)
    {
        if(response)
        {
            if(strlen(inputdialogtext) < 3)
            {
                SendClientMessage(playerid, 0xFF0000FF, "•{FFFFFF} Slaptaþodis per trumpas. Trumpiausias galimas slaptaþodis turi bûti sudarytas ið 4 simboliø.");
                ShowPlayerDialog(playerid, 267, DIALOG_STYLE_INPUT, "{AFAFAF}Antro slaptaþodþio nustatymas", "Áraðykite savo pageidaujamà slaptaþodá,kuris bus bûtinas norint prisijungti prie ðios paskyros.\nSëkmingai nustaèius ðá slaptaþodá, jûs privalësite já ávesti,kas kartà prisijungiant prie ðios paskyros.", "Toliau", "Atgal");
            }
            else if(strlen(inputdialogtext) > 36)
            {
                SendClientMessage(playerid, 0xFF0000FF, "•{FFFFFF} Slaptaþodis per ilgas. Slaptaþodþio maksimalus ilgis yra 36 simboliai.");
                ShowPlayerDialog(playerid, 267, DIALOG_STYLE_INPUT, "{AFAFAF}Antro slaptaþodþio nustatymas", "Áraðykite savo pageidaujamà slaptaþodá,kuris bus bûtinas norint prisijungti prie ðios paskyros.\nSëkmingai nustaèius ðá slaptaþodá, jûs privalësite já ávesti,kas kartà prisijungiant prie ðios paskyros.", "Toliau", "Atgal");
            }
            else
            {
                SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Sëkmingai aktyvavote antro slaptaþodþio apsaugà.");

                format(PlayerDB[playerid][SecondaryPassword], 36, "%s", inputdialogtext);
                PlayerDB[playerid][SecurityCodeCheck] = 1;
                cmd_saugumas(playerid,"");
            }
        }
        else
        {
            cmd_saugumas(playerid,"");
        }
    }
    if(dialogid == 268)
    {
        if(response)
        {
            new QueryString[144];
            mysql_format(connectionHandle, QueryString, sizeof(QueryString), "SELECT NULL FROM `players` WHERE `SecondaryPassword` = '%e' AND `id` = '%i' LIMIT 1;",inputtext, PlayerDB[playerid][SQLID]);
            mysql_function_query(connectionHandle, QueryString, true, "OnCheckSecondaryPassword","d",playerid);
        }
        else
        {
            Kick(playerid);
        }
    }
    if(dialogid == 269)
    {
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
                    new QueryString[128];
                    mysql_format(connectionHandle, QueryString, 128, "SELECT `ID`,`Kiekis` FROM `atsiimtikreditus` WHERE `Nick` = '%e';", Vardas(playerid));
                    mysql_function_query( connectionHandle, QueryString, true, "KredituAtsiimimas", "d", playerid);
                    ShowPlayerCreditsMeniu(playerid);
                }
                case 3:
                {
                    new info[410];
                    strcat(info,"{FFFFFF}Kreditus galite iðleisti ávairiausiomis serverio paslaugomis, serveryje yra {33AA33}21 {FFFFFF}parduodamø paslaugø,\n");
                    strcat(info,"Perkant kreditus, jûs juos gausite iðkarto, jei turite pakankamai pinigø savo telefono saskaitoje,\n\n");
                    strcat(info,"{FF0000}Nori pirkti kreditus el.bankininkystæ? Uþsuk á mûsø serverio svetainæ {33AA33}www.San-Andreas.lt {FF0000}ir virðuje paspauskite mygtukà „{33AA33}Paslaugos{FF0000}“.");
                    ShowPlayerDialog(playerid, 270, DIALOG_STYLE_MSGBOX, "{AFAFAF}Informacija apie kreditus", info, "Gerai", "");
                }
                case 4:
                {
                    new info[450];
                    new string[128];
                    if(PlayerDB[playerid][adminlvl] == 0)
                    {
                        strcat(info, "{FFFFFF}Administratorius: {FF0000}neaktyvuotas\n");
                    }
                    else
                    {
                        switch(PlayerDB[playerid][adminlvl])
                        {
                            case 1:
                            {
                                new Years, Month, Day, Hour, Minute, Second;
                                TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                                format(string, sizeof(string), "{FFFFFF}Administratorius: {33AA33}Aktyvuotas (I lygio) iki %d-%02d-%02d %02d:%02d\n",Years, Month, Day, Hour, Minute);
                            }
                            case 2:
                            {
                                new Years, Month, Day, Hour, Minute, Second;
                                TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                                format(string, sizeof(string), "{FFFFFF}Administratorius: {33AA33}Aktyvuotas (II lygio) iki %d-%02d-%02d %02d:%02d\n",Years, Month, Day, Hour, Minute);
                            }
                            case 3:
                            {
                                new Years, Month, Day, Hour, Minute, Second;
                                TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                                format(string, sizeof(string), "{FFFFFF}Administratorius: {33AA33}Aktyvuotas (III lygio) iki %d-%02d-%02d %02d:%02d\n",Years, Month, Day, Hour, Minute);
                            }
                            case 4:
                            {
                                format(string, sizeof(string), "{FFFFFF}Administratorius: {33AA33}Aktyvuotas (IV lygio)\n");
                            }
                            case 5:
                            {
                                format(string, sizeof(string), "{FFFFFF}Administratorius: {33AA33}Aktyvuotas (V lygio)\n");
                            }
                        }
                        strcat(info, string);
                    }

                    if(PlayerDB[playerid][VIP] == 0)
                    {
                        strcat(info, "{FFFFFF}VIP narys: {FF0000}neaktyvuotas\n");
                    }
                    else
                    {
                        new Years, Month, Day, Hour, Minute, Second;
                        TimestampToDate(PlayerDB[playerid][VIPLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                        format(string, sizeof(string), "{FFFFFF}VIP narys: {33AA33}aktyvuotas iki %d-%02d-%02d %02d:%02d\n",Years, Month, Day, Hour, Minute);
                        strcat(info, string);
                    }

                    if(PlayerDB[playerid][AlgosBonusas] < gettime())
                    {
                        strcat(info, "{FFFFFF}Papildomas uþdarbis: {FF0000}neaktyvuotas\n");
                    }
                    else
                    {
                        new Years, Month, Day, Hour, Minute, Second;
                        TimestampToDate(PlayerDB[playerid][AlgosBonusas], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                        format(string, sizeof(string), "{FFFFFF}Papildomas uþdarbis: {33AA33}aktyvuotas iki %d-%02d-%02d %02d:%02d\n",Years, Month, Day, Hour, Minute);
                        strcat(info, string);
                    }
                    if(PlayerDB[playerid][SecondBusinessSlotBought] == 1)
                    {
                        strcat(info, "{FFFFFF}Verslo antras slotas: {33AA33}aktyvuotas");
                    }
                    else
                    {

                        strcat(info, "{FFFFFF}Verslo antras slotas: {FF0000}neaktyvuotas");

                    }
                    ShowPlayerDialog(playerid, 270, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø uþsakytos paslaugos", info, "Gerai", "");
                }
                case 5:
                {
                    //Lietuvos
                    new info[445];
                    new string[128];
                    format(string, sizeof(string), "{33AA33}SAN1 %s{FFFFFF} numeriu 1398 ; 1.50€ - Gausite 100 kreditø,\n",Vardas(playerid));
                    strcat(info,string);
                    format(string, sizeof(string), "{33AA33}SAN2 %s{FFFFFF} numeriu 1398 ; 2,90€ - gausite 194 kreditø,\n",Vardas(playerid));
                    strcat(info,string);
                    format(string, sizeof(string), "{33AA33}SAN3 %s{FFFFFF} numeriu 1398 ; 4,00€ - gausite 267 kreditø,\n",Vardas(playerid));
                    strcat(info,string);
                    strcat(info," {FF0000}Dëmesio: Privalote þinutës raktaþodá „SAN“ raðyti ið didþiøjø raidþiø tai pat pirmàsias vardo ir pavardës raides,\n");
                    strcat(info," {FF0000}Dëmesio: Kreditus taip pat galite ásigyti San-Andreas.LT el.parduotuvëje pigiau nei SMS þinutëmis.");
                    ShowPlayerDialog(playerid, 270, DIALOG_STYLE_MSGBOX, "{AFAFAF}Kreditø pirkimas ið Lietuvos", info, "Gerai", "");
                }
                case 6:
                {
                    ErrorMsg(playerid,"• Kreditø pirkimas ið ûþsienio ðiuo metu yra negalimas.");
                    ShowPlayerCreditsMeniu(playerid);
                }
                case 10:
                {
                    ShowPlayerDialog(playerid, 271, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 11:
                {
                    ShowPlayerDialog(playerid, 272, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 12:
                {
                    ShowPlayerDialog(playerid, 273, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 16:
                {
                    ShowPlayerDialog(playerid, 274, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 17:
                {
                    ShowPlayerDialog(playerid, 275, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 18:
                {
                    ShowPlayerDialog(playerid, 276, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 19:
                {
                    ShowPlayerDialog(playerid, 277, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 20:
                {
                    ShowPlayerDialog(playerid, 278, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }

                case 24:
                {
                    ShowPlayerDialog(playerid, 279, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 25:
                {
                    ShowPlayerDialog(playerid, 280, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 26:
                {
                    ShowPlayerDialog(playerid, 281, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 27:
                {
                    ShowPlayerDialog(playerid, 282, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 28:
                {
                    ShowPlayerDialog(playerid, 283, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }

                case 29:
                {
                    ShowPlayerDialog(playerid, 297, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }

                case 30:
                {
                    ShowPlayerDialog(playerid, 284, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 31:
                {
                    ShowPlayerDialog(playerid, 285, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 32:
                {
                    ShowPlayerDialog(playerid, 286, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                //
                case 33:
                {
                    ShowPlayerDialog(playerid, 287, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 34:
                {
                    ShowPlayerDialog(playerid, 288, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 35:
                {
                    ShowPlayerDialog(playerid, 289, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 36:
                {
                    ShowPlayerDialog(playerid, 290, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                case 37:
                {
                    ShowPlayerDialog(playerid, 291, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", "{FFFFFF}Ar tikrai norite ásigyti ðià paslaugà?\n\n{FF0000}SVARBU: Ásigyjus ðià paslaugà pirkimas yra galutinis ir kreditai nebus graþinami.\n{FFFFFF}Norëdami ásigyti ðià paslaugà spauskite „Taip“, jei nenorite ásigyti ðios paslaugos spauskite „Ne“.", "Taip", "Ne");
                }
                default:
                {
                   ShowPlayerCreditsMeniu(playerid);
                }
            }
        }
    }
    if(dialogid == 270)
    {
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 271)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                PlayerDB[playerid][Credits]-=100;
                PlayerDB[playerid][MoneyInPocket]+=100000;
                SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Serverio pinigai“.");
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 272)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                PlayerDB[playerid][Credits]-=100;
                PlusPlayerScore(playerid,10000);
                SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Patirties taðkai“.");
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 273)
    {
        if(response)
        {
            if(PlayerDB[playerid][SecondBusinessSlotBought] == 0)
            {
                if(PlayerDB[playerid][Credits] >= 1000)
                {
                    PlayerDB[playerid][Credits]-=1000;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Antro verslo slotas“.");
                    PlayerDB[playerid][SecondBusinessSlotBought] = 1;
                }
                else
                {
                    ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði paslauga jums jau aktyvuota.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 274)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                if(PlayerDB[playerid][VIP] == 1)
                {
                    PlayerDB[playerid][Credits]-=100;
                    PlayerDB[playerid][VIPLaikoPabaiga] = PlayerDB[playerid][VIPLaikoPabaiga] + 2592000;
                    PlayerDB[playerid][VIP] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „VIP statusas“.");
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûsø VIP statusas buvo pratæstas +30 dienø.");
                }
                else
                {
                    PlayerDB[playerid][VIPWarnings] = 0;
                    PlayerDB[playerid][Credits]-=100;
                    PlayerDB[playerid][VIPLaikoPabaiga] = gettime() + 2592000;
                    PlayerDB[playerid][VIP] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „VIP statusas“.");
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Informacijà apie VIP statusà rasite panaudojus komandà /vipinfo.");
                    if(PlayerDB[playerid][Pasiekimas17] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,17);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }



    if(dialogid == 275)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 440)
            {
                if(PlayerDB[playerid][adminlvl] > 0)
                {
                    if(PlayerDB[playerid][adminlvl] == 1)
                    {
                        PlayerDB[playerid][Credits]-=440;
                        PlayerDB[playerid][AdminLaikoPabaiga] = PlayerDB[playerid][AdminLaikoPabaiga] + 2592000;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas I lygio“.");
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs ADMIN statusas buvo pratæstas +30 dienø.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûs jau esate administratorius. Jûsø administratoriaus lygis yra ne pirmas.");
                    }
                }
                else
                {
                    PlayerDB[playerid][AdminWarnings] = 0;
                    PlayerDB[playerid][Credits]-=440;
                    PlayerDB[playerid][AdminLaikoPabaiga] = gettime() + 2592000;
                    PlayerDB[playerid][adminlvl] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas I lygio“.");
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Administratoriø komandas rasite panaudojus komandà /akomandos.");

                    if(PlayerDB[playerid][Pasiekimas18] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,18);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 276)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 770)
            {
                if(PlayerDB[playerid][adminlvl] > 0)
                {
                    if(PlayerDB[playerid][adminlvl] == 2)
                    {
                        PlayerDB[playerid][Credits]-=770;
                        PlayerDB[playerid][AdminLaikoPabaiga] = PlayerDB[playerid][AdminLaikoPabaiga] + 2592000;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas II lygio“.");
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs ADMIN statusas buvo pratæstas +30 dienø.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûs jau esate administratorius. Jûsø administratoriaus lygis yra ne antras.");
                    }
                }
                else
                {
                    PlayerDB[playerid][AdminWarnings] = 0;
                    PlayerDB[playerid][Credits]-=770;
                    PlayerDB[playerid][AdminLaikoPabaiga] = gettime() + 2592000;
                    PlayerDB[playerid][adminlvl] = 2;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas II lygio“.");
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Administratoriø komandas rasite panaudojus komandà /akomandos.");

                    if(PlayerDB[playerid][Pasiekimas18] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,18);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 277)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 1000)
            {
                if(PlayerDB[playerid][adminlvl] > 0)
                {
                    if(PlayerDB[playerid][adminlvl] == 3)
                    {
                        PlayerDB[playerid][Credits]-=1000;
                        PlayerDB[playerid][AdminLaikoPabaiga] = PlayerDB[playerid][AdminLaikoPabaiga] + 2592000;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas III lygio“.");
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs ADMIN statusas buvo pratæstas +30 dienø.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûs jau esate administratorius. Jûsø administratoriaus lygis yra ne treèias.");
                    }
                }
                else
                {
                    PlayerDB[playerid][AdminWarnings] = 0;
                    PlayerDB[playerid][Credits]-=1000;
                    PlayerDB[playerid][AdminLaikoPabaiga] = gettime() + 2592000;
                    PlayerDB[playerid][adminlvl] = 3;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN statusas III lygio“.");
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Administratoriø komandas rasite panaudojus komandà /akomandos.");

                    if(PlayerDB[playerid][Pasiekimas18] == 0)
                    {
                        PlayerCompletedPasiekimas(playerid,18);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }


    if(dialogid == 278)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 200)
            {
                if(PlayerDB[playerid][AlgosBonusas] > gettime())
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Papildomas uþdarbis“.");
                    PlayerDB[playerid][AlgosBonusas] += 30*24*60*60;
                    PlayerDB[playerid][Credits]-=200;
                }
                else
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Papildomas uþdarbis“.");
                    PlayerDB[playerid][AlgosBonusas] = gettime() + (30*24*60*60);
                    PlayerDB[playerid][Credits]-=200;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }

    if(dialogid == 279)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 20)
            {
                if(PlayerDB[playerid][JobWarnings] > 0)
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „DARBO áspëjimo paðalinimas“.");
                    PlayerDB[playerid][JobWarnings] -= 1;
                    PlayerDB[playerid][Credits]-=20;
                }
                else
                {
                    ErrorMsg(playerid,"• Nëra ispëjimo kurá galima bûtu paðalinti.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 280)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 30)
            {
                if(PlayerDB[playerid][VIPWarnings] > 0)
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „VIP áspëjimo paðalinimas“.");
                    PlayerDB[playerid][VIPWarnings] -= 1;
                    PlayerDB[playerid][Credits]-=30;
                }
                else
                {
                    ErrorMsg(playerid,"• Nëra ispëjimo kurá galima bûtu paðalinti.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 281)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                if(PlayerDB[playerid][AdminWarnings] > 0)
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „ADMIN áspëjimo paðalinimas“.");
                    PlayerDB[playerid][AdminWarnings] -= 1;
                    PlayerDB[playerid][Credits]-=50;
                }
                else
                {
                    ErrorMsg(playerid,"• Nëra ispëjimo kurá galima bûtu paðalinti.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }

    if(dialogid == 282)
    {
        if(response)
        {
            if(PlayerDB[playerid][WantedLevel] > 0)
            {
                if(PlayerDB[playerid][Credits] == 0)
                {
                    ErrorMsg(playerid,"• Norint naudotis ðia paslauga pirmiausia turite turëti kreditø.");
                }
                else
                {
                    new NusiemimoKaina = floatround(PlayerDB[playerid][WantedLevel] / 2,floatround_ceil);
                    if(NusiemimoKaina <= PlayerDB[playerid][Credits])
                    {
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Gaudomumo lygio paðalinimas“.");
                        PlayerDB[playerid][WantedLevel] = 0;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Sëkmingai buvo paðalintas visas gaudomumo lygis.");
                    }
                    else
                    {
                        NusiemimoKaina = PlayerDB[playerid][Credits];
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        PlayerDB[playerid][WantedLevel]-=NusiemimoKaina * 2;
                        new string[128];
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Gaudomumo lygio paðalinimas“.");
                        format(string, 128, "•{FFFFFF} Jûs sëkmingai nusiëmete %d gaudomumo lygio. Jûs esate vis dar gaudomas.", NusiemimoKaina * 2);
                        SendClientMessage(playerid, 0x00BA12FF, string);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs neturite gaudomumo lygio.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }


    if(dialogid == 283)
    {
        if(response)
        {
            if(PlayerDB[playerid][JailTime] > 0)
            {
                if(PlayerDB[playerid][Credits] == 0)
                {
                    ErrorMsg(playerid,"• Norint naudotis ðia paslauga pirmiausia turite turëti kreditø.");
                }
                else
                {
                    new NusiemimoKaina = floatround(PlayerDB[playerid][JailTime] / 60,floatround_ceil);
                    if(NusiemimoKaina <= PlayerDB[playerid][Credits])
                    {
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Kalëjimo laiko paðalinimas“.");
                        PlayerDB[playerid][JailTime] = 1;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Sëkmingai buvo paðalintas visas kalëjimo laikas.");
                    }
                    else
                    {
                        NusiemimoKaina = PlayerDB[playerid][Credits];
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        PlayerDB[playerid][JailTime]-=NusiemimoKaina * 60;
                        new string[128];
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Kalëjimo laiko paðalinimas“.");
                        format(string, 128, "•{FFFFFF} Jûs sëkmingai sumaþinote savo kalëjimo laikà %d minutëmis.", NusiemimoKaina);
                        SendClientMessage(playerid, 0x00BA12FF, string);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs ne kalinys.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }

    if(dialogid == 284)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 100)
            {
                if(PlayerDB[playerid][DarboSutartiesPabaiga] > gettime())
                {
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Darbo sutarties paðalinimas“.");
                    PlayerDB[playerid][DarboSutartiesPabaiga] = 0;
                    PlayerDB[playerid][Credits]-=100;
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs neturite darbo sutarties, kurià reiktu paðalinti.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 285)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                if(PlayerDB[playerid][FirstOwnedVehicleID] > -1)
                {
                    if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
                    {
                        ErrorMsg(playerid,"• Pirmiausia turite susiremontuoti savo tr. priemonæ.");
                        ShowPlayerCreditsMeniu(playerid);
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, 182, DIALOG_STYLE_INPUT, "Pirmos tr. priemonës vardiniai numeriai", "Norëdami ásigyti pirmos tr. priemonës vardinius numerius jûs turite ávesti á þemiau esantá laukelá savo norimus numerius ir spausti „Toliau“.", "Pirkti", "Atgal");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs neturite pirmos tr. priemonës.");
                    ShowPlayerCreditsMeniu(playerid);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
        else
        {
            ShowPlayerCreditsMeniu(playerid);
        }
    }
    if(dialogid == 286)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                if(PlayerDB[playerid][SecondOwnedVehicleID] > -1)
                {
                    if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
                    {
                        ErrorMsg(playerid,"• Pirmiausia turite susiremontuoti savo tr. priemonæ.");
                        ShowPlayerCreditsMeniu(playerid);
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, 183, DIALOG_STYLE_INPUT, "Antros tr. priemonës vardiniai numeriai", "Norëdami ásigyti antros tr. priemonës vardinius numerius jûs turite ávesti á þemiau esantá laukelá savo norimus numerius ir spausti „Toliau“.", "Pirkti", "Atgal");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs neturite antros tr. priemonës.");
                    ShowPlayerCreditsMeniu(playerid);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
        else
        {
            ShowPlayerCreditsMeniu(playerid);
        }
    }
    if(dialogid == 287)
    {
        if(response)
        {
            if(PlayerDB[playerid][AutoLicense] == 0)
            {
                if(PlayerDB[playerid][Credits] >= 20)
                {
                    PlayerDB[playerid][Credits]-=20;
                    PlayerDB[playerid][AutoLicense] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Automobilio teisës“.");
                }
                else
                {
                    ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs jau turite automobilio teises.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 288)
    {
        if(response)
        {
            if(PlayerDB[playerid][MotoLicense] == 0)
            {
                if(PlayerDB[playerid][Credits] >= 20)
                {
                    PlayerDB[playerid][Credits]-=20;
                    PlayerDB[playerid][MotoLicense] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Motociklo teisës“.");
                }
                else
                {
                    ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs jau turite motociklininko teises.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }

    if(dialogid == 289)
    {
        if(response)
        {
            if(PlayerDB[playerid][SunkvLicense] == 0)
            {
                if(PlayerDB[playerid][Credits] >= 20)
                {
                    PlayerDB[playerid][Credits]-=20;
                    PlayerDB[playerid][SunkvLicense] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Sunkveþimio teisës“.");
                }
                else
                {
                    ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs jau turite sunkveþimio teises.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 290)
    {
        if(response)
        {
            if(PlayerDB[playerid][PilotoLicense] == 0)
            {
                if(PlayerDB[playerid][Credits] >= 20)
                {
                    PlayerDB[playerid][Credits]-=20;
                    PlayerDB[playerid][PilotoLicense] = 1;
                    SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Piloto teisës“.");
                }
                else
                {
                    ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs jau turite pilotavimo teises.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }

    if(dialogid == 291)
    {
        if(response)
        {
            if(PlayerDB[playerid][Credits] >= 50)
            {
                ShowPlayerBuySkinDialog(playerid);
            }
            else
            {
                ErrorMsg(playerid,"• Ðios paslaugos pirkimui jûs neturite pakankamai kreditø.");
                ShowPlayerCreditsMeniu(playerid);
            }
        }
        else
        {
            ShowPlayerCreditsMeniu(playerid);
        }
    }
    if(dialogid == 292)
    {
        new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            if(V_SQLID == VerslaiDB[i][VDB_SQLID])
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    new caption[90];
                    format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                    new info[1024];
                    new string[128];

                    strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                    strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                    switch(VerslaiDB[i][VDB_Parduodamas])
                    {
                        case 0:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                        }
                        case 1:
                        {
                            strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                        }
                    }
                    strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                    new days,hours,mins,secs;
                    if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                    {
                        secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                        while(secs >= 60)
                        {
                            secs-=60;
                            mins+=1;
                        }
                        while(mins >= 60)
                        {
                            mins-=60;
                            hours+=1;
                        }
                        while(hours >= 24)
                        {
                            hours-=24;
                            days+=1;
                        }
                    }
                    format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                    strcat(info, string);
                    strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                    ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                }
                break;
            }
        }
    }

    if(dialogid == 293)
    {
        new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            if(V_SQLID == VerslaiDB[i][VDB_SQLID])
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    if(response)
                    {
                        new val = strval(inputtext);
                        if(val > 99000000)
                        {
                            ErrorMsg(playerid,"• Maksimali leidþiama suma yra 99 milijonai eurø.");
                            ShowPlayerDialog(playerid, 293, DIALOG_STYLE_INPUT, "{AFAFAF}Verslo pardavinëjimas", "{FFFFFF}Apaèioje áraðykite sumà uþ verslà,\nkurià norësite gauti vos þaidëjui nupirkus jûsø verslà.", "Toliau", "Atgal");
                        }
                        else if(val < 100000)
                        {
                            ErrorMsg(playerid,"• Minimali leidþiama suma yra 100 tûkst. eurø.");
                            ShowPlayerDialog(playerid, 293, DIALOG_STYLE_INPUT, "{AFAFAF}Verslo pardavinëjimas", "{FFFFFF}Apaèioje áraðykite sumà uþ verslà,\nkurià norësite gauti vos þaidëjui nupirkus jûsø verslà.", "Toliau", "Atgal");
                        }
                        else
                        {
                            VerslaiDB[i][VDB_Parduodamas] = 1;
                            VerslaiDB[i][VDB_PardavimoKaina] = val;



                            DestroyDynamic3DTextLabel(VerslaiDB[i][VDB_Label]);
                            DestroyDynamicPickup(VerslaiDB[i][VDB_Pickup]);

                            new LabelText[800];

                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s\n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5\n{FFFFFF}Verslo savininko norima suma uþ verslà: {96A677}%s€",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_RinkosKaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis],AddPoints(VerslaiDB[i][VDB_PardavimoKaina]));
                            strcat(LabelText, "\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.");
                            VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                            VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19523 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);

                            new caption[90];
                            format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                            new info[1024];
                            new string[128];

                            strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                            strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                            switch(VerslaiDB[i][VDB_Parduodamas])
                            {
                                case 0:
                                {
                                    strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                                }
                                case 1:
                                {
                                    strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                                }
                            }
                            strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                            new days,hours,mins,secs;
                            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                            {
                                secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                while(secs >= 60)
                                {
                                    secs-=60;
                                    mins+=1;
                                }
                                while(mins >= 60)
                                {
                                    mins-=60;
                                    hours+=1;
                                }
                                while(hours >= 24)
                                {
                                    hours-=24;
                                    days+=1;
                                }
                            }
                            format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                            strcat(info, string);
                            strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");


                            format(string, sizeof(string), "» Pradëjote pardavinëti verslà uþ %s€.", AddPoints(val));
                            SendClientMessage(playerid, 0x33AA33FF, string);
                            ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                        }
                    }
                    else
                    {
                        new caption[90];
                        format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                        new info[1024];
                        new string[128];

                        strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                        strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                        switch(VerslaiDB[i][VDB_Parduodamas])
                        {
                            case 0:
                            {
                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                            }
                            case 1:
                            {
                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                            }
                        }
                        strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                        new days,hours,mins,secs;
                        if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                        {
                            secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                            while(secs >= 60)
                            {
                                secs-=60;
                                mins+=1;
                            }
                            while(mins >= 60)
                            {
                                mins-=60;
                                hours+=1;
                            }
                            while(hours >= 24)
                            {
                                hours-=24;
                                days+=1;
                            }
                        }
                        format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                        strcat(info, string);
                        strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                    }
                    break;
                }
            }
        }
    }
    if(dialogid == 294)
    {
        if(response)
        {
            if(PlayerDB[playerid][SelectedVerslasID] > -1)
            {
                new vid = PlayerDB[playerid][SelectedVerslasID];
                if(VerslaiDB[vid][VDB_Nupirktas] == 1)
                {
                    if(VerslaiDB[vid][VDB_Parduodamas] == 1)
                    {
                        if(PlayerDB[playerid][FirstBusinessSlot] == -1 || (PlayerDB[playerid][SecondBusinessSlotBought] == 1 && PlayerDB[playerid][SecondBusinessSlot] == -1))
                        {
                            if(PlayerDB[playerid][MoneyInPocket] >= VerslaiDB[vid][VDB_PardavimoKaina])
                            {
                                if(PlayerDB[playerid][FirstBusinessSlot] == -1)
                                {
                                    PlayerDB[playerid][FirstBusinessSlot] = VerslaiDB[vid][VDB_SQLID];
                                }
                                else
                                {
                                    PlayerDB[playerid][SecondBusinessSlot] = VerslaiDB[vid][VDB_SQLID];
                                }
                                VerslaiDB[vid][VDB_Parduodamas] = 0;
                                PlayerDB[playerid][MoneyInPocket] -= VerslaiDB[vid][VDB_PardavimoKaina];
                                new bool:WasOnline = false;
                                for(new i = 0;i<=GetPlayerPoolSize();i++)
                                {
                                    if(IsPlayerConnected(i))
                                    {
                                        if(PlayerDB[i][Loaded] == 1 && PlayerDB[i][SQLID] == VerslaiDB[vid][VDB_SavininkoSQLID])
                                        {
                                            WasOnline = true;
                                            PlayerDB[i][MoneyInPocket] += VerslaiDB[vid][VDB_PardavimoKaina];
                                            if(PlayerDB[i][FirstBusinessSlot] == VerslaiDB[vid][VDB_SQLID])
                                            {
                                                PlayerDB[i][FirstBusinessSlot] = -1;
                                            }
                                            else
                                            {
                                                PlayerDB[i][SecondBusinessSlot] = -1;
                                            }
                                            new string[128];
                                            format(string,sizeof(string),"» Þaidëjas %s nupirko jûsø verslà uþ %s€.",Vardas(playerid),AddPoints(VerslaiDB[vid][VDB_PardavimoKaina]));
                                            SendClientMessage(i, 0x33AA33FF, string);
                                            break;
                                        }
                                    }
                                }
                                if(WasOnline == false)
                                {
                                    new QueryString[128];
                                    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket`+%d) WHERE `id` = '%i';", VerslaiDB[vid][VDB_PardavimoKaina],VerslaiDB[vid][VDB_SavininkoSQLID]);
                                    mysql_function_query(connectionHandle, QueryString, false, "SendQuery","");

                                    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `FirstBusinessSlot` = '-1' WHERE `FirstBusinessSlot` = '%i' AND `id` = '%i';", VerslaiDB[vid][VDB_SQLID],VerslaiDB[vid][VDB_SavininkoSQLID]);
                                    mysql_function_query(connectionHandle, QueryString, false, "SendQuery","");

                                    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `SecondBusinessSlot` = '-1' WHERE `SecondBusinessSlot` = '%i' AND `id` = '%i';", VerslaiDB[vid][VDB_SQLID],VerslaiDB[vid][VDB_SavininkoSQLID]);
                                    mysql_function_query(connectionHandle, QueryString, false, "SendQuery","");
                                }

                                VerslaiDB[vid][VDB_SavininkoSQLID] = PlayerDB[playerid][SQLID];
                                format(VerslaiDB[vid][VDB_SavininkoVardas], 24, "%s",Vardas(playerid));
                                DestroyDynamic3DTextLabel(VerslaiDB[vid][VDB_Label]);
                                DestroyDynamicPickup(VerslaiDB[vid][VDB_Pickup]);

                                new string[128];

                                format(string, sizeof(string), "» Nusipirkote verslà pavadinimu {FFFFFF}„%s“ {96A677}uþ {FFFFFF}%s€", VerslaiDB[vid][VDB_Pavadinimas],AddPoints(VerslaiDB[vid][VDB_PardavimoKaina]));
                                SendClientMessage(playerid, 0x96A677FF, string);

                                new LabelText[420];
                                format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[vid][VDB_Pavadinimas],VerslaiDB[vid][VDB_SavininkoVardas],AddPoints(VerslaiDB[vid][VDB_Kaina]),VerslaiDB[vid][VDB_Pajamos],VerslaiDB[vid][VDB_Lygis]);
                                VerslaiDB[vid][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[vid][VDB_X],VerslaiDB[vid][VDB_Y],VerslaiDB[vid][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[vid][VDB_WorldID], VerslaiDB[vid][VDB_InteriorID]);
                                VerslaiDB[vid][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[vid][VDB_X],VerslaiDB[vid][VDB_Y],VerslaiDB[vid][VDB_Z], VerslaiDB[vid][VDB_WorldID], VerslaiDB[vid][VDB_InteriorID]);
                            }
                            else
                            {
                                SendClientMessage(playerid, 0x96A677FF, "• {FFFFFF}Jums neuþtenka pinigø ðio verslo ásigyjimui.");
                            }
                        }
                        else
                        {
                            if(PlayerDB[playerid][SecondBusinessSlotBought] == 0)
                            {
                                ErrorMsg(playerid,"• Jûs jau turite vienà verslà, taèiau galite ásigyti antro verslo sloto paslaugà,leidþianèià pirkti antrà verslà.");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûs jau turite du verslus, todël negalite pirkti dar vieno.");
                            }
                        }
                    }
                }
            }
        }
    }
    if(dialogid == 295)
    {
        new V_SQLID = GetPlayerVirtualWorld(playerid)-9;
        for(new i = 0;i<=VerslaiPoolSize;i++)
        {
            if(V_SQLID == VerslaiDB[i][VDB_SQLID])
            {
                if(VerslaiDB[i][VDB_SavininkoSQLID] == PlayerDB[playerid][SQLID])
                {
                    if(response)
                    {
                        switch(VerslaiDB[i][VDB_Lygis])
                        {
                            case 0..3:
                            {
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round))
                                {
                                    if(random(2) == 1)
                                    {
                                        SendClientMessage(playerid,0x33AA33FF,"» Sëkmingai pakëlëte verslo lygá, pakëlus lygá verslo pelnas bus gaunamas daþniau.");
                                        VerslaiDB[i][VDB_Lygis]+=1;
                                        VerslaiDB[i][VDB_RinkosKaina] += floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);
                                        PlayerDB[playerid][MoneyInPocket]-=floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);

                                        DestroyDynamic3DTextLabel(VerslaiDB[i][VDB_Label]);
                                        DestroyDynamicPickup(VerslaiDB[i][VDB_Pickup]);


                                        if(VerslaiDB[i][VDB_Parduodamas] == 0)
                                        {
                                            new LabelText[420];
                                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_Kaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis]);
                                            VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                            VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        }
                                        else
                                        {
                                            new LabelText[800];
                                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s\n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5\n{FFFFFF}Verslo savininko norima suma uþ verslà: {96A677}",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_RinkosKaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis]);
                                            strcat(LabelText, AddPoints(VerslaiDB[i][VDB_PardavimoKaina]));
                                            strcat(LabelText, "€\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.");
                                            VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                            VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19523 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        }

                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, 0xFF0000FF, "» Lygio këlimas buvo nesekmingas, pinigai sunaudoti lygio kelimui prarasti.");
                                        PlayerDB[playerid][MoneyInPocket]-=floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jums nepakanka pinigø verslo lygio këlimui.");
                                }
                            }
                            case 4:
                            {
                                if(PlayerDB[playerid][MoneyInPocket] >= floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round))
                                {
                                    if(random(2) == 1)
                                    {
                                        SendClientMessage(playerid,0x33AA33FF,"» Sëkmingai pakëlëte verslo lygá, pakëlus lygá verslo pelnas bus gaunamas daþniau.");
                                        VerslaiDB[i][VDB_Lygis]+=1;
                                        VerslaiDB[i][VDB_RinkosKaina] += floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);
                                        PlayerDB[playerid][MoneyInPocket]-=floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);
                                        PlayerDB[playerid][Credits]-=100;

                                        DestroyDynamic3DTextLabel(VerslaiDB[i][VDB_Label]);
                                        DestroyDynamicPickup(VerslaiDB[i][VDB_Pickup]);


                                        if(VerslaiDB[i][VDB_Parduodamas] == 0)
                                        {
                                            new LabelText[420];
                                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_Kaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis]);
                                            VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                            VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        }
                                        else
                                        {
                                            new LabelText[800];
                                            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s\n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5\n{FFFFFF}Verslo savininko norima suma uþ verslà: {96A677}",VerslaiDB[i][VDB_Pavadinimas],VerslaiDB[i][VDB_SavininkoVardas],AddPoints(VerslaiDB[i][VDB_RinkosKaina]),VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_Lygis]);
                                            strcat(LabelText, AddPoints(VerslaiDB[i][VDB_PardavimoKaina]));
                                            strcat(LabelText, "€\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.");
                                            VerslaiDB[i][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                            VerslaiDB[i][VDB_Pickup] = CreateDynamicPickup(19523 , 2, VerslaiDB[i][VDB_X],VerslaiDB[i][VDB_Y],VerslaiDB[i][VDB_Z], VerslaiDB[i][VDB_WorldID], VerslaiDB[i][VDB_InteriorID]);
                                        }

                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, 0xFF0000FF, "» Lygio këlimas buvo nesekmingas, pinigai sunaudoti lygio kelimui prarasti.");
                                        PlayerDB[playerid][MoneyInPocket]-=floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round);
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Jums nepakanka pinigø verslo lygio këlimui.");
                                }
                            }
                        }
                        switch(VerslaiDB[i][VDB_Lygis])
                        {
                            case 0:
                            {
                                new info[700];
                                new string[80];
                                format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}0/5{FFFFFF}, pelno gavimas yra kas {96A677}2 val 30min\n");
                                strcat(info,"{FFFFFF}Norint pakelti verslo lygá á pirmàjá Jums reikës:\n");
                                strcat(info, string);
                                strcat(info, "\n");
                                strcat(info,"{FFFFFF}Pakëlus verslo lygá á pirmàjá:\n");

                                strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 2 val.\n");
                                strcat(info,"       \n");
                                strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                            }
                            case 1:
                            {
                                new info[700];
                                new string[80];
                                format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}1/5{FFFFFF}, pelno gavimas yra kas {96A677}2 val\n");
                                strcat(info,"{FFFFFF}Norint pakelti verslo lygá á antrà Jums reikës:\n");
                                strcat(info, string);
                                strcat(info, "\n");
                                strcat(info,"{FFFFFF}Pakëlus verslo lygá á antràjá:\n");

                                strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 1 val 30min.\n");
                                strcat(info,"       \n");
                                strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                            }
                            case 2:
                            {
                                new info[700];
                                new string[80];
                                format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}2/5{FFFFFF}, pelno gavimas yra kas {96A677}1 val 30min\n");
                                strcat(info,"{FFFFFF}Norint pakelti verslo lygá á treèià Jums reikës:\n");
                                strcat(info, string);
                                strcat(info, "\n");
                                strcat(info,"{FFFFFF}Pakëlus verslo lygá á treèiàjá:\n");

                                strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 1 val.\n");
                                strcat(info,"       \n");
                                strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                            }
                            case 3:
                            {
                                new info[700];
                                new string[80];
                                format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}3/5{FFFFFF}, pelno gavimas yra kas {96A677}1 val\n");
                                strcat(info,"{FFFFFF}Norint pakelti verslo lygá á ketvirtà Jums reikës:\n");
                                strcat(info, string);
                                strcat(info, "\n");
                                strcat(info,"{FFFFFF}Pakëlus verslo lygá á ketvirtàjá:\n");

                                strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 30 min.\n");
                                strcat(info,"       \n");
                                strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                            }
                            case 4:
                            {
                                new info[700];
                                new string[120];
                                format(string, sizeof(string), "\t{FFFFFF}Turëti {96A677}%s€{FFFFFF} savo kiðenëje.\n\t{FFFFFF}Turëti {96A677}100{FFFFFF} kreditø\n",AddPoints(floatround(VerslaiDB[i][VDB_RinkosKaina] * 0.25,floatround_round)));
                                strcat(info,"{FFFFFF}Jûsø esamo verslo lygis: {96A677}4/5{FFFFFF}, pelno gavimas yra kas {96A677}30 min\n");
                                strcat(info,"{FFFFFF}Norint pakelti verslo lygá á penktà Jums reikës:\n");
                                strcat(info, string);
                                strcat(info, "\n");
                                strcat(info,"{FFFFFF}Pakëlus verslo lygá á penktàjá:\n");

                                strcat(info,"\t1. {96A677}Pelnas bus gaunamas kas 15 min.\n");
                                strcat(info,"       \n");
                                strcat(info,"{FFFFFF}Lygio pakëlimo tikimybë yra {96A677}50 procentø{FFFFFF}, nesëkmingai pakëlus savo verslo lygá, prarasite paaukotus verslo pinigus.\n");
                                strcat(info,"{96A677}+ Sëkmingai pakëlus verslo lygá á aukðtesná, gausite pelnà daþniau.\n\n");
                                strcat(info,"{FFFFFF}Norëdami pakelti verslo lygá paspauskite mygtukà {96A677}'Kelti'{FFFFFF}, nepavykus pakelti, verslo pelno gavimo daþnis liks toks pat.");
                                ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "{AFAFAF}Verslo lygio kelimas", info, "Kelti", "Atgal");
                            }
                            case 5:
                            {
                                ErrorMsg(playerid,"• Pasiektas maksimalus verslo lygis.");
                                new caption[90];
                                format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                                new info[1024];
                                new string[128];

                                strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                                strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                                switch(VerslaiDB[i][VDB_Parduodamas])
                                {
                                    case 0:
                                    {
                                        strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                                    }
                                    case 1:
                                    {
                                        strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                                    }
                                }
                                strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                                new days,hours,mins,secs;
                                if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                                {
                                    secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                                    while(secs >= 60)
                                    {
                                        secs-=60;
                                        mins+=1;
                                    }
                                    while(mins >= 60)
                                    {
                                        mins-=60;
                                        hours+=1;
                                    }
                                    while(hours >= 24)
                                    {
                                        hours-=24;
                                        days+=1;
                                    }
                                }
                                format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                                strcat(info, string);
                                strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                                ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                            }
                        }
                    }
                    else
                    {
                        new caption[90];
                        format(caption, 90, "{FFFFFF}Verslo {96A677}%s {FFFFFF}valdymas", VerslaiDB[i][VDB_Pavadinimas]);
                        new info[1024];
                        new string[128];

                        strcat(info, "{96A677}• {FFFFFF}Verslo informacija\n");

                        strcat(info,"{96A677}• {FFFFFF}Verslo pelnas\n");
                        switch(VerslaiDB[i][VDB_Parduodamas])
                        {
                            case 0:
                            {
                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}ÁJUNGTI{FFFFFF}]\n");
                            }
                            case 1:
                            {
                                strcat(info, "{96A677}• {FFFFFF}Verslo pardavinëjimas þaidëjams [{96A677}IÐJUNGTI{FFFFFF}]\n");
                            }
                        }
                        strcat(info,"{96A677}• {FFFFFF}Lygio këlimas\n          \n");
                        new days,hours,mins,secs;
                        if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
                        {
                            secs = VerslaiDB[i][VDB_StopsGivingIncomeAt]-gettime();
                            while(secs >= 60)
                            {
                                secs-=60;
                                mins+=1;
                            }
                            while(mins >= 60)
                            {
                                mins-=60;
                                hours+=1;
                            }
                            while(hours >= 24)
                            {
                                hours-=24;
                                days+=1;
                            }
                        }
                        format(string, sizeof(string), "{96A677}INFORMACIJA: {FFFFFF}Pelnas gaunamas dar bus {96A677}%dd %dval %dmin %dsec\n",days,hours,mins,secs);
                        strcat(info, string);
                        strcat(info,"{96A677}INFORMACIJA: {FFFFFF}Neprisijungus menësá á serverá, jûsø {96A677}VERSLAS DINGS {FFFFFF}ir taps parduodamas serveriui.");

                        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, caption, info, "Rinktis", "Atðaukti");
                    }
                }
                break;
            }
        }
    }
    if(dialogid == 296)
    {
        if(response)
        {
            if(PlayerDB[playerid][MoneyInPocket]>= 250000)
            {
                PlayerDB[playerid][VerslininkoLicenzija] = 1;
                PlayerDB[playerid][MoneyInPocket]-=250000;
                SendClientMessage(playerid, 0xFF0000FF, "•{FFFFFF} Sëkmingai ásigyjote verslininko licenzijà,dabar galite ásigyti verslà.");

            }
            else
            {
                ErrorMsg(playerid,"• Jums nepakanka pinigø licenzijos ásigyjimui. Licenzijos kaina yra 250.000€.");
            }
        }
    }
    if(dialogid == 297)
    {
        if(response)
        {
            if(PlayerDB[playerid][MutedPlayer] > 0)
            {
                if(PlayerDB[playerid][Credits] == 0)
                {
                    ErrorMsg(playerid,"• Norint naudotis ðia paslauga pirmiausia turite turëti kreditø.");
                }
                else
                {
                    new NusiemimoKaina = floatround(PlayerDB[playerid][MutedPlayer] / 60,floatround_ceil);
                    if(NusiemimoKaina <= PlayerDB[playerid][Credits])
                    {
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Nutildymo laiko paðalinimas“.");
                        PlayerDB[playerid][MutedPlayer] = 0;
                        if(IsValidDynamic3DTextLabel(PlayerDB[playerid][PlayerMuteLabel]))
                        {
                            DestroyDynamic3DTextLabel(PlayerDB[playerid][PlayerMuteLabel]);
                        }
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Sëkmingai buvo paðalintas visas nutildymo laikas.");
                    }
                    else
                    {
                        NusiemimoKaina = PlayerDB[playerid][Credits];
                        PlayerDB[playerid][Credits]-=NusiemimoKaina;
                        PlayerDB[playerid][MutedPlayer]-=NusiemimoKaina * 60;
                        new string[128];
                        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Nutildymo laiko paðalinimas“.");
                        format(string, 128, "•{FFFFFF} Jûs sëkmingai sumaþinote savo nutildymo laikà %d minutëmis.", NusiemimoKaina);
                        SendClientMessage(playerid, 0x00BA12FF, string);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs nesate uþtildytas.");
            }
        }
        ShowPlayerCreditsMeniu(playerid);
    }
    if(dialogid == 298)
    {
   	    new str[1024];
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
                    strcat(str, "{62A5C4}• {FFFFFF}Iðrinkite maðinà:\n");
                    strcat(str, " \n");
                    strcat(str, "\t{43c92e}• {FFFFFF}Regina\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Rancher\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Esperanto\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Virgo\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Remington\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Feltzer\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Savanna\n");
					strcat(str, " \n");
					strcat(str, "{62A5C4}[!] {FFFFFF}Pakrovimo ir iðkrovimo kaina priklauso nuo maðinos\n");
					ShowPlayerDialog(playerid, 299, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", str, "Pasirinkti", "Atgal");
                }
                case 3:
                {
                    /*strcat(str, "{62A5C4}• {FFFFFF}Iðrinkite maðinà:\n");
                    strcat(str, "\t{43c92e}• {FFFFFF}Sunrise\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Solair\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Premier\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Sratum\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Cadrona\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Flash\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Mesa\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Landstalker\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Elegant\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Blista Compact\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Moonbeam\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Majestic\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Admiral\n");*/
					strcat(str, "{62A5C4}• {FFFFFF} Wang Cars tr. priemonës:\n");
				    strcat(str, " \n");
					strcat(str, "\t{43c92e}• {FFFFFF}Uranus\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Euros\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Alpha\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Zr-350\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Elegy\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Jester\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Sultan\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Super-GT\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Comet\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Club\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Sentinel\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Buffalo\n");
					strcat(str, " \n");
					strcat(str, "{62A5C4}[!] {FFFFFF}Pakrovimo ir iðkrovimo kaina priklauso nuo maðinos\n");
					ShowPlayerDialog(playerid, 300, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", str, "Pasirinkti", "Atgal");
                }
                case 4:
                {
                    strcat(str, "{62A5C4}• {FFFFFF} Iðrinkite maðinà:\n");
                    strcat(str, " \n");
					strcat(str, "\t{43c92e}• {FFFFFF}Huntley\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Banshee\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Washington\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Cheetah\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Phoenix\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Bullet\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Turismo\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Infernus\n");
					strcat(str, " \n");
					strcat(str, "{62A5C4}[!] {FFFFFF}Pakrovimo ir iðkrovimo kaina priklauso nuo maðinos\n");
					ShowPlayerDialog(playerid, 301, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", str, "Pasirinkti", "Atgal");
                }
                case 5:
                {
                    strcat(str, "{62A5C4}• {FFFFFF} Iðrinkite motociklà:\n");
                    strcat(str, " \n");
					strcat(str, "\t{43c92e}• {FFFFFF}Faggio\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Quad\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Wayfarer\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Freeway\n");
					strcat(str, "\t{43c92e}• {FFFFFF}NRG-500\n");
					strcat(str, "\t{43c92e}• {FFFFFF}FCR-900\n");
					strcat(str, "\t{43c92e}• {FFFFFF}Sanchez\n");
					strcat(str, " \n");
					strcat(str, "{62A5C4}[!] {FFFFFF}Pakrovimo ir iðkrovimo kaina priklauso nuo maðinos\n");
					ShowPlayerDialog(playerid, 302, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", str, "Pasirinkti", "Atgal");
                }
                default:
                {
                cmd_pakrautitr(playerid,"");
				}
            }
		}
    }
    if(dialogid == 299)
    {
    	new VehicleID = GetPlayerVehicleID(playerid);
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 500) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}500€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Regina“...");
					VehicleDB[VehicleID][PakrautaMasina] = 479;
				}
				case 3:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 590) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}590€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Rancher“...");
					VehicleDB[VehicleID][PakrautaMasina] = 489;
				}
				case 4:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 650) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}650€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Esperanto“...");
					VehicleDB[VehicleID][PakrautaMasina] = 419;
				}
				case 5:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 680) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}680€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Virgo“...");
					VehicleDB[VehicleID][PakrautaMasina] = 491;
				}
				case 6:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 700) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}700€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Remington“...");
					VehicleDB[VehicleID][PakrautaMasina] = 534;
				}
				case 7:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 720) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}720€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Feltzer“...");
					VehicleDB[VehicleID][PakrautaMasina] = 533;
				}
				case 8:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 750) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}750€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Savanna“...");
					VehicleDB[VehicleID][PakrautaMasina] = 567;
				}
 			}
		}
		else
		{
	  		new strf[256];
	  		new str[125];
		    format(str, sizeof(str), "{62A5C4}• {FFFFFF}Pasirinkite tr. priemoniø rûðá\n",vNames[VehicleBySlotInfo[playerid][0][ModelBySlot] - 400]);
			strcat(strf, str);
			format(str, sizeof(str), " \n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Pigios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Vidutinës klasës maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Prabangios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Motociklai\n"); strcat(strf, str);

			ShowPlayerDialog(playerid, 298, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", strf, "Pasirinkti", "Uþdaryti");
		}
	}
	if(dialogid == 300)
    {
    	new VehicleID = GetPlayerVehicleID(playerid);
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 800) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}800€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Uranus“...");
					VehicleDB[VehicleID][PakrautaMasina] = 558;
				}
				case 3:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 830) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}830€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Euros“...");
					VehicleDB[VehicleID][PakrautaMasina] = 587;
				}
				case 4:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 860) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}860€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Alpha“...");
					VehicleDB[VehicleID][PakrautaMasina] = 602;
				}
				case 5:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 900) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}900€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „ZR-350“...");
					VehicleDB[VehicleID][PakrautaMasina] = 477;
				}
				case 6:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 920) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}920€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Elegy“...");
					VehicleDB[VehicleID][PakrautaMasina] = 562;
				}
				case 7:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 930) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}930€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Jester“...");
					VehicleDB[VehicleID][PakrautaMasina] = 559;
				}
				case 8:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 960) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}960€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Sultan“...");
					VehicleDB[VehicleID][PakrautaMasina] = 560;
				}
				case 9:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 990) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}990€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Super-GT“...");
					VehicleDB[VehicleID][PakrautaMasina] = 506;
				}
				case 10:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1000) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1000€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Comet“...");
					VehicleDB[VehicleID][PakrautaMasina] = 480;
				}
				case 11:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1050) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1050€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Club“...");
					VehicleDB[VehicleID][PakrautaMasina] = 589;
				}
				case 12:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1100) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1100€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Sentinel“...");
					VehicleDB[VehicleID][PakrautaMasina] = 405;
				}
				case 13:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1150) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1150€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Buffalo“...");
					VehicleDB[VehicleID][PakrautaMasina] = 402;
				}
 			}
		}
		else
		{
	  		new strf[256];
	  		new str[125];
		    format(str, sizeof(str), "{62A5C4}• {FFFFFF}Pasirinkite tr. priemoniø rûðá\n",vNames[VehicleBySlotInfo[playerid][0][ModelBySlot] - 400]);
			strcat(strf, str);
			format(str, sizeof(str), " \n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Pigios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Vidutinës klasës maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Prabangios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Motociklai\n"); strcat(strf, str);

			ShowPlayerDialog(playerid, 298, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", strf, "Pasirinkti", "Uþdaryti");
		}
	}
    if(dialogid == 301)
    {
    	new VehicleID = GetPlayerVehicleID(playerid);
        if(response)
        {
            switch(listitem)
            {
                case 2:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1200) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1200€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Huntley“...");
					VehicleDB[VehicleID][PakrautaMasina] = 579;
				}
				case 3:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1300) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1300€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Banshee“...");
					VehicleDB[VehicleID][PakrautaMasina] = 429;
				}
				case 4:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1400) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1400€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Washington“...");
					VehicleDB[VehicleID][PakrautaMasina] = 421;
				}
				case 5:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1500) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1500€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Cheetah“...");
					VehicleDB[VehicleID][PakrautaMasina] = 415;
				}
				case 6:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1600) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1600€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Phoenix“...");
					VehicleDB[VehicleID][PakrautaMasina] = 603;
				}
				case 7:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1700) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1700€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Bullet“...");
					VehicleDB[VehicleID][PakrautaMasina] = 541;
				}
				case 8:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 1800) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}1800€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Turismo“...");
					VehicleDB[VehicleID][PakrautaMasina] = 451;
				}
				case 9:
                {
               	 	if(PlayerDB[playerid][MoneyInPocket] < 2000) return ErrorMsg(playerid, "• Nepakanka pinigø uþsakymui, reikia {DB881A}2000€");
                	PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
               		PlayerDB[playerid][KraunuTr] = true;
					SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis maðinà „Infernus“...");
					VehicleDB[VehicleID][PakrautaMasina] = 411;
				}
 			}
		}
		else
		{
	  		new strf[256];
	  		new str[125];
		    format(str, sizeof(str), "{62A5C4}• {FFFFFF}Pasirinkite tr. priemoniø rûðá\n",vNames[VehicleBySlotInfo[playerid][0][ModelBySlot] - 400]);
			strcat(strf, str);
			format(str, sizeof(str), " \n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Pigios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Vidutinës klasës maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Prabangios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Motociklai\n"); strcat(strf, str);

			ShowPlayerDialog(playerid, 298, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", strf, "Pasirinkti", "Uþdaryti");
		}
	}
 	if(dialogid == 303)
    {
    	if( response )
		{
			new kod[128];
			if( sscanf(inputtext, "s[128]", kod)) {
				showKuponas(playerid);
				ErrorMsg(playerid,"• Blogai ávestas kodas!");
			}
			else if( strlen(kod) < 4) {
				showKuponas(playerid);
				ErrorMsg(playerid,"• Blogai ávestas kodas!");
			}
			else {
				checkKodas(playerid, kod);
			}
		}
		return 1;
	}
	if(dialogid == 304)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] > 0)
            {
            	new JobIDToWorkWith;
				JobIDToWorkWith = PlayerDB[playerid][Direktorius];
    			SetPVarInt(playerid, "RedaguojaDarboLaika", listitem+1);

				new info[300];
    			switch(listitem+1)
    			{
    				case 3:
    				{
    					format(info, 300, "{FFFFFF}Pirmadienio nustatymas:\nDabartinis pirmadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Pirmadienis]);
    				}
    				case 4:
    				{
    					format(info, 300, "{FFFFFF}Antradienio nustatymas:\nDabartinis antradienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Antradienis]);
    				}
    				case 5:
    				{
    					format(info, 300, "{FFFFFF}Treciadienio nustatymas:\nDabartinis treciadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Treciadienis]);
    				}
    				case 6:
    				{
    					format(info, 300, "{FFFFFF}Ketvirtadienio nustatymas:\nDabartinis ketvirtadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Ketvirtadienis]);
    				}
    				case 7:
    				{
    					format(info, 300, "{FFFFFF}Penktadienio nustatymas:\nDabartinis penktadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Penktadienis]);
    				}
    				case 8:
    				{
    					format(info, 300, "{FFFFFF}Ðeðtadienio nustatymas:\nDabartinis ðeðtadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Sestadienis]);
    				}
    				case 9:
    				{
    					format(info, 300, "{FFFFFF}Sekmadienio nustatymas:\nDabartinis sekmadienio darbo laiko grafikas: {89a0bf}„%s“\n{dd4949}Uþ netinkamai nustatyta darbo laikà bûsite baudþiami\n\n{FFFFFF} Darbo grafiko keitimui áraðykite naujà á laukelá:", DarboInformacija[JobIDToWorkWith][Sekmadienis]);
    				}
    			}
    			ShowPlayerDialog(playerid, 305, DIALOG_STYLE_INPUT, "{fff600}Darbo grafiko nustatymas", info, "Keisti", "Atgal");
            }
		}
	}
	if(dialogid == 305)
	{
		if(PlayerDB[playerid][Direktorius] > 0)
        {
            new JobIDToWorkWith;
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
            if(!response)
            {
                cmd_vdarbografika(playerid,"");
            }
            else
            {
                if(!(isnull(inputdialogtext) || strlen(inputdialogtext) <= 3) )
                {
                    new query[144];
                    new string[100];
                    switch(GetPVarInt(playerid, "RedaguojaDarboLaika"))
                    {
                        case 3:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Pirmadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Pirmadienis], 100, "%s", inputdialogtext);
							SendClientMessage(playerid, ZALIA, "• Nustatëte naujà pirmadienio darbo laikà.");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Pirmadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 4:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Antradienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Antradienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà antradienio darbo laikà.");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Antradienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 5:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Treciadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Treciadienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà treèiadienio darbo laikà.");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Treciadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 6:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Ketvirtadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Ketvirtadienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà ketvirtadienio darbo laikà.");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Ketvirtadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 7:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Penktadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Penktadienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà penktadienio darbo laikà");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Penktadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 8:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Sestadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Sestadienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà ðeðtadienio darbo laikà");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Sestadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                        case 9:
                        {
                            mysql_format(connectionHandle, query, 144, "UPDATE `darbuinformacija` SET `Sekmadienis` = '%e' WHERE `DarboID` = '%i' LIMIT 1;", inputdialogtext,JobIDToWorkWith);
                            mysql_function_query(connectionHandle,query,false,"SendQuery","");
                            format(DarboInformacija[JobIDToWorkWith][Sekmadienis], 100, "%s", inputdialogtext);
                            SendClientMessage(playerid, ZALIA, "• Nustatëte naujà sekmadienio darbo laikà");
							format(string, sizeof(string), "• Á duomenø bazæ áraðyta: {08ff00}%s", DarboInformacija[JobIDToWorkWith][Sekmadienis]);
       						SendClientMessage(playerid, ZALIA, string);
                        }
                    }
                }
                cmd_vdarbografika(playerid,"");
            }
        }
	}
	if(dialogid == 306)
	{
		if(response)
		{
			new Float:Cords[3];//Vietos
	  		new MarsrutasPav[50];
			switch(listitem)
		    {
		        case 2:
		        {
		            Cords[0] = -2742.4810;
                    Cords[1] = 382.9341;
                    Cords[2] = 4.3675;
                    format(MarsrutasPav, 50, "Budëjimo vietos prie iRoad.LT banko");
                    
                    new message[128],Float:Atstumas;
			   		Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
			     	SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
			      	SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
			       	format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,(Atstumas / 1000));
			       	SendClientMessage(playerid, 0xAD5BFFFF, message);
				}
				case 3:
				{
					Cords[0] = -1989.67740;
                    Cords[1] = 146.3174;
                    Cords[2] = 27.8053;
                    format(MarsrutasPav, 50, "Budëjimo vietos traukiniø stoty");
                    
                    new message[128],Float:Atstumas;
			   		Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
			     	SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
			      	SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
			       	format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,(Atstumas / 1000));
			       	SendClientMessage(playerid, 0xAD5BFFFF, message);
				}
				case 4:
				{
					Cords[0] = -1604.6000;
                    Cords[1] = 721.2443;
                    Cords[2] = 11.8072;
                    format(MarsrutasPav, 50, "Budëjimo vietos prie policijos departamento");
                    
                    new message[128],Float:Atstumas;
			   		Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
			     	SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
			      	SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
			       	format(message,128,"• {FFFFFF}Pasirinktas marðrutas: {AD5BFF}%s {FFFFFF}kuris yra uþ {AD5BFF}%0.2f KM.", MarsrutasPav,(Atstumas / 1000));
			       	SendClientMessage(playerid, 0xAD5BFFFF, message);
				}
				case 6:
				{
					SendClientMessage(playerid, 0xAD5BFFFF, "• {FFFFFF}Nutraukëte vietos rodymà sistemoje.");
           			RemovePlayerMapIcon(playerid, 97);//Targeto ICON
              		DisablePlayerCheckpoint(playerid);
				}
				default:
				{
        			cmd_kurbudeti(playerid,"");
				}
     		}
       	}
	}
	if(dialogid == 307)
	{
		if(response)
		{
		    new PlayerVW = GetPlayerVirtualWorld(playerid);
			new years,month,days;
		    getdate(years, month, days);
		    new Valandos,Minutes;
		    gettime(Valandos, Minutes);
		    switch(listitem)
		    {
		        case 1:
		        {
			        new info[1024];
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Vyriausybë skaièiuoja {26e4b2}mokesèius{FFFFFF} mokesèius uþ ájungtà ðviesà: {26e4b2}0.02 €/sec.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Skaièiuojama net kai jûsø nëra{62A5C4} þaidime.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Apmokëti galite{62A5C4} NTA{FFFFFF} kurià rasite per {62A5C4}/gps.\n");
	       			ShowPlayerDialog(playerid, 308, DIALOG_STYLE_MSGBOX, "{AFAFAF}Informacija", info, "Uþdaryti", "Atgal");
		        }
		        case 2:
		        {
			        new info[1024];
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Ðiukðliadëþë pasipildo {26e4b2}keliais procentais{FFFFFF} kaskart suvalgant/suvartojant {62A5C4}vienà vienetà maisto/vaistà.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Kai ðiukðliadëþë maksimaliai uþpildyta (100 proc.), valgyti/vartoti medikametus negalite, nes nëra kur iðmesti ðiukðliø.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Iðmesti ðiukðles galite á arèiausià kontainerá, prie kurio paraðyti uþpyldymo procentai.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Uþ iðmesta maiðà gausite atsitiktiná {26e4b2}atlyginimà.\n");
	       			ShowPlayerDialog(playerid, 308, DIALOG_STYLE_MSGBOX, "{AFAFAF}Informacija", info, "Uþdaryti", "Atgal");
		        }
		        case 3:
		        {
			        new info[1024];
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Medikamentai reikalingi {FFFF00}pasigydyti.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Sunaudojus viena vienetà medikamentø, gausite {62A5C4}150 gyvybiø.\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Medikamentus galite pirkti pas medikus arba kai jø nëra - {62A5C4}vaistinëje, kurià rasite paraðæ - /gps (brangiau).\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Pirkæs turite atveþti namo ir iskrauti su komandà - {62A5C4}/pmedikamentus\n");
				    strcat(info, "{B2FF00}[INFO] {FFFFFF}Daugiausiai namie galima laikyti {62A5C4}10{FFFFFF} vienetø medikamentø.\n");
	       			ShowPlayerDialog(playerid, 308, DIALOG_STYLE_MSGBOX, "{AFAFAF}Informacija", info, "Uþdaryti", "Atgal");
		        }
		        case 6:
		        {
		            if(HouseInfo[PlayerVW-3][HouseDoorsLocked] == 1)
		            {
		            	cmd_atrakintiduris(playerid,"");
		            }
		            else
					{
					    cmd_uzrakintiduris(playerid,"");
					}cmd_bustovaldymas(playerid,"");
					
		        }
		        case 7:
				{
					if(HouseInfo[PlayerVW-3][Siuksles] >= 100) return ErrorMsg(playerid, "• Negalite suvartoti medikamentø, pirmiausia iðmeskite ðiukðles.");
					if(PlayerDB[playerid][PlayerHealthAC] == 150) return ErrorMsg(playerid, "• Jûs esate sveikas.");

					if(HouseInfo[PlayerVW-3][VaistaiNamie] > 0)
				    {
				    	SetPlayerHealthEx(playerid, 150);
				    	SendClientMessage(playerid, ZALIA, "• {FFFFFF}Sëkmingai pasigydëte. Gavote 150 gyvybiø.");
				    	HouseInfo[PlayerVW-3][VaistaiNamie] -=1;
				    	HouseInfo[PlayerVW-3][Siuksles] +=25;
				    }
				    else
					{
						ErrorMsg(playerid, "• Namie nepakankamai medikamentø. Nusipikite juos pas medikus arba vaistinëje ir iðkraukite su komandà - /pmedikamentus.");
					}
					cmd_bustovaldymas(playerid,"");
				}
				case 8:
				{
				    /*new strf[256];
					new str[125];
					new PlayerVW = GetPlayerVirtualWorld(playerid);
	    			switch(listitem)
			    	{
        				case 0:
			        	{
		         			format(str, sizeof(str), "{FFFFFF}Dabar namo raktà turi þaidëjas{62A5C4} %s\n", HouseInfo[PlayerVW-3][NamoRaktas]);
							strcat(strf, str);
							format(str, sizeof(str), " \n"); strcat(strf, str);
							format(str, sizeof(str), "{43c92e}• {FFFFFF}Duoti raktà þaidëjui.\n"); strcat(strf, str);
							format(str, sizeof(str), "{43c92e}• {FFFFFF}Atimti raktà ið þaidëjo.\n"); strcat(strf, str);
							ShowPlayerDialog(playerid, 310, DIALOG_STYLE_LIST, "{AFAFAF}Rakto valdymas", strf, "Pasirinkti","Uþdaryti");
			     		}
			       	}*/
			       	if(PlayerDB[playerid][TuriuMaisa] == true) return ErrorMsg(playerid, "• Pirmiausia iðmeskite dabar turimà maiðà.");
					if(HouseInfo[PlayerVW-3][Siuksles] < 50) return ErrorMsg(playerid, "• Ðiukðliadëþë per maþai ðiukðliø.");
					PlayerDB[playerid][TuriuMaisa] = true;
					SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99} Dabar iðmeskite maiðà á konteinerá prie kurio yra uþraðas - {FFFFFF}Spauskite {FF0000}„N“ {FFFFFF}mygtukà.");
					SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99} Namie ðiukðliø kiekis susimaþins kai iðmesite maiðà á kontainerá. Uþ tai gausite nedidelá atlyginimà.");
					SetPlayerAttachedObject(playerid, 0, 1265, 6, 0.297000, -0.193000, 0.000000, 21.300006, -110.099975, 65.000114);
			  	}
			  	case 9:
			  	{
			  		new strf[500];
					new str[125];
					if(HouseInfo[PlayerVW-3][NarkSlotState] == 1)
					{
						format(str, sizeof(str), "{FFFFFF}• {43c92e}Narkotikø {FFFFFF}slotas {B2FF00}[Atidarytas]{FFFFFF}.\n"); strcat(strf, str);
					}
					else
					{
						format(str, sizeof(str), "{FFFFFF}• {43c92e}Narkotikø {FFFFFF}slotas {FF0000}[Uþdarytas]{FFFFFF}.\n"); strcat(strf, str);
					}
					ShowPlayerDialog(playerid, 320, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas", strf, "Pasirinkti","Atgal");
			  	}
		        case 10:
		        {
		        	cmd_pinigainame(playerid,"");
		        }
		        case 11:
		        {
		        	cmd_parduotisnama(playerid,"");
		        }
		        case 12:
		        {
		        	ShowPlayerDialog(playerid, 319, DIALOG_STYLE_INPUT, "Bûsto pardavimas fiz. asmeniui", "Áveskite asmens vardà, kuriam norite parduoti savo bûstà: ", "Parduoti", "Atgal");
		        }
				case 13:
				{
					if(Valandos >= 21 && Minutes >=00)
					{
						if(HouseInfo[PlayerVW-3][SviesaIjungta] == 1)
	    				{
			            	TextDrawShowForPlayer(playerid, blackTD);
					    	SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99} Apðvietimas {FF0000}iðjungtas{33FF99}.");
					    	HouseInfo[PlayerVW-3][SviesaIjungta] = 0;
			            }
			            else
						{
						    TextDrawHideForPlayer(playerid, blackTD);
					    	SendClientMessage(playerid, 0x33FF99AA, "{33CC99}•{33FF99} Apðvietimas {33CC00}ájungtas{33FF99}.");
					    	HouseInfo[PlayerVW-3][SviesaIjungta] = 1;
						}
						cmd_bustovaldymas(playerid,"");
					}
					else
					{
					    ErrorMsg(playerid, "• iRoad.LT mieste taupoma elektoros energija, todël ðviesos ájungimas dienà negalimas.");
					}
				}
		        default:
		        {
					cmd_bustovaldymas(playerid,"");
		        }
			}
		}
	}
	if(dialogid == 308)
	{
		if(!response)
		{
			cmd_bustovaldymas(playerid,"");
		}
  	}
  	if(dialogid == 310)
  	{
  		new PlayerVW = GetPlayerVirtualWorld(playerid);
  	    if(response)
  	    {
  	        switch(listitem)
  	        {
  	            case 2:
  	            {
  	                ShowPlayerDialog(playerid, 313, DIALOG_STYLE_INPUT, "{AFAFAF}Rakto valdymas", "{43c92e}Á laukelá áveskite þaidëjo vardà, kuriam norite duoti pirmà bûsto raktà: ", "Duoti", "Uþrakinti");
               	}
               	case 3:
               	{
               			new QueryString[400];
               			//new PlayerVW = GetPlayerVirtualWorld(playerid);
		 				mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `PirmasRaktas` = 'Nera' WHERE `HouseID` = '%i';", HouseInfo[PlayerVW-3][HouseID]);
						mysql_function_query(connectionHandle,QueryString,false,"","");

						SendClientMessage(playerid, ZALIA, "{43c92e}• {FFFFFF}Sëkmingai atëmëte raktà ið þaidëjo.");
						format(HouseInfo[PlayerVW-3][NamoRaktas], 90, "Nera");
				}
				default:
				{
					new strf[256];
					new str[125];
					//new PlayerVW = GetPlayerVirtualWorld(playerid);
					format(str, sizeof(str), "{FFFFFF}Dabar pirmà raktà turi þaidëjas{62A5C4} %s\n", HouseInfo[PlayerVW-3][NamoRaktas]);
					strcat(strf, str);
					format(str, sizeof(str), " \n"); strcat(strf, str);
					format(str, sizeof(str), "{43c92e}• {FFFFFF}Duoti raktà þaidëjui.\n"); strcat(strf, str);
					format(str, sizeof(str), "{43c92e}• {FFFFFF}Atimti raktà ið þaidëjo.\n"); strcat(strf, str);
					ShowPlayerDialog(playerid, 310, DIALOG_STYLE_LIST, "{AFAFAF}Raktø valdymas", strf, "Pasirinkti","Uþdaryti");
				}
          	}
      	}
  	}
  	/*if(dialogid == 313)
  	{
  		new PlayerVW = GetPlayerVirtualWorld(playerid);
		if(response)
		{
		    if(IsValidNickName(inputdialogtext))
		    {
				new pirmasraktas;
                sscanf(inputdialogtext, "u", pirmasraktas);
			    if(IsPlayerConnected(pirmasraktas))
				{
		   				new QueryString[400];
		  				new string[128];
		 				mysql_format(connectionHandle, QueryString, 400, "UPDATE `houses` SET `PirmasRaktas` = '%e' WHERE `HouseID` = '%i';", inputdialogtext, HouseInfo[PlayerVW-3][HouseID]);
						mysql_function_query(connectionHandle,QueryString,false,"","");

						format(string, sizeof(string), "• {FFFFFF}Davëte savo bûsto raktà þaidëjui {33CC00}%s.", inputdialogtext);
						SendClientMessage(playerid, ZALIA, string);
						format(HouseInfo[PlayerVW-3][NamoRaktas], 90, inputdialogtext);
				}
				else
				{
				    ErrorMsg(playerid, "• Tokio þaidëjo nëra.");
				}
			}
			else
			{
			    ErrorMsg(playerid, "• Netaisyklingas formatas. Turi bûti: Vardas_Pavarde.");
			}
		}
 	}*/
	if(dialogid == 319)
	{
		new pirkejas, Cost;
		sscanf(inputdialogtext, "u", pirkejas);
		if(response)
		{
			if(IsValidNickName(inputdialogtext))
  			{
  				if(IsPlayerConnected(pirkejas))
  				{
  					if(pirkejas == playerid)
       				{
           				ErrorMsg(playerid,"• Savæs pasirinkti negalite.");
           				ShowPlayerDialog(playerid, 319, DIALOG_STYLE_INPUT, "Bûsto pardavimas fiz. asmeniui", "Áveskite asmens vardà, kuriam norite parduoti savo bûstà: ", "Parduoti", "Atðaukti");
               		}
               		else
                 	{
                  		if(Cost > 9000)
                    	{
                     		new info[128];
                       		PlayerDB[playerid][PlayerOfferHouseTo] = pirkejas;
                         	PlayerDB[playerid][PlayerOfferHouseCost] = Cost;
                          	format(info, 128, "Ar tikrai norite parduoti ðá namà %s uþ %s € ? \n{FF0000}Pateikus pasiûlymà jo atsiimti negalësite.", Vardas(pirkejas),AddSpaces(Cost));
                           	ShowPlayerDialog(playerid, 145, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", info, "Taip","Ne");
                       	}
                        else
                        {
                        	ErrorMsg(playerid,"• Blogai nurodyta kaina, patikrinkite kainà ir bandykite siûlyti ið naujo.");
                       	}
                   	}
				}
               	else
               	{
                	ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                }
    		}
    		else
     		{
      			ErrorMsg(playerid,"• Netaisyklingas formatas. Turi bûti: Vardas_Pavarde.");
      			ShowPlayerDialog(playerid, 319, DIALOG_STYLE_INPUT, "Bûsto pardavimas fiz. asmeniui", "Áveskite asmens vardà, kuriam norite parduoti savo bûstà: ", "Parduoti", "Atðaukti");
       		}
	 	}
	 	else
	 	{
	 		cmd_bustovaldymas(playerid,"");
	 	}
	}
	if(dialogid == 320)
	{
		new PlayerVW = GetPlayerVirtualWorld(playerid);
		if(response)
		{
			switch(listitem)
  	        {
  	            case 0:
  	            {
  	            	if(HouseInfo[PlayerVW-3][NarkSlotState] == 1)
  	            	{
  	            		ShowPlayerDialog(playerid, 321, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti narkotikus á seifà\nIðimti narkotikus ið seifo", "Pasirinkti","Atgal");
  	            	}
  	            	else
  	            	{
  	            	    ErrorMsg(playerid, "• Narkotikø slotas uþrakintas, já atidaryti galima Nekilnojo Turto Agentûroje. Jà rasite paraðæ - /gps.");
  	            	}
  	            }
 			}
		}
		else
		{
			cmd_bustovaldymas(playerid,"");
		}
	}
 	if(dialogid == 321)
	{
		if(response)
		{
			switch(listitem)
  	        {
  	            case 0:
  	            {
  	            	ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti kanapës\nPadëti heroinà\nPadëti kokainà", "Pasirinkti","Atgal");
				}
				case 1:
				{
					new info[2048];
                    new string[204];
                    new PlayerVW = GetPlayerVirtualWorld(playerid);
                    format(string,sizeof(string),"{FFFFFF}• Iðimti kanapes [Liko: {e39300}%s{FFFFFF} g.]", AddSpaces(HouseInfo[PlayerVW-3][NarkHome]));
                    strcat(info,string);
                    format(string,sizeof(string),"\n{FFFFFF}• Iðimti heroinà [Liko: {e39300}%s{FFFFFF} mg.]", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeHeroinas]));
                    strcat(info,string);
                    format(string,sizeof(string),"\n{FFFFFF}• Iðimti kokainà [Liko: {e39300}%s{FFFFFF} mg.]", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeKokainas]));
                    strcat(info,string);
					ShowPlayerDialog(playerid, 326, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas", info, "Pasirinkti", "Atgal");
				}
			}
		}
		else
		{
			new strf[500];
			new str[125];
			new PlayerVW = GetPlayerVirtualWorld(playerid);
			if(HouseInfo[PlayerVW-3][NarkSlotState] == 1)
			{
				format(str, sizeof(str), "{FFFFFF}• {43c92e}Narkotikø {FFFFFF}slotas {B2FF00}[Atidarytas]{FFFFFF}.\n"); strcat(strf, str);
			}
			else
			{
				format(str, sizeof(str), "{FFFFFF}• {43c92e}Narkotikø {FFFFFF}slotas {FF0000}[Uþrakintas]{FFFFFF}.\n"); strcat(strf, str);
			}
			ShowPlayerDialog(playerid, 320, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas", strf, "Pasirinkti","Atgal");
		}
	}
	if(dialogid == 322)
	{
		if(response)
		{
			switch(listitem)
  	        {
  	            case 0:
  	            {
  	                new info[512];
                    new string[204];
                    format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kanapiø\n\n\t{FF0000}[!] {FFFFFF}Turite kanapiø: {ff9016}%s {FFFFFF}g.", AddSpaces(PlayerDB[playerid][Kanapes]));
                    strcat(info,string);
  	            	ShowPlayerDialog(playerid, 323, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
          		}
          		case 1:
          		{
          			new info[512];
                    new string[204];
                    format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti heroino\n\n\t{FF0000}[!] {FFFFFF}Turite heroino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Heroinas]));
                    strcat(info,string);
  	            	ShowPlayerDialog(playerid, 324, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
          		}
          		case 2:
          		{
          			new info[512];
                    new string[204];
                    format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kokaino\n\n\t{FF0000}[!] {FFFFFF}Turite kokaino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Kokainas]));
                    strcat(info,string);
  	            	ShowPlayerDialog(playerid, 325, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
          		}
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, 321, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti narkotikus á seifà\nIðimti narkotikus ið seifo", "Pasirinkti","Atgal");
		}
	}
	if(dialogid == 323)
	{
		if(response)
		{
			new kiekis = strval(inputdialogtext);
			new PlayerVW = GetPlayerVirtualWorld(playerid);
			new info[512];
			new string[204];

			if(kiekis > PlayerDB[playerid][Kanapes])
			{
				ErrorMsg(playerid,"• Tiek neturite kanapiø.");

       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kanapiø\n\n\t{FF0000}[!] {FFFFFF}Turite kanapiø: {ff9016}%s {FFFFFF}g.", AddSpaces(PlayerDB[playerid][Kanapes]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 323, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");

       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kanapiø\n\n\t{FF0000}[!] {FFFFFF}Turite kanapiø: {ff9016}%s {FFFFFF}g.", AddSpaces(PlayerDB[playerid][Kanapes]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 323, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis+HouseInfo[PlayerVW-3][NarkHome] > HouseInfo[PlayerVW-3][KiekTelpaNarku])
			{
				ErrorMsg(playerid,"• Pirmiausia padidinkite narkotikø talpà.");
				
       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kanapiø\n\n\t{FF0000}[!] {FFFFFF}Turite kanapiø: {ff9016}%s {FFFFFF}g.", AddSpaces(PlayerDB[playerid][Kanapes]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 323, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= PlayerDB[playerid][Kanapes])
			{
				HouseInfo[PlayerVW-3][NarkHome]+=kiekis;
				PlayerDB[playerid][Kanapes]-=kiekis;
				new str[128];
    			format(str,128,"• Padëjote á savo namo seifà {FFFFFF}%s g. {33FF99}kanapes(-iø).", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
		        //SaveMoneyInHouse(PlayerVW-3);
			}
		}
		else
		{
			ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti kanapës\nPadëti heroinà\nPadëti kokainà", "Pasirinkti","Atgal");
		}
	}
 	if(dialogid == 324)
	{
		if(response)
		{
			new kiekis = strval(inputdialogtext);
			new PlayerVW = GetPlayerVirtualWorld(playerid);
            new info[512];
			new string[204];
			if(kiekis > PlayerDB[playerid][Heroinas])
			{
				ErrorMsg(playerid,"• Tiek neturite heroino.");
				
       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti heroino\n\n\t{FF0000}[!] {FFFFFF}Turite heroino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Heroinas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 324, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");
				
       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti heroino\n\n\t{FF0000}[!] {FFFFFF}Turite heroino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Heroinas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 324, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis+HouseInfo[PlayerVW-3][NarkHomeHeroinas] > HouseInfo[PlayerVW-3][KiekTelpaNarku])
			{
				ErrorMsg(playerid,"• Pirmiausia padidinkite narkotikø talpà.");
				
       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti heroino\n\n\t{FF0000}[!] {FFFFFF}Turite heroino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Heroinas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 324, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= PlayerDB[playerid][Heroinas])
			{
				HouseInfo[PlayerVW-3][NarkHomeHeroinas]+=kiekis;
				PlayerDB[playerid][Heroinas]-=kiekis;
				new str[128];
    			format(str,128,"• Padëjote á savo namo seifà {FFFFFF}%s mg. {33FF99}heroino.", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
			}
		}
		else
		{
			ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti kanapës\nPadëti heroinà\nPadëti kokainà", "Pasirinkti","Atgal");
		}
	}
 	if(dialogid == 325)
	{
		if(response)
		{
			new kiekis = strval(inputdialogtext);
			new PlayerVW = GetPlayerVirtualWorld(playerid);
			new info[512];
			new string[204];

			if(kiekis > PlayerDB[playerid][Kokainas])
			{
				ErrorMsg(playerid,"• Tiek neturite kokaino.");

       			format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kokaino\n\n\t{FF0000}[!] {FFFFFF}Turite kokaino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Kokainas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 325, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");
				
				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kokaino\n\n\t{FF0000}[!] {FFFFFF}Turite kokaino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Kokainas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 325, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis+HouseInfo[PlayerVW-3][NarkHomeKokainas] > HouseInfo[PlayerVW-3][KiekTelpaNarku])
			{
				ErrorMsg(playerid,"• Pirmiausia padidinkite narkotikø talpà.");
				
				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite padëti kokaino\n\n\t{FF0000}[!] {FFFFFF}Turite kokaino: {ff9016}%s {FFFFFF}mg.", AddSpaces(PlayerDB[playerid][Kokainas]));
          		strcat(info,string);
           		ShowPlayerDialog(playerid, 325, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Padëti", "Atgal");
			}
			else if(kiekis <= PlayerDB[playerid][Kokainas])
			{
				HouseInfo[PlayerVW-3][NarkHomeKokainas]+=kiekis;
				PlayerDB[playerid][Kokainas]-=kiekis;
				new str[128];
    			format(str,128,"• Padëjote á savo namo seifà {FFFFFF}%s mg. {33FF99}kokaino.", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti kanapës\nPadëti heroinà\nPadëti kokainà", "Pasirinkti","Atgal");
		}
	}
	if(dialogid == 326)
	{
		new info[2048];
  		new string[204];
		new PlayerVW = GetPlayerVirtualWorld(playerid);
	    if(response)
	    {
	    	switch(listitem)
  	        {
  	            case 0:
  	            {
  	                format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kanapiø\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}g.", AddSpaces(HouseInfo[PlayerVW-3][NarkHome]));
          			strcat(info,string);
           			ShowPlayerDialog(playerid, 327, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
   				}
   				case 1:
   				{
   					format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo heroino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeHeroinas]));
          			strcat(info,string);
           			ShowPlayerDialog(playerid, 328, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
   				}
   				case 2:
   				{
   				    format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kokaino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeKokainas]));
          			strcat(info,string);
           			ShowPlayerDialog(playerid, 329, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
   				}
			}
		}
		else
		{
            ShowPlayerDialog(playerid, 321, DIALOG_STYLE_LIST, "{21ff00}Narkotikø valdymas","Padëti narkotikus á seifà\nIðimti narkotikus ið seifo", "Pasirinkti","Atgal");
		}
  	            
	}
	if(dialogid == 327)
	{
		new kiekis = strval(inputdialogtext);
		new PlayerVW = GetPlayerVirtualWorld(playerid);
		new info[2048];
  		new string[204];
	    if(response)
	    {
	        if(kiekis > HouseInfo[PlayerVW-3][NarkHome])
			{
				ErrorMsg(playerid,"• Namie tiek neturite kanapiø.");
				
				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kanapiø\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}g.", AddSpaces(HouseInfo[PlayerVW-3][NarkHome]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 327, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");
				
				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kanapiø\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}g.", AddSpaces(HouseInfo[PlayerVW-3][NarkHome]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 327, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= HouseInfo[PlayerVW-3][NarkHome])
			{
			    PlayerDB[playerid][Kanapes]+=kiekis;
			    HouseInfo[PlayerVW-3][NarkHome]-=kiekis;

				new str[128];
    			format(str,128,"• Iðëmëte ið namo seifo {FFFFFF}%s g. {33FF99}kanapiø.", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
	        }
	    }
 	}
  	if(dialogid == 328)
	{
		new kiekis = strval(inputdialogtext);
		new PlayerVW = GetPlayerVirtualWorld(playerid);
		new info[2048];
  		new string[204];
	    if(response)
	    {
	        if(kiekis > HouseInfo[PlayerVW-3][NarkHomeHeroinas])
			{
				ErrorMsg(playerid,"• Namie tiek neturite heroino.");

				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo heroino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeHeroinas]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 328, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");

				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo heroino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeHeroinas]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 328, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= HouseInfo[PlayerVW-3][NarkHomeHeroinas])
			{
			    PlayerDB[playerid][Heroinas]+=kiekis;
			    HouseInfo[PlayerVW-3][NarkHomeHeroinas]-=kiekis;

				new str[128];
    			format(str,128,"• Iðëmëte ið namo seifo {FFFFFF}%s mg. {33FF99}heroino.", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
	        }
	    }
    }
    if(dialogid == 329)
	{
		new kiekis = strval(inputdialogtext);
		new PlayerVW = GetPlayerVirtualWorld(playerid);
		new info[2048];
  		new string[204];
	    if(response)
	    {
	        if(kiekis > HouseInfo[PlayerVW-3][NarkHomeKokainas])
			{
				ErrorMsg(playerid,"• Namie tiek neturite kokaino.");

				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kokaino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeKokainas]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 329, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= 0)
			{
				ErrorMsg(playerid,"• Ávestas per maþas skaièius.");

				format(string,sizeof(string),"{FFFFFF}• Áraðykite á laukelá, kiek norite iðimti ið seifo kokaino\n\n\t{FF0000}[!] {FFFFFF}Namie liko: {ff9016}%s {FFFFFF}mg.", AddSpaces(HouseInfo[PlayerVW-3][NarkHomeKokainas]));
 				strcat(info,string);
  				ShowPlayerDialog(playerid, 329, DIALOG_STYLE_INPUT, "{21ff00}Narkotikø valdymas", info, "Iðimti", "Atgal");
			}
			else if(kiekis <= HouseInfo[PlayerVW-3][NarkHomeKokainas])
			{
			    PlayerDB[playerid][Kokainas]+=kiekis;
			    HouseInfo[PlayerVW-3][NarkHomeKokainas]-=kiekis;

				new str[128];
    			format(str,128,"• Iðëmëte ið namo seifo {FFFFFF}%s mg. {33FF99}kokaino.", AddSpaces(kiekis));
       			SendClientMessage(playerid, 0x33FF99AA, str);
		        SaveHouseOptions(PlayerVW-3);
	        }
	    }
    }
    if(dialogid == 331)
    {
        if(response)
		{
  			if(PlayerDB[playerid][Credits] < 100) return ErrorMsg(playerid, "• Jums neuþtenka kreditø bûsto narkotikø sloto atidarimui. Ásigykite kreditø - {FFFFFF}/kreditai.");
			if(HouseInfo[playerid][NarkSlotState] == 1) return ErrorMsg(playerid, "• Narkotikø slotas jau atidarytas.");
      		for(new house = 0; house < MAX_HOUSES; house++)
			{
				if(strcmp(HouseInfo[house][HouseOwner], Vardas(playerid), false) == 0)
				{
					HouseInfo[house][NarkSlotState] = 1;
				}
			}
			PlayerDB[playerid][Credits] -= 100;
			PlayerDB[playerid][AtidariauSlota] = 1;
			SendClientMessage(playerid, 0x33FF99AA, "• Narkotikø slotas sëkmingai atidarytas.");
			SendClientMessage(playerid, 0x33FF99AA, "• Sumokëjote {33CC99}100 {33FF99}kreditø.");
		}
		else
		{
			SendClientMessage(playerid, 0x33FF99AA, "• Sekmës.");
		}
	}
 	if(dialogid == 332)
    {
        if(response)
		{
		    new string[128];
  			if(PlayerDB[playerid][MoneyInPocket] < HouseInfo[playerid][HouseMokesciai]) return ErrorMsg(playerid, "• Jums neuþtenka pinigø bûsto mokesèiø apmokëjimui.");
			
			PlayerDB[playerid][MoneyInPocket] -= HouseInfo[playerid][HouseMokesciai];
			SendClientMessage(playerid, 0x33FF99AA, "• Mokesèiai sëkmingai apmokëti.");
			
		 	format(string, 128, "• Sumokëjote {33CC99}%i {33FF99}eur.", HouseInfo[playerid][HouseMokesciai]);
			SendClientMessage(playerid, 0x33FF99AA, string);

			HouseInfo[playerid][HouseMokesciai] =0;
		}
		else
		{
			SendClientMessage(playerid, 0x33FF99AA, "• Sekmës.");
		}
	}
 	if(dialogid == 333)
    {
        if(response)
		{
  			if(PlayerDB[playerid][Credits] < 25) return ErrorMsg(playerid, "• Jums neuþtenka kreditø narkotikø talpai padidinti.");

			PlayerDB[playerid][Credits] -= 100;
			SendClientMessage(playerid, 0x33FF99AA, "• Operacija sekmindai ávykdyta.");

		 	SendClientMessage(playerid, 0x33FF99AA, "• Sumokëjote {33CC99}100 {33FF99}kreditø.");
		 	SendClientMessage(playerid, 0x33FF99AA, "• PADIDINOTE TALPA 100 vienetais.");
		
			HouseInfo[playerid][KiekTelpaNarku] +=100;
		}
		else
		{
			SendClientMessage(playerid, 0x33FF99AA, "• Sekmës.");
		}
	}
    if(dialogid == 334)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] == 21)
            {
                /*if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }*/
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                /*else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }*/

    			SendClientMessage(playerid, ZALIA, "Pasirinkite rangà, nuo kurio norite leisti pasirinkto krovinio veþimà.");
    			SetPVarInt(playerid, "SelectedVNum", listitem);
    			new info[500];
    			new string[70];
    			format(string, 70, "{FFFFFF}1. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}2. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}3. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}4. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}5. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}6. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}7. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
    			strcat(info, string);
    			format(string, 70, "{FFFFFF}8. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
    			strcat(info, string);
    			ShowPlayerDialog(playerid, 335, DIALOG_STYLE_LIST, "{AFAFAF}Rango nustatymas", info, "Keisti", "Atðaukti");
            }
		}
	}
 	if(dialogid == 335)
	{
		if(response)
		{
            if(PlayerDB[playerid][Direktorius] == 21)
            {
                /*if(PlayerDB[playerid][Direktorius] <= 0)
                {
                    if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
                    {
                        ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                        return 1;
                    }
                }*/
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                /*else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }*/
    			if(JobIDToWorkWith == 21)
    			{
    				switch(GetPVarInt(playerid, "SelectedVNum"))
    				{
    					case 0:
    					{
    						FURISTAISettings[Vaistu_Krovimas] = listitem+1;
    					}
    					case 1:
    					{
    						FURISTAISettings[Tr_Krovimas] = listitem+1;
    					}
    					case 2:
    					{
    						FURISTAISettings[Detaliu_Krovimas] = listitem+1;
    					}
    				}
    				SendClientMessage(playerid, ZALIA, "• Sëkmingai atnaujinote informacija.");
   				 	SaveFURISTAISettings();
 				}
			}
			else
			{
	   			ErrorMsg(playerid, "• Ði komanda tik furistø direktoriui.");
			}
		}
	}
	return 1;
	//dialogid == 330 uzimtas
}

//END of OnDialogResponse

forward OnCheckSecondaryPassword(playerid);
public OnCheckSecondaryPassword(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Slaptaþodis neteisingas, prisijungimas negalimas.");
        Kick(playerid);
    }
    else
    {
        PlayerDB[playerid][LoggedIn] = 1;
        SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][LogInSkin], -1958.95 ,137.536,27.694, 178.747, 0,0,0,0,0,0);
        SpawnPlayer(playerid);
    }
    return 1;
}



forward OnAccountVeritifyTry(playerid);
public OnAccountVeritifyTry(playerid)
{
	if(cache_get_row_count(connectionHandle) == 1)
	{
		new SQLstring[130];
		mysql_format(connectionHandle, SQLstring, 130, "UPDATE `players` SET `Verified` = '1' WHERE `name` = '%e' LIMIT 1;", Vardas(playerid));
		mysql_function_query(connectionHandle,SQLstring,true,"SendQuery","");
        new string[256];
        new SlaptazodisT[36];
        new MailT[40];
        new LytisT[10];
        cache_get_field_content(0, "Password", SlaptazodisT);
        cache_get_field_content(0, "EMAIL", MailT);
        if(cache_get_field_content_int(0, "Sex") == 1)
        {
            format(LytisT, 10, "Vyras");
        }
        else
        {
            format(LytisT, 10, "Moteris");
        }

        new IPT[20];
        GetPlayerIp(playerid, IPT, 20);
        format(string, 128, "» {ffffff}Jûsø ávestas slaptaþodis: {7bae39}%s{ffffff}. «", SlaptazodisT);
        SendClientMessage(playerid, 0x7bae39FF, string);
        format(string, 128, "» {ffffff}Jûsø áraðytas el.paðtas: {7bae39}%s{ffffff}. «", MailT);
        SendClientMessage(playerid, 0x7bae39FF, string);
        format(string, 128, "» {ffffff}Jûsø pasirinkta lytis: {7bae39}%s{ffffff}. «", LytisT);
        SendClientMessage(playerid, 0x7bae39FF, string);
        format(string, 128, "» {ffffff}Registracijos IP adresas: {7bae39}%s{ffffff}. «", IPT);
        SendClientMessage(playerid, 0x7bae39FF, string);
        SendClientMessage(playerid, -1, "");
        format(string, 128, "» {ffffff}Sëkmingai uþsiregistravote, sëkmës þaidime linki {7bae39}San-Andreas.lt{ffffff} administracija. «");
        SendClientMessage(playerid, 0x7bae39FF, string);
        new info[256];
        new infoblog[256];
        format(info, 256, "{ff0000}[!] {FFFFFF}Á serveri uþsiregistravo naujas(-a) þaidëjas(-a) {f2ff00}%s(ID: %i){FFFFFF}, praðome suteikti jam(-ai) pagalbà.", Vardas(playerid),playerid);
        format(infoblog, 256, "{ff0000}[!] {FFFFFF}Jeigu netinkamas {f2ff00}Vardas_Pavarde{FFFFFF}, reikia bausti pagal taisykliø kodeksà (/taisykles).");
        foreach(new i : Player)
        {
        	if(PlayerDB[i][adminlvl] > 0)
         	{
          		SendClientMessage(i,0xFFFFFFAAF, info);
          		SendClientMessage(i,0xFFFFFFAAF, infoblog);
            }
        }
        new MYSQLAccountChecking[140];
        mysql_format(connectionHandle, MYSQLAccountChecking, 140, "SELECT `id`,`Skin` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
        mysql_function_query(connectionHandle,MYSQLAccountChecking,true,"OnPlayerLoadAfterVeritify","d",playerid);
	}
	else
	{
		ErrorMsg(playerid,"• Saugos slaptaþodis ávestas neteisingai!");
		PlayerDB[playerid][WrongVeritifyAttemps]+=1;
		if(PlayerDB[playerid][WrongVeritifyAttemps] == 3)
		{
			SetTimerEx("DelayedKick", 750, false, "d", playerid);
		}
		else
		{
			new SQLstring[105];
			mysql_format(connectionHandle, SQLstring, 105, "SELECT `EMAIL`,`VeritifyCode` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
			mysql_function_query(connectionHandle,SQLstring,true,"OnAccountVeritifyAsk","d",playerid);
		}
	}
	return 1;
}
forward OnPlayerLoadAfterVeritify(playerid);
public OnPlayerLoadAfterVeritify(playerid)
{
    PlayerDB[playerid][SQLID] = cache_get_field_content_int(0, "id");
    PlayerDB[playerid][LogInSkin] = cache_get_field_content_int(0, "Skin");
    PlayerDB[playerid][LoggedIn] = 1;
    SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][LogInSkin], -1958.95 ,137.536,27.694, 178.747, 0,0,0,0,0,0);
    SpawnPlayer(playerid);
    return 1;
}
forward OnAccountVeritifyAsk(playerid);
public OnAccountVeritifyAsk(playerid)
{
	//PATVIRTINIMAS..
	new info[400];
	new email[40];
	new kodass[8];
	//new kodas[40];
	cache_get_row(0, 0, email, connectionHandle, 40);
	cache_get_field_content(0, "VeritifyCode", kodass);
    strcat(info,"{ffffff}Uþtikrinant paskyros saugumà turite ávesti ðá {ff0000}saugos {ffffff}kodà, kuris yra þemiau nurodytas.\n");
    new string[100];
    //format(string, 100, "Laiðkas nusiûstas á {7bae39}%s{ffffff} el. paðtà.\n",email);
    //strcat(info, string);
    format(string, 100, "Áveskite ðá apsaugos kodà: {ff0000}%s\n", kodass);
    strcat(info, string);
    strcat(info,"{7bae39}Nepamirðkite bei uþsiraðykite ðá kodà, jis bus reikalingas tolimesniuose visokiuose veiksmuose!\n");
    strcat(info,"{ffffff}Patvirtinimo kodà áveskite á ðá laukelá:");
    ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Paskyros Aktyvavimas", info, "Gerai", "Iðeiti");
	return 1;
}
forward OnPlayerSettingEMailAReg(playerid,inputtext[]);
public OnPlayerSettingEMailAReg(playerid,inputtext[])
{
	if(cache_get_row_count(connectionHandle) == 1)
	{
		ShowPlayerDialog(playerid, 5, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", "Áveskite elektroninio paðto adresà\nJis bus reikalingas paskyrai atgauti bei patvirdimo kodui prisiminti.\n{FF0000}Ðis elektroninio paðto adresas uþimtas", "Gerai", "");
	}
	else
	{
		new SQLstring[200];
		new kodas[8];
		randomString(kodas,8);
		mysql_format(connectionHandle, SQLstring, 200, "UPDATE `players` SET `EMAIL` = '%e',`Verified` = '0',`VeritifyCode` = '%e' WHERE `Name` = '%e' LIMIT 1;", inputtext,kodas,Vardas(playerid));
		mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
		ShowPlayerDialog(playerid, 6, DIALOG_STYLE_MSGBOX, "Lytis", "Jûsø lytis yra", "Vyras", "Moteris");
	}
	return 1;
}
forward OnSendVeritifyMail(index, response_code, data[]);
public OnSendVeritifyMail(index, response_code, data[])
{
	printf("Patvirtinimo kodas þaidëjui %s bandytas iðsiusti.",Vardas(index));
	printf("Serveris graþino atsakymà: Response Code: %i ir Data: %s",response_code,data);
}
forward OnPlayerTryingLogin(playerid);
public OnPlayerTryingLogin(playerid)
{
	if(cache_get_row_count(connectionHandle) == 0)
	{
		ErrorMsg(playerid,"• Slaptaþodis ávestas neteisingai!");
		PlayerDB[playerid][WrongPasswordAttempts]+=1;
		if(PlayerDB[playerid][WrongPasswordAttempts] == 3)
		{
			SetTimerEx("DelayedKick", 750, false, "d", playerid);
		}
		else
		{
    		new info[400];
            format(info, 400, "{ffffff}Sveikas - (a) %s atvykæs - (usi), á {7bae39}San-Andreas.lt {ffffff} serverá !\n\n", Vardas(playerid));
            strcat(info, "{ffffff}Mûsø duomenø bazë aptiko jog ðis vartotojas - (a) jau yra registruotas mûsø serveryje.\n");
            strcat(info, "{ffffff}Áveskite savo {7bae39}slaptaþodá{ffffff} kurá naudojote paskyros {7bae39}registracijoje{ffffff}.");
            ShowPlayerDialog(playerid, 4, DIALOG_STYLE_PASSWORD, "Prisijungimas", info, "Prisijungti","Iðeiti");
		}
	}
	else
	{
		//Teisingo slaptaþodþio atvëju
		new Email[40];
		cache_get_row(0, 0, Email,connectionHandle, 40);

		if(strcmp(Email, "UNSET", true, 5) == 0)
		{
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", "Áveskite elektroninio paðto adresà\nJis bus reikalingas paskyrai atgauti ir registracijos patvirtinimui.", "Gerai", "");
		}
		else if(cache_get_row_int(0, 1,connectionHandle) == 0)
		{
			//Patvirtininimas
			new SQLstring[105];
			mysql_format(connectionHandle, SQLstring, 105, "SELECT `EMAIL`, `VeritifyCode` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Vardas(playerid));
			mysql_function_query(connectionHandle,SQLstring,true,"OnAccountVeritifyAsk","d",playerid);
		}
		else
		{
            //`EMAIL`,`Verified`,`SecurityCodeCheck`,`SecondaryPassword`
            if(cache_get_row_int(0, 2) == 1)
            {
                ShowPlayerDialog(playerid, 268, DIALOG_STYLE_PASSWORD, "{AFAFAF}Papildomas patvirtinimas", "Ði paskyra yra apsaugota antro slaptaþodþio apsauga, todël norëdami prisijungti prie ðios paskyros jûs turite ávesti antrà paskyros slaptaþodá.\nÁraðykite slaptaþodá ir spauskite 'Patvirtinti'.", "Patvirtinti", "Atðaukti");
            }
            else
            {
                PlayerDB[playerid][LoggedIn] = 1;
                SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][LogInSkin], -1958.95 ,137.536,27.694, 178.747, 0,0,0,0,0,0);
                SpawnPlayer(playerid);
            }
		}
	}
	return 1;
}
forward OnPlayerSettingEMail(playerid,inputtext[]);
public OnPlayerSettingEMail(playerid,inputtext[])
{
	if(cache_get_row_count(connectionHandle) == 1)
	{
		ShowPlayerDialog(playerid, 2, DIALOG_STYLE_INPUT, "Elektroninio paðto adresas", "Áveskite elektroninio paðto adresà\nJis bus reikalingas paskyrai atgauti ir registracijos patvirtinimui.\n{FF0000}Ðis elektroninio paðto adresas uþimtas", "Gerai", "");
	}
	else
	{
		new SQLstring[200];
		new kodas[8];
		randomString(kodas,8);
        new code[8];
        format(code, 8, "%s", kodas);
		mysql_format(connectionHandle, SQLstring, 200, "UPDATE `players` SET `EMAIL` = '%e',`Verified` = '0',`VeritifyCode` = '%e' WHERE `Name` = '%e' LIMIT 1;", inputtext,code,Vardas(playerid));
		mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        //mysql_format(connectionHandle, SQLstring, 200, "INSERT INTO `playersneedveritifycode` (`Name`, `Code`, `Mail`, `CanBeSent`) VALUES ('%e','%s','%e','0');",Vardas(playerid),code,inputtext);
        //mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
        //HTTP(playerid, HTTP_GET, "san-andreas.lt/shedule/mail/send.php", "", "");

		ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX, "Lytis", "{ffffff}Pasirinkite savo lytá: „{7bae39}Vyras{ffffff}“ arba „{7bae39}Moteris{ffffff}“.", "Vyras", "Moteris");
	}
	return 1;
}
stock VehicleNamePlateGenerator()
{
    const len = 7;
    new plate[len+1];
    for(new i = 0;i<=len;i++)
    {
        if(i == 3)
        {
            plate[i] = ':';
            continue;
        }
        if(i == 0 || i == 1 || i == 2)
        {
          plate[i] = 'A' + random(26);
        }
        else if(i == 4 || i == 5 || i == 6)
        {
            plate[i] = '0' + random(10);
        }
    }
    return plate;
}
stock randomString(strDest[], strLen = 10)
{
    while(strLen--)
        strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}
forward SendQuery();
public SendQuery()
{
	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(PlayerDB[playerid][LoggedIn] == 0)
    {
        ErrorMsg(playerid,"• Privalote pirma prisijungti!");
        return 0;
    }
    else if(PlayerDB[playerid][Loaded] == 0)
    {
        ErrorMsg(playerid,"• Praðome palaukti kol jûsø informacija bus pilnai uþkrauta!");
        return 0;
    }
    else if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
    {
        ErrorMsg(playerid,"• Jums yra uþdrausta þaisti ðiame serveryje.");
        return 0;
    }
    else if(PlayerDB[clickedplayerid][LoggedIn] == 0)
    {
        ErrorMsg(playerid,"• Þaidëjas neprisijungæs!");
        return 0;
    }
    else if(PlayerDB[clickedplayerid][Loaded] == 0)
    {
        ErrorMsg(playerid,"• Þaidëjo informacija vis dar yra kraunama!");
        return 0;
    }
    else
    {
        new info[2560];
        new str[164];
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Vardas_Pavardë: {FFFF00}%s \n",Vardas(clickedplayerid));
        strcat(info, str);
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Patirtis (XP): {FFFF00}%s \n",AddPoints(GetPlayerScore(clickedplayerid)));
        strcat(info, str);
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Registracijos data: {FFFF00}%s \n",PlayerDB[clickedplayerid][DayOfRegistration]);
        strcat(info, str);
        switch(PlayerDB[clickedplayerid][Sex])
        {
            case 1:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lytis: {FFFF00}Vyras \n");
                strcat(info, str);
            }
            case 2:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lytis: {FFFF00}Moteris \n");
                strcat(info, str);
            }
        }
        if(PlayerDB[playerid][adminlvl] >= 4)
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pinigai kiðenëje: {FFFF00}%s€ \n",AddPoints(PlayerDB[clickedplayerid][MoneyInPocket]));
            strcat(info, str);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pinigai banke: {FFFF00}%s€ {FFFFFF}| Algoje: {FFFF00}%s€\n",AddPoints(PlayerDB[clickedplayerid][MoneyInBank]),AddPoints(PlayerDB[clickedplayerid][Uzdarbis]));
            strcat(info, str);
        }
        if(IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Gaudomumo lygis: {FFFF00}%i \n",PlayerDB[clickedplayerid][WantedLevel]);
            strcat(info, str);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos balai: {FFFF00}%i {FFFFFF}| Prarado teisës kartø: {FFFF00}%i \n",PlayerDB[clickedplayerid][MatuokliuBalai],PlayerDB[clickedplayerid][LostDLicenses]);
            strcat(info, str);
        }
        new MH,MM,MS;
        MS = PlayerDB[clickedplayerid][MutedPlayer];
        while(MS >= 60)
        {
            MM++;
            MS-=60;
        }
        while(MM >= 60)
        {
            MH++;
            MM-=60;
        }
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Uþtildytas: {FFFF00}%d valandas(-ø) %02d minute(-èiø) %02d sekundæ(-es) \n",MH,MM,MS);
        strcat(info, str);
        MH = 0;
        MM = 0;
        MS = PlayerDB[clickedplayerid][JailTime];
        while(MS >= 60)
        {
            MM++;
            MS-=60;
        }
        while(MM >= 60)
        {
            MH++;
            MM-=60;
        }
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Kalëjime: {FFFF00}%d valandas(-ø) %02d minute(-èiø) %02d sekundæ(-es) \n\n",MH,MM,MS);
        strcat(info, str);

        new DarboPavadinimas[35];
        switch(PlayerDB[clickedplayerid][Job])
        {
            case 0:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Bedarbis");
            }
            case 1:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Policininkas");
            }
            case 2:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Medikas");
            }
            case 4:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Taksistas");
            }
            case 5:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Mechanikas");
            }
            case 7:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Lucchese Mafija");
            }
            case 8:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Genovese Mafija");
            }
            case 9:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "„Aras“");
            }
            case 10:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Radijos laidø vedëjas");
            }
            case 11:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "S**");
            }
            case 13:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Autobuso vairuotojas");
            }
            case 14:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Gaisrininkas");
            }
            case 15:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Gatviø valytojas");
            }
            case 16:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Oro ir Vandens kurjeris");
            }
            case 19:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "„Burger Shot“ maisto iðveþiotojas");
            }
            case 21:
            {
                format(DarboPavadinimas, sizeof(DarboPavadinimas), "Tolimûjø reisø vairuotojas");
            }
        }
        new Years, Month, Day, Hour, Minute, Second;
        if(PlayerDB[clickedplayerid][DarboSutartiesPabaiga] >= gettime())
        {
            TimestampToDate(PlayerDB[clickedplayerid][DarboSutartiesPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
            format(str, sizeof(str), "{FFFF00}» %s(-ë) nuo {FFFF00}%s{FFFFFF} | Sutartis iki: {FFFF00}%d-%02d-%02d %02d:%02d \n",DarboPavadinimas,PlayerDB[clickedplayerid][DarboPradziosData],Years, Month, Day, Hour, Minute);
            strcat(info, str);
        }
        else
        {
            format(str, sizeof(str), "{FFFF00}» %s(-ë) nuo {FFFF00}%s{FFFFFF} | Sutartis: {FFFF00}Negalioja \n",DarboPavadinimas,PlayerDB[clickedplayerid][DarboPradziosData]);
            strcat(info, str);
            switch(PlayerDB[clickedplayerid][Job])
            {
                case 9:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas28] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,28);
                    }
                }
                case 7:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas29] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,29);
                    }
                }
                case 8:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas30] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,30);
                    }
                }
                case 21:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas31] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,31);
                    }
                }
                case 5:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas32] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,32);
                    }
                }
                case 1:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas33] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,33);
                    }
                }
                case 2:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas34] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,34);
                    }
                }
                case 10:
                {
                    if(PlayerDB[clickedplayerid][Pasiekimas35] == 0)
                    {
                        PlayerCompletedPasiekimas(clickedplayerid,35);
                    }
                }
            }
        }
        if((PlayerDB[clickedplayerid][Job] >= 1 && PlayerDB[clickedplayerid][Job] < 12 ) || PlayerDB[clickedplayerid][Job] == 21)
        {
            switch(PlayerDB[clickedplayerid][Rangas])
            {
                case 1:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango1Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 2:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango2Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 3:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango3Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 4:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango4Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 5:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango5Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 6:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango6Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 7:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango7Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
                case 8:
                {
                    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[clickedplayerid][Job]][Rango8Pavadinimas],PlayerDB[clickedplayerid][JobWarnings]);
                }
            }
            strcat(info, str);
        }

        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pradirbo ðiandien: {FFFF00}%dmin.{FFFFFF} | Iðviso: {FFFF00}%dmin.\n",PlayerDB[clickedplayerid][TimeWorkedWithCarToday],PlayerDB[clickedplayerid][TimeWorkedWithCarTotal]);
        strcat(info, str);


        switch(PlayerDB[clickedplayerid][Job])
        {
            case 1:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos: {FFFF00}%d{FFFFFF} | Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[clickedplayerid][BaudosTotal],PlayerDB[clickedplayerid][AtvykimaiTotal]);
                strcat(info, str);
            }
            case 2:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pagydymai: {FFFF00}%d{FFFFFF} | Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[clickedplayerid][PagydimaiTotal],PlayerDB[clickedplayerid][AtvykimaiTotal]);
                strcat(info, str);
            }
            case 3,5,7,8,10,16..19:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[clickedplayerid][AtvykimaiTotal]);
                strcat(info, str);
            }
            case 6,9,11:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos: {FFFF00}%d\n\n",PlayerDB[clickedplayerid][BaudosTotal]);
                strcat(info, str);
            }
            case 21:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Kroviniai: {FFFF00}%d\n\n",PlayerDB[clickedplayerid][NuveztiKroviniai]);
                strcat(info, str);
            }
        }

        switch(PlayerDB[clickedplayerid][Direktorius])
        {
            case 0:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Nëra\n");
                strcat(info, str);
            }
            case 1:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Policijos departamento{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 2:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Medikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 3:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Taksi{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 5:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Mechanikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 7:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lyderis: {FFFF00}Lucchese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 8:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}lyderis: {FFFF00}Genovese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 9:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}„Aro“{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 10:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Radistø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 11:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}S**{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
            case 21:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Tolimûjø reisø vairuotojø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecameDir],PlayerDB[clickedplayerid][DirWarnings]);
                strcat(info, str);
            }
        }

        switch(PlayerDB[clickedplayerid][Pavaduotojas])
        {
            case 0:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Nëra\n");
                strcat(info, str);
            }
            case 1:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Policijos departamento{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 2:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Medikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 3:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Taksi{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 5:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Mechanikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 7:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Lucchese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 8:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Genovese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 9:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}„Aro“{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 10:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Radistø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 11:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}S**{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
            case 21:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Tolimûjø reisø vairuotojø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[clickedplayerid][DatePlayerBecamePav],PlayerDB[clickedplayerid][PavWarnings]);
                strcat(info, str);
            }
        }

        switch(PlayerDB[clickedplayerid][adminlvl])
        {
            case 0:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}Nëra\n");
            }
            case 1:
            {
                TimestampToDate(PlayerDB[clickedplayerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}I lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[clickedplayerid][AdminWarnings]);
                strcat(info, str);
            }
            case 2:
            {
                TimestampToDate(PlayerDB[clickedplayerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}II lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[clickedplayerid][AdminWarnings]);
                strcat(info, str);
            }
            case 3:
            {
                TimestampToDate(PlayerDB[clickedplayerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}III lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[clickedplayerid][AdminWarnings]);
                strcat(info, str);
            }
            case 4:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}IV lygio{FFFFFF} | Galioja neribotà laikà\n");
                strcat(info, str);
            }
            case 5:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}V lygio{FFFFFF} | Galioja neribotà laikà\n");
                strcat(info, str);
            }
        }
        if(PlayerDB[clickedplayerid][VIP] == 1)
        {

            TimestampToDate(PlayerDB[clickedplayerid][VIPLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}VIP statusas: {FFFF00}Yra{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n\n",Years, Month, Day, Hour, Minute,PlayerDB[clickedplayerid][VIPWarnings]);
        }
        else
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}VIP statusas: {FFFF00}Nëra\n\n");
        }
        strcat(info, str);
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Ðiandien praþaidæs serveryje: {FFFF00}%imin{FFFFFF} | Iðviso: {FFFF00}%dmin. \n",PlayerDB[clickedplayerid][SiandienZaista],PlayerDB[clickedplayerid][ZaistaTotal]);
        strcat(info, str);

        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Pasirinkto þaidëjo informacija", info, "Gerai", "");
    }
    //cmd_info(playerid,clickedplayerid);
	return 1;
}
stock Vardas(playerid)
{
  	new NickVardas[MAX_PLAYER_NAME];
  	GetPlayerName(playerid,NickVardas,MAX_PLAYER_NAME);
  	return NickVardas;
}
stock GetPlayerIpEx(playerid){
	new ip[17];
	GetPlayerIp(playerid, ip, 17);
	return ip;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PlayerDB[playerid][LoggedIn] == 0)
	{
		ErrorMsg(playerid,"• Privalote pirma prisijungti!");
		return 0;
	}
	if(PlayerDB[playerid][Loaded] == 0)
	{
		ErrorMsg(playerid,"• Praðome palaukti kol jûsø informacija bus pilnai uþkrauta!");
		return 0;
	}
    if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
    {
        ErrorMsg(playerid,"• Jums yra uþdrausta þaisti ðiame serveryje.");
        return 0;
    }
    if(PlayerDB[playerid][LastSentCommandTime] == gettime())
    {
        ErrorMsg(playerid,"• Komandas naudoti galima tik kas 1sek.");
        return 0;
    }
    PlayerDB[playerid][LastSentCommandTime] = gettime();
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		ErrorMsg(playerid,"• Tokios komandos nëra. Visos komandos: /komandos");
	}
	return 1;
}
stock AddPoints(number)
{
    new
        tStr[16]; // Up to 9,999,999,999,999

    format(tStr,sizeof(tStr),"%d",number);

    if(strlen(tStr) < 4)
 	return tStr;

    new
        //rNumber = floatround((number+(number/3)),floatround_floor),
        iPos = strlen(tStr),
        iCount = 1;

    while(iPos > 0)
    {
		if(iCount == 4)
		{
		    iCount = 0;
		    strins(tStr,".",iPos,1);
	    	iPos ++;
	    }
    	iCount ++;
        iPos --;
    }
    return tStr;
}
stock AddSpaces(number)
{
    new
        tStr[16]; // Up to 9,999,999,999,999

    format(tStr,sizeof(tStr),"%d",number);

    if(strlen(tStr) < 4)
    return tStr;

    new
        //rNumber = floatround((number+(number/3)),floatround_floor),
        iPos = strlen(tStr),
        iCount = 1;

    while(iPos > 0)
    {
        if(iCount == 4)
        {
            iCount = 0;
            strins(tStr," ",iPos,1);
            iPos ++;
        }
        iCount ++;
        iPos --;
    }
    return tStr;
}
stock CreateCashPoint(Float:X,Float:Y,Float:Z)
{
	CashPointsCount+=1;
	CashPointPickup[CashPointsCount] = CreateDynamicPickup(1274, 2, X, Y, Z, 0);
	printf("Sukurtas bankomatas kurio ID:%i Cords(%f,%f,%f).",CashPointsCount,X,Y,Z);
}
CMD:telefonas(playerid,params[])
{
	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Telefono komandos", "/sms [V_P/ID] [Tekstas] - nusiøsti tekstinæ þinutæ. Kaina 1€\n/skamb [V_P/ID] - paskambinti þaidëjui. Kaina 4€\n/ans - atsiliepti á skambutá.\n/den - atmesti skambutá.\n/isjungti /ijungti - iðjungti/ájungti telefonà\n/likutis - suþinosite telefono sàskaitos likutá.", "Gerai","");
	return 1;
}
CMD:arsutampa(playerid,params[])
{
	new string[128];
	new PlayerVW = GetPlayerVirtualWorld(playerid);
	format(string, 128, "• PlayerVirtualWorld: %i", GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, 0xAFAFAFFF,string);
	format(string, 128, "• HouseID: %i", HouseInfo[PlayerVW-3][HouseID]);
	SendClientMessage(playerid, 0xAFAFAFFF,string);
	
	format(string, 128, "• HouseVirtualWorld: %i", HouseInfo[PlayerVW-3][HouseVirtualWorld]);
	format(string, 128, "• PlayerVW-3: %i", PlayerVW-3);
	SendClientMessage(playerid, 0xAFAFAFFF,string);
	return 1;
}
CMD:pturi(playerid,params[])
{
	new PlayerInterior = GetPlayerInterior(playerid);
	if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
	{
		new PlayerVW = GetPlayerVirtualWorld(playerid);
       	if(PlayerVW >= 3)
       	{
       		if(HouseInfo[PlayerVW-3][HouseID] >= 0)
       		{
       			if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
       			{
					new string[128];
					format(string, 128, "• Pirmà raktà turi: %s", HouseInfo[PlayerVW-3][NamoRaktas]);
					SendClientMessage(playerid, 0xAFAFAFFF,string);
				}
			}
		}
	}
	return 1;
}
CMD:sms(playerid,params[])
{
    if(PlayerDB[playerid][PhoneState] == 0)
    {
        ErrorMsg(playerid,"• Pirmiausia ájunkite savo telefonà /ijungti.");
        return 1;
    }
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
	new id,tekstas[100];
	if(sscanf(params,"us[100]",id,tekstas)) return ErrorMsg(playerid,"Komandos naudojimas:/sms [Þaidëjo dalis vardo arba ID] [Tekstas].");
	if(IsPlayerConnected(id))
	{
        if(PlayerDB[id][PrivateMode] == true)
        {
            ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
            return 1;
        }
        if(id == playerid)
        {
            ErrorMsg(playerid,"• Sau þinutës siûsti negalima.");
            return 1;
        }
		if(strlen(tekstas) == 0)
		{
			ErrorMsg(playerid,"• Þinutës be teksto iðsiøsti negalima.");
            return 1;
		}
		else
		{
			if(PlayerDB[playerid][PhoneBalance] == 0)
			{
				ErrorMsg(playerid,"• Jûsø telefono sàskaitoje nepakanka pinigø iðsiøsti þinutæ,praðome papildyti sàskaità.");
				return 1;
			}
			else
			{
				if(PlayerDB[id][PhoneState] == 0)
				{
					ErrorMsg(playerid,"• Ðio þaidëjo telefonas iðjungtas.");
				}
				else
				{
					PlayerDB[playerid][PhoneBalance]-=1;
					new MsgStr[144],MsgStr2[144];
                    if(PlayerDB[id][AfkState] == true)
                    {
                        format(MsgStr, 144, "{E3BA24}SMS: [%s(%i) >> %s(%i) (AFK) ]:", Vardas(playerid),playerid,Vardas(id),id);
                        format(MsgStr2, 144, "{E3BA24}SMS: [%s(%i) >> %s(%i) (AFK) ]:", Vardas(playerid),playerid,Vardas(id),id);
                        PlayerDB[id][GautosZinutes]+=1;
                    }
                    else
                    {
                        format(MsgStr, 144, "{E3BA24}SMS: [%s(%i) >> %s(%i) ]:", Vardas(playerid),playerid,Vardas(id),id);
                        format(MsgStr2, 144, "{E3BA24}SMS: [%s(%i) >> %s(%i) ]:", Vardas(playerid),playerid,Vardas(id),id);
                    }

                    SendClientMessage(playerid, DARK_YELLOW, MsgStr);
                    SendClientMessage(playerid, GELTONA, tekstas);
                    SendClientMessage(id, DARK_YELLOW, MsgStr2);
                    SendClientMessage(id, GELTONA, tekstas);
                    new QueryString[512];
                    mysql_format(connectionHandle, QueryString, 512, "INSERT INTO `smszinutes`(`ReceiverName`, `SenderName`, `SendingTime`, `Zinute`) VALUES ('%e','%e','%i','%e');", Vardas(id),Vardas(playerid),gettime(),tekstas);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
				}
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
	}
	return 1;
}
CMD:isjungti(playerid,params[])
{
	if(PlayerDB[playerid][PhoneState] == 1)
	{
		ErrorMsg(playerid,"• Iðjungëte telefonà!");
		PlayerDB[playerid][PhoneState] = 0;
		GameTextForPlayer(playerid, "~r~ISJUNGTAS", 3000,4);
	}
	else{
		ErrorMsg(playerid,"• Jûsø telefonas jau yra iðjungtas!");
	}
	return 1;
}
CMD:ijungti(playerid,params[])
{
	if(PlayerDB[playerid][PhoneState] == 0)
	{
		ErrorMsg(playerid,"• Ijungëte telefonà!");
		PlayerDB[playerid][PhoneState] = 1;
		GameTextForPlayer(playerid, "~g~IJUNGTAS", 3000,4);
	}
	else{
		ErrorMsg(playerid,"• Jûsø telefonas jau yra ájungtas!");
	}
	return 1;
}
CMD:likutis(playerid,params[])
{
	new message[50];
	format(message,50,"• Jûsø telefono sàskaitoje yra: %s€",AddPoints(PlayerDB[playerid][PhoneBalance]));
	SendClientMessage(playerid, Bright_YELLOW, message);
	return 1;
}
CMD:skamb(playerid,params[])
{
    if(PlayerDB[playerid][PhoneState] == 0)
    {
        ErrorMsg(playerid,"• Pirmiausia ájunkite savo telefonà /ijungti.");
        return 1;
    }
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
	if(PlayerDB[playerid][TalkingWithPhone] == 1)
	{
		ErrorMsg(playerid,"• Jûs jau kalbate telefonu!");
		SendClientMessage(playerid, ZYDRA, "• Kai baigsite,ragelá padësite su ( /bai ).");
	}
	else
	{
		new id;
		if(sscanf(params, "u", id)) return ErrorMsg(playerid,"• Naudojimas: /skamb [Þaidëjo Vardas_Pavarde/ID].");
		else
		{
			if(IsPlayerConnected(id))
			{
                if(PlayerDB[id][PrivateMode] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                    return 1;
                }
				if(PlayerDB[id][TalkingWithPhone] == 1)
				{
					ErrorMsg(playerid,"• Þaidëjas jau kalba telefonu.");
				}
				else
				{
					if(PlayerDB[playerid][PhoneBalance] >= 4)
					{
						if(PlayerDB[id][NeedToAnswer] > -1)
						{
							ErrorMsg(playerid,"• Linija uþimta.");
						}
						else
						{
                            PlayerDB[playerid][Apklausineja] = false;
							PlayerDB[playerid][PhoneBalance] -=4;
							PlayerDB[playerid][PhoneCallTaxTimer] = SetTimerEx("PhoneCallTax", 60000, true, "d", playerid);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
                            SetPlayerAttachedObject(playerid, 10, 330, 5, -0.405256, -0.000577, 0.107980, 38.940883, 339.253723, 264.400329);
							new string[144];
                            if(PlayerDB[id][AfkState] == true)
                            {
                                format(string, 144, "• Skambinate %s(%i) (AFK)...", Vardas(id),id);
                            }
                            else
                            {
                                format(string, 144, "• Skambinate %s(%i)...", Vardas(id),id);
                            }
							SendClientMessage(playerid, ZALIA, string);
							SendClientMessage(playerid, ZYDRA, "• Kai baigsite, ragelá padësite su ( /bai ).");
							PlayerDB[id][NeedToAnswer] = playerid;
							PlayerDB[playerid][IsPlayerCalling] = 1;
							PlayerDB[playerid][TalkingWithPhone] = 1;
							format(string,144,"• Jums skambina %s(%i). Galite atsiliepti (/ans) arba atmesti (/den).",Vardas(playerid),playerid);
							SendClientMessage(id, ZYDRA, string);
							GameTextForPlayer(id, "~g~JUMS SKAMBINA", 4000, 4);
						}
					}
					else
					{
						ErrorMsg(playerid,"• Jûsø telefono sàskaitoje nepakanka pinigø ðiam skambuèiui,praðome papildyti sàskaità.");
					}
				}
			}
			else
			{
				ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
			}
		}
	}
	return 1;
}
CMD:den(playerid,params[])
{
    if(PlayerDB[playerid][PhoneState] == 0)
    {
        ErrorMsg(playerid,"• Pirmiausia ájunkite savo telefonà /ijungti.");
        return 1;
    }
	if(PlayerDB[playerid][NeedToAnswer] > -1)
	{
        PlayerDB[PlayerDB[playerid][NeedToAnswer]][Apklausineja] = false;
		ErrorMsg(playerid,"Skambutis atmestas.");
		ErrorMsg(PlayerDB[playerid][NeedToAnswer],"Skambutis atmestas.");
		SetPlayerSpecialAction(PlayerDB[playerid][NeedToAnswer], SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(playerid, 10);
		PlayerDB[PlayerDB[playerid][NeedToAnswer]][IsPlayerCalling] = 0;
		PlayerDB[ PlayerDB[playerid][NeedToAnswer]  ][PlayerTalkingWith] = -1;
		PlayerDB[ PlayerDB[playerid][NeedToAnswer]  ][IsPlayerCalling] = 0;
		PlayerDB[ PlayerDB[playerid][NeedToAnswer]  ][TalkingWithPhone] = 0;
		PlayerDB[playerid][NeedToAnswer] = - 1;
	}
	else{
		ErrorMsg(playerid,"• Jums niekas neskambina!");
	}
	return 1;
}
CMD:ans(playerid,params[])
{
    if(PlayerDB[playerid][PhoneState] == 0)
    {
        ErrorMsg(playerid,"• Pirmiausia ájunkite savo telefonà /ijungti.");
        return 1;
    }
	if(PlayerDB[playerid][NeedToAnswer] > -1)
	{
		PlayerDB[playerid][TalkingWithPhone] = 1;
		PlayerDB[playerid][PlayerTalkingWith] = PlayerDB[playerid][NeedToAnswer];
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        SetPlayerAttachedObject(playerid, 10, 330, 5, -0.405256, -0.000577, 0.107980, 38.940883, 339.253723, 264.400329);
		SetPlayerSpecialAction(PlayerDB[playerid][PlayerTalkingWith], SPECIAL_ACTION_USECELLPHONE);
        SetPlayerAttachedObject(PlayerDB[playerid][PlayerTalkingWith], 10, 330, 5, -0.405256, -0.000577, 0.107980, 38.940883, 339.253723, 264.400329);
		PlayerDB[PlayerDB[playerid][PlayerTalkingWith]][PlayerTalkingWith] = playerid;
		PlayerDB[playerid][NeedToAnswer] = -1;
		new String[144];
		format(String,144,"• Jûs sujungtas su %s(%i). Pokalbá galite baigti paraðæ /bai",Vardas(playerid),playerid);
		SendClientMessage(PlayerDB[playerid][PlayerTalkingWith], ZALIA, String);
		format(String,144,"• Jûs sujungtas su %s(%i). Pokalbá galite baigti paraðæ /bai",Vardas(PlayerDB[playerid][PlayerTalkingWith]),PlayerDB[playerid][PlayerTalkingWith]);
		SendClientMessage(playerid, ZALIA, String);
	}
	else{
		ErrorMsg(playerid,"• Jums niekas neskambina!");
	}
	return 1;
}
forward PhoneCallTax(playerid);
public PhoneCallTax(playerid)
{
	if(PlayerDB[playerid][TalkingWithPhone] == 1 && PlayerDB[playerid][IsPlayerCalling] == 1)
	{
        if(PlayerDB[playerid][Apklausineja] == false)
        {
            if(PlayerDB[playerid][PhoneBalance] < 4)
            {
                PlayerDB[playerid][TalkingWithPhone] = 0;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject(playerid, 10);
                if(PlayerDB[playerid][PlayerTalkingWith] > -1)
                {
                    ErrorMsg(playerid,"Jûsø sàskaitoje nepakanka pinigø dar vienai minutei.");
                    ErrorMsg(playerid,"• Pokalbis baigtas.");
                    ErrorMsg(PlayerDB[playerid][PlayerTalkingWith],"• Pokalbis baigtas");
                    PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][TalkingWithPhone] = 0;
                    SetPlayerSpecialAction(PlayerDB[playerid][PlayerTalkingWith], SPECIAL_ACTION_STOPUSECELLPHONE);
                    RemovePlayerAttachedObject(PlayerDB[playerid][PlayerTalkingWith], 10);
                    PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][PlayerTalkingWith] = -1;
                    PlayerDB[playerid][PlayerTalkingWith] = -1;
                    PlayerDB[playerid][IsPlayerCalling] = 0;
                    PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][IsPlayerCalling] = 0;
                }
            }
            else{
                PlayerDB[playerid][PhoneBalance]-=4;
            }
        }
	}
	else{
		KillTimer(PlayerDB[playerid][PhoneCallTaxTimer]);
	}
}
CMD:bai(playerid,params[])
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE || PlayerDB[playerid][TalkingWithPhone] == 1 || PlayerDB[playerid][IsPlayerCalling] == 1)
	{
		PlayerDB[playerid][TalkingWithPhone] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(playerid, 10);
		if(PlayerDB[playerid][PlayerTalkingWith] > -1)
		{
			ErrorMsg(playerid,"• Pokalbis baigtas.");
			ErrorMsg(PlayerDB[playerid][PlayerTalkingWith],"• Pokalbis baigtas");
			PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][TalkingWithPhone] = 0;
			SetPlayerSpecialAction(PlayerDB[playerid][PlayerTalkingWith], SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject(PlayerDB[playerid][PlayerTalkingWith], 10);
			PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][PlayerTalkingWith] = -1;
			PlayerDB[playerid][PlayerTalkingWith] = -1;
			PlayerDB[playerid][IsPlayerCalling] = 0;
			PlayerDB[ PlayerDB[playerid][PlayerTalkingWith] ][IsPlayerCalling] = 0;
		}
	}
	return 1;
}
stock SetVehicleEngineState(vehicleid,State)
{
	if(State)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		VehicleDB[vehicleid][VehicleEngineState] = 1;
	}
	else{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
		VehicleDB[vehicleid][VehicleEngineState] = 0;
	}
}
stock IsVehicleWithSeatBelts(ModelID)
{
    if(ModelID == 509 || ModelID == 481 || ModelID == 510 || ModelID == 462 || ModelID == 448 || ModelID == 581 || ModelID == 522 || ModelID == 461 || ModelID == 521 || ModelID == 523 || ModelID == 463 || ModelID == 586 || ModelID == 468 || ModelID == 471)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
CMD:dirzas(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid) == 1)
	{
        new vid = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vid);
		if(IsVehicleWithSeatBelts(model) == 0)
		{
			ErrorMsg(playerid,"Ði transporto priemonë neturi saugos dirþø/dirþo.");
		}
		else
        {
			if(PlayerDB[playerid][SeatBelt] == 1)
			{
				SendClientMessage(playerid, GELTONA, "• Nusiemëte dirþà.");
				PlayerDB[playerid][SeatBelt] = 0;
			}
			else
            {
                SendClientMessage(playerid, GELTONA, "• Pradëjote dëtis saugos dirþà tr.priemonëje.");
                SetTimerEx("FinishedSeatBelt", 5000, false, "di", playerid,vid);
			}
		}
	}
	else{
		ErrorMsg(playerid,"Jûs ne maðinoje.");
	}
	return 1;
}
forward FinishedSeatBelt(playerid,vid);
public FinishedSeatBelt(playerid,vid)
{
    if(GetPlayerVehicleID(playerid) == vid)
    {
        PlayerDB[playerid][SeatBelt] = 1;
        SendClientMessage(playerid, GELTONA, "• Sëkmingai uþsidëjote dirþà.");
    }
    return 1;
}
CMD:variklis(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsVehicleModelWithEngine(GetVehicleModel(GetPlayerVehicleID(playerid))))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleid][VehicleEngineState] == 1)
			{
				GameTextForPlayer(playerid, "~r~UZGESINTAS!", 2000, 3);
				SetVehicleEngineState(vehicleid,false);
			}
			else
            {
                if(VehicleDB[vehicleid][FuelType] == 0)
                {
                    if(VehicleDB[vehicleid][Bendzinas] > 0)
                    {
                        GameTextForPlayer(playerid, "~g~UZVESTAS!", 2000, 3);
                        SetVehicleEngineState(vehicleid,true);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Maðinos uþvesti nepavyko.. Baigësi benzinas.");
                    }
                }
                else
                {
                    if(VehicleDB[vehicleid][Dujos] > 0)
                    {
                        GameTextForPlayer(playerid, "~g~UZVESTAS!", 2000, 3);
                        SetVehicleEngineState(vehicleid,true);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Maðinos uþvesti nepavyko.. Baigësi dujos.");
                    }
                }
			}
		}
		else{
			ErrorMsg(playerid,"Ði transporto priemonë neturi variklio.");
		}
	}
	else{
		ErrorMsg(playerid,"Privalote vairuoti maðinà ðiam veiksmui!");
	}
	return 1;
}
CMD:sviesos(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsVehicleModelWithEngine(GetVehicleModel(GetPlayerVehicleID(playerid))))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(VehicleDB[vehicleid][VehicleLights] == 1)
			{
				SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
				VehicleDB[vehicleid][VehicleLights] = 0;
			}
			else{
				SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
				VehicleDB[vehicleid][VehicleLights] = 1;
			}
		}
		else{
			ErrorMsg(playerid,"Ði transporto priemonë neturi ðviestuvø.");
		}
	}
	else{
		ErrorMsg(playerid,"Privalote vairuoti maðinà ðiam veiksmui!");
	}
	return 1;
}
stock IsVehicleModelWithEngine(modelid)
{
    if(IsARegularBike(modelid))
    {
        return 0;
    }
	return 1;
}
CMD:autopilotas(playerid,params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new model = GetVehicleModel(vehicleid);
		if(!(model == 509 || model == 481 || model == 510 ))//DVIRACIAI
		{
			if(VehicleDB[vehicleid][VRibotuvas] == 1)
			{
				VehicleDB[vehicleid][VRibotuvas] = 0;
				ErrorMsg(playerid, "• Iðjungëte autopilotà tr.priemonëje.");
			}
			else{
				VehicleDB[vehicleid][VRibotuvas] = 1;
				SendClientMessage(playerid, ZALIA, "• Ájungëte autopilotà tr.priemonëje.");
			}
		}
		else
		{
			ErrorMsg(playerid,"Jûsø transporto priemonë neturi variklio.");
		}
	}
	else{
		ErrorMsg(playerid,"Jûs turite bûti uþ transporto priemonës vairo norint naudoti auto pilotà.");
	}
	return 1;
}
CMD:uzdirbau(playerid,params[])
{
    new string[128];
    format(string,128,"» {ffffff}Jûs esate uþdirbæs: {7bae39}%i€.",PlayerDB[playerid][Uzdarbis]);
    SendClientMessage(playerid, 0x7bae39FF, string);
    format(string,128,"» {ffffff}Ðiandien uþsidirbote: {7bae39}%i€.",PlayerDB[playerid][UzdarbisSiandien]);
    SendClientMessage(playerid, 0x7bae39FF, string);
    format(string,128,"» {ffffff}Ðiandien pradirbote su darbiniu transportu: {7bae39}%imin{ffffff}, iðviso: {7bae39}%imin.",PlayerDB[playerid][TimeWorkedWithCarToday],PlayerDB[playerid][TimeWorkedWithCarTotal]);
    SendClientMessage(playerid, 0x7bae39FF, string);
    SendClientMessage(playerid, 0x7bae39FF, "»•« {ffffff}Uþdirbtus pinigus galite atsiimti savivaldybëje bet kuriuo metu: {7bae39}/gps.");
	return 1;
}
CMD:sukurtikupona(playerid, params[])
{
    new query[100];
	new string[144];
	if(PlayerDB[playerid][adminlvl] == 5)
	{
		new krd_sk, kupono_kodas[128];
		if(sscanf(params,"is[128]", krd_sk, kupono_kodas)) {
			return UsageMessage(playerid,"• Sukurti kuponà - /sukurtikupona [kreditu kiekis] [kupono_kodas]");
		}
		if( krd_sk < 1 || strlen(kupono_kodas) < 4 ) {
			return SendClientMessage(playerid, RAUDONA, "• Neteisingai suvesti parametrai (per trumpi).");
		}
		mysql_format(connectionHandle, query, 400, "INSERT INTO `luckytickets` (`token`, `kreditai` ) VALUES ('%s', '%i');", kupono_kodas, krd_sk);
   		mysql_function_query(connectionHandle,query,false,"SendQuery","");
		SendClientMessage(playerid, ZALIA, "* Kuponas sukurtas sëkmingai!");

		format(string, 144, "{6990FA}• Savininkas {FAD369}%s {6990FA}sukûrë kuponà:{FAD369} %s",Vardas(playerid),kupono_kodas);
 		SendClientMessageToAll(-1,string);
 		format(string, 144, "{6990FA}• Norëdami panaudoti kuponà, raðykite {FAD369}/kuponas {6990FA}ir laimëkite kreditø!");
 		SendClientMessageToAll(-1,string);
	}
	return true;
}
CMD:kuponas(playerid){
	showKuponas(playerid);
	return true;
}
CMD:slaptoskomandos(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] >= 4)
	{
        new info[512];
        format(info, 512, "Sukurti laikinà maðinà\nSunaikinti visas laikinas maðinas\nTeleportuotis á kordinates\nGauti visø ruðiø narkotikø\nFull Random Tune->Jai imanoma\nPasiimti pinigø á kiðenæ\nPasiimti ginklà");
        strcat(info, "\nSukurti namà vietoje kur stovite\nIðtrinti namà ið serverio pagal ID\nNusikelti á kità virtualø pasaulá ir interjierà");
		ShowPlayerDialog(playerid, 27, DIALOG_STYLE_LIST, "Slaptos komandos serveriui", info, "Rinktis", "Uþdaryti");
	}
    else
    {
        return 0;
    }
	return 1;
}
stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string)) {
    // No need to do anything if the limit is 0.
    if (limit == 0)
        return 0;

    new
             sublen = strlen(search),
             replen = strlen(replacement),
        bool:packed = ispacked(string),
             maxlen = maxlength,
             len = strlen(string),
             count = 0
    ;


    // "maxlen" holds the max string length (not to be confused with "maxlength", which holds the max. array size).
    // Since packed strings hold 4 characters per array slot, we multiply "maxlen" by 4.
    if (packed)
        maxlen *= 4;

    // If the length of the substring is 0, we have nothing to look for..
    if (!sublen)
        return 0;

    // In this line we both assign the return value from "strfind" to "pos" then check if it's -1.
    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        // Delete the string we found
        strdel(string, pos, pos + sublen);

        len -= sublen;

        // If there's anything to put as replacement, insert it. Make sure there's enough room first.
        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
        }

        // Is there a limit of number of replacements, if so, did we break it?
        if (limit != -1 && ++count >= limit)
            break;
    }
    return count;
}
stock GetPlayerMaxIncomeFwMSG(playerid)
{
	new PlayerXP = GetPlayerScore(playerid);
	new Income = 0;
	Income += 50;
	if(PlayerXP > 2000)
	{
		PlayerXP-=2000;
		Income += floatround(  PlayerXP / 1000, floatround_floor);
	}
    if(PlayerDB[playerid][Job] >= 12 && PlayerDB[playerid][Job] < 21)
    {
        Income = floatround( Income / 2, floatround_floor);
    }
    if(Income > 200)
    {
        Income = 200;
    }
	return Income;
}
stock CreateDarboCar(modelid, Float:Xq, Float:Yq, Float:Zq, Float:Aq, Color1, Color2,darboidas)
{
    new vehicleid;

    switch(darboidas)
    {
        case 1..2:
        {
            vehicleid = AddStaticVehicleEx(modelid,Xq,Yq,Zq+0.1,Aq,Color1,Color2,200,1);
        }
        case 6:
        {
            vehicleid = AddStaticVehicleEx(modelid,Xq,Yq,Zq+0.1,Aq,Color1,Color2,200,1);
        }
        case 11:
        {
            vehicleid = AddStaticVehicleEx(modelid,Xq,Yq,Zq+0.1,Aq,Color1,Color2,200,1);
        }
        case 16:
        {
			vehicleid = AddStaticVehicleEx(modelid,Xq,Yq,Zq+0.1,Aq,Color1,Color2,40,0);
		}
        default:
        {
            vehicleid = AddStaticVehicleEx(modelid,Xq,Yq,Zq+0.1,Aq,Color1,Color2,200,0);
        }
    }

	if(modelid == 490 && darboidas == 2)
	{
		new objectid = CreateDynamicObject(19329, 0, 0, 0, 0, 0, 0);
		SetDynamicObjectMaterialText(objectid,0,"+",90,"Arial",255,1,0xFFFF0000,0,OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
        AttachDynamicObjectToVehicle(objectid, vehicleid,  0.000000, 2.110000, 0.474999, 85.079940, 0.000000, 0.000000);
	}
    else if(modelid == 418 && (darboidas == 3 || darboidas == 4))
    {
        new objectid = CreateDynamicObject(19308, 0,0,0, 0, 0, 0);
        AttachDynamicObjectToVehicle(objectid, vehicleid, 0.000000, 0.000000, 1.109999, 0.000000, 0.000000, 0.000000); //Object Model: 19308 |
    }
    else if(modelid == 560 && (darboidas == 3 || darboidas == 4))
    {
        new objectid = CreateDynamicObject(19308, 0,0,0, 0, 0, 0);
        AttachDynamicObjectToVehicle(objectid, vehicleid, 0.000000, -0.269999, 0.909999, 0.000000, 0.000000, 0.000000); //Object Model: 19308 |
    }

    if(darboidas == 3 || darboidas == 4)
    {
        VehicleDB[vehicleid][VehicleWithTaxometer] = true;
    }
    if(darboidas == 19)
    {
        CreateDynamic3DTextLabel("Norite picos? /ppica", PILKA, 0, 0, 0, 15, INVALID_PLAYER_ID, vehicleid, 1, 0,0);
    }
    if(darboidas == 7 || darboidas == 8)
    {
        if(modelid == 498)
        {
            VehicleDB[vehicleid][BoxesInCarLabel] = CreateDynamic3DTextLabel("0/40", 0x50AE4DFF, 0.000000, -3.090023, 0.634999, 5, INVALID_PLAYER_ID, vehicleid, 0, 0, 0);
        }
    }
    switch(darboidas)
    {
        case 1:
        {
            SetVehicleNumberPlate(vehicleid, "Policija");
        }
        case 2:
        {
            SetVehicleNumberPlate(vehicleid, "Medikai");
        }
        case 4:
        {
            SetVehicleNumberPlate(vehicleid, "Taksi");
        }
        case 5:
        {
            SetVehicleNumberPlate(vehicleid, "Mechanikai");
        }
        case 7:
        {
            SetVehicleNumberPlate(vehicleid, "Lucchese");
        }
        case 8:
        {
            SetVehicleNumberPlate(vehicleid, "Genovese");
        }
        case 9:
        {
            SetVehicleNumberPlate(vehicleid, "Aras");
        }
        case 10:
        {
            SetVehicleNumberPlate(vehicleid, "Radija");
        }
        case 13:
        {
            SetVehicleNumberPlate(vehicleid, "Autobusai");
        }
        case 14:
        {
            SetVehicleNumberPlate(vehicleid, "Ugnegiasiai");
        }
        case 15:
        {
            SetVehicleNumberPlate(vehicleid, "Valytojai");
        }
        case 16:
        {
            SetVehicleNumberPlate(vehicleid, "Kurjeriai");
        }
        case 19:
        {
            SetVehicleNumberPlate(vehicleid, "BurgerShot");
        }
        case 21:
        {
            SetVehicleNumberPlate(vehicleid, "Fûristai");
        }

    }
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleEngineState] = 0;
    VehicleDB[vehicleid][VehicleLights] = 0;
    VehicleDB[vehicleid][VRibotuvas] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = 0;
    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;

    VehicleDB[vehicleid][TURGUS] = 0;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[modelid-400];
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = 0;
    VehicleDB[vehicleid][DARBOMASINA] = true;
    VehicleDB[vehicleid][DARBOID] = darboidas;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    format(VehicleDB[vehicleid][VehicleNumbers],8,"Nëra");
    VehicleDB[vehicleid][VehicleNumReg] = 0;
    VehicleDB[vehicleid][VehicleColor1] = 0;
    VehicleDB[vehicleid][VehicleColor2] = 0;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = 0;
    VehicleDB[vehicleid][AdminMasina] = false;
    VehicleDB[vehicleid][VIPMasina] = false;
    return vehicleid;
}
CMD:tpnascar(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
		{
			ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
			return 1;
		}
		if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
       		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
         	return 1;
		}
		new PlayerInterior = GetPlayerInterior(playerid);
    	if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        new LabelText[100];
        format(LabelText, 100, "%s Nusiteleportavo su komanda /tpnascar", Vardas(playerid));
        CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
		SetPlayerInterior(playerid, 7);
		SetPlayerPos(playerid, -1394.7441,-268.0297,1044.0055);
		SetPlayerFacingAngle(playerid, 352.0032);
		SetPlayerVirtualWorld(playerid, 0);
    	/*new PlayerVirtualWorld = GetPlayerVirtualWorld(playerid);
 		if(PlayerVirtualWorld >= 3 && HouseInfo[PlayerVirtualWorld-3][HouseID] >= 0)
 		{
 			HouseInfo[PlayerVirtualWorld-3][kieknamie]--;
   		}*/
	}
	return 1;
}
CMD:nascar(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if(NascarMode == 0)
		{
			NascarMode = 1;
			NascarVehicle[0] = CreateVehicle(502,-1402.5763000,-234.7019000,1043.1746000,359.9112000,22,34,15); //Hotring Racer A
			NascarVehicle[1] = CreateVehicle(494,-1400.3051000,-243.3693000,1043.2949000,351.1366000,37,37,15); //Hotring
			NascarVehicle[2] = CreateVehicle(494,-1404.5869000,-242.6903000,1043.3361000,349.9548000,37,37,15); //Hotring
			NascarVehicle[3] = CreateVehicle(503,-1407.3098000,-250.3821000,1043.4508000,350.1292000,57,90,15); //Hotring Racer B
			NascarVehicle[4] = CreateVehicle(503,-1403.6443000,-250.9912000,1043.4680000,350.7624000,57,90,15); //Hotring Racer B
			NascarVehicle[5] = CreateVehicle(503,-1399.9775000,-251.2837000,1043.4386000,352.3963000,57,90,15); //Hotring Racer B
			NascarVehicle[6] = CreateVehicle(494,-1401.5266000,-259.2122000,1043.5618000,350.2815000,109,108,15); //Hotring
			NascarVehicle[7] = CreateVehicle(494,-1404.9001000,-258.3986000,1043.5579000,349.9957000,109,108,15); //Hotring
			NascarVehicle[8] = CreateVehicle(494,-1408.7001000,-257.4968000,1043.5620000,349.9956000,109,108,15); //Hotring
			for(new i = 0;i<9;i++)
			{
				new vehicleid = NascarVehicle[i];
				VehicleDB[vehicleid][VehicleEngineState] = 0;
				VehicleDB[vehicleid][VehicleLights] = 0;
				VehicleDB[vehicleid][VRibotuvas] = 0;
				VehicleDB[vehicleid][VehicleDedicatedForEvent] = 1;

                VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
				VehicleDB[vehicleid][VMMasina] = 0;
				VehicleDB[vehicleid][TURGUS] = 0;
				VehicleDB[vehicleid][Rida] = 0;
				VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
				VehicleDB[vehicleid][Dujos] = 0.0;
				VehicleDB[vehicleid][FuelType] = 0;
				format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
				VehicleDB[vehicleid][VMMasina] = 0;
				VehicleDB[vehicleid][DARBOMASINA] = false;
				VehicleDB[vehicleid][DARBOID] = 0;
                VehicleDB[vehicleid][VehicleWithOwner] = false;
				LinkVehicleToInterior(vehicleid, 7);
			}
			new string[144];
			format(string, 144, "• %s: ájungiau nascar maðinas.", Vardas(playerid));
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
				{
					SendClientMessage(i, RAUDONA, string);
				}
			}
		}
		else
		{
			for(new i = 0;i<9;i++)
			{
				DestroyVehicle(NascarVehicle[i]);
			}
			NascarMode = 0;
			new string[144];
			format(string, 144, "• %s: iðjungiau nascar maðinas.", Vardas(playerid));
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
				{
					SendClientMessage(i, RAUDONA, string);
				}
			}
		}
	}
	return 1;
}
CMD:tprace(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
		{
			ErrorMsg(playerid,"Jûsø ieðko policija, todël negalite teleportuotis.");
			return 1;
		}
		if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
       		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
         	return 1;
		}
		new PlayerInterior = GetPlayerInterior(playerid);
    	if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        new LabelText[100];
        format(LabelText, 100, "%s Nusiteleportavo su komanda /tprace", Vardas(playerid));
        CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
		SetPlayerInterior(playerid, 4);
		SetPlayerPos(playerid, -1444.9030,-658.2515,1052.6227);
		SetPlayerFacingAngle(playerid, 61.1795);
		SetPlayerVirtualWorld(playerid, 0);
	}
	return 1;
}
CMD:race(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if(RaceMode == 0)
		{
			RaceMode = 1;
			RaceVehicle[0] = CreateVehicle(562,-1447.9495000,-675.3331000,1053.2819000,62.3612000,90,87,15); //Elegy
			RaceVehicle[1] = CreateVehicle(562,-1446.1338000,-672.7731000,1053.0514000,59.8396000,90,87,15); //Elegy
			RaceVehicle[2] = CreateVehicle(562,-1440.2610000,-664.5215000,1052.5305000,59.7243000,90,87,15); //Elegy
			RaceVehicle[3] = CreateVehicle(562,-1438.1600000,-661.2118000,1052.2505000,60.5038000,90,87,15); //Elegy
			RaceVehicle[4] = CreateVehicle(560,-1438.0997000,-653.1941000,1051.3867000,63.6753000,77,98,15); //Sultan
			RaceVehicle[5] = CreateVehicle(560,-1435.0479000,-649.4857000,1050.4186000,60.0554000,77,98,15); //Sultan
			RaceVehicle[6] = CreateVehicle(560,-1433.2451000,-646.7249000,1050.0645000,60.2565000,77,98,15); //Sultan
			RaceVehicle[7] = CreateVehicle(560,-1431.9176000,-644.1310000,1049.9109000,62.0495000,77,98,15); //Sultan
			RaceVehicle[8] = CreateVehicle(560,-1430.7070000,-640.1641000,1049.7280000,64.1859000,77,98,15); //Sultan
			RaceVehicle[9] = CreateVehicle(560,-1429.8156000,-637.0702000,1049.9940000,65.2242000,77,98,15); //Sultan
			RaceVehicle[10] = CreateVehicle(562,-1451.4829000,-653.3170000,1050.4819000,61.1952000,90,87,15); //Elegy
			RaceVehicle[11] = CreateVehicle(562,-1462.9158000,-652.5010000,1050.6051000,56.8030000,90,87,15); //Elegy
			for(new i = 0;i<12;i++)
			{
				new vehicleid = RaceVehicle[i];
				VehicleDB[vehicleid][VehicleEngineState] = 0;
				VehicleDB[vehicleid][VehicleLights] = 0;
				VehicleDB[vehicleid][VRibotuvas] = 0;
				VehicleDB[vehicleid][VehicleDedicatedForEvent] = 1;

                VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
				VehicleDB[vehicleid][VMMasina] = 0;
				VehicleDB[vehicleid][TURGUS] = 0;
				VehicleDB[vehicleid][Rida] = 0;
				VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
				VehicleDB[vehicleid][Dujos] = 0.0;
				VehicleDB[vehicleid][FuelType] = 0;
				format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
				VehicleDB[vehicleid][VMMasina] = 0;
				VehicleDB[vehicleid][DARBOMASINA] = false;
				VehicleDB[vehicleid][DARBOID] = 0;
                VehicleDB[vehicleid][VehicleWithOwner] = false;
				LinkVehicleToInterior(vehicleid, 4);
			}
			new string[144];
			format(string, 144, "• %s: ájungiau race maðinas.", Vardas(playerid));
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
				{
					SendClientMessage(i, RAUDONA, string);
				}
			}
		}
		else
		{
			for(new i = 0;i<12;i++)
			{
				DestroyVehicle(RaceVehicle[i]);
			}
			RaceMode = 0;
			new string[144];
			format(string, 144, "• %s: iðjungiau race maðinas.", Vardas(playerid));
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
				{
					SendClientMessage(i, RAUDONA, string);
				}
			}
		}
	}
	return 1;
}
CMD:achat(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if(!isnull(params))
		{
			new tekstas[100];
			sscanf(params, "s[100]", tekstas);
			new string[128];
            switch(PlayerDB[playerid][adminlvl])
            {
                case 1:
                {
                    format(string,128,"[Admin pokalbis] [I lygio %s(%i)]: %s",Vardas(playerid),playerid,tekstas);
                }
                case 2:
                {
                    format(string,128,"[Admin pokalbis] [II lygio %s(%i)]: %s",Vardas(playerid),playerid,tekstas);
                }
                case 3:
                {
                    format(string,128,"[Admin pokalbis] [III lygio %s(%i)]: %s",Vardas(playerid),playerid,tekstas);
                }
                case 4:
                {
                    format(string,128,"[Admin pokalbis] [IV lygio %s(%i)]: %s",Vardas(playerid),playerid,tekstas);
                }
                case 5:
                {
                    format(string,128,"[Admin pokalbis] [V lygio %s(%i)]: %s",Vardas(playerid),playerid,tekstas);
                }
            }
			foreach(new i : Player)
			{
				if(IsPlayerConnected(i) && PlayerDB[i][LoggedIn] == 1 && PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
				{
					SendClientMessage(i, 0xCCFFFFFF, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, CommandGuideColor,"• Raðyti kitiems administratoriams á bendrà chat'à: /achat [Tekstas]");
		}
	}
	return 1;
}
CMD:boom(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
            new vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleid][VehicleWithOwner] == true)
            {
                ErrorMsg(playerid,"• Nuosavø tr. priemoniø sprogdinti negalite.");
            }
            else
            {
                SendClientMessage(playerid, ZYDRA, "• Maðina sëkmingai susprogdinote maðinà.");
                RemovePlayerFromVehicle(playerid);
                SetVehicleToRespawn(vehicleid);
                new LabelText[100];
                format(LabelText, 100, "Administratorius %s susprogdino maðinà /boom.", Vardas(playerid));
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 25.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,15);
            }
		}
		else
        {
			ErrorMsg(playerid,"• Privalote sedëti kokioje nors transporto priemonëje norëdami atlikti ðá veiksmà.");
		}
	}
    else if(PlayerDB[playerid][Job] == 5)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleid][VehicleWithOwner] == true)
            {
                ErrorMsg(playerid,"• Nuosavø tr. priemoniø sprogdinti negalite.");
            }
            else
            {
                SendClientMessage(playerid, ZYDRA, "• Maðina sëkmingai susprogdinote maðinà.");
                RemovePlayerFromVehicle(playerid);
                SetVehicleToRespawn(vehicleid);
                if(PlayerDB[playerid][VIP])
                {
                    SendClientMessage(playerid, ZALIA, "Uþ maðinos sunaikinimà gavote +6XP prie darbo patirties.");
                    PlusPlayerScore(playerid,6);
                    PlayerDB[playerid][Job5XP]+=6;
                }
                else
                {
                    SendClientMessage(playerid, ZALIA, "Uþ maðinos sunaikinimà gavote +3XP prie darbo patirties.");
                    PlusPlayerScore(playerid,3);
                    PlayerDB[playerid][Job5XP]+=3;
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Privalote sedëti kokioje nors transporto priemonëje norëdami atlikti ðá veiksmà.");
        }
    }
	return 1;
}
CMD:sk(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if(GalimaPaleistiSkaiciavima == false)
        {
            ErrorMsg(playerid,"• Skaièiavimas jau vyksta.");
        }
        else
        {
            new string[144];
            format(string, 144, "*** %s pradëjo skaièiavimà.", Vardas(playerid));
            SendClientMessageToAll(RAUDONA, string);
            Skaiciavimas();
        }
    }
    return 1;
}
CMD:offto(playerid,params[])
{
    PlayerDB[playerid][LeidziaTeleportacijaTo] = false;
    SendClientMessage(playerid, GELTONA, "• Pas tave {FE0000}negalës {FFFF00}atsikelti kiti þaidëjai.");
    return 1;
}
CMD:onto(playerid,params[])
{
    PlayerDB[playerid][LeidziaTeleportacijaTo] = true;
    SendClientMessage(playerid, GELTONA, "• Pas tave {34DB4D}galës {FFFF00}atsikelti kiti þaidëjai.");
    return 1;
}
CMD:offget(playerid,params[])
{
    PlayerDB[playerid][LeidziaTeleportacijaGet] = false;
    SendClientMessage(playerid, GELTONA, "• Tavæs negalës atkelti su /get.");
    return 1;
}
CMD:onget(playerid,params[])
{
    PlayerDB[playerid][LeidziaTeleportacijaGet] = true;
    SendClientMessage(playerid, GELTONA, "• Tave galës atkelti su /get.");
    return 1;
}
CMD:pzu(playerid,params[])
{
    if(PlayerDB[playerid][GasStationTimerRunsOrl] == true)
    {
        ErrorMsg(playerid,"• Ðiuo metu negalite naudoti ðios komandos.");
        return 1;
    }
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if(PlayerDB[playerid][PlayerSpectatesOther] == false)
        {
            if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
            {
                ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
                return 1;
            }
            if(IsPlayerInWarZone(playerid) == 1)
            {
                if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1))
                {
                    if(GenoveseGangZoneU == true)
                    {
                        ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                else if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1))
                {
                    if(LuccheseGangZoneU == true)
                    {
                        ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            new id;
            if(sscanf(params, "u", id))
            {
                UsageMessage(playerid,"• Priþiûrëti þaidëjà: /pzu [V_P/ID].");
            }
            else
            {
                if(IsPlayerConnected(id) && PlayerDB[id][Loaded] == 1)
                {
                    if(PlayerDB[id][PrivateMode] == true)
                    {
                        ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                        return 1;
                    }
                    if(id == playerid)
                    {
                        ErrorMsg(playerid,"• Savæs stebëti negalima.");
                    }
                    else
                    {
                        PlayerDB[playerid][BeforeSpectatingPlayerSkin] = GetPlayerSkin(playerid);
                        GetPlayerPos(playerid, PlayerDB[playerid][BeforeSpectatingX], PlayerDB[playerid][BeforeSpectatingY], PlayerDB[playerid][BeforeSpectatingZ]);
                        PlayerDB[playerid][BeforeSpectatingPlayerInterior] = GetPlayerInterior(playerid);
                        PlayerDB[playerid][BeforeSpectatingPlayerWorld] = GetPlayerVirtualWorld(playerid);

                        SetPlayerInterior(playerid, GetPlayerInterior(id));
                        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
                        new string[144];
                        format(string, 144, "{E3BA24}*** Stebite %s!", Vardas(id));
                        SendClientMessage(playerid, -1, string);
                        SendClientMessage(playerid, ZALIA, "Tau gali praversti komanda /dl stebint maðinà");
                        TogglePlayerSpectating(playerid, 1);
                        PlayerDB[playerid][PlayerSpectatesOther] = true;
                        PlayerDB[playerid][PlayerSpectatingTarget] = id;
                        PlayerDB[playerid][PlayerSpectatingAtPed] = true;
                        PlayerSpectatePlayer(playerid, id);
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra arba ðis þaidëjas nëra pilnai prisijungæs.");
                }
            }
        }
        else
        {
            PlayerDB[playerid][PlayerSpectatesOther] = false;
            SetPlayerVirtualWorld(playerid, PlayerDB[playerid][BeforeSpectatingPlayerWorld]);
            SetPlayerInterior(playerid, PlayerDB[playerid][BeforeSpectatingPlayerInterior]);
            SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][BeforeSpectatingPlayerSkin], PlayerDB[playerid][BeforeSpectatingX], PlayerDB[playerid][BeforeSpectatingY], PlayerDB[playerid][BeforeSpectatingZ], 0, 0, 0, 0, 0, 0, 0);
            TogglePlayerSpectating(playerid, 0);
            for(new i = 0;i<=12;i++)
            {
                new tmpAmmo = 0;
                tmpAmmo = PlayerWeaponAmmo[playerid][i];
                PlayerWeaponAmmo[playerid][i] = 0;
                GivePlayerWeaponEx(playerid,PlayerWeapons[playerid][i],tmpAmmo);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:to(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"• Jûs esate gaudomas,todël negalite teleportuotis.");
            return 1;
        }
        if((PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true))
        {
            ErrorMsg(playerid,"• Jûsø esate surakintas arba suriðtas, todël persikelti á kità vietà negalite.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			SendClientMessage(playerid,RAUDONA,"• Norint nauduoti ðità komandà, iðeikite ið pastato.");
        			return 1;
            	}
        	}
    	}
        if(PlayerDB[playerid][KraunuTr] == true)
        {
       		ErrorMsg(playerid,"• Krovimo metu negalite teleportuotis.");
         	return 1;
		}
		if(PlayerDB[playerid][Kraunasi] == true)
		{
       		ErrorMsg(playerid,"• Krovimo metu negalite teleportuotis.");
         	return 1;
		}
		if(PlayerDB[playerid][KraunasiDetales] == true)
		{
       		ErrorMsg(playerid,"• Krovimo metu negalite teleportuotis.");
         	return 1;
		}
		if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
       		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
         	return 1;
		}
        if(IsPlayerInWarZone(playerid) == 1)
        {
            if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1))
            {
                if(GenoveseGangZoneU == true)
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            else if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1))
            {
                if(LuccheseGangZoneU == true)
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                return 1;
            }
        }
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Pirmiausia iðeikite ið stebëjimo reþimo.");
            return 1;
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Nusiteleportuoti prie þaidëjo (be maðinos) - /to [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id) && PlayerDB[id][Loaded] == 1)
            {
                if(PlayerDB[id][PrivateMode] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                    return 1;
                }
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Savæs negalite.");
                    return 1;
                }

                if(PlayerDB[id][PlayerSpectatesOther] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas kaþkà stebi.");
                    return 1;
                }
                if(IsPlayerInWarZone(id) == 1)
                {
                    if(IsPlayerInDynamicArea(id, GenoveseGangZoneArea, 1))
                    {
                        if(GenoveseGangZoneU == true)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                            return 1;
                        }
                    }
                    else if(IsPlayerInDynamicArea(id, LuccheseGangZoneArea, 1))
                    {
                        if(LuccheseGangZoneU == true)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                            return 1;
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                if(PlayerDB[id][LeidziaTeleportacijaTo] == true)
                {
                    SetPlayerArmedWeapon(playerid, 0);
                    new Float:CordsOfID[3];
                    new Float:CordsOfPlayer[3];
                    new PlayerVW,PlayerI;
                    new IDVW,IDI;
                    GetPlayerPos(id, CordsOfID[0], CordsOfID[1], CordsOfID[2]);
                    GetPlayerPos(playerid, CordsOfPlayer[0], CordsOfPlayer[1], CordsOfPlayer[2]);
                    PlayerVW = GetPlayerVirtualWorld(playerid);
                    PlayerI = GetPlayerInterior(playerid);

                    IDVW = GetPlayerVirtualWorld(id);
                    IDI = GetPlayerInterior(id);


                    //EXECUTING...
                    SetPlayerPos(playerid, CordsOfID[0], CordsOfID[1], CordsOfID[2]);
                    SetPlayerInterior(playerid, IDI);
                    SetPlayerVirtualWorld(playerid, IDVW);
                    new string[144];
                    format(string, 144, "• Administratorius %s atsiteleportavo pas jus.", Vardas(playerid));
                    SendClientMessage(id, ZALIA, string);
                    format(string, 144, "• Atsiteleportavote pas %s.", Vardas(id));
                    SendClientMessage(playerid, ZALIA, string);

                    format(string, 100, "Administratorius %s atsiteleportavo pas þaidëjà %s", Vardas(playerid),Vardas(id));
                    CreateTemporarilyLabel(string,ORANGE, CordsOfID[0], CordsOfID[1], CordsOfID[2], 25.0,IDVW,IDI, 0 ,15);
                    format(string, 100, "Administratorius %s iðsiteleportavo pas þaidëjà %s", Vardas(playerid),Vardas(id));

                    CreateTemporarilyLabel(string,ORANGE, CordsOfPlayer[0], CordsOfPlayer[1], CordsOfPlayer[2], 25.0,PlayerVW,PlayerI, 0 ,15);
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas neleidþia atsiteleportuoti pas já.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:get(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 1)
    {

        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Pirmiausia iðeikite ið stebëjimo reþimo.");
            return 1;
        }
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"• Jûsø ieðko policija, todël negalite teleportuoti kitø þaidëjø.");
            return 1;
        }
        if((PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true))
        {
            ErrorMsg(playerid,"• Jûs esate surakintas arba suriðtas, todël negalite atkelti kitø þaidëjø.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			SendClientMessage(playerid,RAUDONA,"• Norint nauduoti ðità komandà, iðeikite ið pastato.");
        			return 1;
            	}
        	}
    	}
        if(IsPlayerInWarZone(playerid) == 1)
        {
            if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1))
            {
                if(GenoveseGangZoneU == true)
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            else if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1))
            {
                if(LuccheseGangZoneU == true)
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                return 1;
            }
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Atkelti þaidëjà pas save(be maðinos) - /get [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id) && PlayerDB[id][Loaded] == 1)
            {
                if(PlayerDB[id][PrivateMode] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                    return 1;
                }
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Savæs negalite.");
                    return 1;
                }
                if(PlayerDB[id][PlayerSpectatesOther] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas kaþkà stebi.");
                    return 1;
                }
                if(PlayerDB[id][LeidziaTeleportacijaGet] == false)
                {
                    ErrorMsg(playerid,"• Þaidëjas nenori bûti teleportuojamas.");
                    return 1;
                }
                if(PlayerDB[id][KraunuTr] == true)
                {
                	ErrorMsg(playerid,"• Ðiuo metu þaidëjà atkelti negalite.");
                    return 1;
				}
				if(PlayerDB[id][Kraunasi] == true)
                {
                	ErrorMsg(playerid,"• Ðiuo metu þaidëjà atkelti negalite.");
                    return 1;
				}
				if(PlayerDB[id][KraunasiDetales] == true)
                {
                	ErrorMsg(playerid,"• Ðiuo metu þaidëjà atkelti negalite.");
                    return 1;
				}
				if(PlayerDB[playerid][LaukiuVaistu] == true)
				{
		       		ErrorMsg(playerid,"• Ðiuo metu nþaidëjà atkelti negalite.");
		         	return 1;
				}
                if(PlayerDB[id][BEGA] == 1)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra bëglys,todël ðio þaidëjo negalite atkelti.");
                    return 1;
                }
                if((PlayerDB[id][Surakintas] == true || PlayerDB[id][Suristas] == true))
                {
                    ErrorMsg(playerid,"• Jûsø pasirinktas þaidëjas yra surakintas arba suriðtas, todël þaidëjo atkëlimas yra negalimas.");
                    return 1;
                }
                if(IsPlayerInWarZone(id) == 1)
                {
                    if(IsPlayerInDynamicArea(id, GenoveseGangZoneArea, 1))
                    {
                        if(GenoveseGangZoneU == true)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                            return 1;
                        }
                    }
                    else if(IsPlayerInDynamicArea(id, LuccheseGangZoneArea, 1))
                    {
                        if(LuccheseGangZoneU == true)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                            return 1;
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                new info[300];
                format(info, 300, "%s nori jus atkeldinti pas save.\nAr jûs sutinkate?", Vardas(playerid));
                ShowPlayerDialog(id, 53, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", info, "Taip", "Ne");
                SetPVarInt(id, "GetOfferer", playerid);
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:pildyti(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 3)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite noritis ðia admin komanda.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid))
        {
            new model = GetVehicleModel(GetPlayerVehicleID(playerid));
            if((model == 509 || model == 481 || model == 510 ))
            {
                ErrorMsg(playerid,"• Dviraèiai nenaudoja kuro.");
            }
            else
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(VehicleDB[vehicleid][FuelType] == 0)
                {
                    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[model-400];
                }
                else
                {
                    VehicleDB[vehicleid][Dujos] = DegaluTalpa[model-400];
                }
                SendClientMessage(playerid, ZALIA, "• Sëkmingai pripylëte pilnà maðinos bakà.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda nuo 3 administratoriaus lygmens.");
    }
    return 1;
}
CMD:ban(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 3)
    {
        new id,reason[90];
        if(sscanf(params, "u s[90]", id,reason))
        {
            UsageMessage(playerid,"• Uþdrausti þaidëjui lankytis serveryje: /ban [V_P/ID] [Prieþastis].");
        }
        else
        {
            if(strlen(reason) < 3)
            {
                UsageMessage(playerid,"• Uþdrausti þaidëjui lankytis serveryje: /ban [V_P/ID] [Prieþastis].");
                ErrorMsg(playerid,"• Per trumpa prieþastis.");
            }
            else
            {
                if(IsPlayerConnected(id))
                {
                    if(id == playerid)
                    {
                        ErrorMsg(playerid,"• Savæs blokuoti negalima.");
                    }
                    else if(PlayerDB[playerid][adminlvl] >= PlayerDB[id][adminlvl])
                    {
                        if(PlayerDB[id][PrivPriziuretojas] == 1 || PlayerDB[id][UnBanPriziuretojas] == 1 || PlayerDB[id][DirektoriuPriziuretojas] == 1 || PlayerDB[id][LyderiuPriziuretojas] == 1)
                        {
                            if(PlayerDB[playerid][adminlvl] < 4)
                            {
                                ErrorMsg(playerid,"• Priþiûrëtojo uþblokuoti negalite.");
                                return 1;
                            }
                        }
                        if(PlayerDB[id][PlayerGetsBan] == false && PlayerDB[id][CantPlayBecouseOfBan] == false)
                        {
                            PlayerDB[id][PlayerGetsBan] = true;
                            BanPlayer(id,reason,0,playerid,0);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Þaidëjas jau yra blokuojamas/uþblokuotas.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûs esate þemesnio rango administratorius uþ þaidëjà kurá norite blokuoti.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Per trumpa prieþastis,patikslinkite Vardà ir Pavardæ.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:banex(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 2)
    {
        new id,time,reason[90];
        if(sscanf(params, "uis[90]", id,time,reason))
        {
            UsageMessage(playerid,"• Uþdrausti þaidëjui laikinai lankytis serveryje: /banex [V_P/ID] [Valandos 1-24] [Prieþastis].");
        }
        else
        {
            if(time >= 1 && time < 25)
            {
                if(strlen(reason) > 2)
                {
                    if(IsPlayerConnected(id))
                    {
                        if(id == playerid)
                        {
                            ErrorMsg(playerid,"• Savæs blokuoti negalima.");
                        }
                        else if(PlayerDB[playerid][adminlvl] >= PlayerDB[id][adminlvl])
                        {
                            if(PlayerDB[id][PlayerGetsBan] == false && PlayerDB[id][CantPlayBecouseOfBan] == false)
                            {
                                if(PlayerDB[id][PrivPriziuretojas] == 1 || PlayerDB[id][UnBanPriziuretojas] == 1 || PlayerDB[id][DirektoriuPriziuretojas] == 1 || PlayerDB[id][LyderiuPriziuretojas] == 1)
                                {
                                    if(PlayerDB[playerid][adminlvl] < 4)
                                    {
                                        ErrorMsg(playerid,"• Priþiûrëtojo uþblokuoti negalite.");
                                        return 1;
                                    }
                                }
                                PlayerDB[id][PlayerGetsBan] = true;
                                //BLOKAVIMO FUNKCIJOS
                                new string[144];
                                format(string, 144, "[ban] %s uþblokavo jus %i valandoms uþ: (%s)", Vardas(playerid),time,reason);
                                SendClientMessage(id, GELTONA, string);
                                format(string, 144, "[ban] %s uþblokavo %s %i valandoms uþ (%s)", Vardas(playerid),Vardas(id),time,reason);
                                SendClientMessageToAll(GELTONA, string);
                                SendClientMessage(id, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                                SendClientMessage(id, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                                new querystring[300];
                                new PlayerIP[16];
                                GetPlayerIp(id, PlayerIP, 16);
                                new years,month,day,hour,minute;
                                getdate(years, month, day);
                                gettime(hour, minute);
                                mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', '%s (%s) [%d-%0d-%0d %0d:%0d ]', '1', '%i');", Vardas(id),PlayerIP,reason,Vardas(playerid),years,month,day,hour,minute,gettime() + (time * 3600));
                                mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                                SetTimerEx("DelayedKick", 1000, false, "d", id);

                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas jau yra blokuojamas/uþblokuotas.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Jûs esate þemesnio rango administratorius uþ þaidëjà kurá norite blokuoti.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Per trumpa prieþastis,patikslinkite Vardà ir Pavardæ.");
                    }
                }
                else
                {
                    UsageMessage(playerid,"• Uþdrausti þaidëjui laikinai lankytis serveryje: /banex [V_P/ID] [Valandos 1-24] [Prieþastis].");
                    ErrorMsg(playerid,"• Per trumpa prieþastis.");
                }
            }
            else
            {
                UsageMessage(playerid,"• Uþdrausti þaidëjui laikinai lankytis serveryje: /banex [V_P/ID] [Valandos 1-24] [Prieþastis].");
                ErrorMsg(playerid,"• Laikas turi bûti nurodytas intervale tarp 1 ir 24.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:kick(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        new id,reason[90];
        if(sscanf(params, "us[90]", id,reason))
        {
            UsageMessage(playerid,"• Iðmesti þaidëjà ið serverio: /kick [V_P/ID] [Prieþastis].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(strlen(reason) <= 2)
                {
                    ErrorMsg(playerid,"• Per trumpa pieþastis.");
                }
                else if(id == playerid)
                {
                    ErrorMsg(playerid,"• Savæs iðmesti negalima.");
                }
                else
                {
                    if(PlayerDB[id][adminlvl] == 5 && PlayerDB[playerid][adminlvl] != 5)
                    {
                        ErrorMsg(playerid,"• Neturite tam ágaliojimø.");
                    }
                    else
                    {
                        new string[128];
                        format(string, 128, "[SERVERIS] Administratorius %s iðmetë jus ið serverio uþ (%s)", Vardas(playerid),reason);
                        SendClientMessage(id, ZYDRA, string);
                        SetTimerEx("DelayedKick", 1000, false, "d", id);
                        format(string, 128, "[SERVERIS] Administratorius %s iðmetë þaidëjà %s uþ %s", Vardas(playerid),Vardas(id),reason);
                        SendClientMessageToAll(ZYDRA, string);
                    }
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
stock Skaiciavimas()
{
    GalimaPaleistiSkaiciavima = false;
    GameTextForAll("~g~-~r~3~g~-", 2000, 4);
    foreach(new i : Player)
    {
        PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
    }
    SetTimer("Skaiciavimas2", 1000, false);
}
forward Skaiciavimas2();
public Skaiciavimas2()
{
    GameTextForAll("~g~-~r~2~g~-", 2000, 4);
    foreach(new i : Player)
    {
        PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
    }
    SetTimer("Skaiciavimas1", 1000, false);
}
forward Skaiciavimas1();
public Skaiciavimas1()
{
    GameTextForAll("~g~-~r~ 1 ~g~-", 2000, 4);
    foreach(new i : Player)
    {
        PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
    }
    SetTimer("SkaiciavimasGO", 1000, false);
}
forward SkaiciavimasGO();
public SkaiciavimasGO()
{
    GameTextForAll("~g~-~b~PIRMYN~g~-", 2000, 4);
    foreach(new i : Player)
    {
        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
    }
    SetTimer("SkaiciavimasReset", 1000, false);
}
forward SkaiciavimasReset();
public SkaiciavimasReset()
{
    GalimaPaleistiSkaiciavima = true;
}
CMD:ginklai(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite naudotis komanda /ginklai.");
            return 1;
        }
		else if(PlayerDB[playerid][AdminWeaponsCD] > 0)
		{
			SendClientMessage(playerid, RAUDONA, "• Ðiuos ginklus galite pasiimti tik kas 5minutes!");
			return 1;
		}
		PlayerDB[playerid][AdminWeaponsCD] = 5;
		GivePlayerWeaponEx(playerid, WEAPON_SNIPER, 20);
		GivePlayerWeaponEx(playerid, WEAPON_M4, 400);
        if(PlayerDB[playerid][adminlvl] >= 3)
        {
            SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
            GivePlayerWeaponEx(playerid, WEAPON_UZI,200);
        }
		SendClientMessage(playerid, ZYDRA, "• Gavote adminø ginklus");
	}
	return 1;
}
CMD:skristi(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    }
    return 1;
}
CMD:gydytis(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
        if((PlayerDB[playerid][BEGA] == 1))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite gydytis.");
            return 1;
        }
        if(IsPlayerInWarZone(playerid) == 1)
        {
            ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
            return 1;
        }
        else if(PlayerDB[playerid][LastTimePlayerFought] + 10 >= gettime())
        {
            ErrorMsg(playerid,"• Jûs esate kovoje,todël negalite gydytis.");
            return 1;
        }
		SetPlayerHealthEx(playerid, 100.0);
		SetPlayerArmourEx(playerid, 100.0);
		if(IsPlayerInAnyVehicle(playerid))
		{
            new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleHealth(vehicleid, 1000.0);
            RepairVehicle(vehicleid);
		}
		SendClientMessage(playerid, ZALIA,"Pasigydëte.");
        new LabelText[100];
        format(LabelText, 100, "Administratorius %s pasigydë su komanda /gydytis", Vardas(playerid));
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 25.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,15);
	}
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
	return 1;
}
stock CreateTemporarilyLabel(text[],color, Float:X, Float:Y, Float:Z, Float:DrawDistance, virtualworld, interiorid, testLOS,TimeInS)
{
    new Text3D:Label = CreateDynamic3DTextLabel(text,color, X, Y, Z, DrawDistance, INVALID_PLAYER_ID,INVALID_VEHICLE_ID, testLOS, virtualworld, interiorid);
    for(new i = 0;i < MAX_3DTEXT_GLOBAL; i++)
    {
        if(Tmp3DTextLabelsExists[i] == false)
        {
            Tmp3DTextLabelsExists[i] = true;
            Tmp3DTextLabelsExistsTill[i] = gettime() + TimeInS;
            Tmp3DTextLabels[i] = Label;
            break;
        }
    }
}
CMD:heal(playerid,params[])
{
	if(PlayerDB[playerid][adminlvl] > 0)
	{
        if(PlayerDB[playerid][adminlvl] < 3)
        {
            ErrorMsg(playerid,"• Jûsø administratoriaus lygis yra per maþas. Ði komanda nuo 3lvl.");
            return 1;
        }
        if(IsPlayerInWarZone(playerid) == 1)
        {
            ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
            return 1;
        }
		if(isnull(params))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Pagydyti þaidëjà: /heal [vardo dalis]");
		}
		else
		{
			new id;
			sscanf(params, "u", id);
			if(IsPlayerConnected(id))
			{
				if(id == playerid)
				{
					cmd_gydytis(playerid,"");
				}
                else if(IsPlayerStreamedIn(id, playerid) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas turi bûti netoli jûsø.");
                    return 1;
                }
                else if(IsPlayerInWarZone(id) == 1)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra Karo Zonoje, todël ðios komandos naudoti negalite pasirinkus ðá þaidëjà.");
                    return 1;
                }
				else
                {
                    if(PlayerDB[id][LastTimePlayerFought] + 10 >= gettime())
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra kovoje,todël pagydyti negalima.");
                        return 1;
                    }
					SetPlayerHealthEx(id,100.0);
                    if(PlayerDB[playerid][adminlvl] >3)
                    {
                        SetPlayerArmourEx(id, 100.0);
                    }
					new string[144];
					format(string, 144, "***Sëkmingai pagydëte þaidëjà %s.", Vardas(id));
					SendClientMessage(playerid, ZALIA, string);
					format(string, 144, "***%s pagydë jus!", Vardas(playerid));
					SendClientMessage(id, ZALIA, string);
					format(string, 144, "~g~JUS PAGYDE~n~ ~g~%s", Vardas(playerid));
					GameTextForPlayer(id, string, 3000, 3);
                    new LabelText[100];
                    format(LabelText, 100, "Administratorius %s pagydë %s su komanda /heal", Vardas(playerid),Vardas(id));
                    new Float:Cords[3];
                    GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                    CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(id),GetPlayerInterior(id), 0 ,25);
				}
			}
			else
			{
				ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
			}
		}
	}
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
	return 1;
}
CMD:sunaikinti(playerid,params[])
{
	if(PlayerDB[playerid][Job] == 0)
	{
		ErrorMsg(playerid,"Jûs esate bedarbis.");
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleDB[GetPlayerVehicleID(playerid)][DARBOMASINA] == true && VehicleDB[GetPlayerVehicleID(playerid)][DARBOID] == PlayerDB[playerid][Job])
		{
			SetTimerEx("DestroyEmptyJobCar", 10000, false, "d", GetPlayerVehicleID(playerid));
			GameTextForPlayer(playerid, "~r~MASINA BUS SUNAIKINTA~n~ ~r~PO 10 SEKUNDZIU, JEIGU~n~ ~r~JI BUS TUSCIA", 10000, 3);
            RemovePlayerFromVehicle(playerid);
		}
		else{
			ErrorMsg(playerid,"Jûs turite sedëti uþ darbinës transporto priemonës vairo.");
		}
	}
	return 1;
}
forward DestroyEmptyJobCar(vehicleid);
public DestroyEmptyJobCar(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
			return 1;
		}
	}
    if(IsTrailerAttachedToVehicle(vehicleid))
    {
        SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
    }
    DestroyObject(VehicleDB[vehicleid][VehicleDezesObjectID]);
    VehicleDB[vehicleid][VehicleDezesObjectID] = -1;
    VehicleDB[vehicleid][PakrautaMasina] = -1;
    if(VehicleDB[vehicleid][SuSvitureliais] == true)
    {
        VehicleDB[vehicleid][SuSvitureliais] = false;
        DestroyObject(VehicleDB[vehicleid][SvitureliuObjektas]);
        VehicleDB[vehicleid][SvitureliuObjektas]-=1;
    }
	SetVehicleToRespawn(vehicleid);
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
	return 1;
}

CMD:dp(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[128];
        format(string, 128, "• Ið jûsø buvo atimta teisë ðnekëti, kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new message[125];
        if(sscanf(params, "s[125]", message))
        {
            UsageMessage(playerid,"• Skelbti praneðimà vieðai: /dp [Tekstas]");
        }
        else
        {
            if(PlayerDB[playerid][Cmd_S_CD] > 0)
            {
                ErrorMsg(playerid,"• Skelbti galima tik kas 7sec!");
            }
            else
            {
                new string[128];
                format(string, 128, "Direktoriø priþiûrëtojas [{80d62d}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                SendClientMessageToAll(0xcbecabFF, string);
                SendClientMessageToAll(0x80d62dFF, message);
                if(PlayerDB[playerid][adminlvl] < 4)
                {
                    PlayerDB[playerid][Cmd_S_CD] = 7;
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik dir. priþiûrtojams.");
    }
    return 1;
}
CMD:lp(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[128];
        format(string, 128, "• Ið jûsø buvo atimta teisë ðnekëti, kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new message[125];
        if(sscanf(params, "s[125]", message))
        {
            UsageMessage(playerid,"• Skelbti praneðimà vieðai: /lp [Tekstas]");
        }
        else
        {
            if(PlayerDB[playerid][Cmd_S_CD] > 0)
            {
                ErrorMsg(playerid,"• Skelbti galima tik kas 7sec!");
            }
            else
            {
                new string[128];
                format(string, 128, "Lyderiø priþiûrëtojas [{80d62d}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                SendClientMessageToAll(0xcbecabFF, string);
                SendClientMessageToAll(0x80d62dFF, message);
                if(PlayerDB[playerid][adminlvl] < 4)
                {
                    PlayerDB[playerid][Cmd_S_CD] = 7;
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik lyderiø priþiûrtojams.");
    }
    return 1;
}
CMD:s(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[128];
        format(string, 128, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
	if(PlayerDB[playerid][adminlvl]>0)
	{
        new message[120];
        if(sscanf(params, "s[120]", message))
        {
            UsageMessage(playerid,"• Skelbti praneðimà vieðai: /s [Tekstas]");
        }
        else
        {
            if(PlayerDB[playerid][Cmd_S_CD] > 0)
            {
                ErrorMsg(playerid,"• Skelbti galima tik kas 7sec!");
            }
            else
            {
                new string[128];
                switch(PlayerDB[playerid][adminlvl])
                {
                    case 1:
                    {
                        format(string, 128, "Administratorius I lygio [{80d62d}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                        SendClientMessageToAll(0xcbecabFF, string);
                        SendClientMessageToAll(0x80d62dFF, message);
                    }
                    case 2:
                    {
                        format(string, 128, "Administratorius II lygio [{80d62d}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                        SendClientMessageToAll(0xcbecabFF, string);
                        SendClientMessageToAll(0x80d62dFF, message);
                    }
                    case 3:
                    {
                        format(string, 128, "Administratorius III lygio [{80d62d}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                        SendClientMessageToAll(0xcbecabFF, string);
                        SendClientMessageToAll(0x80d62dFF, message);
                    }
                    case 4..5:
                    {
                        format(string, 128, "Serverio savininkas [{ff0000}%s(%i){cbecab}] praneða:", Vardas(playerid),playerid);
                        SendClientMessageToAll(0xcbecabFF, string);
                        SendClientMessageToAll(0xff0000FF, message);
                    }
                }
                if(PlayerDB[playerid][adminlvl] < 4)
                {
                    PlayerDB[playerid][Cmd_S_CD] = 7;
                }
            }
        }
	}
	return 1;
}
CMD:distorija(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new query[200];
		mysql_format(connectionHandle, query, 200, "SELECT `Data`,`Informacija` FROM `distorijos` WHERE `DARBOID` = '%i' ORDER BY `id` DESC LIMIT 15;", JobIDToWorkWith);
		mysql_function_query(connectionHandle,query,true,"OnPlayerSelectJobHistory","d",playerid);
    }
	else
	{
		ErrorMsg(playerid,"• Ði komanda skirta tik direktoriams ir jø pavaduotojams.");
	}
	return 1;
}
forward OnKuponLoad(playerid);
public OnKuponLoad(playerid)
{
	new string[144];
	new rows, fields;
    new query[200];
	cache_get_data(rows, fields);
	if( rows > 0 )
	{
		new kiekis_ = cache_get_row_int(0, 2);
		new kupono_id = cache_get_row_int(0 ,0);
		new kupon_token[128];
		cache_get_row(0,1,kupon_token);

		mysql_format(connectionHandle, query, 200, "DELETE FROM `luckytickets` WHERE `id` = '%i';", kupono_id);
  		mysql_function_query(connectionHandle,query,false,"SendQuery","");

		PlayerDB[playerid][Credits]+=kiekis_;
  		format(string, 144, "• Gavote %i kreditus!", kiekis_);
    	SendClientMessage(playerid,GELTONA,string);

		format(string, 144, "{6990FA}• Pirmasis kuponà ({FAD369}%s{6990FA}) panaudojo: {FAD369}%s{6990FA}. Gavo {FAD369}%i {6990FA}kreditus. Sveikinimai!", kupon_token, Vardas(playerid), kiekis_);
    	SendClientMessageToAll(GELTONA,string);
	}
	else {
		SendClientMessage(playerid, RAUDONA, "• Tokio kupono nëra.");
		showKuponas(playerid);
	}
	return 1;
}
forward OnPlayerSelectJobHistory(playerid);
public OnPlayerSelectJobHistory(playerid)
{
	if(cache_get_row_count() == 0)
	{
		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Darbo istorija", "Nëra informacijos apie ðá darbà.", "Gerai", "");
	}
	else
	{
		new info[3500];
		new string[260];
		new Data[50];
		new informacija[200];
		cache_get_row(0, 0, Data);
		cache_get_row(0, 1, informacija);
		format(string, 260, "[%s] %s", Data,informacija);
		strcat(info, string);

		for(new row = 0;row<cache_get_row_count();row++)
		{
			cache_get_row(row, 0, Data);
			cache_get_row(row, 1, informacija);
			format(string, 260, "\n[%s] %s", Data,informacija);
			strcat(info, string);
		}
		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Darbo istorija", info, "Gerai","");
	}
	return 1;
}
CMD:priimt(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
	{
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToInvite] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës priimti naujø darbuotojø.");
                return 1;
            }
        }
		if(isnull(params))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Priimti þaidëjà á savo firmà: /priimt [dalis vardo] [darbo sutarties laikas (0-7 dienø) ]");
		}
		else
		{
			new JobID = -1;
			if(PlayerDB[playerid][Direktorius] > 0)
			{
				JobID = PlayerDB[playerid][Direktorius];
			}
			else
			{
				JobID = PlayerDB[playerid][Pavaduotojas];
			}
			new id,laikas;
			if(sscanf(params, "ud", id,laikas))
			{
				SendClientMessage(playerid, Bright_YELLOW, "• Priimti þaidëjà á savo firmà: /priimt [dalis vardo] [darbo sutarties laikas (0-7 dienø) ]");
				return 1;
			}
			if(IsPlayerConnected(id))
			{
				if(laikas < 0 || laikas > 7)
				{
					SendClientMessage(playerid, Bright_YELLOW, "• Priimti þaidëjà á savo firmà: /priimt [dalis vardo] [darbo sutarties laikas (0-7 dienø) ]");
					return 1;
				}
				if(PlayerDB[id][JobInvitation] > 0)
				{
					ErrorMsg(playerid,"• Þaidëjas yra pakviestas á kità darbà.");
					return 1;
				}
				else if(PlayerDB[id][Job] == JobID)
				{
					ErrorMsg(playerid,"• Þaidëjas jau dirba jûsø firmoje.");
					return 1;
				}
				else
				{
					new string[144];
					switch(JobID)
					{
						case 1:
						{
							SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti policijoje. Jei norite dirbti, atvykite á policijos departamentà.");
							format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
							SendClientMessage(id, GELTONA, string);
						}
						case 2:
						{
							SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti ligoninëje. Jei norite dirbti, atvykite á ligoninæ.");
							format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
							SendClientMessage(id, GELTONA, string);
						}
                        case 4:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti taksi firmoje. Jei norite dirbti, atvykite á firmos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 5:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti mechanikuose. Jei norite dirbti, atvykite á firmos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 7:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti Lucchese mafijoje. Jei norite dirbti,atvykite á mafijos buveinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 8:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti Genovese mafijoje. Jei norite dirbti,atvykite á mafijos buveinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 9:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti spec. buryje „Aras“. Jei norite dirbti,atvykite á organizacijos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 10:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti radijos laidø vedëjo darbà. Jei norite dirbti,atvykite á organizacijos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 11:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti SPD agentu. Jei norite dirbti,atvykite á organizacijos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
                        case 21:
                        {
                            SendClientMessage(id, ZALIA, "• Jûs kvieèiamas dirbti tolimûjø reisø vairuotojo darbà. Jei norite dirbti,atvykite á organizacijos bûstinæ.");
                            format(string, 144, "• Privalësite iðdirbti %d d. neiðdirbæ privalësite laukti kol galësite vël dirbti darbà su pakvietimu.", laikas);
                            SendClientMessage(id, GELTONA, string);
                        }
					}
					format(string, 144, "Pakvietëte %s ástoti á jûsø firmà.", Vardas(id));
					SendClientMessage(playerid, Bright_YELLOW, string);
					PlayerDB[id][JobInvitation] = JobID;
					PlayerDB[id][JobInvitationTime] = laikas;
					mysql_format(connectionHandle, string, 144, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Duotas pakvietimas dirbti %e');", JobID,Vardas(id));
					mysql_function_query(connectionHandle,string,false,"SendQuery","");
				}
			}
			else
			{
				ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
				return 1;
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
	}
	return 1;
}
PlayerText:CreateITEMSelectionHeader(playerid, text[])
{
	new PlayerText:SelectionsTextDrawHeader = CreatePlayerTextDraw(playerid,75.000000, 130.000000, text);
	PlayerTextDrawBackgroundColor(playerid,SelectionsTextDrawHeader, 255);
	PlayerTextDrawFont(playerid,SelectionsTextDrawHeader, 3);
	PlayerTextDrawLetterSize(playerid,SelectionsTextDrawHeader, 0.419999, 1.600000);
	PlayerTextDrawColor(playerid,SelectionsTextDrawHeader, -1395920385);
	PlayerTextDrawSetOutline(playerid,SelectionsTextDrawHeader, 1);
	PlayerTextDrawSetProportional(playerid,SelectionsTextDrawHeader, 1);
	PlayerTextDrawSetSelectable(playerid,SelectionsTextDrawHeader, 0);
	PlayerTextDrawShow(playerid, PlayerText:SelectionsTextDrawHeader);
	return SelectionsTextDrawHeader;
}
PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}
PlayerText:CreateITEMSelectionBG(playerid)
{
	new PlayerText:SelectionsTextDrawBackground = CreatePlayerTextDraw(playerid,75.000000, 150.000000, "                                         ~n~");
	PlayerTextDrawBackgroundColor(playerid,SelectionsTextDrawBackground, 255);
	PlayerTextDrawFont(playerid,SelectionsTextDrawBackground, 1);
	PlayerTextDrawLetterSize(playerid,SelectionsTextDrawBackground, 5.000000, 5.000000);
	PlayerTextDrawColor(playerid,SelectionsTextDrawBackground, 255);
	PlayerTextDrawSetOutline(playerid,SelectionsTextDrawBackground, 0);
	PlayerTextDrawSetProportional(playerid,SelectionsTextDrawBackground, 1);
	PlayerTextDrawSetShadow(playerid,SelectionsTextDrawBackground, 1);
	PlayerTextDrawUseBox(playerid,SelectionsTextDrawBackground, 1);
	PlayerTextDrawBoxColor(playerid,SelectionsTextDrawBackground, 1247439871);
	PlayerTextDrawTextSize(playerid,SelectionsTextDrawBackground, 550.000000, 220.000000);
	PlayerTextDrawSetSelectable(playerid,SelectionsTextDrawBackground, 0);
	PlayerTextDrawShow(playerid, SelectionsTextDrawBackground);
	return SelectionsTextDrawBackground;
}
PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x88888899);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}
PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}
CMD:skin(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        ErrorMsg(playerid,"• Persirengimui pirmiausiai iðlipkite ið maðinos.");
        return 1;
    }
	if(PlayerDB[playerid][Job] > 0)
	{
	    SetPVarInt(playerid, "SkinuTipas",SKINSELECT_TYPE_UNIFORMS);
        if(GetPVarInt(playerid, "SkinuTipas") == SKINSELECT_TYPE_UNIFORMS)
        {
            switch(PlayerDB[playerid][Job])
            {
                case 1:
                {
                    PlayerModelsToShowNum[playerid] = 6;
                    PlayerModelsToShow[playerid][0] = 280;
                    PlayerModelsToShow[playerid][1] = 281;
                    PlayerModelsToShow[playerid][2] = 282;
                    PlayerModelsToShow[playerid][3] = 283;
                    PlayerModelsToShow[playerid][4] = 288;
                    PlayerModelsToShow[playerid][5] = 284;
                }
                case 2:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 274;
                    PlayerModelsToShow[playerid][1] = 275;
                    PlayerModelsToShow[playerid][2] = 70;
                }
                case 4:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 187;
                    PlayerModelsToShow[playerid][1] = 240;
                    PlayerModelsToShow[playerid][2] = 189;
                }
                case 5:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 50;
                    PlayerModelsToShow[playerid][1] = 8;
                    PlayerModelsToShow[playerid][2] = 42;
                }
                case 6:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 286;
                    PlayerModelsToShow[playerid][1] = 240;
                    PlayerModelsToShow[playerid][2] = 186;
                }
                case 7:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 124;
                    PlayerModelsToShow[playerid][1] = 125;
                    PlayerModelsToShow[playerid][2] = 126;
                    PlayerModelsToShow[playerid][3] = 113;
                }
                case 8:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 121;
                    PlayerModelsToShow[playerid][1] = 122;
                    PlayerModelsToShow[playerid][2] = 123;
                    PlayerModelsToShow[playerid][3] = 98;//vito
                }
                case 9:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 285;
                }
                case 10:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 184;
                    PlayerModelsToShow[playerid][1] = 185;
                    PlayerModelsToShow[playerid][2] = 289;
                }
                case 11:
                {
                    PlayerModelsToShowNum[playerid] = 6;
                    PlayerModelsToShow[playerid][0] = 164;
                    PlayerModelsToShow[playerid][1] = 165;
                    PlayerModelsToShow[playerid][2] = 294;
                    PlayerModelsToShow[playerid][3] = 303;
                    PlayerModelsToShow[playerid][4] = 304;
                    PlayerModelsToShow[playerid][5] = 305;
                }
                case 12:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 32;
                }
                case 13:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 240;
                }
                case 14:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 277;
                    PlayerModelsToShow[playerid][1] = 278;
                    PlayerModelsToShow[playerid][2] = 279;
                }
                case 15:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 6;
                }
                case 16:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 61;
                }
                case 17:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 61;
                }
                case 18:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 255;
                }
                case 19..20:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 155;
                }
                case 21:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 44;
                    PlayerModelsToShow[playerid][1] = 73;
                    PlayerModelsToShow[playerid][2] = 128;
                    PlayerModelsToShow[playerid][3] = 183;
                }
            }
            if(PlayerDB[playerid][Sex] == 2)
            {
                ErrorMsg(playerid,"• Jûsø darbe yra tik 1 moteriðka uniforma.");
                cmd_persirengti(playerid,"");
                return 1;
            }
            if(PlayerModelsToShowNum[playerid] == 1)
            {
                ErrorMsg(playerid,"• Jûsø darbe yra tik 1 uniforma.");
                cmd_persirengti(playerid,"");
                return 1;
            }
        }
		ShowPlayerSkinsSelect(playerid);
	    SelectTextDraw(playerid, 0x00FF00FF);
	}
	return 1;
}

stock ShowPlayerSkinsSelect(playerid)
{
   	if(GetPVarInt(playerid, "SkinuTipas") == SKINSELECT_TYPE_CLOTHESFCreds)
   	{
		new query[144];
		mysql_format(connectionHandle, query, 144, "SELECT `SkinID` FROM `clothesforcredits` WHERE `PlayerName` = '%e';", Vardas(playerid));
		mysql_function_query(connectionHandle,query,true,"OnSkinsForCreditsSelect","d",playerid);
   	}
   	else
   	{
		SetPVarInt(playerid, "SelectionsPage", 0);
		SetPVarInt(playerid, "OnSkinsSelect", 1);
		DestroyITEMselectionMeniu(playerid);
		SelectionsTextDrawHead[playerid] = CreateITEMSelectionHeader(playerid,"PASIRINKITE ISVAIZDA");
		SelectionsTextDrawBG[playerid] = CreateITEMSelectionBG(playerid);
		SelectionsTextDrawPage[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
	    SelectionsTextDrawNext[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, "Toliau");
	    SelectionsTextDrawPrev[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, "Atgal");
	    if(GetPVarInt(playerid, "SkinuTipas") == SKINSELECT_TYPE_PAPLUDIMIO)
	    {
			PlayerModelsToShowNum[playerid] = 4;
			PlayerModelsToShow[playerid][0] = 18;
			PlayerModelsToShow[playerid][1] = 45;
			PlayerModelsToShow[playerid][2] = 97;
			PlayerModelsToShow[playerid][3] = 154;
            ShowPlayerModelPreviews(playerid);
            UpdatePageTextDraw(playerid);
	    }
        else if(GetPVarInt(playerid, "SkinuTipas") == SKINSELECT_TYPE_UNIFORMS)
        {
            switch(PlayerDB[playerid][Job])
            {
                case 1:
                {
                    PlayerModelsToShowNum[playerid] = 6;
                    PlayerModelsToShow[playerid][0] = 280;
                    PlayerModelsToShow[playerid][1] = 281;
                    PlayerModelsToShow[playerid][2] = 282;
                    PlayerModelsToShow[playerid][3] = 283;
                    PlayerModelsToShow[playerid][4] = 288;
                    PlayerModelsToShow[playerid][5] = 284;
                }
                case 2:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 274;
                    PlayerModelsToShow[playerid][1] = 275;
                    PlayerModelsToShow[playerid][2] = 70;
                }
                case 4:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 187;
                    PlayerModelsToShow[playerid][1] = 240;
                    PlayerModelsToShow[playerid][2] = 189;
                }
                case 5:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 50;
                    PlayerModelsToShow[playerid][1] = 8;
                    PlayerModelsToShow[playerid][2] = 42;
                }
                case 6:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 286;
                    PlayerModelsToShow[playerid][1] = 240;
                    PlayerModelsToShow[playerid][2] = 186;
                }
                case 7:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 124;
                    PlayerModelsToShow[playerid][1] = 125;
                    PlayerModelsToShow[playerid][2] = 126;
                    PlayerModelsToShow[playerid][3] = 113;
                }
                case 8:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 121;
                    PlayerModelsToShow[playerid][1] = 122;
                    PlayerModelsToShow[playerid][2] = 123;
                    PlayerModelsToShow[playerid][3] = 98;//vito
                }
                case 9:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 285;
                }
                case 10:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 184;
                    PlayerModelsToShow[playerid][1] = 185;
                    PlayerModelsToShow[playerid][2] = 289;
                }
                case 11:
                {
                    PlayerModelsToShowNum[playerid] = 6;
                    PlayerModelsToShow[playerid][0] = 164;
                    PlayerModelsToShow[playerid][1] = 165;
                    PlayerModelsToShow[playerid][2] = 294;
                    PlayerModelsToShow[playerid][3] = 303;
                    PlayerModelsToShow[playerid][4] = 304;
                    PlayerModelsToShow[playerid][5] = 305;
                }
                case 12:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 32;
                }
                case 13:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 240;
                }
                case 14:
                {
                    PlayerModelsToShowNum[playerid] = 3;
                    PlayerModelsToShow[playerid][0] = 277;
                    PlayerModelsToShow[playerid][1] = 278;
                    PlayerModelsToShow[playerid][2] = 279;
                }
                case 15:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 6;
                }
                case 16:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 61;
                }
                case 17:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 61;
                }
                case 18:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 255;
                }
                case 19..20:
                {
                    PlayerModelsToShowNum[playerid] = 1;
                    PlayerModelsToShow[playerid][0] = 155;
                }
                case 21:
                {
                    PlayerModelsToShowNum[playerid] = 4;
                    PlayerModelsToShow[playerid][0] = 44;
                    PlayerModelsToShow[playerid][1] = 73;
                    PlayerModelsToShow[playerid][2] = 128;
                    PlayerModelsToShow[playerid][3] = 183;
                }
            }
    		ShowPlayerModelPreviews(playerid);
    		UpdatePageTextDraw(playerid);
    	}
    }
    return 1;
}
stock DestroyITEMselectionMeniu(playerid)
{
	PlayerTextDrawDestroy(playerid, SelectionsTextDrawHead[playerid]);
	SelectionsTextDrawHead[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PlayerTextDrawDestroy(playerid, SelectionsTextDrawBG[playerid]);
	SelectionsTextDrawBG[playerid] = PlayerText:INVALID_TEXT_DRAW;

	for(new x = 0; x < 21; x++ )
	{
        if(x < PlayerModelsToShowNum[playerid])
        {
            PlayerTextDrawDestroy(playerid, PlayerSelectionItems[playerid][x]);
            PlayerSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
        }
	}
	PlayerTextDrawDestroy(playerid, SelectionsTextDrawPage[playerid]);
	SelectionsTextDrawPage[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PlayerTextDrawDestroy(playerid, SelectionsTextDrawNext[playerid]);
	SelectionsTextDrawNext[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PlayerTextDrawDestroy(playerid, SelectionsTextDrawPrev[playerid]);
	SelectionsTextDrawPrev[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PlayerModelsToShowNum[playerid] = 0;
	return 1;
}
stock ShowPlayerModelPreviews(playerid)
{
	for(new n = 0; n < 21; n++ )
	{
		PlayerTextDrawDestroy(playerid, PlayerSelectionItems[playerid][n]);
		PlayerSelectionItems[playerid][n] = PlayerText:INVALID_TEXT_DRAW;
	}
    new x=0;
	new Float:BaseX = DIALOG_BASE_X;
	new Float:BaseY = DIALOG_BASE_Y - (SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "SelectionsPage") * 21;


	while(x != SELECTION_ITEMS && itemat < PlayerModelsToShowNum[playerid]) {
	    if(linetracker == 0) {
	        BaseX = DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
  		PlayerSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, PlayerModelsToShow[playerid][itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  		PlayerSelectionItemsTag[playerid][x] = PlayerModelsToShow[playerid][itemat];

		BaseX += SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == ITEMS_PER_LINE) linetracker = 0;
		itemat++;
		x++;
	}
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
   	if(GetPVarInt(playerid, "OnSkinsSelect") == 0) return 0;

	// Handle: They cancelled (with ESC)
	if(clickedid == Text:INVALID_TEXT_DRAW) {
        DestroyITEMselectionMeniu(playerid);
        SetPVarInt(playerid, "OnSkinsSelect", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        SetPVarInt(playerid, "SkinuTipas",0);
        return 1;
	}

	return 0;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
   	if(GetPVarInt(playerid, "OnSkinsSelect") == 0) return 0;
	// Handle: next button
	if(playertextid == SelectionsTextDrawNext[playerid])
	{
		new curpage = GetPVarInt(playerid, "SelectionsPage");
	    if(curpage < (GetNumberOfPages(playerid) - 1))
	    {
	        SetPVarInt(playerid, "SelectionsPage", curpage + 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		}
		else
		{
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}
	if(playertextid == SelectionsTextDrawPrev[playerid])
	{
		new curpage = GetPVarInt(playerid, "SelectionsPage");
	    if(curpage > 0)
	    {
	        SetPVarInt(playerid, "SelectionsPage", curpage - 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		}
		else
		{
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}
	new item = 0;
	while(item != SELECTION_ITEMS)
	{
		if(playertextid == PlayerSelectionItems[playerid][item])
		{
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroyITEMselectionMeniu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "OnSkinsSelect", 0);
 	        HandlePlayerItemSelection(playerid, item);
        	return 1;
		}
		item++;
	}
	return 0;
}
stock HandlePlayerItemSelection(playerid,item)
{
	if(PlayerSelectionItemsTag[playerid][item] >= 0 && PlayerSelectionItemsTag[playerid][item] < 312)
	{
		switch(GetPVarInt(playerid, "SkinuTipas"))
		{
			case SKINSELECT_TYPE_UNIFORMS:
			{
				if(PlayerDB[playerid][Job] == 1)
				{
					if(PlayerSelectionItemsTag[playerid][item] == 280)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN280_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
					else if(PlayerSelectionItemsTag[playerid][item] == 281)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN281_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
					else if(PlayerSelectionItemsTag[playerid][item] == 282)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN282_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
					else if(PlayerSelectionItemsTag[playerid][item] == 283)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN283_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
					else if(PlayerSelectionItemsTag[playerid][item] == 288)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN288_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
					else if(PlayerSelectionItemsTag[playerid][item] == 284)
					{
						if(PlayerDB[playerid][Rangas] >= PoliceSettings[SKIN284_RANGAS])
						{
							PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
							if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
							}
							else
							{
								SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
								PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
							}
							SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
							SavePlayerData(playerid);
						}
						else
						{
							ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
						}
					}
				}
                else if(PlayerDB[playerid][Job] == 2)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 274)
                    {
                        if(PlayerDB[playerid][Rangas] >= HPSettings[SKIN274_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 275)
                    {
                        if(PlayerDB[playerid][Rangas] >= HPSettings[SKIN275_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 70)
                    {
                        if(PlayerDB[playerid][Rangas] >= HPSettings[SKIN70_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 4)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 189)
                    {
                        if(PlayerDB[playerid][Rangas] >= TaksiFSettings[SKIN189_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 187)
                    {
                        if(PlayerDB[playerid][Rangas] >= TaksiFSettings[SKIN187_RANGAS2F])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 240)
                    {
                        if(PlayerDB[playerid][Rangas] >= TaksiFSettings[SKIN240_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 5)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 50)
                    {
                        if(PlayerDB[playerid][Rangas] >= MechanikuSettings[Mech50SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 8)
                    {
                        if(PlayerDB[playerid][Rangas] >= MechanikuSettings[Mech8SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 42)
                    {
                        if(PlayerDB[playerid][Rangas] >= MechanikuSettings[Mech42SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 7)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 124)
                    {
                        if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[Lucchese124SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 125)
                    {
                        if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[Lucchese125SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 126)
                    {
                        if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[Lucchese126SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 113)
                    {
                        if(PlayerDB[playerid][Rangas] >= LuccheseMafiaSettings[Lucchese113SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 8)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 121)
                    {
                        if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[Genovese121SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 122)
                    {
                        if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[Genovese122SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 123)
                    {
                        if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[Genovese123SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 98)
                    {
                        if(PlayerDB[playerid][Rangas] >= GenoveseMafiaSettings[Genovese98SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 9)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 285)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 10)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 184)
                    {
                        if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiSKIN184_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 185)
                    {
                        if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiSKIN185_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 289)
                    {
                        if(PlayerDB[playerid][Rangas] >= RadistaiSettings[RadistaiSKIN289_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 11)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 164)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN164_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 165)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN165_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 294)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN294_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 303)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN303_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 304)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN304_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 305)
                    {
                        if(PlayerDB[playerid][Rangas] >= SPDSettings[SPDSKIN305_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
                else if(PlayerDB[playerid][Job] == 12)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 32)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 13)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 240)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 14)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 277)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 278)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 279)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 15)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 6)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 18)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 255)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 19)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 155)
                    {
                        PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                        if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                            PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                        }
                        SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                        SavePlayerData(playerid);
                    }
                }
                else if(PlayerDB[playerid][Job] == 21)
                {
                    if(PlayerSelectionItemsTag[playerid][item] == 44)
                    {
                        if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F44SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 73)
                    {
                        if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F73SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 128)
                    {
                        if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F128SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                    else if(PlayerSelectionItemsTag[playerid][item] == 183)
                    {
                        if(PlayerDB[playerid][Rangas] >= FURISTAISettings[F183SKIN_RANGAS])
                        {
                            PlayerDB[playerid][UniformosID] = PlayerSelectionItemsTag[playerid][item];
                            if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM)
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á kità uniformà.");
                            }
                            else
                            {
                                SendClientMessage(playerid, ZALIA, "• Persirengëte á darbinæ uniformà.");
                                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_UNIFORM;
                            }
                            SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                            SavePlayerData(playerid);
                        }
                        else
                        {
                            ErrorMsg(playerid,"Jûsø rangas yra per maþas,devëti ðià uniformà.");
                        }
                    }
                }
			}


			case SKINSELECT_TYPE_CLOTHESFCreds:
			{
				PlayerDB[playerid][Drabuziai] = PlayerSelectionItemsTag[playerid][item];
				PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
				SendClientMessage(playerid, ZALIA, "• Persirengëte á savo paprastus drabuþius.");
				SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
				SavePlayerData(playerid);
			}
			case SKINSELECT_TYPE_PAPLUDIMIO:
			{
				SendClientMessage(playerid, ZALIA, "• Persirengëte á papludimio drabuþius.");
				SetPlayerSkinEx(playerid, PlayerSelectionItemsTag[playerid][item]);
                PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_KITI;
				SavePlayerData(playerid);
			}
		}
	}
	return 1;
}
stock GetNumberOfPages(playerid)
{
	if((PlayerModelsToShowNum[playerid] >= SELECTION_ITEMS) && (PlayerModelsToShowNum[playerid] % SELECTION_ITEMS) == 0)
	{
		return (PlayerModelsToShowNum[playerid] / SELECTION_ITEMS);
	}
	else return (PlayerModelsToShowNum[playerid] / SELECTION_ITEMS) + 1;
}
stock UpdatePageTextDraw(playerid)
{
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"SelectionsPage") + 1, GetNumberOfPages(playerid));
	PlayerTextDrawSetString(playerid, SelectionsTextDrawPage[playerid], PageText);
}
CMD:rangai(playerid,params[])
{
	if(PlayerDB[playerid][Job] > 0)
	{
		switch(PlayerDB[playerid][Job])
		{
			case 1:
			{
				new info[2000];
				new string[300];

				new RankVehicles[144];
				if(PoliceSettings[Vehicle497] <= 1)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 1)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 1)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 1)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 1)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[1][Rango1Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 2)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 2)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 2)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 2)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 2)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[1][Rango2Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 3)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 3)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 3)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 3)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 3)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango3Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 4)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 4)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 4)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 4)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 4)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango4Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 5)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 5)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 5)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 5)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 5)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango5Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 6)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 6)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 6)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 6)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 6)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango6Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 7)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 7)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 7)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 7)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 7)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango7Pavadinimas],RankVehicles);
				strcat(info,string);
				RankVehicles = "";
				if(PoliceSettings[Vehicle497] <= 8)
				{
					strcat(RankVehicles, "Maverick ");
				}
				if(PoliceSettings[Vehicle597] <= 8)
				{
					strcat(RankVehicles, "| Police Car ");
				}
				if(PoliceSettings[Vehicle523] <= 8)
				{
					strcat(RankVehicles, "| HPV1000 ");
				}
				if(PoliceSettings[Vehicle599] <= 8)
				{
					strcat(RankVehicles, "| Ranger ");
				}
				if(PoliceSettings[Vehicle430] <= 8)
				{
					strcat(RankVehicles, "| Predator ");
				}
				if(strlen(RankVehicles) == 0)
				{
					RankVehicles = "N/A";
				}
				format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[1][Rango8Pavadinimas],RankVehicles);
				strcat(info,string);
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
			}
			case 2:
			{
                new info[2000];
                new string[300];

                new RankVehicles[144];
                if(HPSettings[VEHICLE416_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[2][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[2][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(HPSettings[VEHICLE416_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "Ambulance ");
                }
                if(HPSettings[VEHICLE490_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Rancher ");
                }
                if(HPSettings[VEHICLE487_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(HPSettings[VEHICLE452_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[2][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
			}
            case 4:
            {
                new info[2000];
                new string[300];

                new RankVehicles[144];
                if(TaksiFSettings[Vehicle2F420] <= 1)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 1)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 1)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[4][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 2)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 2)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 2)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[4][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 3)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 3)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 3)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 4)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 4)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 4)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 5)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 5)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 5)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 6)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 6)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 6)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 7)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 7)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 7)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(TaksiFSettings[Vehicle2F420] <= 8)
                {
                    strcat(RankVehicles, "Taxi ");
                }
                if(TaksiFSettings[Vehicle2F560] <= 8)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(TaksiFSettings[Vehicle2F438] <= 8)
                {
                    strcat(RankVehicles, "| Cabbie ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[4][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 5:
            {
                new info[2000];
                new string[300];

                new RankVehicles[144];
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[5][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[5][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(MechanikuSettings[Mech525Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "TowTruck ");
                }
                if(MechanikuSettings[Mech602Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Alpha ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[5][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 7:
            {
                new info[2000];
                new string[300];

                new RankVehicles[144];
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[7][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[7][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "Sentinel ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Speeder ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[7][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 8:
            {
                new info[2000];
                new string[300];

                new RankVehicles[144];
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[8][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[8][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "Admiral ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Boxville ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Journey ");
                }
                if(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Sanchez ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[8][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 9:
            {
                new info[2000];
                new string[300];
                new RankVehicles[144];
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[9][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[9][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(ARASSettings[ARASVEHICLE601_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "S.W.A.T ");
                }
                if(ARASSettings[ARASVEHICLE541_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Bullet ");
                }
                if(ARASSettings[ARASVEHICLE427_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Enforcer ");
                }
                if(ARASSettings[ARASVEHICLE528_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| FBI Truck ");
                }
                if(ARASSettings[ARASVEHICLE497_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Maverick ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[9][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 10:
            {
                new info[2000];
                new string[300];
                new RankVehicles[144];
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[10][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[10][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(RadistaiSettings[RadistaiVEHICLE488_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "News Maverick ");
                }
                if(RadistaiSettings[RadistaiVEHICLE516_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Nebula ");
                }
                if(RadistaiSettings[RadistaiVEHICLE582_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| NewsVan ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[10][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 11:
            {
                new info[2000];
                new string[300];
                new RankVehicles[144];
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[11][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[11][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(SPDSettings[SPDVEHICLE411_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "Infernus ");
                }
                if(SPDSettings[SPDVEHICLE451_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Turismo ");
                }
                if(SPDSettings[SPDVEHICLE402_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Buffalo ");
                }
                if(SPDSettings[SPDVEHICLE415_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Cheetah ");
                }
                if(SPDSettings[SPDVEHICLE522_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| NRG-500 ");
                }
                if(SPDSettings[SPDVEHICLE579_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Huntley ");
                }
                if(SPDSettings[SPDVEHICLE560_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Sultan ");
                }
                if(SPDSettings[SPDVEHICLE426_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Premier ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[11][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
            case 21:
            {
                new info[2000];
                new string[300];
                new RankVehicles[144];
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "Priekaba vaistams");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }
                if(FURISTAISettings[F584Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 1)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
				}
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}1 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[21][Rango1Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }
                if(FURISTAISettings[F584Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 2)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}2 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s\n", DarboInformacija[21][Rango2Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }
                if(FURISTAISettings[F584Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 3)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}3 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango3Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }

                if(FURISTAISettings[F584Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 4)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}4 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango4Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }

                if(FURISTAISettings[F584Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 5)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                format(string, 200, "{FFFFFF}5 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango5Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }

                if(FURISTAISettings[F584Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 6)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}6 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango6Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }
                if(FURISTAISettings[F584Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 7)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}7 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango7Pavadinimas],RankVehicles);
                strcat(info,string);
                RankVehicles = "";
                if(FURISTAISettings[F435Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "Priekaba vaistams ");
                }
                if(FURISTAISettings[F591Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Priekaba elektronikai ");
                }
                if(FURISTAISettings[F584Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Cisterna ");
                }
                if(FURISTAISettings[F515Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| RoadTrain ");
                }
                if(FURISTAISettings[F443Vehicle_RANGAS] <= 8)
                {
                    strcat(RankVehicles, "| Tralas „Packer“ ");
                }
                if(strlen(RankVehicles) == 0)
                {
                    RankVehicles = "N/A";
                }
                format(string, 200, "{FFFFFF}8 rangas {33CC00}„%s“\n{FFFFFF}Iðvaizdos: /skin\n{FFFFFF}Tr: %s \n", DarboInformacija[21][Rango8Pavadinimas],RankVehicles);
                strcat(info,string);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Rangai", info, "Gerai", "");
            }
			default:
			{
				ErrorMsg(playerid,"• Jûsø darbas neturi rangø.");
			}
		}
	}
	return 1;
}
CMD:furistams(playerid,params[])
{
	if(PlayerDB[playerid][furistams] > gettime()) return ErrorMsg(playerid,"• Raðyti fûristams galite kas 20 sek.");
    if(isnull(params))
    {
        UsageMessage(playerid,"Raðyti fûristams: /furistams [Tekstas]");
    }
    else
    {
        new string[128];
        format(string, 128, "{ad2dfc}Þaidëjas {d289ff}%s(%i) {ad2dfc}raðo fûristams: {d289ff}%s", Vardas(playerid),playerid,params);
        PlayerDB[playerid][furistams] = gettime() + 20;
        for(new i = 0;i<=GetPlayerPoolSize();i++)
        {
            if(PlayerDB[i][Job] == 21 || i == playerid)
            {
                SendClientMessage(i, 0xAD2DFCAA, string);
            }
        }
    }
    return 1;
}
CMD:furistai(playerid,params[])
{
	new bool:Dirba;
	new string[128];
	SendClientMessage(playerid, GELTONA, "• Prisijungæ fûristai:");
 	new count = 1;
  	foreach(new i : Player)
   	{
   		if(IsPlayerInAnyVehicle(i))
    	{
    		new vehicleid = GetPlayerVehicleID(i);
    		if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
    		{
    			Dirba = true;
    		}
		}
    	if(PlayerDB[i][Job] == 21)
     	{
			switch(Dirba)
			{
	      		case true:
	        	{
			       	format(string, 128, "{ace500}%i. %s {ff0000}(Ðiuo metu dirba)", count,Vardas(i));
			       	SendClientMessage(playerid, GELTONA, string);
			        count++;
		        }
		        case false:
		        {
		        	format(string, 128, "{ace500}%i. %s {ff0000}(Ðiuo metu nedirba)", count,Vardas(i));
			       	SendClientMessage(playerid, GELTONA, string);
			        count++;
			 	}
	 		}
        }
    }
    return 1;
}
CMD:r(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
	if(PlayerDB[playerid][Job] > 0)
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Kalbëti per racijà: /r [tekstas]");
			return 1;
		}
		else
		{
            switch(PlayerDB[playerid][Job])
            {
                case 1..11:
                {
                    new string[128];
                    switch(PlayerDB[playerid][Rangas])
                    {
                        case 0:
                        {
                            PlayerDB[playerid][Rangas] = 1;
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango1Pavadinimas],params);
                        }
                        case 1:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango1Pavadinimas],params);
                        }
                        case 2:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango2Pavadinimas],params);
                        }
                        case 3:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango3Pavadinimas],params);
                        }
                        case 4:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango4Pavadinimas],params);
                        }
                        case 5:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango5Pavadinimas],params);
                        }
                        case 6:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango6Pavadinimas],params);
                        }
                        case 7:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango7Pavadinimas],params);
                        }
                        case 8:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango8Pavadinimas],params);
                        }
                    }

                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                }
                case 21:
                {
                    new string[128];
                    switch(PlayerDB[playerid][Rangas])
                    {
                        case 0:
                        {
                            PlayerDB[playerid][Rangas] = 1;
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango1Pavadinimas],params);
                        }
                        case 1:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango1Pavadinimas],params);
                        }
                        case 2:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango2Pavadinimas],params);
                        }
                        case 3:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango3Pavadinimas],params);
                        }
                        case 4:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango4Pavadinimas],params);
                        }
                        case 5:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango5Pavadinimas],params);
                        }
                        case 6:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango6Pavadinimas],params);
                        }
                        case 7:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango7Pavadinimas],params);
                        }
                        case 8:
                        {
                            format(string, 128, "[racija] %s(%i) („%s“): %s", Vardas(playerid),playerid,DarboInformacija[PlayerDB[playerid][Job]][Rango8Pavadinimas],params);
                        }
                    }

                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                }
                default:
                {
                    new string[128];
                    format(string, 128, "[racija] %s(%i): %s", Vardas(playerid),playerid,params);
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                }
            }
		}
	}
	return 1;
}
CMD:rangupavadinimai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new info[1000];
		new string[144];
		format(string, 144, "1. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
		strcat(info, string);

		format(string, 144, "2. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
		strcat(info, string);

		format(string, 144, "3. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
		strcat(info, string);

		format(string, 144, "4. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
		strcat(info, string);

		format(string, 144, "5. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
		strcat(info, string);

		format(string, 144, "6. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
		strcat(info, string);

		format(string, 144, "7. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
		strcat(info, string);

		format(string, 144, "8. „%s“\n", DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
		strcat(info, string);
		ShowPlayerDialog(playerid, 32, DIALOG_STYLE_LIST, "{AFAFAF}Rangø pavadinimai", info, "Pasirinkti", "Uþdaryti");
	}
	return 1;
}
CMD:persirengti(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        ErrorMsg(playerid,"• Persirengimui pirmiausiai iðlipkite ið maðinos.");
        return 1;
    }
	if(PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_UNIFORM || PlayerDB[playerid][AprangosTipas] == PLAYER_CLOTHES_KITI)
	{
		ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "{AFAFAF}Persirengimas", "Persirengti á paprastus drabuþius\nDrabuþiai uþ kreditus\nPaplûdimio drabuþiai", "Gerai", "Atðaukti");
	}
	else
	{
		ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "{AFAFAF}Persirengimas", "Persirengti á uniformà\nDrabuþiai uþ kreditus\nPaplûdimio drabuþiai", "Gerai", "Atðaukti");
	}
	return 1;
}
forward OnSkinsForCreditsSelect(playerid);
public OnSkinsForCreditsSelect(playerid)
{
	if(cache_get_row_count() == 0)
	{
		ErrorMsg(playerid,"Neturite drabuþiø uþ kreditus.");
	}
	else
	{
		SetPVarInt(playerid, "SelectionsPage", 0);
		SetPVarInt(playerid, "OnSkinsSelect", 1);
		DestroyITEMselectionMeniu(playerid);
		SelectionsTextDrawHead[playerid] = CreateITEMSelectionHeader(playerid,"PASIRINKITE ISVAIZDA");
		SelectionsTextDrawBG[playerid] = CreateITEMSelectionBG(playerid);
		SelectionsTextDrawPage[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
	    SelectionsTextDrawNext[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, "Toliau");
	    SelectionsTextDrawPrev[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, "Atgal");

		PlayerModelsToShowNum[playerid] = cache_get_row_count();
		for(new row = 0;row<cache_get_row_count();row++)
		{
			PlayerModelsToShow[playerid][row] = cache_get_row_int(row, 0);
		}

		ShowPlayerModelPreviews(playerid);
		UpdatePageTextDraw(playerid);
		SelectTextDraw(playerid, 0x00FF00FF);
	}
	return 1;
}
CMD:gydyti(playerid,params[])
{
	if(PlayerDB[playerid][Job] != 2)
	{
		ErrorMsg(playerid,"• Ði komanda tik medikams.");
	}
	else
	{
		new id;
		if(sscanf(params,"u",id))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Pagydyti þaidëjà: /gydyti [vardo dalis/ID]");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
			new Float:Cords[3];
			GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
			if(IsPlayerInRangeOfPoint(id, 4.0 ,Cords[0], Cords[1], Cords[2]) && GetPlayerInterior(playerid) == GetPlayerInterior(id) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id))
			{
                new Float:Health;
                GetPlayerHealth(id,Health);
                if(Health >= 100.0)
                {
                    ErrorMsg(playerid,"• Þaidëjas sveikas.");
                }
				else if(PlayerDB[playerid][Vaistineles] < 1)
				{
					ErrorMsg(playerid,"• Jûs neturite pakankamai vaistinëliø,jas galite pasiimti medikø garaþe,uþlipus ant ásidarbinimo pickup.");
				}
				else
				{
					PlayerDB[playerid][Vaistineles]-=1;
                    PlayerDB[playerid][PagydimaiTotal]+=1;
					SetPlayerHealthEx(id, 100);
					new string[70];
					format(string, 70, "• Medikas %s pagydë %s", Vardas(playerid),Vardas(id));
					foreach(new i : Player)
					{
						if(IsPlayerInRangeOfPoint(i, 20.0 ,Cords[0], Cords[1], Cords[2]) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
							SendClientMessage(i, 0xE7BA21FF, string);
						}
					}
					format(string, 70, "***%s pagydë jus!", Vardas(playerid));
					SendClientMessage(id, 0xD4A017FF,string);
					GameTextForPlayer(id, "~g~JUS BUVOTE PAGYDYTAS" , 3000, 3);
                    if(id == playerid)
                    {
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            PlayerDB[playerid][Job2XP] +=2;
                            SendClientMessage(playerid, ZALIA, "Uþ savæs pagydimà gavote +2XP prie darbo patirties.");
                            PlusPlayerScore(playerid,2);
                        }
                        else
                        {
                            PlayerDB[playerid][Job2XP] +=1;
                            SendClientMessage(playerid, ZALIA, "Uþ savæs pagydimà gavote +1XP prie darbo patirties.");
                            PlusPlayerScore(playerid,1);
                        }
                    }
                    else
                    {
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            PlayerDB[playerid][Job2XP] +=6;
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo pagydimà gavote +6XP prie darbo patirties.");
                            PlusPlayerScore(playerid,6);
                        }
                        else
                        {
                            PlayerDB[playerid][Job2XP] +=3;
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo pagydimà gavote +3XP prie darbo patirties.");
                            PlusPlayerScore(playerid,3);
                        }
                    }
				}
			}
			else{
				ErrorMsg(playerid,"Þaidëjas yra per toli.");
			}
		}
		else
		{
			ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
		}
	}
	return 1;
}
CMD:vaistineles(playerid,params[])
{
	if(PlayerDB[playerid][Job] == 2)
	{
		new string[400];
		format(string, 400, "Jûsø turimø vaistinëliø kiekis: %i\n\n{AFAFAF}Vaistinëlë tai medikø naudojama dëþutë kurioje yra gausu ávairiø medikamentø skirtø gydyti þaidëjus.\n{AFAFAF}Kas kart pagydþius þaidëjà turësite naudoti kità vaistinëlæ.", PlayerDB[playerid][Vaistineles]);
		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vaistinelës", string, "Gerai", "");
	}
	return 1;
}
CMD:pvaistineles(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 2)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Siûlyti þaidëjui medikamentus (namui): /pvaistineles [vardo dalis/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 12, Cords[0], Cords[1], Cords[2]) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(id) || GetPlayerInterior(playerid) != GetPlayerInterior(id))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerDialogID(id) == -1)
                {
                    if(PlayerDB[id][VaistuOfferCanGetAt] > gettime()) //ArmourOfferCanGetAt
                    {
                        ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali gauti pasiûlymo ásigyti vaistineles, praðome palaukti ir bandyti vël.");
                        ErrorMsg(id,"• Ðiuo metu negalite gauti pasiûlymo ásigyti vaistineles, praðome palaukti...");
                        return 1;
                    }
                    else if(PlayerDB[id][TuriuNama] == 0)
					{
						ErrorMsg(id,"• Neturite namo.");
						ErrorMsg(playerid,"• Þaidëjas neturi namo.");
						return 1;
					}
                    else if(PlayerDB[id][TuriuNamoVaistu] == 5)
                    {
                    	ErrorMsg(id,"• Jûs jau turite 5 vnt. vaistinëliø, pirma padëkite su /pmedikamentus.");
                        ErrorMsg(playerid,"• Þaidëjas jau turi 5 vnt. vaistinëliø, pirmiausia turi padëti juos namie.");
                        return 1;
                    }
                    else if(PlayerDB[playerid][Vaistineles] < 5)
					{
						ErrorMsg(playerid,"• Jûs neturite pakankamai vaistinëliø, jas galite pasiimti medikø garaþe uþlipus ant ásidarbinimo pickup.");
						return 1;
					}
                    new info[320];
                    new SCode[5];
                    randomString(SCode,5);
                    format(PlayerDB[id][VaistuOfferSCode], 6, "%s", SCode);
                    PlayerDB[id][VaistuOfferGiverID] = playerid;
                    PlayerDB[id][VaistuOfferSum] = 3500;
                    PlayerDB[id][ReceivedVaistuOffer] = true;
                    format(info, sizeof(info), "{FFFFFF}Medikas {33cc33}%s {ffffff}Jums siûlo pirkti namø medikamentus.\n\n\t{FFFFFF}• Medikametai: {33CC33}5 vnt.{FFFFFF}.\n\t{FFFFFF}• Kaina : {33cc33}%i{FFFFFF} €\n\n\t{ffffff}Norëdamas nusipirkti medikamentus á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'. ",Vardas(playerid),PlayerDB[id][VaistuOfferSum],SCode);
                    ShowPlayerDialog(id, 228, DIALOG_STYLE_INPUT, "{AFAFAF}Medikamentø pirkimas", info, "Pirkti", "Atðaukti");
                    format(info, sizeof(info),"Pasiûlëte þaidëjui %s pirkti medikamentus, uþ %d €.",Vardas(id),PlayerDB[id][VaistuOfferSum]); // Medikui
                    SendClientMessage(playerid, 0x33cc33AA, info);
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali priimti sprendimø, praðome palaukti ir bandykite siûlyti dar kartà vëliau.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik medikams.");
    }
    return 1;
}
/*CMD:pvaistineles(playerid, params[])
{
	if(PlayerDB[playerid][Job] != 2)
	{
		ErrorMsg(playerid,"• Ði komanda tik medikams.");
	}
	else
	{
		new id;
		if(sscanf(params,"u",id))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Parduoti þaidëjui medikamentus (namui): /pvaistineles [vardo dalis/ID]");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
			new Float:Cords[3];
			GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
			if(IsPlayerInRangeOfPoint(id, 3.0 ,Cords[0], Cords[1], Cords[2]))
			{
				if(PlayerDB[id][TuriuNamoVaistu] == 5)
                {
                    ErrorMsg(playerid,"• Þaidëjas jau turi 5 vnt. vaistinëliø, pirmiausia turi padëti juos namie.");
                    ErrorMsg(id,"• Pirmà padëkite jau turimus medikamentus su {FFFFFF}/pmedikamentus{FFFF00}.");
                }
				else if(PlayerDB[playerid][Vaistineles] < 5)
				{
					ErrorMsg(playerid,"• Jûs neturite pakankamai vaistinëliø, jas galite pasiimti medikø garaþe, uþlipus ant ásidarbinimo pickup.");
				}
				else
				{
					new string[144];
				    PlayerDB[playerid][Vaistineles] +=5;
				    PlayerDB[id][Vaistineles] -=5;
				    format(string, 144, "{D4A017}***%s pardavë jums 5 vnt. medikamentø! Dabar padëkite juos namie su /pmedikamentus.", Vardas(playerid));
					SendClientMessage(id, -1,string);
					
					format(string, 144, "{D4A017}***Pardavëte þaidëjui %s 5 vnt. vaitinëliø.", Vardas(id));
					SendClientMessage(playerid, -1,string);
				}
			}
			else
			{
				ErrorMsg(playerid,"• Þaidëjas yra per toli.");
			}
		}
		else
		{
			ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
		}
	}
	return 1;
}*/
CMD:isblaivyti(playerid,params[])
{
	if(PlayerDB[playerid][Job] != 2)
	{
		ErrorMsg(playerid,"• Ði komanda tik medikams.");
	}
	else
	{
		new id;
		if(sscanf(params,"u",id))
		{
			SendClientMessage(playerid, Bright_YELLOW, "• Iðblaivyti þaidëjà: /isblaivyti [vardo dalis/ID]");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
			new Float:Cords[3];
			GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
			if(IsPlayerInRangeOfPoint(id, 3.0 ,Cords[0], Cords[1], Cords[2]))
			{
                if(GetPlayerDrunkLevel(id) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra blaivus.");
                }
				else if(PlayerDB[playerid][Vaistineles] < 1)
				{
					ErrorMsg(playerid,"• Jûs neturite pakankamai vaistinëliø,jas galite pasiimti medikø garaþe,uþlipus ant ásidarbinimo pickup.");
				}
				else
				{
					PlayerDB[playerid][Vaistineles]-=1;
					SetPlayerDrunkLevel(id, 0);
					new string[144];
					format(string, 144, "{E7BA21}• Medikas %s iðblaivë %s", Vardas(playerid),Vardas(id));
					foreach(new i : Player)
					{
						if(IsPlayerInRangeOfPoint(playerid, 20.0,Cords[0], Cords[1], Cords[2]))
						{
							SendClientMessage(i, -1, string);
						}
					}
					format(string, 144, "{D4A017}***%s iðblaivë jus!", Vardas(playerid));
					SendClientMessage(id, -1,string);
					GameTextForPlayer(id, "~g~JUS BUVOTE ISBLAIVYTAS" , 3000, 3);
                    if(PlayerDB[playerid][VIP] == 1)
                    {
                        PlayerDB[playerid][Job2XP] +=10;
                        SendClientMessage(playerid, ZALIA, "Uþ þaidëjo iðblaivymà gavote +10XP prie darbo patirties.");
                        PlusPlayerScore(playerid,10);
                    }
                    else
                    {
                        PlayerDB[playerid][Job2XP] +=5;
                        SendClientMessage(playerid, ZALIA, "Uþ þaidëjo iðblaivymà gavote +5XP prie darbo patirties.");
                        PlusPlayerScore(playerid,5);
                    }
				}
			}
			else{
				ErrorMsg(playerid,"• Þaidëjas yra per toli.");
			}
		}
		else
		{
			ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
		}
	}
	return 1;
}
CMD:uzrakintipoz(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		switch(JobIDToWorkWith)
		{
			case 2:
			{
				if(MedikuGarazas == true)
				{
					ErrorMsg(playerid,"• Medikø poþeminis garaþas ir taip jau buvo uþrakintas.");
				}
				else
				{
					SendClientMessage(playerid, ZALIA,"Medikø poþeminis garaþas uþrakintas.");
					new string[144];
					format(string, 144, "[racija] Direktorius uþrakino poþeminá garaþà.");
					foreach(new i : Player)
					{
						if(PlayerDB[i][Job] == 2)
						{
							SendClientMessage(i, 0x0099CCFF, string);
						}
					}
					MedikuGarazas=true;
				}
			}
            case 4:
            {
                if(TaksiFGarazas == true)
                {
                    ErrorMsg(playerid,"• Taksi firmos poþeminis garaþas ir taip jau buvo uþrakintas.");
                }
                else
                {
                    SendClientMessage(playerid, ZALIA,"Taksi firmos poþeminis garaþas uþrakintas.");
                    new string[144];
                    format(string, 144, "[racija] Direktorius uþrakino poþeminá garaþà.");
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 4)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    TaksiFGarazas=true;
                }
            }
            case 10:
            {
                if(RadistaiGarazas == true)
                {
                    ErrorMsg(playerid,"• Radistø poþeminis garaþas ir taip jau buvo uþrakintas.");
                }
                else
                {
                    SendClientMessage(playerid, ZALIA,"Radistø poþeminis garaþas uþrakintas.");
                    new string[144];
                    format(string, 144, "[racija] Direktorius uþrakino poþeminá garaþà.");
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 10)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    RadistaiGarazas=true;
                }
            }
            default:
            {
                ErrorMsg(playerid,"• Jûsø orgnaizacija neturi poþeminio garaþo.");
            }
		}
	}
	return 1;
}
CMD:atrakintipoz(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		switch(JobIDToWorkWith)
		{
			case 2:
			{
				if(MedikuGarazas == false)
				{
					ErrorMsg(playerid,"• Medikø poþeminis garaþas ir taip jau yra atrakintas.");
				}
				else
				{
					SendClientMessage(playerid, ZALIA,"Medikø poþeminis garaþas atrakintas.");
					new string[144];
					format(string, 144, "[racija] Direktorius atrakino poþeminá garaþà.", Vardas(playerid));
					foreach(new i : Player)
					{
						if(PlayerDB[i][Job] == 2)
						{
							SendClientMessage(i, 0x0099CCFF, string);
						}
					}
					MedikuGarazas = false;
				}
			}
            case 4:
            {
                if(TaksiFGarazas == false)
                {
                    ErrorMsg(playerid,"• Taksi firmos poþeminis garaþas ir taip jau yra atrakintas.");
                }
                else
                {
                    SendClientMessage(playerid, ZALIA,"Taksi firmos poþeminis garaþas atrakintas.");
                    new string[144];
                    format(string, 144, "[racija] Direktorius atrakino poþeminá garaþà.", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 4)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    TaksiFGarazas = false;
                }
            }
            case 10:
            {
                if(RadistaiGarazas == false)
                {
                    ErrorMsg(playerid,"• Radistø poþeminis garaþas ir taip jau yra atrakintas.");
                }
                else
                {
                    SendClientMessage(playerid, ZALIA,"Radistø poþeminis garaþas atrakintas.");
                    new string[144];
                    format(string, 144, "[racija] Direktorius atrakino poþeminá garaþà.", Vardas(playerid));
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == 10)
                        {
                            SendClientMessage(i, 0x0099CCFF, string);
                        }
                    }
                    RadistaiGarazas = false;
                }
            }
            default:
            {
                ErrorMsg(playerid,"• Jûsø orgnaizacija neturi poþeminio garaþo.");
            }
		}
	}
	return 1;
}
CMD:paliktidarba(playerid,params[])
{
	if(PlayerDB[playerid][Job] == 0)
	{
		ErrorMsg(playerid,"• Jûs ir taip esate bedarbis.");
	}
	else
	{
		new priezastis[90];
		if(sscanf(params, "s[90]", priezastis))
		{
			ErrorMsg(playerid,"• Pamirðote áraðyti prieþastá.");
		}
		else
		{
			new string[128];
            format(string, 128, "[racija] {99D6EB}Þaidëjas {0099CC}%s {99D6EB}paliko darbà, prieþastis: {0099CC}%s", Vardas(playerid),priezastis);
			foreach(new i : Player)
			{
				if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
				{
					SendClientMessage(i, 0x0099CCFF, string);
				}
			}
			new querys[300];
			new years,month,day;
			getdate(years, month, day);
			mysql_format(connectionHandle, querys, 300, "INSERT INTO `palikodarba` (`id`, `DarboID`, `PlayerName`, `IsidarbinimoData`, `PalikimoData`, `Reason`) VALUES (NULL, '%i', '%e', '%s', '%d-%d-%.0d', '%e');", PlayerDB[playerid][Job],Vardas(playerid),PlayerDB[playerid][DarboPradziosData],years,month,day,priezastis);
			mysql_function_query(connectionHandle,querys,false,"SendQuery","");
            PlayerDB[playerid][Vaistineles] = 0;
			PlayerDB[playerid][Job] = 0;
			PlayerDB[playerid][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
			SetPlayerSkinEx(playerid, PlayerDB[playerid][Drabuziai]);
			SendClientMessage(playerid, ZALIA, "• Palikote darbà");
			GameTextForPlayer(playerid, "~r~DARBAS PALIKTAS", 3000, 3);
            format(PlayerDB[playerid][DarboPradziosData], 12, "%d-%02d-%02d", years,month,day);
            if(PlayerDB[playerid][SekimoBusena] == true)
            {
                PlayerDB[playerid][SekimoBusena] = false;
                DestroySekimoTD(playerid);
                SendClientMessage(playerid, RAUDONA, "• Sekimas nutrauktas.");
            }
            if(PlayerDB[playerid][SuSkydu] == 1)
            {
                PlayerDB[playerid][SuSkydu] = 0;
                RemovePlayerAttachedObject(playerid, 0);
            }
            PlayerDB[playerid][AtvykimaiTotal] = 0;
            PlayerDB[playerid][BaudosTotal] = 0;
            PlayerDB[playerid][PagydimaiTotal] = 0;
		}
	}
	return 1;
}
CMD:paliko(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new query[288];
		mysql_format(connectionHandle, query, 288, "SELECT PlayerName,IsidarbinimoData,PalikimoData,Reason FROM `palikodarba` WHERE `DarboID` = %i ORDER BY `id` DESC LIMIT 10", JobIDToWorkWith);
		mysql_function_query(connectionHandle,query,true,"OnSelectInfoAboutLeftWorkers","d",playerid);
	}
	else
	{
		ErrorMsg(playerid,"• Ði komanda skirta tik direktoriams ir jø pavaduotojams.");
	}
	return 1;
}
forward OnSelectInfoAboutLeftWorkers(playerid);
public OnSelectInfoAboutLeftWorkers(playerid)
{
	new info[2048];
	if(cache_get_row_count() == 0)
	{
		info = "{FF0000}Informacijos apie darbà palikusius þaidëjus nëra.";
	}
	else
	{
		for(new row = 1; row <= cache_get_row_count(); row++)
		{
			new string[144];
			new playername[24],StartingData[12],QuitingData[12],reason[90];
			cache_get_row(row-1, 0, playername, 1, 24);
			cache_get_row(row-1, 1, StartingData, 1, 12);
			cache_get_row(row-1, 2, QuitingData, 1, 12);
			cache_get_row(row-1, 3, reason, 1, 90);

			format(string, 144, "%i. %s pradëjo darbà: [%s] | paliko darbà: [%s]\n", row,playername,StartingData,QuitingData);
			strcat(info, string);
			if(row == cache_get_row_count())
			{
				format(string, 144, "Prieþastis: „%s“", reason);
				strcat(info, string);
			}
			else
			{
				format(string, 144, "Prieþastis: „%s“\n", reason);
				strcat(info, string);
			}
		}
	}
	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}10 Paskutiniø þaidëjø palikusiø firmà", info, "Gerai", "");
	return 1;
}
stock Saudykla(playerid)
{
	SendClientMessage(playerid, Bright_YELLOW, "Pasiruoðkite ðaudyti á taikinius!");
	GameTextForPlayer(playerid, "~g~PASIRUOSKITE SAUDYTI", 3000, 3);
	GivePlayerWeaponEx(playerid, WEAPON_COLT45, 20);
	SetTimerEx("Saudykla1", 2000, false, "d", playerid);
}
forward Saudykla1(playerid);
public Saudykla1(playerid)
{
	SendClientMessage(playerid, Bright_YELLOW, "Pasiruoðkite ðaudyti á taikinius!");
	new PirmasFrame = CreateDynamicObject(1587,301.8999900,-17.6000000,1002.0000000,0.0000000,0.0000000,0.0000000); //object(tar_frame) (1)
	new PirmasT = CreateDynamicObject(1583,301.8999900,-17.4000000,1001.3000000,0.0000000,0.0000000,0.0000000); //object(tar_gun2) (1)

	new Laikas = MoveDynamicObject(PirmasFrame, 282.3999900,-17.6000000,1002.0000000, 1.5);
	MoveDynamicObject(PirmasT, 282.3999900,-17.4000000,1001.3000000, 1.5);
	SetTimerEx("Saudykla2", Laikas+1000, false, "ddd", playerid,PirmasFrame,PirmasT);
}
forward Saudykla2(playerid,PirmasFrame,PirmasT);
public Saudykla2(playerid,PirmasFrame,PirmasT)
{
	DestroyDynamicObject(PirmasFrame);
	DestroyDynamicObject(PirmasT);
	SendClientMessage(playerid, Bright_YELLOW, "Pasiruoðkite ðaudyti á taikinius!");
	new PirmasFrameT = CreateDynamicObject(1587,301.8999900,-17.6000000,1002.0000000,0.0000000,0.0000000,0.0000000); //object(tar_frame) (1)
	new PirmasTT = CreateDynamicObject(1583,301.8999900,-17.4000000,1001.3000000,0.0000000,0.0000000,0.0000000); //object(tar_gun2) (1)

	new AntrasFrame = CreateDynamicObject(1587,282.3999900,-15.3000000,1002.0000000,0.0000000,0.0000000,0.0000000); //object(tar_frame) (2)
	new AntrasT = CreateDynamicObject(1583,282.3999900,-15.3000000,1001.3000000,0.0000000,0.0000000,0.0000000); //object(tar_gun2) (1)


	MoveDynamicObject(AntrasFrame, 301.8999900,-15.3000000,1002.0000000, 2.5);
	MoveDynamicObject(AntrasT, 301.8999900,-15.3000000,1001.3000000, 2.5);

	new Laikas = MoveDynamicObject(PirmasFrameT, 282.3999900,-17.6000000,1002.0000000, 2.5);
	MoveDynamicObject(PirmasTT, 282.3999900,-17.4000000,1001.3000000, 2.5);
	SetTimerEx("Saudykla3", Laikas+6000, false, "ddddd", playerid,PirmasFrameT,PirmasTT,AntrasFrame,AntrasT);
}
forward Saudykla3(playerid,PirmasFrame,PirmasT,AntrasFrame,AntrasT);
public Saudykla3(playerid,PirmasFrame,PirmasT,AntrasFrame,AntrasT)
{
	DestroyDynamicObject(PirmasFrame);
	DestroyDynamicObject(PirmasT);
	DestroyDynamicObject(AntrasFrame);
	DestroyDynamicObject(AntrasT);
    ResetPlayerWeaponsEx(playerid);
	SendClientMessage(playerid, -1, "{E3BA24}Atlikote praktiná ðaudymà ir gavote ginklø licenzijà. Dabar galite nusipirkti ginklà.");
	PlayerDB[playerid][WeaponsLicense] = 1;
}
CMD:arafk(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Patikrinti ar þaidëjas AFK /arafk [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][AfkState] == true)
                {
                    new string[144];
                    format(string, 144, "• Þaidëjas {00FF00}%s{FFFFFF} yra AFK jau {00FF00}%i{FFFFFF}sek.", Vardas(id),PlayerDB[id][AfkTime]);
                    SendClientMessage(playerid, -1, string);
                }
                else
                {
                    new string[144];
                    format(string, 144, "• Þaidëjas {00FF00}%s{FFFFFF} nëra AFK.", Vardas(id));
                    SendClientMessage(playerid, -1, string);
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda skirta tik teisësaugai.");
    }
    return 1;
}
CMD:bauda(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Naudojantis þaidëjø prieþiûros komandomis ðios komandos naudoti negalima.");
            return 1;
        }
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Duoti baudà þaidëjui: /bauda [dalis vardo]");
		}
		else
		{
			if(IsPlayerConnected(id) && playerid != id)
			{
				new Float:Cords[3];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(id, 12.0, Cords[0], Cords[1], Cords[2]))
				{
					if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && GetPlayerInterior(playerid) == GetPlayerInterior(id))
					{
						if(PlayerDB[id][WantedLevel] == 0)
						{
							ErrorMsg(playerid,"Þaidëjas nëra gaudomas.");
						}
						else
						{
							if(PlayerDB[id][WantedLevel] > 40)
							{
								ErrorMsg(playerid,"• Þaidëjas yra per daug ieðkomas, kad jam galëtum duoti baudà. Sodink já á kalëjimà!");
							}
							else
							{
								if(GetPlayerDialogID(id) == -1)
                                {
									new radio[128];
									if(PlayerDB[id][BEGA] == 1)
									{
										format(radio, 128, "[racija] Pareigûnas %s: pasiûlë nusikalteliui %s baudà (jis buvo bëglys).", Vardas(playerid),Vardas(id));
									}
									else
									{
										format(radio, 128, "[racija] Pareigûnas %s: pasiûlë nusikalteliui %s baudà.", Vardas(playerid),Vardas(id));
									}
									foreach(new i : Player)
									{
										if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
										{
											SendClientMessage(i, 0x0099CCFF, radio);
										}
									}
									new string[200];
									format(string, 200, "Jûs esate gaudomas teisësaugos,bei privalote susimokëti baudà uþ nusikaltimus.\nBaudos dydis uþ jûsø nusiþengimus yra: %s€\nAr norite susimokëti baudà?", AddPoints(200*PlayerDB[id][WantedLevel]));
									ShowPlayerDialog(id, 41, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bauda", string, "Taip", "Ne");
									PlayerDB[id][GavesBaudosPasiulyma] = true;
									PlayerDB[id][BaudaSkyresPlayeris] = playerid;
								}
                                else
                                {
                                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali priimti naujø sprendimø, praðome palaukti ir bandykite siûlyti dar kartà vëliau.");
                                }
							}
						}
					}
					else
					{
						ErrorMsg(playerid,"• Þaidëjo kordinatës sutampa, taèiau ne virtualus pasaulis arba interjeras.");
					}
				}
				else
				{
					ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
				}
			}
			else
			{
				ErrorMsg(playerid,"• Tokio þaidëjo nëra");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"• Ði komanda skirta tik teisësaugininkams!");
	}
	return 1;
}
CMD:bega(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Praneðti þaidëjui, kad jis gaudomas policijos: /bega [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Ðios komandos negalite naudoti ant savæs.");
                    return 1;
                }
                if(PlayerDB[id][BEGA] == 1)
                {
                    SetPlayerColor(id, NematomaPilka);
                    new string[128];
                    format(string, 128, "[Teisësaugos racija] %s: atðaukiau %s gaudymà.",Vardas(playerid),Vardas(id));
                    SendClientMessageToLaw(0xDFE009FF, string);
                    PlayerDB[id][BEGA] = 0;
                    PlayerDB[id][BegaLaiko] = 0;
                    format(string, 128, "• [POLICIJA]: Jûsø gaudymas atðauktas policininko %s.", Vardas(playerid));
                    SendClientMessage(id, ZALIA, string);
                }
                else
                {
                    SendClientMessage(id, RAUDONA, "• [POLICIJA] jûs esate gaudomas,praðome tuètojau pasiduoti.");
                    SetPlayerColor(id, (0xFFFFFFFF & 0xFFFFFF00));
                    PlayerDB[id][BEGA] = 1;
                    PlayerDB[id][BegaLaiko] = 0;
                    format(PlayerDB[id][BegaUzdejesPareigunas],24,"%s",Vardas(playerid));
                    new string[144];
                    format(string, 144, "[TEISËSAUGA] Pareigûnas %s: pastebëjau, kaip %s bëga nuo policijos, jis paþymëtas þemëlapyje raudonu taðku",Vardas(playerid),Vardas(id));
                    new Float:Cords[3];
                    GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                    foreach(new i : Player)
                    {
                        if(IsJobFromLaw(PlayerDB[i][Job]))
                        {
                            SendClientMessage(i, 0xDFE009FF, string);
                            SetPlayerCheckpoint(i, Cords[0], Cords[1], Cords[2], 1.5);
                            SetPlayerMapIcon(i, 90, Cords[0], Cords[1], Cords[2], 41, -1, MAPICON_GLOBAL);

                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugai.");
    }
    return 1;
}
CMD:begliai(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        SendClientMessage(playerid, ZYDRA, "• Bëgliai:");
        foreach(new i : Player)
        {
            if(PlayerDB[i][BEGA] == 1)
            {
                new string[128];
                new valandos,minutes,sekundes;
                sekundes = PlayerDB[i][BegaLaiko];
                while(sekundes >= 60)
                {
                    sekundes-=60;
                    minutes++;
                }
                while(minutes >= 60)
                {
                    valandos++;
                    minutes-=60;
                }
                if(PlayerDB[i][WantedLevel] > 0)
                {
                    format(string, 128, " %s (%i) ({FFFFFF}%i{33ccff} lygiai) paskelbæs paieðkà þaidëjas {FFFFFF}„%s“{33ccff} bëglys gaudomas {FFFFFF}%02d{33ccff}val. {FFFFFF}%02d{33ccff}min. {FFFFFF}%02d{33ccff}sek.", Vardas(i),i,PlayerDB[i][WantedLevel],PlayerDB[i][BegaUzdejesPareigunas],valandos,minutes,sekundes);
                }
                else
                {
                    format(string, 128, " %s (%i) paskelbæs paieðkà þaidëjas {FFFFFF}„%s“{33ccff} bëglys gaudomas {FFFFFF}%02d{33ccff}val. {FFFFFF}%02d{33ccff}min. {FFFFFF}%02d{33ccff}sek.", Vardas(i),i,PlayerDB[i][BegaUzdejesPareigunas],valandos,minutes,sekundes);
                }
                SendClientMessage(playerid, ZYDRA, string);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugai.");
    }
    return 1;
}
CMD:gaudomi(playerid,params[])
{
    cmd_ieskomi(playerid,params);
    return 1;
}
CMD:ieskomi(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
        SendClientMessage(playerid, ZYDRA, "Ieðkomi:");
		new count = 0;
		foreach(new i : Player)
		{
			if(PlayerDB[i][WantedLevel] > 0)
			{
                count++;
                new string[144];
                new bool:Sekamas;
                foreach(new io : Player)
                {
                    if(PlayerDB[io][SekimoBusena] == true && PlayerDB[io][SekimoTaikinys] == i)
                    {
                        Sekamas = true;
                    }
                }
                if(PlayerDB[i][BEGA] == 0)
                {
                    if(PlayerDB[i][AfkState] == true)
                    {
                        if(Sekamas == true)
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(ne bëga) (Sekamas) (AFK)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                        else
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(ne bëga) (ne sekamas) (AFK)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                    }
                    else
                    {
                        if(Sekamas == true)
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(ne bëga) (Sekamas)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                        else
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(ne bëga) (ne sekamas)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                    }
                }
                else
                {
                    if(PlayerDB[i][AfkState] == true)
                    {
                        if(Sekamas == true)
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(Bëga) (Sekamas) (AFK)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                        else
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(Bëga) (ne sekamas) (AFK)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                    }
                    else
                    {
                        if(Sekamas == true)
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(Bëga) (Sekamas)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                        else
                        {
                            format(string, 144, "{B4B5B7}%i. %s(%d) {FF0000}(%i lygiai) {FFFFFF}(Bëga) (ne sekamas)", count,Vardas(i),i,PlayerDB[i][WantedLevel]);
                        }
                    }
                }
                SendClientMessage(playerid, -1,string);
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, RAUDONA, "Nëra ieðkomø þaidëjø.");
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda skirta tik teisësaugininkams!");
	}
	return 1;
}
forward OnLoadPoliceSettings();
public OnLoadPoliceSettings()
{
	PoliceSettings[SKIN280_RANGAS] = cache_get_row_int(0,0);
	PoliceSettings[SKIN281_RANGAS] = cache_get_row_int(0,1);
	PoliceSettings[SKIN282_RANGAS] = cache_get_row_int(0,2);
	PoliceSettings[SKIN283_RANGAS] = cache_get_row_int(0,3);
	PoliceSettings[SKIN288_RANGAS] = cache_get_row_int(0,4);
	PoliceSettings[SKIN284_RANGAS] = cache_get_row_int(0,5);
	PoliceSettings[Vehicle497] = cache_get_row_int(0,6);
	PoliceSettings[Vehicle597] = cache_get_row_int(0,7);
	PoliceSettings[Vehicle523] = cache_get_row_int(0,8);
	PoliceSettings[Vehicle599] = cache_get_row_int(0,9);
	PoliceSettings[Vehicle430] = cache_get_row_int(0,10);
	print("POLICE SETTINGS HAS BEEN LOADED");
	return 1;
}
stock SavePoliceSettings()
{
	new query[400];
	mysql_format(connectionHandle, query, 400, "UPDATE `pdnustatymai` SET `280SKIN_RANGAS`=%i,`281SKIN_RANGAS`=%i,`282SKIN_RANGAS`=%i,`283SKIN_RANGAS`=%i,`288SKIN_RANGAS`=%i,`284SKIN_RANGAS`=%i,`Vehicle497`=%i,`Vehicle597`=%i,`Vehicle523`=%i,`Vehicle599`=%i,`Vehicle430`=%i WHERE 1",
		PoliceSettings[SKIN280_RANGAS],PoliceSettings[SKIN281_RANGAS],PoliceSettings[SKIN282_RANGAS],PoliceSettings[SKIN283_RANGAS],PoliceSettings[SKIN288_RANGAS],PoliceSettings[SKIN284_RANGAS],PoliceSettings[Vehicle497],PoliceSettings[Vehicle597],PoliceSettings[Vehicle523],PoliceSettings[Vehicle599],PoliceSettings[Vehicle430]);
	mysql_function_query(connectionHandle,query,false,"SendQuery","");
}
forward OnLoadMechanikuSettings();
public OnLoadMechanikuSettings()
{
    MechanikuSettings[Mech50SKIN_RANGAS] = cache_get_row_int(0, 0);
    MechanikuSettings[Mech8SKIN_RANGAS] = cache_get_row_int(0, 1);
    MechanikuSettings[Mech42SKIN_RANGAS] = cache_get_row_int(0, 2);
    MechanikuSettings[Mech525Vehicle_RANGAS] = cache_get_row_int(0, 3);
    MechanikuSettings[Mech602Vehicle_RANGAS] = cache_get_row_int(0, 4);
    return 1;
}
stock SaveMechanikuSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `mechanikainustatymai` SET `50SKIN_RANGAS`='%i',`8SKIN_RANGAS`='%i',`42SKIN_RANGAS`='%i',`Vehicle525_RANGAS`='%i',`Vehicle602_RANGAS`='%i' WHERE 1",
        MechanikuSettings[Mech50SKIN_RANGAS],MechanikuSettings[Mech8SKIN_RANGAS],MechanikuSettings[Mech42SKIN_RANGAS],MechanikuSettings[Mech525Vehicle_RANGAS],MechanikuSettings[Mech602Vehicle_RANGAS]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
forward OnLoadLuccheseSettings();
public OnLoadLuccheseSettings()
{
    //405,498,508,468,452
    LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS] = cache_get_row_int(0, 0);
    LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS] = cache_get_row_int(0, 1);
    LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS] = cache_get_row_int(0, 2);
    LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS] = cache_get_row_int(0, 3);
    LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS] = cache_get_row_int(0, 4);
    LuccheseMafiaSettings[Lucchese124SKIN_RANGAS] = cache_get_row_int(0, 5);
    LuccheseMafiaSettings[Lucchese125SKIN_RANGAS] = cache_get_row_int(0, 6);
    LuccheseMafiaSettings[Lucchese126SKIN_RANGAS] = cache_get_row_int(0, 7);
    LuccheseMafiaSettings[Lucchese113SKIN_RANGAS] = cache_get_row_int(0, 8);
    LuccheseMafiaSettings[LuccheseAmmoShotgun] =  cache_get_row_int(0, 9);
    LuccheseMafiaSettings[LuccheseAmmoDeagle] = cache_get_row_int(0, 10);
    LuccheseMafiaSettings[LuccheseAmmoAK47] = cache_get_row_int(0, 11);
    LuccheseMafiaSettings[LuccheseAmmoSniper] = cache_get_row_int(0, 12);
    return 1;
}
stock SaveLuccheseSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `lucchesenustatymai` SET `0` = '%i', `1` = '%i', `2` = '%i', `3` = '%i', `4` = '%i', `5` = '%i', `6` = '%i', `7` = '%i', `8` = '%i', `9` = '%i', `10` = '%i',`11` = '%i',`12` = '%i' WHERE 1 LIMIT 1;",
        LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS],
        LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS],
        LuccheseMafiaSettings[LuccheseAmmoShotgun],LuccheseMafiaSettings[LuccheseAmmoDeagle],LuccheseMafiaSettings[LuccheseAmmoAK47],LuccheseMafiaSettings[LuccheseAmmoSniper]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
forward OnLoadGenoveseSettings();
public OnLoadGenoveseSettings()
{
    //405,498,508,468,452
    GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS] = cache_get_row_int(0, 0);
    GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS] = cache_get_row_int(0, 1);
    GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS] = cache_get_row_int(0, 2);
    GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS] = cache_get_row_int(0, 3);
    GenoveseMafiaSettings[Genovese121SKIN_RANGAS] = cache_get_row_int(0, 4);
    GenoveseMafiaSettings[Genovese122SKIN_RANGAS] = cache_get_row_int(0, 5);
    GenoveseMafiaSettings[Genovese123SKIN_RANGAS] = cache_get_row_int(0, 6);
    GenoveseMafiaSettings[Genovese98SKIN_RANGAS] = cache_get_row_int(0, 7);
    GenoveseMafiaSettings[GenoveseAmmoShotgun] =  cache_get_row_int(0, 8);
    GenoveseMafiaSettings[GenoveseAmmoDeagle] = cache_get_row_int(0, 9);
    GenoveseMafiaSettings[GenoveseAmmoAK47] = cache_get_row_int(0, 10);
    GenoveseMafiaSettings[GenoveseAmmoSniper] = cache_get_row_int(0, 11);
    return 1;
}
stock SaveGenoveseSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `genovesenustatymai` SET `0` = '%i', `1` = '%i', `2` = '%i', `3` = '%i', `4` = '%i', `5` = '%i', `6` = '%i', `7` = '%i',`8` = '%i',`9` = '%i',`10` = '%i',`11` = '%i' WHERE 1 LIMIT 1;",
        GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS],
        GenoveseMafiaSettings[Genovese121SKIN_RANGAS],GenoveseMafiaSettings[Genovese122SKIN_RANGAS],GenoveseMafiaSettings[Genovese123SKIN_RANGAS],GenoveseMafiaSettings[Genovese98SKIN_RANGAS],
        GenoveseMafiaSettings[GenoveseAmmoShotgun],GenoveseMafiaSettings[GenoveseAmmoDeagle],GenoveseMafiaSettings[GenoveseAmmoAK47],GenoveseMafiaSettings[GenoveseAmmoSniper]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
forward OnLoadArasSettings();
public OnLoadArasSettings()
{
    ARASSettings[ARASVEHICLE601_RANGAS] = cache_get_row_int(0, 0);
    ARASSettings[ARASVEHICLE541_RANGAS] = cache_get_row_int(0, 1);
    ARASSettings[ARASVEHICLE427_RANGAS] = cache_get_row_int(0, 2);
    ARASSettings[ARASVEHICLE528_RANGAS] = cache_get_row_int(0, 3);
    ARASSettings[ARASVEHICLE497_RANGAS] = cache_get_row_int(0, 4);
    return 1;
}
forward OnLoadSPDSettings();
public OnLoadSPDSettings()
{

    SPDSettings[SPDVEHICLE411_RANGAS] = cache_get_row_int(0, 0);
    SPDSettings[SPDVEHICLE451_RANGAS] = cache_get_row_int(0, 1);
    SPDSettings[SPDVEHICLE402_RANGAS] = cache_get_row_int(0, 2);
    SPDSettings[SPDVEHICLE415_RANGAS] = cache_get_row_int(0, 3);
    SPDSettings[SPDVEHICLE522_RANGAS] = cache_get_row_int(0, 4);
    SPDSettings[SPDVEHICLE560_RANGAS] = cache_get_row_int(0, 6);
    SPDSettings[SPDVEHICLE426_RANGAS] = cache_get_row_int(0, 7);

    SPDSettings[SPDSKIN164_RANGAS] = cache_get_row_int(0, 8);
    SPDSettings[SPDSKIN165_RANGAS] = cache_get_row_int(0, 9);
    SPDSettings[SPDSKIN294_RANGAS] = cache_get_row_int(0, 10);
    SPDSettings[SPDSKIN303_RANGAS] = cache_get_row_int(0, 11);
    SPDSettings[SPDSKIN304_RANGAS] = cache_get_row_int(0, 12);
    SPDSettings[SPDSKIN305_RANGAS] = cache_get_row_int(0, 13);

    return 1;
}
stock SaveSPDSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `spdnustatymai` SET `1`= '%d',`2`= '%d',`3`= '%d',`4`= '%d',`5`= '%d',`6`= '%d',`7`= '%d',`8`= '%d',`9`= '%d',`10`= '%d',`11`= '%d',`12`= '%d',`13`= '%d',`14`= '%d' WHERE 1",
        SPDSettings[SPDVEHICLE411_RANGAS],SPDSettings[SPDVEHICLE451_RANGAS],SPDSettings[SPDVEHICLE402_RANGAS],SPDSettings[SPDVEHICLE415_RANGAS],SPDSettings[SPDVEHICLE522_RANGAS],SPDSettings[SPDVEHICLE579_RANGAS],SPDSettings[SPDVEHICLE560_RANGAS],
        SPDSettings[SPDVEHICLE426_RANGAS],SPDSettings[SPDSKIN164_RANGAS],SPDSettings[SPDSKIN165_RANGAS],SPDSettings[SPDSKIN294_RANGAS],SPDSettings[SPDSKIN303_RANGAS],SPDSettings[SPDSKIN304_RANGAS],SPDSettings[SPDSKIN305_RANGAS]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
forward OnLoadRadistaiSettings();
public OnLoadRadistaiSettings()
{
    RadistaiSettings[RadistaiVEHICLE488_RANGAS] = cache_get_row_int(0, 0);
    RadistaiSettings[RadistaiVEHICLE516_RANGAS] = cache_get_row_int(0, 1);
    RadistaiSettings[RadistaiVEHICLE582_RANGAS] = cache_get_row_int(0, 2);
    RadistaiSettings[RadistaiSKIN184_RANGAS] = cache_get_row_int(0, 3);
    RadistaiSettings[RadistaiSKIN185_RANGAS] = cache_get_row_int(0, 4);
    RadistaiSettings[RadistaiSKIN289_RANGAS] = cache_get_row_int(0, 5);
    return 1;
}
stock SaveRadistaiSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `radistainustatymai` SET `1` = '%i', `2` = '%i', `3` = '%i',`4` = '%i', `5` = '%i', `6` = '%i' WHERE 1;",
        RadistaiSettings[RadistaiVEHICLE488_RANGAS],RadistaiSettings[RadistaiVEHICLE516_RANGAS],RadistaiSettings[RadistaiVEHICLE582_RANGAS],RadistaiSettings[RadistaiSKIN184_RANGAS],RadistaiSettings[RadistaiSKIN185_RANGAS],RadistaiSettings[RadistaiSKIN289_RANGAS]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
stock SaveARASSettings()
{
    new SQLstring[400];
    mysql_format(connectionHandle, SQLstring, 400, "UPDATE `arasnustatymai` SET `1` = '%i', `2` = '%i', `3` = '%i', `4` = '%i', `5` = '%i' WHERE 1;",
        ARASSettings[ARASVEHICLE601_RANGAS],ARASSettings[ARASVEHICLE541_RANGAS],ARASSettings[ARASVEHICLE427_RANGAS],ARASSettings[ARASVEHICLE528_RANGAS],ARASSettings[ARASVEHICLE497_RANGAS]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}
forward OnLoadFuristaiSettings();
public OnLoadFuristaiSettings()
{
    FURISTAISettings[F435Vehicle_RANGAS] = cache_get_row_int(0, 0);
    FURISTAISettings[F591Vehicle_RANGAS] = cache_get_row_int(0, 1);
    FURISTAISettings[F515Vehicle_RANGAS] = cache_get_row_int(0, 2);
    FURISTAISettings[F443Vehicle_RANGAS] = cache_get_row_int(0, 3);
    FURISTAISettings[F44SKIN_RANGAS] = cache_get_row_int(0, 4);
    FURISTAISettings[F73SKIN_RANGAS] = cache_get_row_int(0, 5);
    FURISTAISettings[F128SKIN_RANGAS] = cache_get_row_int(0, 6);
    FURISTAISettings[F183SKIN_RANGAS] = cache_get_row_int(0, 7);
    FURISTAISettings[F584Vehicle_RANGAS] = cache_get_row_int(0, 8);
    FURISTAISettings[Vaistu_Krovimas] = cache_get_row_int(0, 9);
    FURISTAISettings[Tr_Krovimas] = cache_get_row_int(0, 10);
    FURISTAISettings[Detaliu_Krovimas] = cache_get_row_int(0, 11);
}
stock SaveFURISTAISettings()
{
    new SQLstring[640];
    mysql_format(connectionHandle, SQLstring, 640, "UPDATE `furistainustatymai` SET `F435Vehicle_RANGAS`='%i',`F591Vehicle_RANGAS`='%i',`F515Vehicle_RANGAS`='%i', `F443Vehicle_RANGAS`='%i',`F44SKIN_RANGAS`='%i',`F73SKIN_RANGAS`='%i',`F128SKIN_RANGAS` = '%i',`F183SKIN_RANGAS` = '%i',`F584Vehicle_RANGAS` = '%i',`Vaistu_Krovimas` = '%i',`Tr_Krovimas` = '%i' , `Detaliu_Krovimas` WHERE 1",
        FURISTAISettings[F435Vehicle_RANGAS],FURISTAISettings[F591Vehicle_RANGAS],FURISTAISettings[F515Vehicle_RANGAS],FURISTAISettings[F443Vehicle_RANGAS],FURISTAISettings[F44SKIN_RANGAS],FURISTAISettings[F73SKIN_RANGAS],FURISTAISettings[F128SKIN_RANGAS],FURISTAISettings[F183SKIN_RANGAS],FURISTAISettings[F584Vehicle_RANGAS],FURISTAISettings[Vaistu_Krovimas],FURISTAISettings[Tr_Krovimas],FURISTAISettings[Detaliu_Krovimas]);
    mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
}


forward OnLoadTaksiFSettings();
public OnLoadTaksiFSettings()
{
    TaksiFSettings[SKIN187_RANGAS2F] = cache_get_row_int(0, 0);
    TaksiFSettings[SKIN240_RANGAS] = cache_get_row_int(0, 1);
    TaksiFSettings[SKIN189_RANGAS] = cache_get_row_int(0, 2);
    TaksiFSettings[Vehicle2F420] = cache_get_row_int(0, 3);
    TaksiFSettings[Vehicle2F560] = cache_get_row_int(0, 4);
    TaksiFSettings[Vehicle2F438] = cache_get_row_int(0, 5);
    TaksiFSettings[TaksiFKiloKaina] = cache_get_row_int(0, 6);
    return 1;
}
stock SaveTaksiFSettings()
{
    new query[600];
    mysql_format(connectionHandle, query, 600, "UPDATE `taksifnustatymai` SET `SKIN187_RANGAS`='%i',`SKIN240_RANGAS`='%i',`SKIN189_RANGAS`='%i',`Vehicle420`='%i',`Vehicle560`='%i',`Vehicle418`='%i',`KilometroKaina` = '%i' WHERE 1",
        TaksiFSettings[SKIN187_RANGAS2F],TaksiFSettings[SKIN240_RANGAS],TaksiFSettings[SKIN189_RANGAS],TaksiFSettings[Vehicle2F420],TaksiFSettings[Vehicle2F560],TaksiFSettings[Vehicle2F438],TaksiFSettings[TaksiFKiloKaina]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");
}
forward OnLoadHospitalSettings();
public OnLoadHospitalSettings()
{
    HPSettings[SKIN274_RANGAS] = cache_get_row_int(0, 0);
    HPSettings[SKIN275_RANGAS] = cache_get_row_int(0, 1);
    HPSettings[SKIN70_RANGAS] = cache_get_row_int(0, 2);
    HPSettings[VEHICLE416_RANGAS] = cache_get_row_int(0, 3);
    HPSettings[VEHICLE490_RANGAS] = cache_get_row_int(0, 4);
    HPSettings[VEHICLE487_RANGAS] = cache_get_row_int(0, 5);
    HPSettings[VEHICLE452_RANGAS] = cache_get_row_int(0, 6);
    HPSettings[vaistai] = cache_get_row_int(0, 7);
    print("Hospital SETTINGS HAS BEEN LOADED");
    return 1;
}
stock SaveHospitalSettings()
{
    new query[400];
    mysql_format(connectionHandle, query, 400, "UPDATE `hpnustatymai` SET `SKIN274_RANGAS`='%i',`SKIN275_RANGAS`='%i',`SKIN70_RANGAS`='%i',`VEHICLE416_RANGAS`='%i',`VEHICLE490_RANGAS`='%i',`VEHICLE487_RANGAS`='%i',`VEHICLE452_RANGAS`='%i',`vaistai`='%i' WHERE 1",
        HPSettings[SKIN274_RANGAS],HPSettings[SKIN275_RANGAS],HPSettings[SKIN70_RANGAS],HPSettings[VEHICLE416_RANGAS],HPSettings[VEHICLE490_RANGAS],HPSettings[VEHICLE487_RANGAS],HPSettings[VEHICLE452_RANGAS],HPSettings[vaistai]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");
}
forward OnLoadGamykluLikutis();
public OnLoadGamykluLikutis()
{
	Gamyklos[trvaistai] = cache_get_row_int(0, 0);
	Gamyklos[detales] = cache_get_row_int(0, 1);
	print("GAMYKLU LIKUTIS HAS BEEN LOADED");
	return 1;
}
stock SaveGamykluLikutis()
{
	new query[400];
	mysql_format(connectionHandle, query, 400, "UPDATE `gamyklulikutis` SET `trvaistai`='%i', `detales` = '%i'", Gamyklos[trvaistai], Gamyklos[detales]);
	mysql_function_query(connectionHandle,query,false,"SendQuery","");
}
CMD:kroviniurangai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] == 21)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
		switch(JobIDToWorkWith)
		{
			case 21:
			{
				new info[1000];
				new string[144];
				switch(FURISTAISettings[Vaistu_Krovimas])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti vaistus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[Vaistu_Krovimas]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[Tr_Krovimas])
                {
                	case 1:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti tr. priemones nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[Tr_Krovimas]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[Detaliu_Krovimas])
                {
                	case 1:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Leidimas krauti detales nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[Detaliu_Krovimas]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 334, DIALOG_STYLE_LIST, "{AFAFAF}Kroviniø valdymas", info, "Toliau", "Atðaukti");
            }
		}
	}
	else
	{
		ErrorMsg(playerid,"• Ði komanda tik furitø direktoriui.");
	}
	return 1;
}
CMD:mrangai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
            {
                ErrorMsg(playerid,"• Jûs, kaip pavaduotojas, neturite teisës administruoti rangø.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		switch(JobIDToWorkWith)
		{
			case 1:
			{
				new info[1000];
				new string[144];
				switch(PoliceSettings[Vehicle497])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[Vehicle497]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}Police Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[Vehicle497]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[Vehicle597])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[Vehicle597]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}Police Car (SFPD) nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[Vehicle597]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[Vehicle523])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[Vehicle523]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}HPV1000 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[Vehicle523]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[Vehicle599])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[Vehicle599]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}Police Ranger nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[Vehicle599]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[Vehicle430])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[Vehicle430]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}Police Predator nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[Vehicle430]);
					}
				}
				strcat(info, string);
				ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
			}
            case 2:
            {
                new info[1000];
                new string[144];
                switch(HPSettings[VEHICLE416_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Ambulance nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[VEHICLE416_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(HPSettings[VEHICLE490_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Rancher nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[VEHICLE490_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(HPSettings[VEHICLE487_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[VEHICLE487_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(HPSettings[VEHICLE452_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[VEHICLE452_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 4:
            {
                new info[1000];
                new string[144];
                switch(TaksiFSettings[Vehicle2F420])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Taxi nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[Vehicle2F420]);
                    }
                }
                strcat(info, string);
                switch(TaksiFSettings[Vehicle2F560])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[Vehicle2F560]);
                    }
                }
                strcat(info, string);
                switch(TaksiFSettings[Vehicle2F438])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Cabbie nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[Vehicle2F438]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 5:
            {
                new info[1000];
                new string[144];
                switch(MechanikuSettings[Mech525Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango1Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango2Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango3Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango4Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango5Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango6Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango7Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Towtruck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango8Pavadinimas],MechanikuSettings[Mech525Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(MechanikuSettings[Mech602Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango1Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango2Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango3Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango4Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango5Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango6Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango7Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Alpha nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango8Pavadinimas],MechanikuSettings[Mech602Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 7:
            {
                new info[1000];
                new string[144];
                switch(LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Sentinel nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE405_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE498_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE508_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE468_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Speeder nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[LuccheseVEHICLE452_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 8:
            {
                new info[1000];
                new string[144];
                switch(GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Admiral nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE445_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Boxville nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE498_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Journey nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE508_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Sanchez nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[GenoveseVEHICLE468_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 9:
            {
                new info[1000];
                new string[144];
                switch(ARASSettings[ARASVEHICLE601_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango1Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango2Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango3Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango4Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango5Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango6Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango7Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}S.W.A.T nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango8Pavadinimas],ARASSettings[ARASVEHICLE601_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(ARASSettings[ARASVEHICLE541_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango1Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango2Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango3Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango4Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango5Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango6Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango7Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Bullet nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango8Pavadinimas],ARASSettings[ARASVEHICLE541_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(ARASSettings[ARASVEHICLE427_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango1Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango2Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango3Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango4Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango5Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango6Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango7Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Enforcer nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango8Pavadinimas],ARASSettings[ARASVEHICLE427_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(ARASSettings[ARASVEHICLE528_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango1Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango2Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango3Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango4Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango5Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango6Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango7Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}FBI Truck nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango8Pavadinimas],ARASSettings[ARASVEHICLE528_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(ARASSettings[ARASVEHICLE497_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango1Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango2Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango3Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango4Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango5Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango6Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango7Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[9][Rango8Pavadinimas],ARASSettings[ARASVEHICLE497_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }

            case 10:
            {
                new info[1000];
                new string[144];
                switch(RadistaiSettings[RadistaiVEHICLE488_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}News Maverick nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiVEHICLE488_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(RadistaiSettings[RadistaiVEHICLE516_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Nebula nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiVEHICLE516_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(RadistaiSettings[RadistaiVEHICLE582_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}NewsVan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiVEHICLE582_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 11:
            {
                new info[1000];
                new string[144];
                switch(SPDSettings[SPDVEHICLE411_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Infernus nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE411_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE451_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Turismo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE451_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE402_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Buffalo nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE402_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE415_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Cheetah nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE415_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE522_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}NRG-500 nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE522_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE579_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Huntley nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE579_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE560_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Sultan nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE560_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDVEHICLE426_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Premier nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDVEHICLE426_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
            case 21:
            {
                new info[1000];
                new string[144];
                switch(FURISTAISettings[F435Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Priekaba vaistams veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F435Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[F591Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Priekaba buitinei technikai veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F591Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[F515Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}RoadTrain nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F515Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[F443Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Tralas „Packer“ nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F443Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(FURISTAISettings[F584Vehicle_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}Degalø cisterna veþti nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F584Vehicle_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 45, DIALOG_STYLE_LIST, "{AFAFAF}Transporto valdymas", info, "Toliau", "Atðaukti");
            }
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:srangai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti rangø.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        if(JobIDToWorkWith == 21)
        {
            new info[2048];
            new string[144];
            switch(FURISTAISettings[F44SKIN_RANGAS])
            {
                case 1:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 2:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 3:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 4:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 5:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 6:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 7:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                case 8:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
                default:
                {
                    format(string, 144, "{FFFFFF}44 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F44SKIN_RANGAS]);
                }
            }
            strcat(info, string);
            switch(FURISTAISettings[F73SKIN_RANGAS])
            {
                case 1:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 2:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 3:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 4:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 5:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 6:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 7:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                case 8:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
                default:
                {
                    format(string, 144, "{FFFFFF}73 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F73SKIN_RANGAS]);
                }
            }
            strcat(info, string);
            switch(FURISTAISettings[F128SKIN_RANGAS])
            {
                case 1:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 2:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 3:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 4:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 5:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 6:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 7:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                case 8:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
                default:
                {
                    format(string, 144, "{FFFFFF}128 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F128SKIN_RANGAS]);
                }
            }
            strcat(info, string);
            switch(FURISTAISettings[F183SKIN_RANGAS])
            {
                case 1:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 2:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango2Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 3:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango3Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 4:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango4Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 5:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango5Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 6:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango6Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 7:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango7Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                case 8:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango8Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
                default:
                {
                    format(string, 144, "{FFFFFF}183 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[21][Rango1Pavadinimas],FURISTAISettings[F183SKIN_RANGAS]);
                }
            }
            strcat(info, string);
            ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            return 1;
        }
		switch(JobIDToWorkWith)
		{
			case 1:
			{
				new info[1000];
				new string[144];
				switch(PoliceSettings[SKIN280_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}280 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN280_RANGAS]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[SKIN281_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}281 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN281_RANGAS]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[SKIN282_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}282 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN282_RANGAS]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[SKIN283_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}283 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN283_RANGAS]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[SKIN288_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}288 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN288_RANGAS]);
					}
				}
				strcat(info, string);
				switch(PoliceSettings[SKIN284_RANGAS])
				{
					case 1:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango1Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 2:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango2Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 3:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango3Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 4:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango4Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 5:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango5Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 6:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango6Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 7:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango7Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
					case 8:
					{
						format(string, 144, "{FFFFFF}284 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[1][Rango8Pavadinimas],PoliceSettings[SKIN284_RANGAS]);
					}
				}
				strcat(info, string);
				ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
			}
            case 2:
            {
                new info[1000];
                new string[144];
                switch(HPSettings[SKIN274_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}274 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[SKIN274_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(HPSettings[SKIN275_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}275 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[SKIN275_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(HPSettings[SKIN70_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango1Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango2Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango3Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango4Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango5Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango6Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango7Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}70 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[2][Rango8Pavadinimas],HPSettings[SKIN70_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 4:
            {
                new info[1000];
                new string[144];
                switch(TaksiFSettings[SKIN187_RANGAS2F])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}187 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[SKIN187_RANGAS2F]);
                    }
                }
                strcat(info, string);
                switch(TaksiFSettings[SKIN240_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}240 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[SKIN240_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(TaksiFSettings[SKIN189_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango1Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango2Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango3Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango4Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango5Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango6Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango7Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}189 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[4][Rango8Pavadinimas],TaksiFSettings[SKIN189_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 5:
            {
                new info[1000];
                new string[144];
                switch(MechanikuSettings[Mech50SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango1Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango2Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango3Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango4Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango5Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango6Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango7Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}50 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango8Pavadinimas],MechanikuSettings[Mech50SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(MechanikuSettings[Mech8SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango1Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango2Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango3Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango4Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango5Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango6Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango7Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}8 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango8Pavadinimas],MechanikuSettings[Mech8SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(MechanikuSettings[Mech42SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango1Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango2Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango3Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango4Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango5Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango6Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango7Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}42 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[5][Rango8Pavadinimas],MechanikuSettings[Mech42SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 7:
            {
                new info[1000];
                new string[144];
                switch(LuccheseMafiaSettings[Lucchese124SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}124 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[Lucchese124SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[Lucchese125SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}125 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[Lucchese125SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[Lucchese126SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}126 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[Lucchese126SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(LuccheseMafiaSettings[Lucchese113SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango1Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango2Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango3Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango4Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango5Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango6Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango7Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}113 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[7][Rango8Pavadinimas],LuccheseMafiaSettings[Lucchese113SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 8:
            {
                new info[1000];
                new string[144];
                switch(GenoveseMafiaSettings[Genovese121SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}121 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[Genovese121SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[Genovese122SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}122 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[Genovese122SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[Genovese123SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}123 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[Genovese123SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(GenoveseMafiaSettings[Genovese98SKIN_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango1Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango2Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango3Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango4Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango5Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango6Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango7Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}98 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[8][Rango8Pavadinimas],GenoveseMafiaSettings[Genovese98SKIN_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 9:
            {
                ErrorMsg(playerid,"• Jûsø firma turi tik vienà uniformos tipà.");
            }
            case 10:
            {
                new info[1000];
                new string[144];
                switch(RadistaiSettings[RadistaiSKIN184_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}184 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiSKIN184_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(RadistaiSettings[RadistaiSKIN185_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}185 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiSKIN185_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(RadistaiSettings[RadistaiSKIN289_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango1Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango2Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango3Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango4Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango5Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango6Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango7Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}289 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[10][Rango8Pavadinimas],RadistaiSettings[RadistaiSKIN289_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
            case 11:
            {
                new info[1100];
                new string[144];
                switch(SPDSettings[SPDSKIN164_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}164 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN164_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDSKIN165_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}165 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN165_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDSKIN294_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}294 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN294_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDSKIN303_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}303 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN303_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDSKIN304_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}304 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN304_RANGAS]);
                    }
                }
                strcat(info, string);
                switch(SPDSettings[SPDSKIN305_RANGAS])
                {
                    case 1:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango1Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 2:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango2Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 3:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango3Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 4:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango4Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 5:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango5Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 6:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango6Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 7:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango7Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                    case 8:
                    {
                        format(string, 144, "{FFFFFF}305 Skin nuo {00FF00}„%s“ (%i)\n",DarboInformacija[11][Rango8Pavadinimas],SPDSettings[SPDSKIN305_RANGAS]);
                    }
                }
                strcat(info, string);
                ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "{AFAFAF}Darbuotojø aprangos", info, "Toliau", "Atðaukti");
            }
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:pkomandos(playerid,params[])
{
    if(PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new info[2000];
        strcat(info, "{FFFFFF}» {B2FF00}/priimt | /dismesti | /dismestioff [PILNAS VARDAS_PAVARDE] {FFFFFF}- iðmesti ið darbo neprisijungusi þaidëjà.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/(visi)darbuotojai {FFFFFF}- parodo (visø) darbuotojø sàraðà.\n");//*DEFAULT FOR PAV.
        strcat(info, "{FFFFFF}» {B2FF00}/d [tekstas] {FFFFFF}- raðyti visiems.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dispeti {FFFFFF}- áspëti darbuotojà, 4 áspëjimai iðmetamas lauk ið darbo.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dispetioff {FFFFFF}- áspëti darbuotojà,kai jis neprisijungæs, 4 áspëjimai iðmetamas lauk ið darbo.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dnuimtiisp {FFFFFF}- nuims darbuotojo vienà áspëjimà.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dnuimtiispoff {FFFFFF}- nuims darbuotojo vienà áspëjimà,kai jis neprisijungæs.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dpzu {FFFFFF}- stebëti savo darbuotojus.\n");//*DEFAULT FOR pav
        strcat(info, "{FFFFFF}» {B2FF00}/premija [kiek iðdalinti] {FFFFFF}- iðdalina visiems esantiems ðalia darbuotojams po lygiai nurodytà sumà pinigø.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/premijav [kiek iðdalinti] {FFFFFF}- iðdalina visiems prisijungusiems darbuotojams po lygiai nurodytà pinigø sumà.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dzinute [þinutë] {FFFFFF}- þinutë bus matoma paraðius /dzinute.\n");//*DEFAULT FOR PAV
        strcat(info, "{FFFFFF}» {B2FF00}/paliko {FFFFFF}- paskutiniai 10 palikæ darbà.\n");//*DEFAULT FOR PAV
        strcat(info, "{FFFFFF}» {B2FF00}/respawn {FFFFFF}- atstato darbo maðinas.\n");//*DEFAULT FOR PAV
        strcat(info, "{FFFFFF}» {B2FF00}/uzrakintipoz /atrakintipoz {FFFFFF}- atrakinti | uþrakinti poþeminá garaþà nuo paðaliniø.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/dfondas /disimti /dideti {FFFFFF}- darbo fondo komandos.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/rangas [V_P/ID] [1-8]  {FFFFFF}- rango priskirimas(prisijungusiam).\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/rangasoff [V_P/ID] [1-8]  {FFFFFF}- rango priskirimas(neprisijungusiam).\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/rangai {FFFFFF}- informacija apie rangus | {B2FF00}/mrangai {FFFFFF}- maðinø priskyrimas rangams.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/rangupavadinimai {FFFFFF}- rangø pavadinimø keitimas.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/srangai{FFFFFF} - skin priskirimas rangams.\n");//*//*//*TIK SU TEISE PAVADUOTOJAS GALI
        strcat(info, "{FFFFFF}» {B2FF00}/distorija {FFFFFF}- perþiûrëti darbo ástorijà.\n");//*DEFAULT FOR PAV
        strcat(info, "{FFFFFF}» {B2FF00}/apklausti {FFFFFF}- paskambinti þaidëjui dël apklausos.\n");//*default for pav
        strcat(info, "{FFFFFF}» {B2FF00}/atsisakyti {FFFFFF}- atsisakyti savo einamø pareigø.\n");//*TIK DRK
        strcat(info, "{FFFFFF}» {B2FF00}/dchat {FFFFFF}- direktoriø bei pavaduotojø pokalbis.\n");

        if(PlayerDB[playerid][Pavaduotojas] == 7 || PlayerDB[playerid][Pavaduotojas] == 8)
        {
            strcat(info, "{FFFFFF}» {B2FF00}(apleisti/uzimti)zona {FFFFFF}- apleidþia arba uþima kitos mafijos zonà.");
            strcat(info, "{FFFFFF}» {B2FF00}sistorija {FFFFFF}- parodo ginklø sandelio istorijà.");
        }
        if(PlayerDB[playerid][Pavaduotojas] == 21)
        {
            strcat(info, "{FFFFFF}» {B2FF00}kroviniustatistika {FFFFFF}- parodo fûristø pakrautu/iðkrautu kroviniø statistkà.");
        }
        if(PlayerDB[playerid][Pasiekimas15] == 0)
        {
            PlayerCompletedPasiekimas(playerid,15);
        }

        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Direktoriaus pavaduotojo komandos", info, "Gerai", "");
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik direktoriø pavaduotojams.");
    }
    return 1;
}
CMD:dkomandos(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0)
	{
		new info[2500];
		strcat(info, "{FFFFFF}» {B2FF00}/priimt | /dismesti | /dismestioff [PILNAS VARDAS_PAVARDE]{FFFFFF} - iðmesti ið darbo neprisijungusi þaidëjà.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dismestivisus {FFFFFF}- iðmesti visus darbuotojus ið darbo.\n");//*tik drk
		strcat(info, "{FFFFFF}» {B2FF00}/(visi)darbuotojai {FFFFFF}- parodo (visø) darbuotojø sàraðà.\n");//*DEFAULT FOR PAV.
		strcat(info, "{FFFFFF}» {B2FF00}/d [tekstas] {FFFFFF}- raðyti visiems.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dispeti {FFFFFF}- áspëti darbuotojà, 4 áspëjimai iðmetamas lauk ið darbo.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dispetioff {FFFFFF}- áspëti darbuotojà,kai jis neprisijungæs, 4 áspëjimai iðmetamas lauk ið darbo.\n");//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dnuimtiisp {FFFFFF}- nuims darbuotojo vienà áspëjimà.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dnuimtiispoff {FFFFFF}- nuims darbuotojo vienà áspëjimà, kai jis neprisijungæs.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dpzu {FFFFFF}- stebëti savo darbuotojus.\n");//*DEFAULT FOR pav
		strcat(info, "{FFFFFF}» {B2FF00}/premija [kiek iðdalinti] {FFFFFF}- iðdalina visiems esantiems ðalia darbuotojams po lygiai nurodytà sumà pinigø.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/premijav [kiek iðdalinti] {FFFFFF}- iðdalina visiems prisijungusiems darbuotojams po lygiai nurodytà pinigø sumà.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dzinute [þinutë] {FFFFFF}- þinutë bus matoma paraðius /dzinute\n");//*DEFAULT FOR PAV
		strcat(info, "{FFFFFF}» {B2FF00}/paliko {FFFFFF}- paskutiniai 10 palikæ darbà.\n");//*DEFAULT FOR PAV
		strcat(info, "{FFFFFF}» {B2FF00}/respawn {FFFFFF}- atstato darbo maðinas.\n");//*DEFAULT FOR PAV
		strcat(info, "{FFFFFF}» {B2FF00}/uzrakintipoz /atrakintipoz {FFFFFF}- atrakinti | uþrakinti poþeminá garaþà.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/dfondas /disimti /dideti {FFFFFF}- darbo fondo komandos.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/rangas [V_P/ID] [1-8]  {FFFFFF}- rango priskirimas (prisijungusiam).\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/rangasoff [V_P/ID] [1-8]  {FFFFFF}- rango priskirimas (neprisijungusiam).\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/rangai {FFFFFF}- informacija apie rangus | {B2FF00}/mrangai {FFFFFF}- maðinø priskyrimas rangams.\n");//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/rangupavadinimai {FFFFFF}- rangø pavadinimø keitimas\n");//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/srangai {FFFFFF}- skin priskirimas rangams.\n");//*//*//*TIK SU TEISE PAVADUOTOJAS GALI
		strcat(info, "{FFFFFF}» {B2FF00}/vdarbografika {FFFFFF}- darbo laiko grafiko valdymas.\n");//*//*//*TIK DRK GALI
		strcat(info, "{FFFFFF}» {B2FF00}/distorija {FFFFFF}- perþiûrëti darbo ástorijà.\n");//*DEFAULT FOR PAV
        strcat(info, "{FFFFFF}» {B2FF00}/apklausti {FFFFFF}- paskambinti þaidëjui dël apklausos.\n");//*default for pav
        strcat(info, "{FFFFFF}» {B2FF00}/dpavaduotojas {FFFFFF}- valdyti pavaduotojo nustatymus.\n");//*TIK DRK
        strcat(info, "{FFFFFF}» {B2FF00}/atsisakyti {FFFFFF}- atsisakyti savo einamø pareigø.\n");//*TIK DRK
        strcat(info, "{FFFFFF}» {B2FF00}/dchat {FFFFFF}- direktoriø bei pavaduotojø pokalbis.\n");

        if(PlayerDB[playerid][Direktorius] == 3 || PlayerDB[playerid][Direktorius] == 4)
        {
            strcat(info, "{FFFFFF}» {B2FF00}dtaksometras {FFFFFF}- nustato vieno kilometro kainà.");
        }
        if(PlayerDB[playerid][Direktorius] == 7 || PlayerDB[playerid][Direktorius] == 8)
        {
            strcat(info, "\n/{FFFFFF}» {B2FF00}(apleisti/uzimti)zona {FFFFFF}- apleidþia arba uþima kitos mafijos zonà.");
            strcat(info, "\n/sistorija {FFFFFF}- parodo ginklø sandelio istorijà.");
        }
        if(PlayerDB[playerid][Direktorius] == 21)
        {
            strcat(info, "{FFFFFF}» {B2FF00}/kroviniustatistika {FFFFFF}- parodo fûristø pakrautu/iðkrautu kroviniø statistkà.");
            strcat(info, "{FFFFFF}» {B2FF00}/kroviniurangai {FFFFFF}- valdyti kroviniø rangus.");
        }
        if(PlayerDB[playerid][Pasiekimas16] == 0)
        {
            PlayerCompletedPasiekimas(playerid,16);
        }

		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Direktoriø komandos", info, "Gerai", "");
	}
	else
	{
		ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:vdarbografika(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0)
	{
	    new strf[400];
	    new str[125];
		format(str, sizeof(str), "{62A5C4}•{FFFFFF} Pasirinkite dienà redagavimui: \n");
		strcat(strf, str);
		format(str, sizeof(str), " \n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}1. {FFFFFF}Pirmadienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}2. {FFFFFF}Antradienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}3. {FFFFFF}Treèiadienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}4. {FFFFFF}Ketvirtadienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}5. {FFFFFF}Penktadienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}6. {FFFFFF}Ðeðtadienis\n"); strcat(strf, str);
		format(str, sizeof(str), "{62A5C4}7. {FFFFFF}Sekmadienis\n"); strcat(strf, str);
		ShowPlayerDialog(playerid, 304, DIALOG_STYLE_LIST, "{fff600}Darbo laiko valdymas", strf, "Pasirinkti", "Atðaukti");
	}
	else
	{
		ErrorMsg(playerid, "• Darbo laikà gali valdyti TIK direktorius.");
	}
	return 1;
}
CMD:dtaksometras(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] == 4)
    {
        if(isnull(params))
        {
            new string[144];
            SendClientMessage(playerid, ZYDRA, "--- TAKSOMETRØ NUSTATYMAI ---");
            format(string, 144, "• Dabartinë jûsø firmos taksometrø kilometro kaina yra: {00FF00}%d{FFFFFF}€.", TaksiFSettings[TaksiFKiloKaina]);
            SendClientMessage(playerid, -1, string);
            SendClientMessage(playerid, -1, "• Taksometrø kilometro kainà galite pakeisti raðydami: {00FF00}/dtaksometras [0-100]");
            SendClientMessage(playerid, ZYDRA, "--- INFORMACIJOS PABAIGA ---");
        }
        else
        {
            new kaina = strval(params);
            if(kaina < 0 || kaina > 100)
            {
                ErrorMsg(playerid,"• Jûsø nurodyta kaina uþ vienà kilometrà turi bûti nuo 0 iki 100€.");
            }
            else
            {
                TaksiFSettings[TaksiFKiloKaina] = kaina;
                SendClientMessage(playerid, ZALIA, "• Sëkmingai atnaujinote taksometrø nustatymus.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik taksi firmos direktoriui.");
    }
    return 1;
}
CMD:respawn(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        if(TimerForRespawnGoes[JobIDToWorkWith] == 1)
        {
            ErrorMsg(playerid,"• Praðome palaukti, nuo ðios komandos panaudojimo nepraëjo 30sek.");
        }
        else
        {
            new string[128];
            format(string, 128, "[racija] Direktorius po 30 sekundþiø atstatys visas nenaudojamas darbines transporto priemones.");
            foreach(new i : Player)
            {
                if(PlayerDB[i][Job] == JobIDToWorkWith)
                {
                    SendClientMessage(i, 0x0099CCFF, string);
                }
            }
            SetTimerEx("RespawnWorkCars", 30000, false, "dd", JobIDToWorkWith,playerid);
        }
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
forward RespawnWorkCars(JobIDToWorkWith,playerid);
public RespawnWorkCars(JobIDToWorkWith,playerid)
{
    if(JobIDToWorkWith == 21)
    {
        for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
        {
            if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 435 || model == 450 || model == 584 || model == 591)
                {
                   continue;
                }
                else
                {
                    new bool:found = false;
                    foreach(new i : Player)
                    {
                        if(IsPlayerInVehicle(i, vehicleid))
                        {
                            found = true;
                            break;
                        }
                    }
                    if(found == false)
                    {
                     	DestroyObject(VehicleDB[vehicleid][VehicleDezesObjectID]);
                        VehicleDB[vehicleid][VehicleDezesObjectID] = -1;
                        VehicleDB[vehicleid][PakrautaMasina] = -1;
                        if(IsTrailerAttachedToVehicle(vehicleid))
                        {
                            SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
                        }
                        VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                        SetVehicleToRespawn(vehicleid);
                    }
                }
            }
        }
        for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
        {
            if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 435 || model == 450 || model == 584 || model == 591)
                {
                    new bool:found = false;
                    for(new i = 0;i<=GetVehiclePoolSize();i++)
                    {
                        DestroyObject(VehicleDB[vehicleid][VehicleDezesObjectID]);
                        VehicleDB[vehicleid][VehicleDezesObjectID] = -1;
                        if(GetVehicleTrailer(i) == vehicleid)
                        {
                            found = true;
                        }
                    }
                    if(found == false)
                    {
                        SetVehicleToRespawn(vehicleid);
                    }
                }
            }
        }

    }
    else
    {
        for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
        {
            if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
            {
                new bool:found = false;
                foreach(new i : Player)
                {
                    if(IsPlayerInVehicle(i, vehicleid))
                    {
                        found = true;
                        break;
                    }
                }
                if(found == false)
                {
                    if(VehicleDB[vehicleid][SuSvitureliais] == true)
                    {
                        VehicleDB[vehicleid][SuSvitureliais] = false;
                        DestroyObject(VehicleDB[vehicleid][SvitureliuObjektas]);
                        VehicleDB[vehicleid][SvitureliuObjektas]-=1;
                    }
                    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                    SetVehicleToRespawn(vehicleid);
                }
            }
        }
    }
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        SendClientMessage(playerid, ZALIA, "Sëkmingai atstatëte visas nenaudojamas darbines maðinas.");
    }

    foreach(new i : Player)
    {
        if(PlayerDB[i][Job] == JobIDToWorkWith)
        {
            SendClientMessage(i, 0x0099CCFF, "[racija] Direktorius atsatë visas nenaudojamas darbines transporto priemones.");
        }
    }
    return 1;
}
CMD:apklausti(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][TalkingWithPhone] == 1)
        {
            ErrorMsg(playerid,"• Jûs jau kalbate telefonu!");
            SendClientMessage(playerid, ZYDRA, "• Kai baigsite,ragelá padësite su ( /bai ).");
        }
        else
        {
            new id;
            if(sscanf(params, "u", id)) return ErrorMsg(playerid,"• Naudojimas: /apklausti [Þaidëjo Vardas_Pavarde/ID].");
            else
            {
                if(IsPlayerConnected(id))
                {
                    if(PlayerDB[id][TalkingWithPhone] == 1)
                    {
                        ErrorMsg(playerid,"• Þaidëjas jau kalba telefonu.");
                    }
                    else
                    {
                        if(PlayerDB[id][NeedToAnswer] > -1)
                        {
                            ErrorMsg(playerid,"• Linija uþimta.");
                        }
                        else
                        {
                            PlayerDB[playerid][Apklausineja] = true;
                            PlayerDB[playerid][PhoneCallTaxTimer] = SetTimerEx("PhoneCallTax", 60000, true, "d", playerid);
                            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
                            SetPlayerAttachedObject(playerid, 10, 330, 5, -0.405256, -0.000577, 0.107980, 38.940883, 339.253723, 264.400329);
                            new string[144];
                            format(string, 144, "• Skambinate %s...", Vardas(id));
                            SendClientMessage(playerid, ZALIA, string);
                            SendClientMessage(playerid, ZYDRA, "• Kai baigsite,ragelá padësite su ( /bai ).");
                            PlayerDB[id][NeedToAnswer] = playerid;
                            PlayerDB[playerid][IsPlayerCalling] = 1;
                            PlayerDB[playerid][TalkingWithPhone] = 1;
                            format(string,144,"• Jums skambina %s. Galite atsiliepti (/ans) arba atmesti (/den).",Vardas(playerid));
                            SendClientMessage(id, ZYDRA, string);
                            GameTextForPlayer(id, "~g~JUMS SKAMBINA", 4000, 4);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams ir jø pavaduotojams.");
    }
    return 1;
}
CMD:dismesti(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
	{
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToKickFromJob] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës atleisti darbuotojø ið darbo.");
                return 1;
            }
        }

		new id,reason[90];
		if(sscanf(params, "us[90]", id,reason))
		{
			UsageMessage(playerid,"• Iðmesti prisijungusá þaidëjà ið darbo: /dismesti [V_P/ID] [Prieþastis].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }
				if(PlayerDB[id][Job] == JobIDToWorkWith)
				{
					new querys[300];
					new years,month,day;
					getdate(years, month, day);
					mysql_format(connectionHandle, querys, 300, "INSERT INTO `palikodarba` (`id`, `DarboID`, `PlayerName`, `IsidarbinimoData`, `PalikimoData`, `Reason`) VALUES (NULL, '%i', '%e', '%s', '%d-%d-%.0d', 'Iðmestas direktoriaus');", PlayerDB[id][Job],Vardas(id),PlayerDB[id][DarboPradziosData],years,month,day);
					mysql_function_query(connectionHandle,querys,false,"SendQuery","");
                    mysql_format(connectionHandle, querys, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Iðmestas ið darbo dël: %e(%d-%d-%.0d)(%e)');", Vardas(id),reason,years,month,day,Vardas(playerid));
                    mysql_function_query(connectionHandle,querys,false,"SendQuery","");
					PlayerDB[id][Job] = 0;
					PlayerDB[id][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
					PlayerDB[id][UniformosID] = 0;
                    PlayerDB[id][JobWarnings] = 0;
					SetPlayerSkinEx(id, PlayerDB[id][Drabuziai]);
					GameTextForPlayer(id, "~r~ISMESTAS IS DARBO", 3000, 3);
					ErrorMsg(id,"Jûs buvote iðmestas ið darbo.");
					new string[144];
					format(string, 144, "[racija] %s buvo iðmestas ið darbo.",Vardas(id));
					foreach(new i : Player)
					{
						if(PlayerDB[i][Job] == JobIDToWorkWith)
						{
							SendClientMessage(i, 0x0099CCFF, string);
						}
					}
					SavePlayerData(id);
					SendClientMessage(playerid, ZALIA, "Þaidëjas sëkmingai buvo iðmestas ið darbo.");
				}
				else
				{
					ErrorMsg(playerid,"Ðis þaidëjas nedirba jûsø direktoriaujamoje firmoje");
				}
			}
			else{
				ErrorMsg(playerid,"Tokio þaidëjo nëra");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dismestioff(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
	{
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToKickFromJob] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës atleisti darbuotojø ið darbo.");
                return 1;
            }
        }

		new name[24];
		if(sscanf(params, "s[24]", name))
		{
			UsageMessage(playerid,"• Iðmesti ið darbo neprisijungusá darbuotojà: /dismestioff [Pilnas Vardas_Pavarde].");
		}
		else
		{
            new JobIDToWorkWith;
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                JobIDToWorkWith = PlayerDB[playerid][Direktorius];
            }
            else
            {
                JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
            }
			new query[300];
			mysql_format(connectionHandle, query, 300, "UPDATE `players` SET `AprangosTipas` = '%i',`Job` = '0',`UniformosID` = '0',`Skin` = `Drabuziai`,`JobWarnings` = '0' WHERE `Name` = '%e' AND `Job` = '%i' LIMIT 1;", PLAYER_CLOTHES_DRABUZIAI,name,JobIDToWorkWith);
			mysql_function_query(connectionHandle,query,false,"SendQuery","");
			SendClientMessage(playerid, ZALIA, "• Þaidëjas iðmestas ið darbo sëkmingai,jeigu teisingai nurodëte þaidëjo Vardà ir Pavardæ ir jei jis buvo jûsø darbuotojas.");
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dismestivisus(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0)
	{
		ShowPlayerDialog(playerid, 44, DIALOG_STYLE_MSGBOX, "{AFAFAF}Iðmesti visus darbuotojus ið darbo", "Ar tikrai norite iðmesti visus savo darbuotojus ið darbo áskaitant ir save,jei dirbate?\n\n{FF0000}Jai pasirinksite iðmesti visus darbuotojus,ðio veiksmo atðaukti nebegalësite.", "Taip","Ne");
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dpzu(playerid,params[])
{
    if(PlayerDB[playerid][GasStationTimerRunsOrl] == true)
    {
        ErrorMsg(playerid,"• Ðiuo metu negalite naudoti ðios komandos.");
        return 1;
    }
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        if(PlayerDB[playerid][PlayerSpectatesOther] == false)
        {
            if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
            {
                ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
                return 1;
            }
            if(IsPlayerInWarZone(playerid) == 1)
            {
                if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1))
                {
                    if(GenoveseGangZoneU == true)
                    {
                        ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                else if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1))
                {
                    if(LuccheseGangZoneU == true)
                    {
                        ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                        return 1;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate Karo Zonoje, todël ðios komandos naudoti negalite.");
                    return 1;
                }
            }
            new id;
            if(sscanf(params, "u", id))
            {
                UsageMessage(playerid,"• Priþiûrëti darbuotojà: /dpzu [V_P/ID].");
            }
            else
            {
                if(IsPlayerConnected(id) && PlayerDB[id][Loaded] == 1)
                {
                    if(PlayerDB[id][PrivateMode] == true)
                    {
                        ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                        return 1;
                    }
                    if(id == playerid)
                    {
                        ErrorMsg(playerid,"• Savæs stebëti negalima.");
                    }
                    else
                    {
                        if(PlayerDB[id][Job] == JobIDToWorkWith)
                        {
                            PlayerDB[playerid][BeforeSpectatingPlayerSkin] = GetPlayerSkin(playerid);
                            GetPlayerPos(playerid, PlayerDB[playerid][BeforeSpectatingX], PlayerDB[playerid][BeforeSpectatingY], PlayerDB[playerid][BeforeSpectatingZ]);
                            PlayerDB[playerid][BeforeSpectatingPlayerInterior] = GetPlayerInterior(playerid);
                            PlayerDB[playerid][BeforeSpectatingPlayerWorld] = GetPlayerVirtualWorld(playerid);
                            SetPlayerInterior(playerid, GetPlayerInterior(id));
                            SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
                            new string[144];
                            format(string, 144, "{E3BA24}*** Stebite %s!", Vardas(id));
                            SendClientMessage(playerid, -1, string);
                            SendClientMessage(playerid, ZALIA, "Tau gali praversti komanda /dl stebint maðinà");
                            TogglePlayerSpectating(playerid, 1);
                            PlayerDB[playerid][PlayerSpectatesOther] = true;
                            PlayerDB[playerid][PlayerSpectatingTarget] = id;
                            PlayerDB[playerid][PlayerSpectatingAtPed] = true;
                            PlayerSpectatePlayer(playerid, id);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Þaidëjas nedirba jûsø firmoje.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra arba ðis þaidëjas nëra pilnai prisijungæs.");
                }
            }
        }
        else
        {
            PlayerDB[playerid][PlayerSpectatesOther] = false;
            SetPlayerVirtualWorld(playerid, PlayerDB[playerid][BeforeSpectatingPlayerWorld]);
            SetPlayerInterior(playerid, PlayerDB[playerid][BeforeSpectatingPlayerInterior]);
            SetSpawnInfoEx(playerid, NO_TEAM, PlayerDB[playerid][BeforeSpectatingPlayerSkin], PlayerDB[playerid][BeforeSpectatingX], PlayerDB[playerid][BeforeSpectatingY], PlayerDB[playerid][BeforeSpectatingZ], 0, 0, 0, 0, 0, 0, 0);
            TogglePlayerSpectating(playerid, 0);
            for(new i = 0;i<=12;i++)
            {
                new tmpAmmo = 0;
                tmpAmmo = PlayerWeaponAmmo[playerid][i];
                PlayerWeaponAmmo[playerid][i] = 0;
                GivePlayerWeaponEx(playerid,PlayerWeapons[playerid][i],tmpAmmo);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
CMD:d(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[128];
        format(string, 128, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(PlayerDB[playerid][Direktorius] > 0)
    {
        new input[128];
        if(sscanf(params, "s[128]", input))
        {
            UsageMessage(playerid,"Raðyti vieðai,kaip organizacijos atstovas: /d [Tekstas].");
        }
        else
        {
            new Time = gettime();
            if(GetPVarInt(playerid, "LastTimeWroteD") > Time - 7)
            {
                ErrorMsg(playerid,"• Ðià komandà naudoti galite tik kas 7 sek.");
                return 1;
            }
            else
            {
                SetPVarInt(playerid, "LastTimeWroteD", Time);
            }
            new string[128];
            new tmpspart[128];
            format(tmpspart, 128, "{00FFE6}%s(%i) {66CCFF}praneða", Vardas(playerid),playerid);
            switch(PlayerDB[playerid][Direktorius])
            {
                case 1:
                {
                    strcat(string, "{00FFE6}Policijos {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 2:
                {
                    strcat(string, "{00FFE6}Ligoninës {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 4:
                {
                    strcat(string, "{00FFE6}Taksi firmos {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 5:
                {
                    strcat(string, "{00FFE6}Mechanikø {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 7:
                {
                    strcat(string, "{00FFE6}Lucchese mafijos {66CCFF}vadas ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 8:
                {
                    strcat(string, "{00FFE6}Genovese mafijos {66CCFF}vadas ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 9:
                {
                    strcat(string, "{00FFE6}Spec. bûrio „Aras“ {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 10:
                {
                    strcat(string, "{00FFE6}Radistø {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 11:
                {
                    strcat(string, "{00FFE6}SPD {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 21:
                {
                    strcat(string, "{00FFE6}Fûristø {66CCFF}direktorius ", 128);
                    strcat(string, tmpspart,128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
            }
            SendClientMessageToAll(0x66CCFFAA, string);
            SendClientMessageToAll(0x66CCFFAA, input);
            new QueryString[261];
            mysql_format(connectionHandle, QueryString, 261, "INSERT INTO `skelbimai-per-d`(`Nick`, `SendingTime`, `DarboID`, `Tekstas`) VALUES ('%e','%i','%i','%s');", Vardas(playerid),Time,PlayerDB[playerid][Direktorius],input);
            mysql_function_query( connectionHandle, QueryString, false, "", "");
        }
    }
    else if(PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWrite] == 0)
        {
            ErrorMsg(playerid,"• Jûs, kaip pavaduotojas, neturite teisës raðyti vieðai kaip organizacijos atstovas.");
            return 1;
        }
        new input[128];
        if(sscanf(params, "s[128]", input))
        {
            UsageMessage(playerid,"Raðyti vieðai, kaip organizacijos atstovas: /d [Tekstas].");
        }
        else
        {
            new string[128];
            new tmpspart[128];
            format(tmpspart, 128, "{00FFE6}%s(%i) {66CCFF}praneða", Vardas(playerid),playerid);
            switch(PlayerDB[playerid][Pavaduotojas])
            {
                case 1:
                {
                    strcat(string, "{00FFE6}Policijos {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 2:
                {
                    strcat(string, "{00FFE6}Ligoninës {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 4:
                {
                    strcat(string, "{00FFE6}Taksi firmos {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 5:
                {
                    strcat(string, "{00FFE6}Mechanikø {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 7:
                {
                    strcat(string, "{00FFE6}Lucchese mafijos {66CCFF}padejëjas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 8:
                {
                    strcat(string, "{00FFE6}Genovese mafijos {66CCFF}padejëjas ", 128);
                    strcat(string,tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 9:
                {
                    strcat(string, "{00FFE6}Spec. bûrio „Aras“ {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 10:
                {
                    strcat(string, "{00FFE6}Radistø {66CCFF}pavavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 11:
                {
                    strcat(string, "{00FFE6}SPD {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
                case 21:
                {
                    strcat(string, "{00FFE6}Fûristø {66CCFF}pavaduotojas ", 128);
                    strcat(string, tmpspart, 128);
                    strcat(string, ": ", 128);
                    //strcat(string, input, 128);
                }
            }
            SendClientMessageToAll(0x66CCFFAA, string);
            SendClientMessageToAll(0x66CCFFAA, input);
            new QueryString[261];
            mysql_format(connectionHandle, QueryString, 261, "INSERT INTO `skelbimai-per-d`(`Nick`, `SendingTime`, `DarboID`, `Tekstas`) VALUES ('%e','%i','%i','%s');", Vardas(playerid),gettime(),PlayerDB[playerid][Pavaduotojas],input);
            mysql_function_query( connectionHandle, QueryString, false, "", "");
        }
    }
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:ispejimai(playerid,params[])
{
	new info[300];
	format(info, 300, "Turi darbo áspëjimø: %i \nTuri ADMIN áspëjimø: %i \nTuri VIP áspëjimø: %i \nTuri teisësaugos áspëjimø: %i", PlayerDB[playerid][JobWarnings],PlayerDB[playerid][AdminWarnings],PlayerDB[playerid][VIPWarnings],PlayerDB[playerid][LawWarnings]);
	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Turimi áspëjimai", info, "Gerai", "");
	return 1;
}
CMD:dispeti(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
	{
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new id,priezastis[76];
		if(sscanf(params, "us[76]", id,priezastis))
		{
			UsageMessage(playerid,"Ispëti darbuotojà /dispeti [V_P/ID] [Prieþastis]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				if(JobIDToWorkWith == PlayerDB[id][Job])
				{
                    new years,month,day;
                    getdate(years, month, day);
					PlayerDB[id][JobWarnings]+=1;
					new string[144];
                    new querys[300];
					format(string, 144, "[DARBO PRANEÐIMAS] Jûs buvote áspëtas vienu darbo áspëjimu uþ ( %s ).", priezastis);
					SendClientMessage(id, GELTONA, string);
					format(string, 144, "Jûsø darbuotojas %s buvo áspëtas vienu darbo áspëjimu uþ ( %s ).", Vardas(id),priezastis);
                    mysql_format(connectionHandle, querys, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Áspëtas vienu darbo áspëjimu dël: %e(%d-%d-%.0d)(%e)');", Vardas(id),priezastis,years,month,day,Vardas(playerid));
                    mysql_function_query(connectionHandle,querys,false,"SendQuery","");
					SendClientMessage(playerid, GELTONA, string);
					if(PlayerDB[id][JobWarnings] == 4)
					{
						PlayerDB[id][JobWarnings] = 0;
						mysql_format(connectionHandle, querys, 300, "INSERT INTO `palikodarba` (`id`, `DarboID`, `PlayerName`, `IsidarbinimoData`, `PalikimoData`, `Reason`) VALUES (NULL, '%i', '%e', '%s', '%d-%d-%.0d', 'Surinko 4 darbo áspëjimus');", PlayerDB[id][Job],Vardas(id),PlayerDB[id][DarboPradziosData],years,month,day);
						mysql_function_query(connectionHandle,querys,false,"SendQuery","");

						PlayerDB[id][Job] = 0;
						PlayerDB[id][AprangosTipas] = PLAYER_CLOTHES_DRABUZIAI;
						SetPlayerSkinEx(id, PlayerDB[id][Drabuziai]);
						SendClientMessage(id, RAUDONA, "• Buvote iðmestas ið darbo,nes surinkote 4 áspëjimus.");
						GameTextForPlayer(id, "~r~ISMESTAS", 3000, 3);
						SendClientMessage(playerid, GELTONA, "Darbuotojas gavo 4'àjá darbo áspëjima ir buvo automatiðkai iðmestas ið darbo.");
                        mysql_format(connectionHandle, querys, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Iðmestas ið darbo dël: Surinkote 4 darbo áspëjimus(%d-%d-%.0d)(SISTEMA)');", Vardas(id),years,month,day);
                        mysql_function_query(connectionHandle,querys,false,"SendQuery","");
					}
				}
				else
				{
					ErrorMsg(playerid,"Ðis þaidëjas nedirba jûms");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dispetioff(playerid,params[])
{
	if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
	{
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
		new name[24];
		if(sscanf(params, "s[24]", name))
		{
			UsageMessage(playerid,"Áspëti neprisijungusá darbuotojà /dispetioff [PILNAS VARDAS_PAVARDË].");
		}
		else
		{
            new JobIDToWorkWith;
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                JobIDToWorkWith = PlayerDB[playerid][Direktorius];
            }
            else
            {
                JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
            }
			new query[300];
			mysql_format(connectionHandle, query, 300, "UPDATE `players` SET `JobWarnings` = `JobWarnings` + 1 WHERE `Name` = '%e' AND `Job` = '%i' AND `JobWarnings` <  4 LIMIT 1;", name,JobIDToWorkWith);
			mysql_function_query(connectionHandle,query,false,"SendQuery","");
			mysql_format(connectionHandle, query, 300, "UPDATE `players` SET `JobWarnings` = '0',`Skin` = `Drabuziai`,`Job` = '0',`AprangosTipas` = '%i',`UniformosID` = '0',`Job` = '0' WHERE `JobWarnings` = '4';", PLAYER_CLOTHES_DRABUZIAI);
			mysql_function_query(connectionHandle,query,false,"SendQuery","");
			SendClientMessage(playerid, ZALIA, "Jai þaidëjas dirba jûsø firmoje,jam bus skirtas +1 áspëjimas.");
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dnuimtiisp(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"Nuimti vienà darbo áspëjimà: /dnuimtiisp [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
                new JobIDToWorkWith;
                if(PlayerDB[playerid][Direktorius] > 0)
                {
                    JobIDToWorkWith = PlayerDB[playerid][Direktorius];
                }
                else
                {
                    JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
                }
				if(PlayerDB[id][Job] == JobIDToWorkWith)
				{
					if(PlayerDB[id][JobWarnings] == 0)
					{
						ErrorMsg(playerid,"Þaidëjas neturi darbo áspëjimø.");
					}
					else
					{
						PlayerDB[id][JobWarnings]-=1;
						SendClientMessage(id, GELTONA, "[DARBO PRANEÐIMAS] Jûsø direktorius nuëmë jums vienà darbo áspëjimà.");
						SendClientMessage(playerid, ZALIA,"Sëkmingai nuëmete vienà darbo áspëjimà.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Ðis þaidëjas nedirba jûms");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dnuimtiispoff(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToWarn] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës áspëti darbuotojus.");
                return 1;
            }
        }
		new name[24];
		if(sscanf(params, "s[24]", name))
		{
			UsageMessage(playerid,"Nuimti vienà darbo áspëjimà neprisijungusiam þaidëjui: /dnuimtiispoff [PILNAS VARDAS_PAVARDË]");
		}
		else
		{
            new JobIDToWorkWith;
            if(PlayerDB[playerid][Direktorius] > 0)
            {
                JobIDToWorkWith = PlayerDB[playerid][Direktorius];
            }
            else
            {
                JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
            }
			new query[300];
			mysql_format(connectionHandle, query, 300, "UPDATE `players` SET `JobWarnings` = `JobWarnings` - 1 WHERE `Name` = '%e' AND `Job` = '%i' AND `JobWarnings` > 0 LIMIT 1;", name,JobIDToWorkWith);
			mysql_function_query(connectionHandle,query,false,"SendQuery","");
			SendClientMessage(playerid, ZALIA, "Jai þaidëjas dirba jûsø firmoje,jam bus nuimtas vienas áspëjimas.");
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dfondas(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new string[144];
		format(string, 144, "*** Darbo fonde yra {E66718}%s €", AddPoints(DarboInformacija[JobIDToWorkWith][DarboFondas]));
		SendClientMessage(playerid, GELTONA, string);
	}
    else if((PlayerDB[playerid][Job] >= 1 && PlayerDB[playerid][Job] < 12) || PlayerDB[playerid][Job] == 21)
    {
        new string[144];
        format(string, 144, "*** Darbo fonde yra {E66718}%s €", AddPoints(DarboInformacija[PlayerDB[playerid][Job]][DarboFondas]));
        SendClientMessage(playerid, GELTONA, string);
    }
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams ir jø darbuotojams.");
	}
	return 1;
}
CMD:disimti(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToAdministrateFund] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti darbo fondo.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new amount;
		if(sscanf(params, "i", amount))
		{
			UsageMessage(playerid,"• Paimti pinigus ið firmos fondo: /disimti [KIEKIS].");
		}
		else
		{
			if(amount <= 0)
			{
				UsageMessage(playerid,"• Paimti pinigus ið firmos fondo: /disimti [KIEKIS].");
			}
			else
			{
				if(amount > DarboInformacija[JobIDToWorkWith][DarboFondas])
				{
					ErrorMsg(playerid,"• Jûsø firmos fonde tiek pinigø nëra");
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket]+=amount;
					DarboInformacija[JobIDToWorkWith][DarboFondas]-=amount;
					new query[300];
					mysql_format(connectionHandle, query, 300, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Ið darbo fondo buvo paimta: %s €');", JobIDToWorkWith,AddPoints(amount));
					mysql_function_query(connectionHandle,query,false,"SendQuery","");
					format(query, 144, "• Paëmëte %s € ið firmos fondo.", AddPoints(amount));
					SendClientMessage(playerid, ZYDRA, query);
				}
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:dideti(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToAdministrateFund] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës administruoti darbo fondo.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new amount;
		if(sscanf(params, "i", amount))
		{
			UsageMessage(playerid,"• Ádëti pinigus á firmos fondà: /dideti [KIEKIS].");
		}
		else
		{
			if(amount <= 0)
			{
				UsageMessage(playerid,"• Ádëti pinigus á firmos fondà: /dideti [KIEKIS].");
			}
			else
			{
				if(amount > PlayerDB[playerid][MoneyInPocket])
				{
					ErrorMsg(playerid,"Tiek pinigø neturite.");
				}
				else
				{
					PlayerDB[playerid][MoneyInPocket]-=amount;
					DarboInformacija[JobIDToWorkWith][DarboFondas]+=amount;
					new query[300];
					mysql_format(connectionHandle, query, 300, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Á darbo fondà buvo ádëta: %s €');", JobIDToWorkWith,AddPoints(amount));
					mysql_function_query(connectionHandle,query,false,"SendQuery","");
					format(query, 144, "• Ádëjote %s € á firmos fondà.", AddPoints(amount));
					SendClientMessage(playerid, ZYDRA, query);
				}
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:rangas(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës skirstyti rangø.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new id,number;
		if(sscanf(params, "ui", id,number))
		{
			UsageMessage(playerid,"• Priskirti darbuotojui rangà: /rangas [vardo dalis] [1-8].");
		}
		else
		{
			if(number > 0 && number < 9)
			{
				if(IsPlayerConnected(id))
				{
					if(PlayerDB[id][Job] == JobIDToWorkWith)
					{
						PlayerDB[id][Rangas] = number;
						SendClientMessage(playerid, ZALIA, "Sëkmingai davëte rangà");
						new string[144];
						switch(number)
						{
							case 1:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango1Pavadinimas]);
							}
							case 2:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango2Pavadinimas]);
                            }
							case 3:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango3Pavadinimas]);
							}
							case 4:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango4Pavadinimas]);
							}
							case 5:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango5Pavadinimas]);
							}
							case 6:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango6Pavadinimas]);
							}
							case 7:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango7Pavadinimas]);
							}
							case 8:
							{
								format(string, 144, "• %s pakeitë tavo rangà á {5BC16B}„%s“", Vardas(playerid),DarboInformacija[JobIDToWorkWith][Rango8Pavadinimas]);
							}
						}
						SendClientMessage(id, -1, string);
					}
					else
					{
						ErrorMsg(playerid,"Ðis þaidëjas nedirba jûms");
					}
				}
				else
				{
					ErrorMsg(playerid,"Tokio þaidëjo nëra");
				}
			}
			else
			{
				UsageMessage(playerid,"• Priskirti darbuotojui rangà: /rangas [vardo dalis] [1-8].");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:rangasoff(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToSetARank] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës skirstyti rangø.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
		new name[24],number;
		if(sscanf(params, "s[24]i", name,number))
		{
			UsageMessage(playerid,"• Paskirti neprisijungusiam darbuotojui rangà: /rangasoff [PILNAS V_P] [1-8]");
		}
		else
		{
			if(number > 0 && number < 9)
			{
				new query[300];
				mysql_format(connectionHandle, query, 300, "UPDATE `players` SET `Rangas` = '%i' WHERE `Name` = '%e' AND `Job` = '%i' LIMIT 1;", number,name,JobIDToWorkWith);
				mysql_function_query(connectionHandle,query,false,"SendQuery","");
				SendClientMessage(playerid, ZALIA, "Jai ðis þaidëjas tikrai dirba jûsø firmoje rangas bus paskirtas sëkmingai.");
			}
			else
			{
				UsageMessage(playerid,"• Paskirti neprisijungusiam darbuotojui rangà: /rangasoff [PILNAS V_P] [1-8]");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik direktoriams.");
	}
	return 1;
}
CMD:ist(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"Iðteisinti þaidëjà nuo visø jam galiojanèiø kaltinimø: /ist [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Savæs neiðteisinsi.");
                    return 1;
                }
				if(!IsJobFromLaw(PlayerDB[id][Job]))
				{
					ErrorMsg(playerid,"Þaidëjas nëra teisësaugininkas,todël iðteisinti negalite.");
				}
				else
				{
                    new Float:Cords[3];
                    GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                    if(IsPlayerInRangeOfPoint(id, 5, Cords[0], Cords[1], Cords[2]))
                    {
                        PlayerDB[id][WantedLevel] = 0;
                        new string[128];
                        format(string, 128, "[racija] %s: iðteisinau %s.", Vardas(playerid),Vardas(id));
                        foreach(new i : Player)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                            {
                                new string2[128];
                                format(string2, 128, "Policininkas %s iðteisino %s", Vardas(playerid),Vardas(id));
                                SendClientMessage(i, RAUDONA, string2);
                            }
                        }
                        SendClientMessageToLaw(0x0099CCFF,string);
                        SendClientMessage(id, ZALIA, "Jûs buvote iðteisintas nuo visø jums gresianèiø kaltinimø.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    }
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:isodinti(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]) || IsJobFromMafia(PlayerDB[playerid][Job]))
	{
		new id,seat;
		if(sscanf(params, "ui", id,seat))
		{
			UsageMessage(playerid,"• Ásodinti þaidëjà á maðinà: /isodinti [dalis vardo] [1-3]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				if(seat <= 0 || seat > 3)
				{
					UsageMessage(playerid,"• Ásodinti þaidëjà á maðinà: /isodinti [dalis vardo] [1-3]");
				}
				else
				{
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						new Float:Cords[3];
						GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
						new vehicleid = GetPlayerVehicleID(playerid);
						if(IsPlayerInRangeOfPoint(id, 3, Cords[0], Cords[1], Cords[2]))
						{
                            if(PlayerDB[id][Surakintas] == false && PlayerDB[id][Suristas] == false)
                            {
                                ErrorMsg(playerid,"• Þaidëjas prieðinasi,pirmiau turite já surakinti/suriðti.");
                                return 1;
                            }
							new seat1,seat2,seat3;
							foreach(new i : Player)
							{
								if(IsPlayerInVehicle(i, vehicleid))
								{
									switch(GetPlayerVehicleSeat(i))
									{
										case 1:
										{
											seat1 = 1;
										}
										case 2:
										{
											seat2 = 1;
										}
										case 3:
										{
											seat3 = 3;
										}
									}

								}
							}
							switch(seat)
							{
								case 1:
								{
									if(seat1 == 1)
									{
										ErrorMsg(playerid,"Ði vieta maðinoje uþimta.");
									}
									else
									{

										PutPlayerInVehicleEx(id, vehicleid, 1);
									}
								}
								case 2:
								{
									if(seat2 == 1)
									{
										ErrorMsg(playerid,"Ði vieta maðinoje uþimta.");
									}
									else
									{
										PutPlayerInVehicleEx(id, vehicleid, 2);
									}
								}
								case 3:
								{
									if(seat3 == 1)
									{
										ErrorMsg(playerid,"Ði vieta maðinoje uþimta.");
									}
									else
									{
										PutPlayerInVehicleEx(id, vehicleid, 3);
									}
								}
							}
						}
						else
						{
							ErrorMsg(playerid,"Þaidëjas yra per toli.");
						}
					}
					else
					{
						ErrorMsg(playerid,"Privalote vairuoti maðinà.");
					}
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik teisësaugininkams ir mafijø nariams.");
	}
	return 1;
}
CMD:islaipinti(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]) || IsJobFromMafia(PlayerDB[playerid][Job]))
    {
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Naudojantis þaidëjø prieþiûros komandomis ðios komandos naudoti negalima.");
            return 1;
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Iðlaipinti þaidëjà ið transporto priemonës: /islaipinti [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 4, Cords[0], Cords[1], Cords[2]))
                {
                    if(PlayerDB[id][AfkState] == true)
                    {
                        ErrorMsg(playerid,"• Þaidëjo iðlaipinti negalite, þaidëjas yra AFK bûsënoje.");
                    }
                    else
                    {
                        if(IsPlayerInAnyVehicle(id))
                        {
                            RemovePlayerFromVehicle(id);
                            new string[80];
                            format(string, 80, "Sëkmingai iðlaipinote %s ið tr. priemonæs.", Vardas(id));
                            SendClientMessage(playerid, 0xfcfd67FF, string);
                            format(string, 80, "Teisësaugininkas %s iðlaipino jus ið tr. priemonës.", Vardas(playerid));
                            SendClientMessage(id, 0xfcfd67FF, string);

                        }
                        else
                        {
                            ErrorMsg(playerid,"• Þaidëjas nëra jokioje tr. priemonëje.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik teisësaugininkams ir mafijø nariams.");
    }
    return 1;
}
CMD:alko(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"Patikrinti þaidëjo girtumo laipsná: /alko [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(GetPlayerDrunkLevel(id) < 400)
					{
						SendClientMessage(playerid, ZALIA, "• Zaidejas blaivus.");
						SendClientMessage(id, ZALIA, "• Policija nustatë, kad jûs esate blaivus.");
					}
					else
					{
						new Float:Laipsnis = GetPlayerDrunkLevel(id) / 1000;
						if(Laipsnis <= 1)
						{
							new string[144];
							format(string, 144, "• Alkotesteris rodo:   %.1f promiliø. Tai lengvas girtumo laipsnis.", Laipsnis);
							SendClientMessage(playerid, MELYNA, string);
							SendClientMessage(id, MELYNA, string);
						}
						else if(Laipsnis > 1 && Laipsnis <= 2.5)
						{
							new string[144];
							format(string, 144, "• Alkotesteris rodo:   %.1f promiliø. Tai vidutinis girtumo laipsnis.", Laipsnis);
							SendClientMessage(playerid, MELYNA, string);
							SendClientMessage(id, MELYNA, string);
						}
						else
						{
							new string[144];
							format(string, 144, "• Alkotesteris rodo:   %.1f promiliø. Tai sunkus girtumo laipsnis.", Laipsnis);
							SendClientMessage(playerid, MELYNA, string);
							SendClientMessage(id, MELYNA, string);
						}
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik teisësaugininkams.");
	}
	return 1;
}
CMD:sudirzu(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Patikrinti ar þaidëjas su dirþu: /sudirzu [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                {
                    if(IsPlayerInAnyVehicle(id))
                    {
                        if(PlayerDB[id][SeatBelt] == 0)
                        {
                            ErrorMsg(playerid,"• Þaidëjas neprisisegæs saugos dirþo! Turite teisæ já suimti!");
                            ErrorMsg(id,"* Policijos pareigûnas pastebëjo, kad jûs esate neprisisegæs saugos dirþo.");
                            if(PlayerDB[playerid][VIP] == 1)
                            {
                                switch(PlayerDB[playerid][Job])
                                {
                                    case 1,11:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                    case 6:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                    case 9:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +2XP prie darbo patirties.");
                                PlusPlayerScore(playerid,2);
                            }
                            else
                            {
                                switch(PlayerDB[playerid][Job])
                                {
                                    case 1,11:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                    case 6:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                    case 9:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +1XP prie darbo patirties.");
                                PlusPlayerScore(playerid,1);
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Þaidëjas prisisegæs dirþà.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"Þaidëjas nëra maðinoje.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik policininkams.");
    }
    return 1;
}
CMD:susalmu(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Patikrinti ar þaidëjas su ðalmu: /susalmu [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                {
                    if(IsPlayerInAnyVehicle(id) && IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))) )
                    {
                        if(PlayerDB[id][SuSalmu] == false)
                        {
                            ErrorMsg(playerid,"* Þaidëjas neuþsidëjæs ðalmo! Turite teisæ já suimti!");
                            ErrorMsg(id,"* Policijos pareigûnas pastebëjo, kad jûs esate neuþsidëjæs ðalmo.");
                            if(PlayerDB[playerid][VIP] == 1)
                            {
                                switch(PlayerDB[playerid][Job])
                                {
                                    case 1,11:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                    case 6:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                    case 9:
                                    {
                                        PlayerDB[playerid][Job1XP] +=2;
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +2XP prie darbo patirties.");
                                PlusPlayerScore(playerid,2);
                            }
                            else
                            {
                                switch(PlayerDB[playerid][Job])
                                {
                                    case 1,11:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                    case 6:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                    case 9:
                                    {
                                        PlayerDB[playerid][Job1XP] +=1;
                                    }
                                }
                                SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +1XP prie darbo patirties.");
                                PlusPlayerScore(playerid,1);
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Þaidëjas turi uþsidëjæs ðalmà ant galvos.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"Þaidëjas neprivalo bûti su ðalmu.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik policininkams.");
    }
    return 1;
}

CMD:reg(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Patikrinti maðinos registracijà: /reg [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                {
                    if(IsPlayerInAnyVehicle(id) && GetPlayerState(id) == PLAYER_STATE_DRIVER)
                    {
                        new vehicleid = GetPlayerVehicleID(id);
                        if(VehicleDB[vehicleid][VehicleWithOwner] == true && VehicleDB[vehicleid][VehicleOwnerID] == id)
                        {
                            SendClientMessage(id, GELTONA, "• Policijos pareigûnas patikrino jûsø maðinos registracijà.");
                            if(VehicleDB[vehicleid][VehicleNumReg] == 1)
                            {
                                SendClientMessage(playerid, ZALIA, "• Maðina yra oficialiai áregistruota.");
                            }
                            else
                            {
                                SendClientMessage(id, RAUDONA, "• Jûsø transporto priemonë nebuvo registruota,todël jûs esate suimamas!");
                                SendClientMessage(playerid, RAUDONA, "• Transporto priemonë neregistruota! Turite teisæ já suimti!");
                                if(PlayerDB[playerid][VIP] == 1)
                                {
                                    switch(PlayerDB[playerid][Job])
                                    {
                                        case 1,11:
                                        {
                                            PlayerDB[playerid][Job1XP] +=10;
                                        }
                                        case 6:
                                        {
                                            PlayerDB[playerid][Job1XP] +=10;
                                        }
                                        case 9:
                                        {
                                            PlayerDB[playerid][Job1XP] +=10;
                                        }
                                    }
                                    SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +10XP prie darbo patirties.");
                                    PlusPlayerScore(playerid,10);
                                }
                                else
                                {
                                    switch(PlayerDB[playerid][Job])
                                    {
                                        case 1,11:
                                        {
                                            PlayerDB[playerid][Job1XP] +=5;
                                        }
                                        case 6:
                                        {
                                            PlayerDB[playerid][Job1XP] +=5;
                                        }
                                        case 9:
                                        {
                                            PlayerDB[playerid][Job1XP] +=5;
                                        }
                                    }
                                    SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +5XP prie darbo patirties.");
                                    PlusPlayerScore(playerid,5);
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Maðina nepriklauso ðiam þaidëjui.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas turi vairuoti maðinà.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik policijai.");
    }
    return 1;
}
CMD:paz(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Patikrinti ar þaidëjas turi teises: /paz [V_P/ID]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][AutoLicense] == 0)
					{
						ErrorMsg(playerid,"• Þaidëjo paþymëjimas negalioja! Turite teisæ já suimti!");
						ErrorMsg(id,"• Policijos pareigûnas pastebëjo,kad jûsø vairuotojo paþymëjimas negalioja.");
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(playerid,10);
                        }
                        else
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(playerid,5);
                        }
					}
					else
					{
						SendClientMessage(id, ZALIA, "• Policijos pareigûnas patikrino jûsø vairavimo paþymëjimà.");
						SendClientMessage(playerid, -1, "{41A317}• Þaidëjo paþymëjimas galioja.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:aglic(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Atimti ið þaidëjo ginklø licenzijà: /aglic [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                {
                    if(PlayerDB[id][WeaponsLicense] == 1)
                    {
                        PlayerDB[id][WeaponsLicense] = 0;
                        new string[144];
                        format(string, 144, "• Pareigûnas %s atëmë jûsø ginklø licenzijà.", Vardas(playerid));
                        SendClientMessage(id, RAUDONA, string);
                        format(string,144, "• Atëmete %s ginklø licenzijà.", Vardas(id));
                        SendClientMessage(playerid, RAUDONA, string);
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ ginklø licenzijos atëmimà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(playerid,10);
                        }
                        else
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ ginklø licenzijos atëmimà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(playerid,5);
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"Þaidëjas neturëjo ginklø licenzijos.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik policininkams.");
    }
    return 1;
}
CMD:glic(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Patikrinti ar þaidëjas turi ginklø licenzijà: /glic [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                {
                    if(PlayerDB[id][WeaponsLicense] == 0)
                    {
                        ErrorMsg(playerid,"• Þaidëjo ginklø licenzija negalioja! Turite teisæ já suimti!");
                        ErrorMsg(id,"• Policijos pareigûnas pastebëjo,kad jûsø ginklø licenzija negalioja.");
                    }
                    else
                    {
                        SendClientMessage(id, ZALIA, "• Policijos pareigûnas patikrino jûsø ginklø licenzijà.");
                        SendClientMessage(playerid, 0x41A317FF, "• Þaidëjo licenzija galioja.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik policininkams.");
    }
    return 1;
}
CMD:mpaz(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Patikrinti ar þaidëjas turi teises(moto): /mpaz [V_P/ID]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][MotoLicense] == 0)
					{
						ErrorMsg(playerid,"• Þaidëjo paþymëjimas negalioja! Turite teisæ já suimti!");
						ErrorMsg(id,"• Policijos pareigûnas pastebëjo,kad jûsø vairuotojo paþymëjimas negalioja.");
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(playerid,10);
                        }
                        else
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(playerid,5);
                        }
					}
					else
					{
						SendClientMessage(id, ZALIA, "• Policijos pareigûnas patikrino jûsø vairavimo paþymëjimà.");
						SendClientMessage(playerid, -1, "{41A317}• Þaidëjo paþymëjimas galioja.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:ppaz(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Patikrinti ar þaidëjas turi teises(piloto): /ppaz [V_P/ID]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][PilotoLicense] == 0)
					{
						ErrorMsg(playerid,"• Þaidëjo paþymëjimas negalioja! Turite teisæ já suimti!");
						ErrorMsg(id,"• Policijos pareigûnas pastebëjo,kad jûsø piloto paþymëjimas negalioja.");
                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(playerid,10);
                        }
                        else
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ þaidëjo demaskavimà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(playerid,5);
                        }
					}
					else
					{
						SendClientMessage(id, ZALIA, "• Policijos pareigûnas patikrino jûsø piloto paþymëjimà.");
						SendClientMessage(playerid, -1, "{41A317}• Þaidëjo paþymëjimas galioja.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}

CMD:tei(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Atimti ið þaidëjo vairavimo teises: /tei [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][AutoLicense] == 1)
					{
						PlayerDB[id][AutoLicense] = 0;
						new string[144];
						format(string, 144, "• Pareigûnas %s atëmë jûsø automobilio vairavimo teises.", Vardas(playerid));
						SendClientMessage(id, RAUDONA, string);
						format(string,144, "• Atëmete %s automobilio vairavimo teises.", Vardas(id));
						SendClientMessage(playerid, RAUDONA, string);
                        PlayerDB[id][LostDLicenses]++;
					}
					else
					{
						ErrorMsg(playerid,"Þaidëjas neturëjo automobilio vairavimo teisiø.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:mtei(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Atimti ið þaidëjo motociklo vairavimo teises: /mtei [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][MotoLicense] == 1)
					{
						PlayerDB[id][MotoLicense] = 0;
						new string[144];
						format(string, 144, "• Pareigûnas %s atëmë jûsø motociklo vairavimo teises.", Vardas(playerid));
						SendClientMessage(id, RAUDONA, string);
						format(string,144, "• Atëmete %s motociklo vairavimo teises.", Vardas(id));
						SendClientMessage(playerid, RAUDONA, string);
                        PlayerDB[id][LostDLicenses]++;
					}
					else
					{
						ErrorMsg(playerid,"Þaidëjas neturëjo motociklo vairavimo teisiø.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:ptei(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Atimti ið þaidëjo pilotavimo teises: /ptei [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					if(PlayerDB[id][PilotoLicense] == 1)
					{
						PlayerDB[id][PilotoLicense] = 0;
						new string[144];
						format(string, 144, "• Pareigûnas %s atëmë jûsø pilotavimo vairavimo teises.", Vardas(playerid));
						SendClientMessage(id, RAUDONA, string);
						format(string,144, "• Atëmete %s pilotavimo vairavimo teises.", Vardas(id));
						SendClientMessage(playerid, RAUDONA, string);
                        PlayerDB[id][LostDLicenses]++;
					}
					else
					{
						ErrorMsg(playerid,"Þaidëjas neturëjo pilotavimo teisiø.");
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:kon(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Atimti ið þaidëjo kontrobandà: /kon [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Ðios komandos ant savæs naudoti negalite.");
                    return 1;
                }
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
                    if(IsPlayerInWarZone(id) == 1 || IsPlayerInSafeZone(id) == 1)
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra karo arba saugioje zonoje.");
                        return 1;
                    }
					if(PlayerDB[id][Kanapes] == 0 && PlayerDB[id][Kokainas] == 0 && PlayerDB[id][Heroinas] == 0)
					{
						ErrorMsg(playerid,"• Pas þaidëjà nëra jokiø kontrobandiniø medþiagø.");
					}
					else
					{
						new string[128];
						format(string, 128, "[TR] %s: Atëmiau %s narkotikus: %ig. kanapiø, %img. kokaino, %img. heroino",Vardas(playerid),Vardas(id),PlayerDB[id][Kanapes],PlayerDB[id][Kokainas],PlayerDB[id][Heroinas]);
						KonfiskuotosKanapes+=PlayerDB[id][Kanapes];
                        KonfiskuotasKokainas+= PlayerDB[id][Kokainas];
                        KonfiskuotasHeroinas+=PlayerDB[id][Heroinas];
                        PlayerDB[id][Kanapes] = 0;
						PlayerDB[id][Kokainas] = 0;
						PlayerDB[id][Heroinas] = 0;
						foreach(new i : Player)
						{
							if(IsPlayerConnected(i) && IsJobFromLaw(PlayerDB[i][Job]))
							{
								SendClientMessage(i, 0xE0DD14FF,string);
							}
						}
						SendClientMessage(playerid, ZALIA, "Atëmete þaidëjo narkotines medþiagas.");
                        SendClientMessage(id, RAUDONA, "• Ið jûsø buvo konfiskuotos narkotinës medþiagos.");

                        if(PlayerDB[playerid][VIP] == 1)
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=10;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ narkotiniø medþiagø konfiskavimà gavote +10XP prie darbo patirties.");
                            PlusPlayerScore(playerid,10);
                        }
                        else
                        {
                            switch(PlayerDB[playerid][Job])
                            {
                                case 1,11:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 6:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                                case 9:
                                {
                                    PlayerDB[playerid][Job1XP] +=5;
                                }
                            }
                            SendClientMessage(playerid, ZALIA, "Uþ narkotiniø medþiagø konfiskavimà gavote +5XP prie darbo patirties.");
                            PlusPlayerScore(playerid,5);
                        }
					}
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik teisësaugos pareigûnams.");
	}
	return 1;
}
CMD:atimtiginklus(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Atimti þaidëjo ginklus: /atimtiginklus [V_P/ID].");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
				new Float:Cords[3];
				GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
				{
					ResetPlayerWeaponsEx(id);
					new string[144];
					format(string, 144, "• Atëmëte ginklus ið: %s", Vardas(id));
					SendClientMessage(playerid, ZALIA, string);
					format(string, 144, "Policijos pareigûnas %s atëmë jûsø visus ginklus.", Vardas(playerid));
					SendClientMessage(id, RAUDONA, string);
				}
				else
				{
					ErrorMsg(playerid,"Þaidëjas yra per toli.");
				}
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:spygliai(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia turite iðlipti ið maðinos.");
            return 1;
        }
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
        	ErrorMsg(playerid,"• Stebëjimo reþime negalite naudoti ðios komandos.");
            return 1;
        }
        switch(SpygliaiInfo[playerid][SpygliaiPadeti] == true)
        {
            case true:
            {
                GameTextForPlayer(playerid, "~r~SPYGLIAI NUIMTI", 3000, 3);
                DestroyDynamicObject(SpygliaiInfo[playerid][SpygliuObjektas]);
                DestroyDynamic3DTextLabel(SpygliaiInfo[playerid][SpygliuLabel]);
                SpygliaiInfo[playerid][SpygliaiPadeti] = false;
            }
            case false:
            {
                new Float:Cords[4];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                GetPlayerFacingAngle(playerid, Cords[3]);
                Cords[3]+=90;
                if(Cords[3] >= 360)
                {
                    Cords[3]-=360;
                }
                if(Cords[3] <= -360)
                {
                    Cords[3] +=360;
                }
                CreateSpikes(playerid,Cords[0], Cords[1], Cords[2] - 0.8,Cords[3],GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
                GameTextForPlayer(playerid, "~g~SPYGLIAI PADETI", 3000, 3);
                SpygliaiInfo[playerid][SpygliaiPadeti] = true;
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik policininkams.");
    }
    return 1;
}
CMD:kliutis(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia turite iðlipti ið maðinos.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        new PlayerVW = GetPlayerVirtualWorld(playerid);
    	if(PlayerInterior == 1 && PlayerVW == 1)
    	{
   			ErrorMsg(playerid,"• Dëti kliuèiø narkotikø sandelyje negalite.");
     		return 1;
		}
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
        	ErrorMsg(playerid,"• Stebëjimo reþime negalite naudoti ðios komandos.");
            return 1;
        }
		switch(PlayerDB[playerid][PlacedKliutis1])
		{
			case true:
			{
				GameTextForPlayer(playerid, "~r~KLIUTIS SUNAIKINTA", 3000, 3);
				DestroyDynamicObject(PlayerDB[playerid][Kliutis1Object]);
				SendClientMessage(playerid, RAUDONA, "• Kliutis sunaikinta.");
                DestroyDynamic3DTextLabel(PlayerDB[playerid][Kliutis1ObjectLabel]);
				PlayerDB[playerid][PlacedKliutis1] = false;
			}
			case false:
			{
				new string[50];
				format(string, 50, "• %s: Apvaþiuokite kliûtá", Vardas(playerid));
				new Float:Cords[4];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				GetPlayerFacingAngle(playerid, Cords[3]);
				PlayerDB[playerid][Kliutis1Object] = CreateDynamicObject(978, Cords[0], Cords[1], Cords[2], 0, 0, Cords[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				PlayerDB[playerid][Kliutis1ObjectLabel] = CreateDynamic3DTextLabel(string, PILKA, Cords[0], Cords[1], Cords[2], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

                GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);
				SendClientMessage(playerid, ZALIA, "• Kliutis sukurta.");
				PlayerDB[playerid][PlacedKliutis1] = true;
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:kliutis2(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia turite iðlipti ið maðinos.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        new PlayerVW = GetPlayerVirtualWorld(playerid);
    	if(PlayerInterior == 1 && PlayerVW == 1)
    	{
   			ErrorMsg(playerid,"• Dëti kliuèiø narkotikø sandelyje negalite.");
     		return 1;
		}
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
        	ErrorMsg(playerid,"• Stebëjimo reþime negalite naudoti ðios komandos.");
            return 1;
        }
		switch(PlayerDB[playerid][PlacedKliutis2])
		{
			case true:
			{
				GameTextForPlayer(playerid, "~r~KLIUTIS SUNAIKINTA", 3000, 3);
				DestroyDynamicObject(PlayerDB[playerid][Kliutis2Object]);
				SendClientMessage(playerid, RAUDONA, "• Kliutis sunaikinta.");
				DestroyDynamic3DTextLabel(PlayerDB[playerid][Kliutis2ObjectLabel]);
				PlayerDB[playerid][PlacedKliutis2] = false;
			}
			case false:
			{
				new string[50];
				format(string, 50, "• %s: Apvaþiuokite kliûtá", Vardas(playerid));
				new Float:Cords[4];
				GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
				GetPlayerFacingAngle(playerid, Cords[3]);
				PlayerDB[playerid][Kliutis2Object] = CreateDynamicObject(978, Cords[0], Cords[1], Cords[2], 0, 0, Cords[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                PlayerDB[playerid][Kliutis2ObjectLabel] = CreateDynamic3DTextLabel(string, PILKA, Cords[0], Cords[1], Cords[2], 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

                GameTextForPlayer(playerid, "~g~KLIUTIS SUKURTA", 3000, 3);
				SendClientMessage(playerid, ZALIA, "• Kliutis sukurta.");
				PlayerDB[playerid][PlacedKliutis2] = true;
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:sekti(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]) || PlayerDB[playerid][Job] == 2 || PlayerDB[playerid][Job] == 5 || IsJobFromMafia(PlayerDB[playerid][Job]))
	{
        if(PlayerDB[playerid][SekimoBusena] == true)
        {
            PlayerDB[playerid][SekimoBusena] = false;
            DestroySekimoTD(playerid);

            RemovePlayerMapIcon(playerid, 90);
            DisablePlayerCheckpoint(playerid);
            SendClientMessage(playerid, RAUDONA, "• Sekimas nutrauktas.");
        }
        else
        {
            new id;
            if(sscanf(params, "u", id))
            {
                UsageMessage(playerid,"• Sekti pasirinktà þaidëjà: /sekti [V_P/ID].");
            }
            else
            {
                if(IsPlayerConnected(id))
                {
                    if(id == playerid)
                    {
                        ErrorMsg(playerid,"• Savæs sekti negalima.");
                    }
                    else
                    {
                        PlayerDB[playerid][SekimoTaikinys] = id;
                        PlayerDB[playerid][SekimoBusena] = true;
                        CreateSekimoTD(playerid);
                        new string[128];
                        format(string, 128, "[racija] %s: seku %s (%i)", Vardas(playerid),Vardas(id),id);
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerConnected(i) && PlayerDB[i][Job] == PlayerDB[playerid][Job])
                            {
                                SendClientMessage(i, 0x0099CCFF, string);
                            }
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                }
            }
        }
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda skirta teisësaugininkams, medikams, mechanikams ir mafijoms.");
	}
	return 1;
}
CMD:patikrinti(playerid,params[])
{
	if(IsJobFromLaw(PlayerDB[playerid][Job]))
	{
		new id;
		if(sscanf(params, "u", id))
		{
			UsageMessage(playerid,"• Patikrinti, þaidëjà: /patikrinti [V_P/ID]");
		}
		else
		{
			if(IsPlayerConnected(id))
			{
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Savæs tikrinti neglaite");
                }
                else
                {
                    new Float:Cords[3];
                    GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                    if(IsPlayerInRangeOfPoint(playerid, 3, Cords[0], Cords[1], Cords[2]))
                    {
                        new caption[128];
                        format(caption, 128, "{FFFFFF}• Þaidëjo {FFFF00}%s {FFFFFF}patikrinimas", Vardas(id));
                        ShowPlayerDialog(playerid, 77, DIALOG_STYLE_LIST, caption, "Kontrabandinës medþiagos\nKontrabandinës medþiagos maðinoje\nGirtumo laipsnis\nSu dirþu\nSu ðalmu", "Tikrinti", "Atðaukti");
                        SetPVarInt(playerid, "PatikrinimoTID", id);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                    }
                }
			}
			else
			{
				ErrorMsg(playerid,"Tokio þaidëjo nëra.");
			}
		}
	}
	else
	{
		ErrorMsg(playerid,"Ði komanda tik policininkams.");
	}
	return 1;
}
CMD:isspirti(playerid,params[])
{
	if(isnull(params))
	{
		return UsageMessage(playerid,"• Iðspirti þaidëjà ið maðinos: /isspirti [V_P/ID]");
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new id;
				if(sscanf(params, "u", id))
				{
					UsageMessage(playerid,"• Iðspirti þaidëjà ið maðinos: /isspirti [V_P/ID]");
				}
				else
				{
					if(IsPlayerConnected(id))
					{
						if(id != playerid)
						{
							if(IsPlayerInVehicle(id, GetPlayerVehicleID(playerid)))
							{
								SendClientMessage(playerid, ZALIA,"• Þaidëjas iðspirtas ið maðinos.");
								RemovePlayerFromVehicle(id);
								new Float:Cords[3];
								GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
								SetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
							}
							else
							{
								ErrorMsg(playerid,"• Þmogus nëra pas tave maðinoje.");
							}
						}
						else
						{
							ErrorMsg(playerid,"• Save iðmesti galite ir papraðèiau.");
						}
					}
					else
					{
						ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
					}
				}
			}
			else
			{
				ErrorMsg(playerid,"• Tu ne vairuotojas.");
			}
		}
		else
		{
			ErrorMsg(playerid,"Tu ne maðinoje.");
		}
	}
	return 1;
}
forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
	return 1;
}
stock SaveOwnedVehicle(x)
{
	new query[2024];
	new Float:Cords[4];
	GetVehiclePos(x, Cords[0],Cords[1],Cords[2]);
	GetVehicleZAngle(x, Cords[3]);
	mysql_format(connectionHandle, query, 1024, "UPDATE `nuosavostrpriemones` SET `Rida`='%f',`Numeriai`='%s',`RegistruotiNumeriai`= '%i',`X`='%f',`Y`='%f',`Z`='%f',`Rotation`='%f',`Color1`='%i',`Color2`='%i',`FuelType`='%i',`Bendzinas`='%f',`Dujos`='%f',`Dauztumas` = '%i',`DujuIranga` = '%i' WHERE `ID` = '%i'",
	 VehicleDB[x][Rida],VehicleDB[x][VehicleNumbers],VehicleDB[x][VehicleNumReg],Cords[0],Cords[1],Cords[2],Cords[3],VehicleDB[x][VehicleColor1],VehicleDB[x][VehicleColor2],VehicleDB[x][FuelType],VehicleDB[x][Bendzinas],VehicleDB[x][Dujos],VehicleDB[x][VehicleDauztumas],VehicleDB[x][DujuIranga],VehicleDB[x][VehicleDatabaseID]);
	mysql_function_query(connectionHandle,query,false,"SendQuery","");

    mysql_format(connectionHandle, query, 1024, "UPDATE `nuosavostrpriemones` SET `WeaponSlot1WeaponModel`='%i',`WeaponSlot1WeaponBullets`='%i',`WeaponSlot2WeaponModel`='%i',`WeaponSlot2WeaponBullets`='%i',`WeaponSlot3WeaponModel`='%i',`WeaponSlot3WeaponBullets`='%i',`WeaponSlot4WeaponModel`='%i' WHERE `ID`='%i'",
     VehicleDB[x][WeaponSlot1WeaponModel],VehicleDB[x][WeaponSlot1WeaponBullets],VehicleDB[x][WeaponSlot2WeaponModel],VehicleDB[x][WeaponSlot2WeaponBullets],VehicleDB[x][WeaponSlot3WeaponModel],VehicleDB[x][WeaponSlot3WeaponBullets],VehicleDB[x][WeaponSlot4WeaponModel],VehicleDB[x][VehicleDatabaseID]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");
    mysql_format(connectionHandle, query, 1024, "UPDATE `nuosavostrpriemones` SET `WeaponSlot4WeaponBullets`='%i',`WeaponSlot5WeaponModel`='%i',`WeaponSlot5WeaponBullets`='%i',`WeaponSlot6WeaponModel`='%i',`WeaponSlot6WeaponBullets`='%i',`DrugsSlot1`='%i',`DrugsSlot2`='%i',`DrugsSlot3`='%i' WHERE `ID`='%i'",
     VehicleDB[x][WeaponSlot4WeaponBullets],VehicleDB[x][WeaponSlot5WeaponModel],VehicleDB[x][WeaponSlot5WeaponBullets],VehicleDB[x][WeaponSlot6WeaponModel],VehicleDB[x][WeaponSlot6WeaponBullets],VehicleDB[x][DrugsSlot1],VehicleDB[x][DrugsSlot2],VehicleDB[x][DrugsSlot3],VehicleDB[x][VehicleDatabaseID]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");

    mysql_format(connectionHandle, query, 1024, "UPDATE `nuosavostrpriemones` SET `CARMODTYPE_SPOILER`='%i',`CARMODTYPE_HOOD`='%i',`CARMODTYPE_ROOF`='%i',`CARMODTYPE_SIDESKIRT`='%i',`CARMODTYPE_LAMPS`='%i',`CARMODTYPE_NITRO`='%i',`CARMODTYPE_EXHAUST`='%i',`CARMODTYPE_WHEELS`='%i',`CARMODTYPE_STEREO` = '%i',`CARMODTYPE_HYDRAULICS` = '%i',`CARMODTYPE_FRONT_BUMPER` = '%i',`CARMODTYPE_REAR_BUMPER` = '%i',`CARMODTYPE_VENT_RIGHT` = '%i',`CARMODTYPE_VENT_LEFT` = '%i' WHERE `ID`='%i'",
     GetVehicleComponentInSlot(x, 0),GetVehicleComponentInSlot(x, 1),GetVehicleComponentInSlot(x, 2),GetVehicleComponentInSlot(x, 3),GetVehicleComponentInSlot(x, 4),GetVehicleComponentInSlot(x, 5),GetVehicleComponentInSlot(x, 6),GetVehicleComponentInSlot(x, 7),GetVehicleComponentInSlot(x, 8),GetVehicleComponentInSlot(x, 9),GetVehicleComponentInSlot(x, 10),GetVehicleComponentInSlot(x, 11),GetVehicleComponentInSlot(x, 12),GetVehicleComponentInSlot(x, 13),VehicleDB[x][VehicleDatabaseID]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");

    mysql_format(connectionHandle, query, 1024, "UPDATE `nuosavostrpriemones` SET `PaintJob`='%i',`VehicleLocked` = '%i' WHERE `ID`='%i'",
     GetVehiclePaintjob(x),VehicleDB[x][VehicleLocked],VehicleDB[x][VehicleDatabaseID]);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");

    switch(VehicleDB[x][Pardavinejama])
    {
        case true:
        {
            mysql_format(connectionHandle, query, 512, "UPDATE `nuosavostrpriemones` SET `Pardavinejama` = '1',`PardavimoKaina` = '%i' WHERE `ID` = '%i' LIMIT 1;",
                VehicleDB[x][PardavimoKaina],VehicleDB[x][VehicleDatabaseID]);
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
        }
        case false:
        {
            mysql_format(connectionHandle, query, 512, "UPDATE `nuosavostrpriemones` SET `Pardavinejama` = '0',`PardavimoKaina` = '%i' WHERE `ID` = '%i' LIMIT 1;",
                VehicleDB[x][PardavimoKaina],VehicleDB[x][VehicleDatabaseID]);
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
        }
    }
}
CMD:tpm(playerid,params[])
{
    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
	if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
	{
		if(PlayerDB[playerid][FirstOwnedVehicleID] > -1)
		{
            if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
            {
    			if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
    			{
    				ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
    				return 1;
    			}
    			new PlayerInterior = GetPlayerInterior(playerid);
    			if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
		    	{
			        new PlayerVW = GetPlayerVirtualWorld(playerid);
			        if(PlayerVW >= 3)
		        	{
		            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
		            	{
		        			HouseInfo[PlayerVW-3][kieknamie]--;
		            	}
		        	}
		    	}
    			new vehicleid = PlayerDB[playerid][OwnedVehicle1];
    			new Float:Cords[3];
    			GetVehiclePos(vehicleid, Cords[0], Cords[1], Cords[2]);
    			new Kaina = floatround(GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]) * 0.05, floatround_ceil);
    			if(Kaina > PlayerDB[playerid][MoneyInPocket])
    			{
    				new string[128];
    				format(string, 128, "• Nepakanka pinigø teleportacijai (turi %d €, reikia %i €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],Kaina,Kaina - PlayerDB[playerid][MoneyInPocket]);
    				SendClientMessage(playerid, RAUDONA, string);
    			}
    			else
    			{
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpm", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
    				PlayerDB[playerid][MoneyInPocket]-=Kaina;
    				new Float:SizeValues[3];
    				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE , SizeValues[0],SizeValues[1],SizeValues[2]);
    				SetPlayerInterior(playerid,0);
    				SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vehicleid));
    				SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]+SizeValues[2]);
    				new string[128];
    				format(string, 128, "Uþ kelionæ sumokëjai %i €!", Kaina);
    				SendClientMessage(playerid, ZALIA, string);
    			}
            }
            else
            {
                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}pirmasis {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
            }
		}
		else
		{
            ErrorMsg(playerid,"• Teleportuotis negalite, kadangi neturite pirmosios transporto priemonës.");
        }
	}
	return 1;
}


CMD:tpm1(playerid,params[])
{
    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if(PlayerDB[playerid][SecondOwnedVehicleID] > -1)
        {
            if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
            {
                if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
                {
                    ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
                    return 1;
                }
                new PlayerInterior = GetPlayerInterior(playerid);
                if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
		    	{
			        new PlayerVW = GetPlayerVirtualWorld(playerid);
			        if(PlayerVW >= 3)
		        	{
		            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
		            	{
		        			HouseInfo[PlayerVW-3][kieknamie]--;
		            	}
		        	}
		    	}
                new vehicleid = PlayerDB[playerid][OwnedVehicle2];
                new Float:Cords[3];
                GetVehiclePos(vehicleid, Cords[0], Cords[1], Cords[2]);
                new Kaina = floatround(GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]) * 0.05, floatround_ceil);
                if(Kaina > PlayerDB[playerid][MoneyInPocket])
                {
                    new string[128];
                    format(string, 128, "• Nepakanka pinigø teleportacijai (turi %d €, reikia %i €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],Kaina,Kaina - PlayerDB[playerid][MoneyInPocket]);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpm", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                    PlayerDB[playerid][MoneyInPocket]-=Kaina;
                    new Float:SizeValues[3];
                    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE , SizeValues[0],SizeValues[1],SizeValues[2]);
                    SetPlayerInterior(playerid,0);
                    SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vehicleid));
                    SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]+SizeValues[2]);
                    new string[128];
                    format(string, 128, "Uþ kelionæ sumokëjai %i €!", Kaina);
                    SendClientMessage(playerid, ZALIA, string);
                }
            }
            else
            {
                SendClientMessage(playerid, 0x62A5C4FF, "•{FFFFFF} Jûsø {62A5C4}antrasis {FFFFFF}automobilis sudauþytas, norëdami susiremontuoti komandà {62A5C4}/mvaldymas ir atstatyti automobilá.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Teleportuotis negalite, kadangi neturite antros transporto priemonës.");
        }
    }
    return 1;
}
public OnQueryError(errorid, error[], callback[], query[], connectionHandler)
{
    print("MYSQL ERROR!");
    printf("MYSQL ERROR in Query: %s", query);
    printf("Callback: %s", callback);
    printf("ErrorID: %i", errorid);
    printf("Error: %s", error);
    print(" ");
    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	if(VehicleDB[vehicleid][DARBOMASINA] == true)
	{
        switch(GetVehicleModel(vehicleid))
        {
            case 435,450,584,591:
            {
                return 1;
            }
            default:
            {
                if(GetVehicleDistanceFromPoint(vehicleid, VehicleSpawnCords[vehicleid][0], VehicleSpawnCords[vehicleid][1], VehicleSpawnCords[vehicleid][2]) > 5 )
                {
                    if(strcmp("Nëra", VehicleDB[vehicleid][LastDriverName], true) == 0)
                    {
                        SetVehicleToRespawn(vehicleid);
                    }
                }
            }
        }
	}
	return 1;
}
CMD:direktoriai(playerid,params[])
{
	mysql_function_query(connectionHandle,"SELECT `Name`,`Direktorius`,`DatePlayerBecameDir`,`SiandienZaista` FROM `players` WHERE `Direktorius` > 0;",true,"OnPlayerRequestListOfDirectors","d",playerid);
	return 1;
}
forward OnPlayerRequestListOfDirectors(playerid);
public OnPlayerRequestListOfDirectors(playerid)
{
	new info[2500] = "Visi direktoriai (prisijungæ ir atsijungæ):\n\n";
	if(cache_get_row_count() > 0)
	{
		new int = 1;
		for(new row = 0;row<cache_get_row_count();row++)
		{
			new Nickas[24],DirID,id,Date[12];
            new TimePlayed = cache_get_row_int(row, 3);
			cache_get_row(row, 0, Nickas);
            cache_get_row(row, 2, Date);
			DirID = cache_get_row_int(row, 1);
			if(!sscanf(Nickas, "u", id))
			{
				if(IsPlayerConnected(id))
				{
					switch(DirID)
					{
						case 1:
						{
							new string[256];
							format(string, 256, "{FFFFFF}• {47AB3F}Policijos direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
							strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

						}
						case 2:
						{
							new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Medikø direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
						}
                        case 4:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Taxi direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
                        case 5:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Mechanikø firmos direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
                        case 7:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Lucchese“ mafijos vadas(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 8:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Genovese“ mafijos vadas(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
                        case 9:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Spec. bûrio „Aras“ direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
                        case 10:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Radistø direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
                        case 11:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}S** direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 21:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Fûristø direktorius(-ë) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);

                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }

                        }
					}
				}
				else
				{
					switch(DirID)
					{
                        case 1:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Policijos direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 2:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Medikø direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 4:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}TAXI firmos direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 5:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Mechanikø firmos direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 7:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Lucchese“ mafijos vadas(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 8:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Genovese“ mafijos vadas(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 9:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Spec. bûrio „Aras“ direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 10:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Radistø direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 11:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}S** direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 21:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Fûristø direktorius(-ë) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
					}
				}
			}
			int++;
		}
	}
	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Direktoriai", info, "Gerai", "");
	return 1;
}
CMD:priezastys(playerid,params[])
{
	new query[200];
	mysql_format(connectionHandle, query, 200, "SELECT `Priezastis` FROM `priezastys` WHERE `Name` = '%e' ORDER BY `ID` DESC LIMIT 20;", Vardas(playerid));
	mysql_function_query(connectionHandle,query,true,"OnPlayerRequestForReasons","d",playerid);
	return 1;
}
forward OnPlayerRequestForReasons(playerid);
public OnPlayerRequestForReasons(playerid)
{
	if(cache_get_row_count() == 0)
	{
		ErrorMsg(playerid,"Nëra prieþasèiø.");
	}
	else
	{
		new info[2048];
		for(new row=0;row<cache_get_row_count();row++)
		{
			new string[150];
			new Reason[144];
			cache_get_row(row, 0, Reason);
			format(string, 150, "%s\n", Reason);
			strcat(info, string);
		}
		ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prieþastys", info, "Gerai", "");
	}
	return 1;
}
CMD:ita(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Bûnant stebëjimo rëþime, negalite naudoti ðios komandos.");
            return 1;
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Átarti þaidëjà: /ita [Vardas_Pavardë/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(playerid == id)
                {
                    ErrorMsg(playerid,"• Savæs átarti negalite.");
                    return 1;
                }
                if(IsJobFromLaw(PlayerDB[id][Job]))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra teisësaugininkas.");
                    return 1;
                }
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 10, Cords[0], Cords[1], Cords[2]))
                {
                    SetPVarInt(playerid, "Itariamasis", id);
                    new info[1000];
                    strcat(info,"» Non RP (10 átarimo lygio)\n");
                    strcat(info,"» Masinis þudymas(DM) (15 átarimo lygio)\n");
                    strcat(info,"» Tyèinis ESC laikymas (10 átarimo lygio)\n");
                    strcat(info,"» Relog (20 átarimo lygio)\n");
                    strcat(info,"» Bëgimas nuo teisësaugininko (7 átarimo lygio)\n");
                    strcat(info,"» Teisësaugos neklausymas/áþeidinëjimas/uþpuolimas (8 átarimo lygio)\n");
                    strcat(info,"» Avarijos kaltininkas (5 átarimo lygio)\n");
                    strcat(info,"» Civilio uþpuolimas/áþeidinëjimas (5 átarimo lygio)\n");
                    strcat(info,"» Ginklo naudojimas/rodymas vieðoje vietoje (4 átarimo lygio)\n");
                    strcat(info,"» Kyðio siûlymas (4 átarimo lygio)\n");
                    strcat(info,"» Valstybinës turto niokojimas (4 átarimo lygio)\n");
                    strcat(info,"» Vaþiavimas be ðalmo/dirþo/technikinës(nuosavos) (5 átarimo lygio)\n");
                    strcat(info,"» Narkotiniø medþiagø vartojimas/platinimas (6 átarimo lygio)\n");
                    strcat(info,"» Narkotiniø medþiagø turëjimas (3 átarimo lygio)\n");
                    strcat(info,"» Trukdymas teisësaugai dirbti (5 átarimo lygio)\n");
                    strcat(info,"» Transporto priemonës dauþymas (3 átarimo lygio)\n");
                    strcat(info,"» Vaþiavimas be ðviesø/teisiø (5 átarimo lygio)");
                    ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, "{AFAFAF}Átarimo lygio davimas", info, "Rinktis", "Atðaukti");
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ðia komanda naudoti gali tik teisësauga.");
    }
    return 1;
}


CMD:itarimai(playerid,params[])
{
    new query[200];
    mysql_format(connectionHandle, query, 200, "SELECT `ItarimoTekstas` FROM `itarimai` WHERE `Vardas` = '%e' ORDER BY `ID` DESC LIMIT 20;", Vardas(playerid));
    mysql_function_query(connectionHandle,query,true,"OnPlayerRequestForWarns","d",playerid);
    return 1;
}
CMD:kroviniustatistika(playerid,params[])
{
 	new query[200];
    if(PlayerDB[playerid][Direktorius] == 21 || PlayerDB[playerid][Pavaduotojas] == 21)
    {
	    mysql_format(connectionHandle, query, 200, "SELECT `KasPasikrove`, `KaPasikrove` FROM `kroviniustatistika` ORDER BY `KaPasikrove` DESC LIMIT 20;");
	    mysql_function_query(connectionHandle,query,true,"OnPlayerKroviniai","d",playerid);
    }
    else
    {
  		ErrorMsg(playerid, "• Ði komanda skirta tik tolimøjø reisø vairotojø valdþiai.");
    }
    return 1;
}
CMD:trlikutis(playerid,params[])
{
    if(PlayerDB[playerid][Job] != 21) return ErrorMsg(playerid, "• Komanda skirta tik fûristams.");
	new query[100];
    mysql_format(connectionHandle, query, 100, "SELECT `ModelID`, `Kiekis` FROM `masinuturguskiekiai` ORDER BY `ModelID` DESC LIMIT 100;");
    mysql_function_query(connectionHandle,query,true,"OnTrLikutis","d",playerid);
    return 1;
}
CMD:vaistulikutis(playerid,params[])
{
    if(PlayerDB[playerid][Job] != 21) return ErrorMsg(playerid, "• Komanda skirta tik fûristams.");
	new info[526];
 	new string[200];
    strcat(info,"{00cc28}Medicinos Departamoneto operatorë:\n");
    strcat(info, "   \n");
 	format(string, 128,"\t{00cc28}• {ffffff}Mûsø sandëlyje liko {00cc28}%i vnt. {ffffff}vaistinëliø.\n", HPSettings[vaistai]);
 	strcat(info, string);
 	strcat(info,"\t{00cc28}Aèiû {ffffff}uþ jûsø darbà serverio labui. Sëkmës darbe.");
 	//strcat(info, string);
 	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Vaistinëliø likutis", info, "Uþdaryti", "");
    return 1;
}
CMD:marsrutai(playerid,params[])
{
	if(PlayerDB[playerid][Job] != 21) return ErrorMsg(playerid, "• Komanda skirta tik fûristams.");
	ShowPlayerDialog(playerid, 168, DIALOG_STYLE_LIST, "{AFAFAF}Pasikrovimai fûristams", "Maisto pasikrovimo punktas\nVaistø pasikrovimo punktas\nElektronikos prekiø pasikrovimo punktas\nDegalø terminalas", "Rinktis", "Uþrakinti");
	return 1;
}
forward OnPlayerRequestForWarns(playerid);
public OnPlayerRequestForWarns(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"Nëra átarimø.");
    }
    else
    {
        new info[2048];
        for(new row=0;row<cache_get_row_count();row++)
        {
            new string[150];
            new Reason[144];
            cache_get_row(row, 0, Reason);
            format(string, 150, "%s\n", Reason);
            strcat(info, string);
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Itarimai", info, "Gerai", "");
    }
    return 1;
}
forward OnPlayerKroviniai(playerid);
public OnPlayerKroviniai(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Statistika tuðèia.");
    }
    else
    {
        new info[2048];
        new string[150];
        format(string, 150, "{62A5C4}• {FFFFFF}Dvideðimt paskutiniø iðraðø:\n");
        strcat(info, string);
        format(string, 150, " \n");
        strcat(info, string);
        for(new row=0;row<cache_get_row_count();row++)
        {
            new kasima[24];
            new stats[144];
            cache_get_row(row, 0, kasima);
            cache_get_row(row, 1, stats);
            format(string, 150, "\t{43c92e}• {FFFFFF}%s | %s\n", kasima, stats);
            strcat(info, string);
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Kroviniø statistika", info, "Gerai", "");
    }
    return 1;
}
forward OnTrLikutis(playerid);
public OnTrLikutis(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Ups, kaþkas atsitiko.");
    }
    else
    {
        new info[3805];
        new string[256];
        format(string, 150, "{62A5C4}• {FFFFFF}Tr. priemoniø likutis salonuose:\n");
        strcat(info, string);
        format(string, 150, "      \n");
        strcat(info, string);
        format(string, 150, "{fff600}•{FFFFFF}Tr. pavadinimas {fff600}•{FFFFFF} Likutis\n");
        strcat(info, string);
        for(new row=0;row<cache_get_row_count();row++)
        {
            new modelis = cache_get_row_int(row, 0);
            new kiekis = cache_get_row_int(row, 1);
            if(!(modelis == 400 || modelis == 418 || modelis == 426 || modelis == 458 || modelis == 500 || modelis == 565
				|| modelis == 550 || modelis == 561 || modelis == 527 || modelis == 507 || modelis == 496 || modelis == 517 || modelis == 445
				|| modelis == 494 || modelis == 502 || modelis == 503 || modelis == 434 || modelis == 439 || modelis == 551))
            {
	            if(kiekis <= 0)
	       		{
	            	kiekis = 0;
	        	}
	        	if(kiekis == 0)
	        	{
	           	 	format(string, 150, "\n{43c92e}• {FFFFFF}%s {fff600}• {FFFFFF}Liko: {ff0000}%i vnt.\n", vNames[modelis - 400], kiekis);
	            }
				else
				{
	 				format(string, 150, "\n{43c92e}• {FFFFFF}%s {fff600}• {FFFFFF}Liko: {38ed07}%i vnt.\n", vNames[modelis - 400], kiekis);
	   			}
				strcat(info, string);
			}
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_LIST, "{AFAFAF}Likutis", info, "Gerai", "");
    }
    return 1;
}
CMD:unita(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Iðteisinti þaidëjà nuo paskutinio átarimo: /unita [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(playerid == id)
                {
                    ErrorMsg(playerid,"• Savæs negali.");
                    return 1;
                }
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 4, Cords[0], Cords[1], Cords[2]))
                {
                    if(PlayerDB[id][WantedLevel] > 0)
                    {
                        new query[400];
                        mysql_format(connectionHandle, query, 400, "SELECT * FROM `itarimai` WHERE `Vardas` = '%e' ORDER BY `ID` DESC LIMIT 1;", Vardas(id));
                        mysql_function_query(connectionHandle,query,true,"OnPlayerRequestRemoveWarns","dd",playerid,id);
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjo atþvilgiu nëra jokiø jam átarimø.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas yra tikrai per toli,kad galëtumete iðteisinti nuo paskutinio kaltinimo.");
                }
            }
            else
            {
                ErrorMsg(playerid,"Tokio þaidëjo nëra");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}

forward OnPlayerRequestRemoveWarns(playerid,tid);
public OnPlayerRequestRemoveWarns(playerid,tid)
{
    if(cache_get_row_count() > 0)
    {
        new Itarimas[128];
        cache_get_row(0, 2, Itarimas);
        if(PlayerDB[tid][WantedLevel] > cache_get_row_int(0, 3))
        {
            PlayerDB[tid][WantedLevel]-=cache_get_row_int(0, 3);
            new RACIJA[128];
            format(RACIJA, 128, "[racija] Pareigûnas {FFFFFF}%s{003366}: anuliavo nusikalteliui {FFFFFF}%s {003366}pask.duotà átarimà:", Vardas(playerid),Vardas(tid));
            new RACIJA2[128];
            new ITARIMAS[128];
            cache_get_row(0, 2, ITARIMAS);
            format(RACIJA2, 128, "Prieþastis: „{FFFFFF}%s{003366}“, dabar jis turi: {FFFFFF}7 {003366}átarimo lygá(-us).", Itarimas);
            foreach(new i : Player)
            {
                if(IsJobFromLaw(PlayerDB[i][Job]))
                {
                    SendClientMessage(i, 0x003366FF, RACIJA);
                    SendClientMessage(i, 0x003366FF, RACIJA2);
                }
            }
            new query[300];
            mysql_format(connectionHandle, query, 300, "DELETE FROM `itarimai` WHERE `ID` = '%i' LIMIT 1;", cache_get_row_int(0, 0));
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
            format(query, 300, "• Pareigûnas {FFFFFF}%s {003366}nuo Jums duoto pask. átarimo lygio.", Vardas(playerid));
            SendClientMessage(tid, 0x003366FF, query);
        }
        else if(PlayerDB[tid][WantedLevel] == cache_get_row_int(0, 3))
        {
            PlayerDB[tid][WantedLevel] = 0;
            new RACIJA[128];
            format(RACIJA, 128, "[racija] Pareigûnas {FFFFFF}%s{003366}: anuliavo nusikalteliui {FFFFFF}%s {003366}pask.duotà átarimà:", Vardas(playerid),Vardas(tid));
            new RACIJA2[128];
            new ITARIMAS[128];
            cache_get_row(0, 2, ITARIMAS);
            format(RACIJA2, 128, "Prieþastis: „{FFFFFF}%s{003366}“, dabar jis turi: {FFFFFF}7 {003366}átarimo lygá(-us).", Itarimas);
            foreach(new i : Player)
            {
                if(IsJobFromLaw(PlayerDB[i][Job]))
                {
                    SendClientMessage(i, 0x003366FF, RACIJA);
                    SendClientMessage(i, 0x003366FF, RACIJA2);
                    SendClientMessage(i, 0x00FFFFFF, "Þaidëjas nebegaudomas.");
                }
            }
            new query[300];
            mysql_format(connectionHandle, query, 300, "DELETE FROM `itarimai` WHERE `ID` = '%i' LIMIT 1;", cache_get_row_int(0, 0));
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
            format(query, 300, "• Pareigûnas {FFFFFF}%s {003366}nuo Jums duoto pask. átarimo lygio", Vardas(playerid));
            SendClientMessage(tid, 0x003366FF, query);
        }
        else
        {
            ErrorMsg(playerid,"• Þaidëjo atþvilgiu nëra jokiø jam átarimø kuriuos galëtumete nuimti arba tai neduos jokios naudos.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Átariamasis neturi gaudomumo lygio, kurá galëtumëte nuiimti.");
    }
    return 1;
}

CMD:narkotikai(playerid,params[])
{
    new info[700];
    strcat(info, "Informacija apie narkotikus:\n1g. kanapiø duoda 40 gyvybiø ir sukelia laikinà galvos svaigimà\n");
    strcat(info, "15-45 mg kokaino duoda 100 gyvybiø ir 100 ðarvø 1 minutei\n");
    strcat(info, "10-40 mg heroino duoda 60 ðarvø ir nuiima 10 gyvybiø\n\nKokaino ir heroino suvartojimo kiekis vienu metu priklauso nuo priklausomybës jiems\n");
    strcat(info,"Po 1 minutës,kai suvartojamas kokainas jums pradës svaigti galva, jûsø gyvybës paliks minimalios\nVartojant vienu metu nevienus narkotikus galimi sutrikimai\nKomanda /vartoti");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Narkotikai", info, "Gerai","");
    return 1;
}
CMD:vartoti(playerid,params[])
{
    new info[400];
    if(PlayerDB[playerid][Job] == 1 || PlayerDB[playerid][Job] == 9 || PlayerDB[playerid][Job] == 11)
	{
		ErrorMsg(playerid, "• Jûs esate teisësaugininkas, todël negalite naudoti ðios komandos.");
	}
	else
	{
	    format(info, 400, "Kanapës {FFFF00}%dg.\nHeroinas {FFFF00}%dmg.\nKokainas {FFFF00}%dmg.", PlayerDB[playerid][Kanapes],PlayerDB[playerid][Heroinas],PlayerDB[playerid][Kokainas]);
   		ShowPlayerDialog(playerid, 51, DIALOG_STYLE_LIST, "{AFAFAF}Vartoti", info, "Gerai", "Atðaukti");
	}
    return 1;
}
forward NarkomanoEfektai(playerid,Narkotikas);
public NarkomanoEfektai(playerid,Narkotikas)
{
    if(PlayerDB[playerid][GaliSuveiktiNark] == true)
    {
        switch(Narkotikas)
        {
            case 0:
            {
                new Float:PlayerHealth;
                GetPlayerHealth(playerid,PlayerHealth);
                PlayerHealth += 40;
                if(PlayerHealth > 100)
                {
                    PlayerHealth = 100;
                }
                SetPlayerHealthEx(playerid, PlayerHealth);
                SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 500);
                GameTextForPlayer(playerid, "~p~KAIFAS..", 2000, 3);
            }
            case 1:
            {
                new Float:PlayerHealth;
                GetPlayerHealth(playerid,PlayerHealth);
                PlayerHealth -= 10.0;
                if(PlayerHealth == 0)
                {
                    GameTextForPlayer(playerid, "~r~PERDOZAVAI", 3000, 3);
                    SetPlayerHealthEx(playerid, 1);
                    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 4000);
                    SetPlayerWeather(playerid, -68);
                }
                else
                {
                    SetPlayerHealthEx(playerid, PlayerHealth);
                    new Float:Armour;
                    GetPlayerArmour(playerid,Armour);
                    Armour += 60;
                    if(Armour > 100)
                    {
                        Armour = 100;
                    }
                    SetPlayerArmourEx(playerid, Armour);
                    GameTextForPlayer(playerid, "~p~Hhhaaaaaa", 3000, 3);
                    SetPlayerWeather(playerid, -68);
                    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 4000);
                    SetTimerEx("HeroinasBaigeVeikti", 30000, false, "d", playerid);
                }
            }
            case 2:
            {
                SetPlayerDrunkLevel(playerid, 0);
                SetPlayerHealthEx(playerid, 100);
                SetPlayerArmourEx(playerid, 100);
                SetPlayerWeather(playerid, -68);
                GameTextForPlayer(playerid, "~p~NESUSTABDOMAS", 3000, 3);
                SetTimerEx("KokainoSalutinis", 60000, false, "d", playerid);
            }
        }
    }
    return 1;
}
forward KokainoSalutinis(playerid);
public KokainoSalutinis(playerid)
{
    if(PlayerDB[playerid][GaliSuveiktiNark] == true)
    {
        SetPlayerWeather(playerid, SERVERIO_ORAS);
        SetPlayerDrunkLevel(playerid, 3000);
        new Float:Health;
        GetPlayerHealth(playerid,Health);
        if(Health > 10)
        {
            SetPlayerHealthEx(playerid, 10);
        }
        SetPlayerArmourEx(playerid, 0);
    }
    return 1;
}
forward HeroinasBaigeVeikti(playerid);
public HeroinasBaigeVeikti(playerid)
{
    SetPlayerWeather(playerid, SERVERIO_ORAS);
    return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID && issuerid != playerid)
    {
        PlayerDB[playerid][LastTimePlayerFought] = gettime();
        if(IsPlayerInWarZone(issuerid) == 0 || IsPlayerInWarZone(playerid) == 0)
        {
            if(PlayerDB[issuerid][TazerioBusena] == true && (weaponid == 22 || weaponid == 23 || weaponid == 24 ))
            {
                ClearAnimations(playerid, 1);
                PlayerDB[playerid][GavoElektrosSoka] = true;
                PlayerDB[playerid][ElektrosSokasGalioja] = gettime() + 7;
                ApplyAnimation(playerid, "PED","FLOOR_hit_f", 4.1, 1, 1, 1, 1, 10000, 1);
                GameTextForPlayer(playerid, "~b~Elektros sokas bzzz....", 15000, 3);
                new string[128];
                format(string, 128, "• Prieð jus buvo panaudotas tazeris. Tazerá panaudojæs pareigûnas %s(%i).", Vardas(issuerid),issuerid);
                SendClientMessage(playerid, RAUDONA, string);
            }
        }
    }
    return 0;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    return 0;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(PlayerDB[playerid][CantPlayBecouseOfBan] == true)
    {
        Kick(playerid);
        return 0;
    }
    new slot = GetWeaponSlot(weaponid);
    new tPlayerWeapon,tPlayerWeaponAmmo;
    GetPlayerWeaponData(playerid, slot, tPlayerWeapon, tPlayerWeaponAmmo);
    if(PlayerWeapons[playerid][slot] != tPlayerWeapon || (PlayerWeaponAmmo[playerid][slot]+10) < tPlayerWeaponAmmo)
    {
        return 0;
    }
    PlayerWeaponAmmo[playerid][slot]-=1;
    if(weaponid == WEAPON_DEAGLE)
    {
        if(PlayerDB[playerid][LastTimePlayerShotWithDeagle] == gettime())
        {
            PlayerDB[playerid][DeagleShotsCount]++;
            if(PlayerDB[playerid][DeagleShotsCount] == 8)
            {
                PlayerDB[playerid][KicksForRapidShots]+=1;
                if(PlayerDB[playerid][KicksForRapidShots] == 4)
                {
                    PlayerDB[playerid][KicksForRapidShots] = 0;
                    BanPlayer(playerid,"AUTO C-BUG/RAPID FIRE",1,-1,2);
                }
                else
                {
                    Kick(playerid);
                }
                return 0;
            }
        }
        else
        {
            PlayerDB[playerid][LastTimePlayerShotWithDeagle] = gettime();
            PlayerDB[playerid][DeagleShotsCount] = 1;
        }
    }
    else if(weaponid == WEAPON_SHOTGUN)
    {
        if(PlayerDB[playerid][LastTimePlayerShotWithSG] == gettime())
        {
            PlayerDB[playerid][SGShotsCount]++;
            if(PlayerDB[playerid][SGShotsCount] == 8)
            {
                PlayerDB[playerid][KicksForRapidShots]+=1;
                if(PlayerDB[playerid][KicksForRapidShots] == 4)
                {
                    PlayerDB[playerid][KicksForRapidShots] = 0;
                    BanPlayer(playerid,"AUTO C-BUG/RAPID FIRE",1,-1,2);
                }
                else
                {
                    Kick(playerid);
                }
                return 0;
            }
        }
        else
        {
            PlayerDB[playerid][LastTimePlayerShotWithSG] = gettime();
            PlayerDB[playerid][SGShotsCount] = 1;
        }
    }
    else if(weaponid == WEAPON_SNIPER)
    {
        if(PlayerDB[playerid][LastTimePlayerShotWithSniper] == gettime())
        {
            PlayerDB[playerid][SniperShotsCount]++;
            if(PlayerDB[playerid][SniperShotsCount] == 8)
            {
                PlayerDB[playerid][KicksForRapidShots]+=1;
                if(PlayerDB[playerid][KicksForRapidShots] == 4)
                {
                    PlayerDB[playerid][KicksForRapidShots] = 0;
                    BanPlayer(playerid,"AUTO C-BUG/RAPID FIRE",1,-1,2);
                }
                else
                {
                    Kick(playerid);
                }
                return 0;
            }
        }
        else
        {
            PlayerDB[playerid][LastTimePlayerShotWithSniper] = gettime();
            PlayerDB[playerid][SniperShotsCount] = 1;
        }
    }
    if(hittype == BULLET_HIT_TYPE_PLAYER)
    {
        for(new i = 0;i < SAUGIU_ZONU_SKAICIUS;i++)
        {
            if(IsPlayerInDynamicArea(playerid, SaugiosZonos[i], 1) || IsPlayerInDynamicArea(hitid, SaugiosZonos[i], 1))
            {
                return 0;
            }
        }
    }
    return 1;
}
stock IsPointInAreaRange(Float:PointX,Float:PointY,Float:PointZ,Float:MaxX,Float:MinX,Float:MaxY,Float:MinY,bool:UseZ = false,Float:MaxZ = 0.00,Float:MinZ = 0.00)
{
    if(UseZ == false)
    {
        if(MaxX >= PointX && MinX <= PointX && MaxY >= PointY && MinY <= PointY)
        {
            return 1;
        }
    }
    else
    {
        if(MaxX >= PointX && MinX <= PointX && MaxY >= PointY && MinY <= PointY && MaxZ >= PointZ && MinZ <= PointZ)
        {
            return 1;
        }
    }
    return 0;
}
forward VehicleSecondTimer();
public VehicleSecondTimer()
{
    new Model;
    for(new vehicleid = 0;vehicleid<=GetVehiclePoolSize();vehicleid++)
    {
        if(!IsValidVehicle(vehicleid))
        {
            continue;
        }
        if(VehicleDB[vehicleid][Kartingas] == true)
        {
            new Float:X,Float:Y,Float:Z;
            GetVehiclePos(vehicleid, X, Y, Z);
            if(IsPointInAreaRange(X,Y,Z,-1864.9799,-1909.7882,-740.5648,-884.3264,true,50.1579,27.3330) == 0)
            {
                SetVehicleToRespawn(vehicleid);
            }
        }
        Model = GetVehicleModel(vehicleid);
        if(IsVehicleModelWithEngine(Model))
        {
            if(VehicleDB[vehicleid][VehicleEngineState] == 1)
            {
                new Greitis = GetVehicleSpeed(vehicleid);
                if(Greitis > 0)
                {
                    VehicleDB[vehicleid][Rida] += Greitis / 3.6 / 1000;
                }
                switch(VehicleDB[vehicleid][FuelType])
                {
                    case 0:
                    {
                        if(VehicleDB[vehicleid][Bendzinas] > 0)
                        {
                            VehicleDB[vehicleid][Bendzinas] -= Greitis / 3.6 / 100000 * DegaluSanaudos[Model - 400] + 0.005;
                        }
                        else
                        {
                            SetVehicleEngineState(vehicleid,0);
                        }
                    }
                    case 1:
                    {
                        if(VehicleDB[vehicleid][Dujos] > 0)
                        {
                            VehicleDB[vehicleid][Dujos] -= Greitis / 3.6 / 100000 * DegaluSanaudos[Model - 400] + 0.005;
                        }
                        else
                        {
                            SetVehicleEngineState(vehicleid,0);
                        }
                    }
                }
            }
        }
    }
    return 1;
}
CMD:tr(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(isnull(params))
        {
            UsageMessage(playerid,"Teisësaugos racija /tr [Tekstas].");
        }
        else
        {
            new string[144];
            switch(PlayerDB[playerid][Job])
            {
                case 1:
                {
                    format(string, 144, "[Teisësaugos racija] Policininkas {FFC50D}%s(%i): %s", Vardas(playerid),playerid,params);
                }
                case 9:
                {
                    format(string, 144, "[Teisësaugos racija] „Aras“ {FFC50D}%s(%i): %s", Vardas(playerid),playerid,params);
                }
                case 11:
                {
                    format(string, 144, "[Teisësaugos racija] SPD {FFC50D}%s(%i): %s", Vardas(playerid),playerid,params);
                }
            }
            SendClientMessageToLaw(0xFFFF01FF,string);
        }
    }
    return 1;
}
forward TemporarilyLabelsRemover();
public TemporarilyLabelsRemover()
{
    for(new i = 0;i < MAX_3DTEXT_GLOBAL; i++)
    {
        if(Tmp3DTextLabelsExists[i] == true && Tmp3DTextLabelsExistsTill[i] <= gettime())
        {
            Tmp3DTextLabelsExists[i] = false;
            Tmp3DTextLabelsExistsTill[i] = 0;
            DestroyDynamic3DTextLabel(Tmp3DTextLabels[i]);
        }
    }
}
CMD:tpdrag(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrag", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                SetVehiclePos(vehicleid, -1683.2433,-191.3140,14.8643);
                SetVehicleZAngle(vehicleid, 89.5);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrag", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
            SetPlayerPos(playerid, -1683.2429,-191.3140,14.1440);
            SetPlayerFacingAngle(playerid, 245.5);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tpdrift(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrift", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                SetVehiclePos(vehicleid, -2405.5190,-597.4369,133.3611);
                SetVehicleZAngle(vehicleid, 123.8846);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);

            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {

            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrift", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
            SetPlayerPos(playerid, -2415.3484,-590.9892,132.6484);
            SetPlayerFacingAngle(playerid, 182.9076);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tpdrift2(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrift2", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                SetVehiclePos(vehicleid, -312.4154,1537.8224,76.2769);
                SetVehicleZAngle(vehicleid, 180.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {

            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdrift2", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
            SetPlayerPos(playerid, -308.2501,1538.6022,75.5625);
            SetPlayerFacingAngle(playerid, 130);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tpdm(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
			ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
	 		return 1;
		}
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdm", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                SetVehiclePos(vehicleid, -456.9822,2050.3557,61.9291);
                SetVehicleZAngle(vehicleid, 195.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpdm", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
            SetPlayerPos(playerid, -462.9702,2053.1118,61.2009);
            SetPlayerFacingAngle(playerid, 195);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    return 1;
}
CMD:tpbull(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsVehicleShip(GetVehicleModel(vehicleid)))
            {
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpbull", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                SetVehiclePosExt(vehicleid,155.6305,589.7894,-0.2271,194.3851);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
                {
                    if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpbull", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                    switch(random(3))
                    {
                        case 0:
                        {
                            SetVehiclePosExt(vehicleid,-47.4959,1492.7440,13.6813,320.5998);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 1:
                        {
                            SetVehiclePosExt(vehicleid, -37.4641,1484.5038,13.7021,320.5998);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 2:
                        {
                            SetVehiclePosExt(vehicleid, -68.9539,1521.5292,13.6867,284.5344);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                }
            }
        }
        else
        {
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpbull", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, Cords[0], Cords[1], Cords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
            SetPlayerPos(playerid, 7.7958,1596.7192,27.9184);
            SetPlayerFacingAngle(playerid, 195);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tpbull2(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
			ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
	 		return 1;
		}
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        new Float:tCords[3];
        GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
        new LabelText[100];
        format(LabelText, 100, "%s Nusiteleportavo su komanda /tpbull2", Vardas(playerid));
        CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
        SetPlayerPos(playerid, -1432.3888,936.7503,1036.5135);
        SetPlayerFacingAngle(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 15);
    }
    return 1;
}
CMD:tpsf(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
  		new VehicleID = GetPlayerVehicleID(playerid);
    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        new Float:Cords[3];
        GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new ModelisTR = GetVehicleModel(vehicleid);
            if(IsVehicleAircraft(ModelisTR))
            {
                SetVehiclePos(vehicleid, -2144.2075,1.7139,52.5808);
                SetVehicleZAngle(vehicleid, 0.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else if(IsVehicleShip(ModelisTR))
            {
                SetVehiclePosExt(vehicleid,-1591.7368,207.6775,-0.3706,277.2791);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
                {
                    if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpsf", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);
                    switch(random(3))
                    {
                        case 0:
                        {
                            SetVehiclePosExt(vehicleid,-2171.5176,296.5285,36.0433,359.8842);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 1:
                        {
                            SetVehiclePosExt(vehicleid, -2188.7834,295.7908,36.0509,1.0031);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 2:
                        {
                            SetVehiclePosExt(vehicleid, -2214.3218,295.2363,36.0477,358.7386);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                }
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpsf", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, -2163.4890,254.2475,35.3203);
            SetPlayerFacingAngle(playerid, 264);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tplv(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new ModelisTR = GetVehicleModel(vehicleid);
            if(IsVehicleAircraft(ModelisTR))
            {
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tplv", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePos(vehicleid, 2041.6244,1848.1666,28.1662);
                SetVehicleZAngle(vehicleid, 111.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else if(IsVehicleShip(ModelisTR))
            {
                SetVehiclePosExt(vehicleid,1629.7759,566.7303,-0.3751,271.7399);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tplv", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            }
            else
            {
                if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
                {
                    if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tplv", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                    switch(random(3))
                    {
                        case 0:
                        {
                            SetVehiclePosExt(vehicleid,2045.1533,1896.4508,12.9553,3.0099);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 1:
                        {
                            SetVehiclePosExt(vehicleid, 2044.7371,1931.7852,13.0365,354.8390);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 2:
                        {
                            SetVehiclePosExt(vehicleid, 2052.6499,1920.7301,13.1105,179.2811);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                }
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tplv", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, 2025.4919,1912.2144,12.3028);
            SetPlayerFacingAngle(playerid, 261);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
CMD:tpls(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new ModelisTR = GetVehicleModel(vehicleid);
            if(IsVehicleAircraft(ModelisTR))
            {
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpls", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePos(vehicleid, 503.0147,-1853.5874,4.5978);
                SetVehicleZAngle(vehicleid, 11.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else if(IsVehicleShip(ModelisTR))
            {
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpls", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePosExt(vehicleid,187.9944,-1941.0624,-0.3441,217.3288);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
                {
                    if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpls", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                    switch(random(3))
                    {
                        case 0:
                        {
                            SetVehiclePosExt(vehicleid,324.5941,-1809.4928,5.4091,359.9043);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 1:
                        {
                            SetVehiclePosExt(vehicleid, 337.2407,-1809.5148,5.4404,359.9052);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 2:
                        {
                            SetVehiclePosExt(vehicleid, 353.6721,-1808.9259,5.4804,359.9048);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                }
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpls", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, 384.0842,-1806.2002,7.8303);
            SetPlayerFacingAngle(playerid, 261);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
stock IsVehicleAircraft(model)
{
    switch(model)
    {
        case 592:
        {
            return 1;
        }
        case 577:
        {
            return 1;
        }
        case 511:
        {
            return 1;
        }
        case 512:
        {
            return 1;
        }
        case 593:
        {
            return 1;
        }
        case 520:
        {
            return 1;
        }
        case 553:
        {
            return 1;
        }
        case 476:
        {
            return 1;
        }
        case 519:
        {
            return 1;
        }
        case 460:
        {
            return 1;
        }
        case 513:
        {
            return 1;
        }
        case 548:
        {
            return 1;
        }
        case 425:
        {
            return 1;
        }
        case 417:
        {
            return 1;
        }
        case 487:
        {
            return 1;
        }
        case 488:
        {
            return 1;
        }
        case 497:
        {
            return 1;
        }
        case 563:
        {
            return 1;
        }
        case 469:
        {
            return 1;
        }
        default:
        {
            return 0;
        }
    }
    return 0;
}
CMD:tpadmin(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        if(PlayerDB[playerid][LaukiuVaistu] == true)
		{
			ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
	 		return 1;
		}
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
		    if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpadmin", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePos(vehicleid, -2020.4957,-859.5836,32.8946);
                SetVehicleZAngle(vehicleid, 0.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpadmin", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, -2000.1329,-855.5588,32.1719);
            SetPlayerFacingAngle(playerid, 180);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    return 1;
}
stock PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    PlayerDB[playerid][PlayerWantedVehicleID] = vehicleid;
    PutPlayerInVehicle(playerid, vehicleid, seatid);
}
stock GivePlayerWeaponEx(playerid, weaponid, ammo)
{
    /*
    new PlayerWeapons[MAX_PLAYERS][13];//Naudosiu anti-cheatui..
    new PlayerWeaponAmmo[MAX_PLAYERS][13];//Naudojama anti-cheat..
    */
    new slot = GetWeaponSlot(weaponid);
    if(weaponid != PlayerWeapons[playerid][slot])
    {
        SetPlayerAmmo(playerid, PlayerWeapons[playerid][slot], 0);
        PlayerWeapons[playerid][slot] = weaponid;
        PlayerWeaponAmmo[playerid][slot] = ammo;
    }
    else
    {
        PlayerWeaponAmmo[playerid][slot]+= ammo;
    }
    GivePlayerWeapon(playerid, weaponid, ammo);
}
stock ResetPlayerWeaponsEx(playerid)
{
    for (new i = 0;i<12; i++)
    {
        PlayerWeapons[playerid][i] = 0;
    }
    return ResetPlayerWeapons(playerid);
}
stock SetPlayerAmmoEx(playerid, weaponid, ammo)
{
    new slot = GetWeaponSlot(weaponid);
    PlayerWeaponAmmo[playerid][slot] = ammo;
    return SetPlayerAmmo(playerid, weaponid, ammo);
}
CMD:vtaisyti(playerid,params[])
{
    if(PlayerDB[playerid][VIP] == 1)
    {
        if(PlayerDB[playerid][BEGA] == 1)
        {
            ErrorMsg(playerid,"Jûs gaudo policija,todël negalite naudoti ðios komandos.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(PlayerDB[playerid][MoneyInPocket] < 500)
            {
                new string[144];
                format(string, 144, "• Nepakanka pinigø maðinos taisymui (turi %d €, reikia 500 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],500 - PlayerDB[playerid][MoneyInPocket]);
                SendClientMessage(playerid, RAUDONA, string);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-=500;
                new vehicleid = GetPlayerVehicleID(playerid);
                RepairVehicle(vehicleid);
                SetVehicleHealth(vehicleid, 1000);
                SendClientMessage(playerid, ZALIA, "• Maðina sutaisyta.");
            }
        }
        else
        {
            ErrorMsg(playerid,"Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo");
    }
    return 1;
}
CMD:tpvip(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][VIP] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsVehicleShip(GetVehicleModel(vehicleid)))
            {
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpvip", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePosExt(vehicleid,-2230.1804,2424.2769,-0.4097,311.7064);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
                {
                    if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                    new Float:tCords[3];
                    GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpvip", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                    switch(random(2))
                    {
                        case 0:
                        {
                            SetVehiclePosExt(vehicleid, -2265.5632,2286.5847,4.7511,0.5037);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                        case 1:
                        {
                            SetVehiclePosExt(vehicleid, -2258.1321,2286.4851,4.7529,359.5708);
                            LinkVehicleToInterior(vehicleid, 0);
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehicleVirtualWorld(vehicleid, 0);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                }
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpvip", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, -2281.9302,2315.6091,4.9788);
            SetPlayerFacingAngle(playerid, 270);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo");
    }
    return 1;
}
CMD:tpkalnas(playerid,params[])
{

    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][VIP] == 1 || PlayerDB[playerid][adminlvl] > 0)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(IsPlayerInAnyVehicle(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(GetVehicleModel(vehicleid) == 498 && VehicleDB[vehicleid][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[vehicleid][DARBOID]))
                {
                    ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                    return 1;
                }
                new Float:tCords[3];
                GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
                new LabelText[100];
                format(LabelText, 100, "%s Nusiteleportavo su komanda /tpkalnas", Vardas(playerid));
                CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

                SetVehiclePos(vehicleid, -2333.1245,-1624.9380,483.4242);
                SetVehicleZAngle(vehicleid, 288.0);
                LinkVehicleToInterior(vehicleid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
                SetVehicleVirtualWorld(vehicleid, 0);
            }
            else
            {
                ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
            }
        }
        else
        {
            new Float:tCords[3];
            GetPlayerPos(playerid, tCords[0], tCords[1], tCords[2]);
            new LabelText[100];
            format(LabelText, 100, "%s Nusiteleportavo su komanda /tpkalnas", Vardas(playerid));
            CreateTemporarilyLabel(LabelText,ORANGE, tCords[0], tCords[1], tCords[2], 15.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), 0 ,10);

            SetPlayerPos(playerid, -2333.1250,-1624.9332,483.7070);
            SetPlayerFacingAngle(playerid, 171);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }
    }
    return 1;
}
CMD:vipginklai(playerid,params[])
{
    if(PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite apsiginkluoti VIP ginklais.");
            return 1;
        }
        else
        {
            if(PlayerDB[playerid][NegaliVIPGinklu] > 0)
            {
                ErrorMsg(playerid,"• VIP ginklus galima pasiimti tik kas 5min.");
            }
            else
            {
                GivePlayerWeaponEx(playerid, WEAPON_BAT, 1);
                GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN, 20);
                GivePlayerWeaponEx(playerid, WEAPON_COLT45, 100);
                PlayerDB[playerid][NegaliVIPGinklu] = 5;
                SendClientMessage(playerid, ZYDRA, "• Gavote VIP ginklus.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo");
    }
    return 1;
}
CMD:vipinfo(playerid,params[])
{
    new info[1100];
    strcat(info, "{26e4b2}VIP KOMANDOS:\n");
    strcat(info, "\t{FFFFFF}» /vtaisyti {26e4b2}- susiremontuoti maðinà uþ 500€\n");
    strcat(info, "\t{FFFFFF}» /tpm,/tpm1 {26e4b2}- uþ pinigus nusiteleportuoti iki nuosavos tr.priemonës\n");
    strcat(info, "\t{FFFFFF}» /sk {26e4b2}- Pradeda atgaliná skaièiavimà\n");
    strcat(info, "\t{FFFFFF}» /tpdrag,/tpbull,/tpsf,/tplv,/tpls,/tpvip,/tpkalnas,/tpdrift,/tpdrift2 {26e4b2}- Teleportai\n");
    strcat(info, "\t{FFFFFF}» /vipginklai {26e4b2}- pasiimti VIP ginklus\n");
    strcat(info, "\t{FFFFFF}» /v {26e4b2}- raðyti vieðai\n");
    strcat(info, "\t{FFFFFF}» /vchat {26e4b2}- susiraðinëti su kitais VIP nariais\n");
    strcat(info, "{26e4b2}VIP PRIVILEGIJOS:\n");
    strcat(info, "\t{FFFFFF}» 2 kartus didesnis uþdarbis (Verslai/Darbai)\n");
    strcat(info, "\t{FFFFFF}» Geltona spalva þaidime su komanda /spalva\n");
    strcat(info, "\t{FFFFFF}» Ligoninëje jums reikës praleisti tik pusæ laiko - 30sek.\n");
    strcat(info, "\t{FFFFFF}» Norëdamas ásigyti arba pratæsti VIP statuso galiojimo laikà raðyk:{26e4b2} /kreditai\n");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}VIP INFO", info, "Gerai", "");
    return 1;
}

stock CreateSalesVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2)
{
    new vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, 15);
    VehicleDB[vehicleid][TURGUS] = 1;
    new LabelText[700];
    format(LabelText, 700, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
        vNames[vehicletype - 400],AddPoints(aKaina[vehicletype - 400]),AddPoints(floatround(aKaina[vehicletype - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[vehicletype - 400],AddPoints(VehicleBagazines[vehicletype - 400]),DegaluSanaudos[vehicletype - 400],MaxGreitis[vehicletype - 400]);
    SalesVehiclesLabels[vehicletype-400] = CreateDynamic3DTextLabel(LabelText, 0xe76518FF, 0, 0, 0, 13, INVALID_PLAYER_ID, vehicleid, 0);
    VehicleDB[vehicleid][Bendzinas] = 0;
}
forward OnLoadSalesVehicles();
public OnLoadSalesVehicles()
{
    if(cache_get_row_count() > 0)
    {
        for(new row = 0;row < cache_get_row_count(); row++)
        {
            SalesVehiclesInStock[cache_get_row_int(row, 0) - 400] = cache_get_row_int(row, 1);
        }
        CreateSalesVehicle(587,-1954.8599,303.4868,35.1902,137.2030,43,1); // PARDUODAMA MASINA
        CreateSalesVehicle(602,-1953.5620,297.1877,35.3021,132.2708,75,77); // PARDUODAMA MASINA
        CreateSalesVehicle(558,-1953.0160,293.4940,35.3871,103.7621,116,1); // PARDUODAMA MASINA
        CreateSalesVehicle(477,-1947.5352,273.1888,35.2578,126.2629,121,1); // PARDUODAMA MASINA
        CreateSalesVehicle(562,-1944.9724,268.9061,35.1452,121.4550,116,1); // PARDUODAMA MASINA
        CreateSalesVehicle(559,-1944.7872,262.0435,35.1409,56.2909,68,8); // PARDUODAMA MASINA
        CreateSalesVehicle(560,-1947.4246,257.5889,35.1911,50.2473,17,1); // PARDUODAMA MASINA
        CreateSalesVehicle(405,-1945.5322,257.7758,40.9467,30.9326,36,1); // PARDUODAMA MASINA
        CreateSalesVehicle(402,-1951.8209,257.5426,40.8951,24.3657,30,30); // PARDUODAMA MASINA
        CreateSalesVehicle(589,-1949.5322,266.1238,40.6960,59.5707,23,23); // PARDUODAMA MASINA
        CreateSalesVehicle(480,-1945.3998,273.2040,40.8430,139.4994,2,2); // PARDUODAMA MASINA
        CreateSalesVehicle(506,-1951.5504,273.1649,40.7765,142.9215,7,7); // PARDUODAMA MASINA
        CreateSalesVehicle(462,-1958.0273,290.7883,40.6210,219.2950,14,14); // PARDUODAMA MASINA
        CreateSalesVehicle(471,-1957.7574,294.9301,40.5280,215.3114,120,114); // PARDUODAMA MASINA
        CreateSalesVehicle(586,-1956.8879,302.9130,40.5513,216.2251,8,1); // PARDUODAMA MASINA
        CreateSalesVehicle(463,-1953.9102,302.8165,40.5932,137.6909,7,7); // PARDUODAMA MASINA
        CreateSalesVehicle(522,-1952.0106,296.8410,40.6091,133.0366,51,118); // PARDUODAMA MASINA
        CreateSalesVehicle(521,-1952.2264,293.0408,40.5875,137.7493,115,118); // PARDUODAMA MASINA
        CreateSalesVehicle(468,-1952.5942,289.7484,40.7162,124.4859,3,3); // PARDUODAMA MASINA
        CreateSalesVehicle(567,-2123.5835,469.5808,35.0511,241.3800,88,64); // PARDUODAMA MASINA
        CreateSalesVehicle(533,-2123.6709,462.2394,34.8945,244.9779,79,1); // PARDUODAMA MASINA
        CreateSalesVehicle(534,-2119.4426,457.4529,34.9266,315.8750,53,53); // PARDUODAMA MASINA
        CreateSalesVehicle(491,-2112.3379,456.9288,34.9590,355.5427,71,72); // PARDUODAMA MASINA
        CreateSalesVehicle(419,-2105.2507,456.8692,34.9587,31.9905,47,76); // PARDUODAMA MASINA
        CreateSalesVehicle(489,-2099.7275,463.0503,35.3247,112.0147,112,120); // PARDUODAMA MASINA
        CreateSalesVehicle(479,-2099.8633,469.5706,35.0070,113.9982,59,36); // PARDUODAMA MASINA
        CreateSalesVehicle(400,-2504.0879,378.6148,34.9029,238.3528,75,1); // PARDUODAMA MASINA
        CreateSalesVehicle(507,-2507.2739,370.9823,34.9646,241.9165,53,53); // PARDUODAMA MASINA
        CreateSalesVehicle(496,-2511.6472,363.6455,34.8253,243.5244,22,22); // PARDUODAMA MASINA
        CreateSalesVehicle(418,-2515.2217,355.5954,35.2251,245.1781,41,41); // PARDUODAMA MASINA
        CreateSalesVehicle(517,-2519.1299,347.0052,34.9636,246.8904,40,36); // PARDUODAMA MASINA
        CreateSalesVehicle(445,-2525.3015,329.9783,35.0150,250.5925,39,39); // PARDUODAMA MASINA
        CreateSalesVehicle(550,-2530.3171,314.7411,34.9461,250.2209,53,53); // PARDUODAMA MASINA
        CreateSalesVehicle(458,-2515.6816,309.6905,35.0107,65.0170,101,1); // PARDUODAMA MASINA
        CreateSalesVehicle(426,-2514.0244,317.2814,34.8847,71.1479,7,7); // PARDUODAMA MASINA
        CreateSalesVehicle(561,-2511.0745,324.6930,34.8970,65.3565,8,17); // PARDUODAMA MASINA
        CreateSalesVehicle(527,-2508.5535,332.8419,34.8170,66.4034,53,1); // PARDUODAMA MASINA
        CreateSalesVehicle(565,-2505.9670,340.1261,35.2356,60.1461,15,15); // PARDUODAMA MASINA
        CreateSalesVehicle(500,-2502.6750,347.3181,34.9613,60.9838,40,84); // PARDUODAMA MASINA
        CreateSalesVehicle(411,-1664.1456,1215.3162,6.9952,257.5481,112,1); // PARDUODAMA MASINA
        CreateSalesVehicle(451,-1663.0913,1210.5126,6.9734,285.3222,36,36); // PARDUODAMA MASINA
        CreateSalesVehicle(421,-1662.0399,1220.3046,13.5283,88.0009,25,1); // PARDUODAMA MASINA
        CreateSalesVehicle(415,-1657.5515,1215.6962,13.4532,88.9628,36,1); // PARDUODAMA MASINA
        CreateSalesVehicle(603,-1654.1676,1211.4681,13.5264,88.5317,75,77); // PARDUODAMA MASINA
        CreateSalesVehicle(541,-1648.3120,1206.0505,13.3072,0.0783,36,8); // PARDUODAMA MASINA
        CreateSalesVehicle(429,-1672.7811,1205.7222,13.3414,268.3046,14,14); // PARDUODAMA MASINA
        CreateSalesVehicle(579,-1656.8296,1208.1927,21.0624,286.7044,53,53); // PARDUODAMA MASINA
        //CreateSalesVehicle(551,-2522.5518,338.3134,35.0912,249.0927,83,1); // PARDUODAMA MASINA
        //CreateSalesVehicle(565,-2265.5142,113.3379,34.8146,88.5496,15,15); // PARDUODAMA MASINA
        //CreateSalesVehicle(561,-2266.1855,105.3496,34.9975,90.4189,8,17); // PARDUODAMA MASINA
        //CreateSalesVehicle(558,-2266.6941,97.2285,34.8188,91.2523,116,1); // PARDUODAMA MASINA
        //CreateSalesVehicle(550,-2266.9602,89.4963,34.9920,88.7521,53,53); // PARDUODAMA MASINA
        //CreateSalesVehicle(551,-2267.6328,81.4017,34.9461,90.9186,83,1); // PARDUODAMA MASINA
        //CreateSalesVehicle(500,-2268.2478,73.4046,35.2652,88.6228,40,84); // PARDUODAMA MASINA
        //CreateSalesVehicle(400,-2268.6262,65.8194,35.2608,89.2429,75,1); // PARDUODAMA MASINA
        //CreateSalesVehicle(400,-2278.1194,96.0792,35.5281,356.9010,75,1); // PARDUODAMA MASINA
    }
    return 1;
}
CMD:vchat(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[128];
        format(string, 128, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(PlayerDB[playerid][VIP] == 1)
    {
        new message[90];
        if(sscanf(params, "s[90]", message))
        {
            UsageMessage(playerid,"• Susiraðinëti su kitais VIP nariais: /vchat [Tekstas]");
        }
        else
        {
            new string[128];
            format(string, 128, "[VIP] %s(%i): %s", Vardas(playerid),playerid,message);
            foreach(new i : Player)
            {
                if(IsPlayerConnected(i) && PlayerDB[i][VIP] == 1)
                {
                    SendClientMessage(i, 0x34A936FF, string);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo");
    }
    return 1;
}

CMD:v(playerid,params[])
{
    if(PlayerDB[playerid][MutedPlayer] > 0)
    {
        new string[144];
        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
        SendClientMessage(playerid, RAUDONA, string);
        return 1;
    }
    if(PlayerDB[playerid][VIP] == 1)
    {
        if(PlayerDB[playerid][RestrictedUseOfV] > gettime())
        {
            SendClientMessage(playerid, RAUDONA, "• Jûs negalite naudotis ðia komanda,kadangi esate apribotas.");
            return 1;
        }
        new message[110];
        if(sscanf(params, "s[110]", message))
        {
            UsageMessage(playerid,"• Skelbti praneðimà vieðai: /v [Tekstas]");
        }
        else
        {
            if(PlayerDB[playerid][Cmd_V_CD] > 0)
            {
                ErrorMsg(playerid,"• Skelbti galima tik kas 7sec!");
            }
            else
            {
                new string[128];
                format(string, 128, "[VIP narys] {FFFFFF}%s[%i] {FFFF00}skelbia: {FFFFFF}%s", Vardas(playerid),playerid,message);
                SendClientMessageToAll(0xFFFF00FF, string);
                PlayerDB[playerid][Cmd_V_CD] = 7;
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo");
    }
    return 1;
}
stock GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
        case 0 .. 1:
        {
            slot = 0;
        }
        case 2 .. 9:
        {
            slot = 1;
        }
        case 10 .. 15:
        {
            slot = 10;
        }
        case 16 .. 18:
        {
            slot = 8;
        }
        case 22 .. 24:
        {
            slot = 2;
        }
        case 25 .. 27:
        {
            slot = 3;
        }
        case 28 .. 29:
        {
            slot = 4;
        }
        case 32:
        {
            slot = 4;
        }
        case 30 .. 31:
        {
            slot = 5;
        }
        case 33 .. 34:
        {
            slot = 6;
        }
        case 35 .. 38:
        {
            slot = 7;
        }
        case 39:
        {
            slot = 8;
        }
        case 40:
        {
            slot = 12;
        }
        case 41..43:
        {
            slot = 9;
        }
        case 44 .. 46:
        {
            slot = 11;
        }
    }
    return slot;
}
forward AntiWeaponHack();
public AntiWeaponHack()
{
    foreach(new playerid : Player)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerWeaponsAreChanging[playerid] == false && PlayerDB[playerid][Loaded] == 1 && PlayerDB[playerid][PlayerNeedToSpawn] == false)
            {
                new tPlayerWeapons[13];
                new tPlayerWeaponsAmmo[13];
                for(new slot = 0;slot<12;slot++)
                {
                    if(slot == GetWeaponSlot(WEAPON_PARACHUTE) || slot == GetWeaponSlot(WEAPON_BOMB) || PlayerDB[playerid][PlayerGetsBan] == true)
                    {
                        continue;
                    }
                    else
                    {
                        GetPlayerWeaponData(playerid, slot, tPlayerWeapons[slot], tPlayerWeaponsAmmo[slot]);
                        /*
                        new PlayerWeapons[MAX_PLAYERS][13];//Naudosiu anti-cheatui..
                        new PlayerWeaponAmmo[MAX_PLAYERS][13];//Naudojama anti-cheat..
                        */
                        if(tPlayerWeapons[slot] != 0)
                        {
                            if(PlayerWeapons[playerid][slot] != tPlayerWeapons[slot] || (PlayerWeaponAmmo[playerid][slot]+20) < tPlayerWeaponsAmmo[slot])
                            {
                                PlayerDB[playerid][PlayerGetsBan] = true;
                                ResetPlayerWeaponsEx(playerid);
                                new string[128];
                                SendClientMessage(playerid, RAUDONA, "• Buvai iðmestas ið serverio uþ nelegalius ginklus.");
                                format(string, 128, "• Tavo PING: %dms.", GetPlayerPing(playerid));
                                SendClientMessage(playerid, RAUDONA, string);
                                format(string, 128, "[Serveris] %s buvo iðmestas ið serverio uþ ginklø hack (negavo þaidime).", Vardas(playerid));
                                SendClientMessageToAll(RAUDONA, string);
                                Kick(playerid);
                                continue;
                            }
                        }
                    }
                }
            }
        }
    }
}
stock BanPlayer(playerid,Reason[],ByAntiCheat,AdministratorID,UsedCheatType)
{
    new query[100];
    new PlayerIP[16];
    GetPlayerIp(playerid, PlayerIP, 16);
    mysql_format(connectionHandle, query, 100, "SELECT NULL FROM `bans` WHERE `IP-Adress` = '%e';", PlayerIP);
    mysql_function_query(connectionHandle,query,true,"OnServerCheckInfoForBaning","isiii",playerid,Reason,ByAntiCheat,AdministratorID,UsedCheatType);
    return 1;
}
/*


Vardas[24]      IP-ADRESS       Prieþastis:                             TIPAS:                      GaliojimoPabaiga
                                                                        (0 - Acc,1 - IP,2 - Laiko)  (Tik su tipu ID:2)

Spirit_Jones    123.000.110     Ginklø hack (Serveris) [2015-02-06]     0                           0
*/
forward OnServerCheckInfoForBaning(playerid,Reason[],ByAntiCheat,AdministratorID,UsedCheatType);
public OnServerCheckInfoForBaning(playerid,Reason[],ByAntiCheat,AdministratorID,UsedCheatType)
{
    new rows = cache_get_row_count();
    if(ByAntiCheat == 1)
    {
        if(UsedCheatType == 1)//Ginklø hack..
        {
            switch(rows)
            {
                case 0:
                {
                    new string[128];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ nelegalius ginklus.");
                    format(string, 128, "• Tavo PING: %dms.", GetPlayerPing(playerid));
                    SendClientMessage(playerid, RAUDONA, string);
                    format(string, 128, "[Serveris] %s buvo uþblokuotas uþ ginklø hack (negavo þaidime).", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Ginklø hack (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
                case 1:
                {
                    new string[128];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ nelegalius ginklus.Kitas ban gavimas su ðiuo IP,bus IP ban.");
                    format(string, 128, "[Serveris] %s buvo uþblokuotas uþ ginklø hack (negavo þaidime).Kitas ban gavimas su ðiuo IP,bus IP ban.", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Ginklø hack (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
                case 2:
                {
                    new string[128];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ nelegalius ginklus.IP BAN.");
                    format(string, 128, "[Serveris] %s buvo uþblokuotas uþ ginklø hack (negavo þaidime).IP BAN.", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Ginklø hack (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `ipbans` (`IP-Adress`,`Reason`) VALUES ('%e','Ginklø hack (Serveris)');", PlayerIP);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
            }
        }
        else if(UsedCheatType == 2)//Ginklø hack El Rappido :dDD Ispanas busiu gal..
        {
            switch(rows)
            {
                case 0:
                {
                    new string[144];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ Rapid Fire/Auto-CBUG.");
                    format(string, 144, "• Tavo PING: %dms.", GetPlayerPing(playerid));
                    SendClientMessage(playerid, RAUDONA, string);
                    format(string, 144, "[Serveris] %s buvo uþblokuotas uþ Auto-CBUG/RAPID FIRE.", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Rapid Fire/Auto-CBUG (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
                case 1:
                {
                    new string[144];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ Rapid Fire/Auto-CBUG.Kitas ban gavimas su ðiuo IP,bus IP ban.");
                    format(string, 144, "[Serveris] %s buvo uþblokuotas uþ Rapid Fire/Auto-CBUG.Kitas ban gavimas su ðiuo IP,bus IP ban.", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Rapid Fire/Auto-CBUG (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
                case 2:
                {
                    new string[144];
                    SendClientMessage(playerid, RAUDONA, "• Buvai uþblokuotas uþ Rapid Fire/Auto-CBUG.IP BAN.");
                    format(string, 144, "[Serveris] %s buvo uþblokuotas uþ Rapid Fire/Auto-CBUG.IP BAN.", Vardas(playerid));
                    SendClientMessageToAll(RAUDONA, string);
                    SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                    SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                    new querystring[300];
                    new PlayerIP[16];
                    GetPlayerIp(playerid, PlayerIP, 16);
                    new years,month,day,hour,minute;
                    getdate(years, month, day);
                    gettime(hour, minute);
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', 'Rapid Fire/Auto-CBUG (Serveris) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,years,month,day,hour,minute);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    mysql_format(connectionHandle, querystring, 300, "INSERT INTO `ipbans` (`IP-Adress`,`Reason`) VALUES ('%e','Rapid Fire/Auto-CBUG (Serveris)');", PlayerIP);
                    mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                    SetTimerEx("DelayedKick", 1000, false, "d", playerid);
                }
            }
        }
    }
    else
    {
        switch(rows)
        {
            case 0:
            {
                new string[144];
                format(string, 144, "[ban] %s uþblokavo jus uþ: %s", Vardas(AdministratorID),Reason);
                SendClientMessage(playerid, GELTONA, string);
                format(string, 144, "[ban] %s uþblokavo %s uþ (%s) (PING: %i)", Vardas(AdministratorID),Vardas(playerid),Reason,GetPlayerPing(playerid));
                SendClientMessageToAll(GELTONA, string);
                SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                new querystring[300];
                new PlayerIP[16];
                GetPlayerIp(playerid, PlayerIP, 16);
                new years,month,day,hour,minute;
                getdate(years, month, day);
                gettime(hour, minute);
                mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', '%s (%s) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,Reason,Vardas(AdministratorID),years,month,day,hour,minute);
                mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                SetTimerEx("DelayedKick", 1000, false, "d", playerid);
            }
            case 1:
            {
                new string[144];
                format(string, 144, "[ban] %s uþblokavo jus uþ: %s.Kitas ban gavimas su ðiuo IP,bus IP ban.", Vardas(AdministratorID),Reason);
                SendClientMessage(playerid, GELTONA, string);
                format(string, 144, "[ban] %s uþblokavo %s uþ (%s) (PING: %i).Kitas ban gavimas su ðiuo IP,bus IP ban.", Vardas(AdministratorID),Vardas(playerid),Reason,GetPlayerPing(playerid));
                SendClientMessageToAll(GELTONA, string);
                SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                new querystring[300];
                new PlayerIP[16];
                GetPlayerIp(playerid, PlayerIP, 16);
                new years,month,day,hour,minute;
                getdate(years, month, day);
                gettime(hour, minute);
                mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', '%s (%s) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,Reason,Vardas(AdministratorID),years,month,day,hour,minute);
                mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                SetTimerEx("DelayedKick", 1000, false, "d", playerid);
            }
            case 2:
            {
                new string[144];
                format(string, 144, "[ban] %s uþblokavo jus uþ: %s.IP BAN.", Vardas(AdministratorID),Reason);
                SendClientMessage(playerid, GELTONA, string);
                format(string, 144, "[ban] %s uþblokavo %s uþ (%s) (PING: %i).IP BAN.", Vardas(AdministratorID),Vardas(playerid),Reason,GetPlayerPing(playerid));
                SendClientMessageToAll(GELTONA, string);
                SendClientMessage(playerid, GELTONA, "• Jeigu jûs manote,jog buvote uþblokuotas nepagrástai uþpildykite unban anketà forume: www.san-andreas.lt");
                SendClientMessage(playerid, GELTONA, "• Nepamirðkite pasidaryti nuotraukà su F8,ji bus reikalinga unban anketoje!");
                new querystring[300];
                new PlayerIP[16];
                GetPlayerIp(playerid, PlayerIP, 16);
                new years,month,day,hour,minute;
                getdate(years, month, day);
                gettime(hour, minute);
                mysql_format(connectionHandle, querystring, 300, "INSERT INTO `bans` (`Vardas`, `IP-Adress`, `Priezastis`, `Tipas`, `GaliojimoPabaiga`) VALUES ('%e', '%e', '%s (%s) [%d-%0d-%0d %0d:%0d ]', '0', '0');", Vardas(playerid),PlayerIP,Reason,Vardas(AdministratorID),years,month,day,hour,minute);
                mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                mysql_format(connectionHandle, querystring, 300, "INSERT INTO `ipbans` (`IP-Adress`,`Reason`) VALUES ('%e','%e');", PlayerIP,Reason);
                mysql_function_query(connectionHandle,querystring,false,"SendQuery","");
                SetTimerEx("DelayedKick", 1000, false, "d", playerid);
            }
        }
    }
    return 1;
}
forward OnCheckingPlayerBlocks(playerid);
public OnCheckingPlayerBlocks(playerid)
{
    if(cache_get_row_count() == 1)
    {
        new QueryString[128];
        mysql_format(connectionHandle, QueryString, 128, "SELECT `ID`,`Kiekis` FROM `atsiimtikreditus` WHERE `Nick` = '%e';", Vardas(playerid));
        mysql_function_query( connectionHandle, QueryString, true, "KredituAtsiimimas", "d", playerid);
        PlayerDB[playerid][BlokavimoTipas] = cache_get_row_int(0, 1);
        switch(PlayerDB[playerid][BlokavimoTipas])
        {
            case 0://NICK BAN
            {
                SendClientMessage(playerid,RAUDONA,"Jums uþdrausta lankytis ðiame serveryje!");
                PlayerDB[playerid][CantPlayBecouseOfBan] = true;
                new info[512];
                new Reason[144];
                cache_get_field_content(0, "Priezastis", Reason);
                format(info, 512, "{FFFFFF}Jums uþdrausta lankytis ðiame serveryje\nPrieþastis: {00FF00}%s\n{FFFFFF}Ar norite vël þaisti serveryje?\nTai jums kainuos 100 kreditø.\n{00FF00}Jûs turite %i kreditø", Reason,PlayerDB[playerid][Credits]);
                ShowPlayerDialog(playerid, 75, DIALOG_STYLE_MSGBOX, "{AFAFAF}UNBAN", info, "Taip", "Ne");
            }
            case 1:
            {
                new BlokavimoPabaiga = cache_get_field_content_int(0, "GaliojimoPabaiga");
                if(BlokavimoPabaiga <= gettime())
                {
                    PlayerDB[playerid][CantPlayBecouseOfBan] = false;
                    new query[200];
                    mysql_format(connectionHandle, query, 200, "DELETE FROM `bans` WHERE `Vardas` = '%e';", Vardas(playerid));
                    mysql_function_query(connectionHandle,query,false,"SendQuery","");
                }
                else
                {
                    SendClientMessage(playerid,RAUDONA,"Jums uþdrausta lankytis ðiame serveryje!");
                    PlayerDB[playerid][CantPlayBecouseOfBan] = true;
                    new info[512];
                    new Reason[144];
                    cache_get_field_content(0, "Priezastis", Reason);
                    new LeftHours = 0;
                    new LeftMins = 0;
                    BlokavimoPabaiga -= gettime();
                    while(BlokavimoPabaiga >= 3600)
                    {
                        LeftHours++;
                        BlokavimoPabaiga-=3600;
                    }
                    while(BlokavimoPabaiga >= 60)
                    {
                        BlokavimoPabaiga-=60;
                        LeftMins++;
                    }
                    if(BlokavimoPabaiga > 0)
                    {
                        LeftMins++;
                    }
                    format(info, 512, "{FFFFFF}Jums uþdrausta lankytis ðiame serveryje\nPrieþastis: {00FF00}%s\n{FFFFFF}Ar norite vël þaisti serveryje?\nTai jums kainuos 100 kreditø arba palaukite %i val. %i min.\n{00FF00}Jûs turite %i kreditø", Reason,LeftHours,LeftMins,PlayerDB[playerid][Credits]);
                    ShowPlayerDialog(playerid, 76, DIALOG_STYLE_MSGBOX, "{AFAFAF}UNBAN", info, "Taip", "Ne");
                }
            }
        }
    }
    else
    {
        PlayerDB[playerid][CantPlayBecouseOfBan] = false;
        if(PlayerDB[playerid][VIP] == 1 && PlayerDB[playerid][VIPLaikoPabaiga] > gettime())
        {
            SetPlayerColor(playerid, (0xFFCC00FF & 0xFFFFFF00));//ZALIA
        }
        if(PlayerDB[playerid][adminlvl] > 0)
        {
            if(PlayerDB[playerid][adminlvl] >= 4)
            {
                SetPlayerColor(playerid, (RAUDONA & 0xFFFFFF00));//
            }
            else
            {
                SetPlayerColor(playerid, (0x33CC00FF & 0xFFFFFF00));//ZALIA
            }
            switch(PlayerDB[playerid][adminlvl])
            {
                case 1:
                {
                    new string[100];
                    format(string, 100, "Administratorius [I] lygio {bff0a3}%s(%i) {00FF00}prisijungë.", Vardas(playerid),playerid);
                    SendClientMessageToAll(0x00FF00FF, string);
                }
                case 2:
                {
                    new string[100];
                    format(string, 100, "Administratorius [II] lygio {bff0a3}%s(%i) {00FF00}prisijungë.", Vardas(playerid),playerid);
                    SendClientMessageToAll(0x00FF00FF, string);
                }
                case 3:
                {
                    new string[100];
                    format(string, 100, "Administratorius [III] lygio {bff0a3}%s(%i) {00FF00}prisijungë.", Vardas(playerid),playerid);
                    SendClientMessageToAll(0x00FF00FF, string);
                }
                case 4:
                {
                    new string[100];
                    format(string, 100, "Administratorius [IV] lygio {bff0a3}%s(%i) {00FF00}prisijungë.", Vardas(playerid),playerid);
                    SendClientMessageToAll(0x00FF00FF, string);
                }
                case 5:
                {
                    new string[100];
                    format(string, 100, "{bff0a3}iRoad.LT {00FF00}savininkas {bff0a3}%s(%i) {00FF00}prisijungë.", Vardas(playerid),playerid);
                    SendClientMessageToAll(0x00FF00FF, string);
                }
            }
            SendClientMessage(playerid, GELTONA, "• Jûs esate administratorius, todël privalote laikytis administratoriø taisykliø, kurias rasite /taisykles.");
        }
    }
    return 1;
}
CMD:admin(playerid,params[])
{
    if(isnull(params))
    {
        SendClientMessage(playerid, -1, "Ðiuo metu serveryje prisijungæ administratoriai:");
        new count = 0;
        SendClientMessage(playerid, -1, "");
        new string[128];
        foreach(new i : Player)
        {
            if(PlayerDB[i][adminlvl] > 0)
            {
                switch(PlayerDB[i][adminlvl])
                {
                    case 1:
                    {
                        format(string, 128, "%d. {87D37C}%s(%i){90C695} I lygio. Padëjo: {87D37C}%i kartø", count+1,Vardas(i),i,PlayerDB[i][TimesHelped]);
                        SendClientMessage(playerid, 0x90C695FF, string);
                    }
                    case 2:
                    {
                        format(string, 128, "%d. {87D37C}%s(%i){90C695} II lygio. Padëjo: {87D37C}%i kartø", count+1,Vardas(i),i,PlayerDB[i][TimesHelped]);
                        SendClientMessage(playerid, 0x90C695FF, string);
                    }
                    case 3:
                    {
                        format(string, 128, "%d. {87D37C}%s(%i){90C695} III lygio. Padëjo: {87D37C}%i kartø", count+1,Vardas(i),i,PlayerDB[i][TimesHelped]);
                        SendClientMessage(playerid, 0x90C695FF, string);
                    }
                    case 4:
                    {
                        format(string, 128, "%d. {87D37C}%s(%i){90C695} IV lygio. Padëjo: {87D37C}%i kartø", count+1,Vardas(i),i,PlayerDB[i][TimesHelped]);
                        SendClientMessage(playerid, 0x90C695FF, string);
                    }
                    case 5:
                    {
                        format(string, 128, "%d. {87D37C}%s(%i){90C695} V lygio. Padëjo: {87D37C}%i kartø", count+1,Vardas(i),i,PlayerDB[i][TimesHelped]);
                        SendClientMessage(playerid, 0x90C695FF, string);
                    }
                }
                count++;
            }
        }
        format(string, 128, "• Iðviso prisijungusiø adminstratoriø ðiuo metu: {87D37C}%d{90C695}.", count);
        SendClientMessage(playerid, 0x90C695FF, string);
        SendClientMessage(playerid, 0x90C695FF, "*** Nepamirðkite kad kilus klausimams galite praðyti pagalbos administratoriø {87D37C}/admin [tekstas].");
    }
    else
    {
        if(PlayerDB[playerid][MutedPlayer])
        {
            ErrorMsg(playerid,"• Jûs esate nutildytas, todël raðyti negalite.");
            return 1;
        }
        if(PlayerDB[playerid][PlayerCanAskAt] <= gettime())
        {
            PlayerDB[playerid][PlayerNeedAnswer] = true;
            PlayerDB[playerid][PlayerAskedHelpAt] = gettime();
            PlayerDB[playerid][PlayerCanAskAt] = gettime() + 60;
            new string[128];
            format(string, 128, "• %s(%i) administratoriams(/padeti %i): %s", Vardas(playerid),playerid,playerid,params);
            foreach(new i : Player)
            {
                if(PlayerDB[i][adminlvl] > 0 || i == playerid)
                {
                    SendClientMessage(i, 0x85ee97FF, string);
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Ðiuo metu praðyti pagalbos negalite. Praðome palaukti,kol á jûsø praðymà bus atsakyta.");
        }
    }
    return 1;
}
CMD:vip(playerid,params[])
{
    if(isnull(params))
    {
        SendClientMessage(playerid, -1, "Prisijungæ VIP'ai:");
        new count = 1;
        foreach(new i : Player)
        {
            if(PlayerDB[i][VIP] == 1)
            {
                new string[128];
                format(string, 128, "%i. %s", count,Vardas(i));
                SendClientMessage(playerid, Bright_YELLOW, string);
                count++;
            }
        }
    }
    else
    {
        if(PlayerDB[playerid][MutedPlayer])
        {
            ErrorMsg(playerid,"• Jûs esate nutildytas,todël raðyti negalite.");
            return 1;
        }
        if(PlayerDB[playerid][PlayerCanWVIPAt] > gettime())
        {
            ErrorMsg(playerid,"• VIP'ams galima raðyti tik kas 10 sekundþiø.");
            return 1;
        }
        PlayerDB[playerid][PlayerCanWVIPAt] = gettime()+10;
        new string[128];
        format(string, 128, "• %s sako vipams: %s", Vardas(playerid),params);
        foreach(new i : Player)
        {
            if(PlayerDB[i][VIP] == 1 || i == playerid)
            {
                SendClientMessage(i, 0x34A934FF, string);
            }
        }
    }
    return 1;
}
CMD:kreditai(playerid,params[])
{
    ShowPlayerCreditsMeniu(playerid);
    return 1;
}
CMD:skydas(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(PlayerDB[playerid][SuSkydu] == 0)
        {
            SetPlayerAttachedObject(playerid,0,18637,3,0.293999,-0.216000,-0.026000,-3.700000,0.000000,78.100021,1.000000,1.000000,1.000000);//Skydas
            SendClientMessage(playerid, ZALIA, "• Skydas uþdëtas sëkmingai");
            PlayerDB[playerid][SuSkydu] = 1;
        }
        else
        {
            PlayerDB[playerid][SuSkydu] = 0;
            RemovePlayerAttachedObject(playerid, 0);
            ErrorMsg(playerid,"• Skydas nuimtas sëkmingai");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}
CMD:panaikinti(playerid,params[])
{
    for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
        if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
    }
    return 1;
}
CMD:unban(playerid,params[])
{
    if(PlayerDB[playerid][UnBanPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nickname[24];
        if(sscanf(params, "s[24]", nickname))
        {
            UsageMessage(playerid,"• Atblokuoti þaidëjà pagal V_P: /unban [V_P].");
        }
        else
        {
            new query[400];
            mysql_format(connectionHandle, query, 400, "DELETE FROM `bans` WHERE `Vardas` = '%e';", nickname);
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
            SendClientMessage(playerid, -1, "• Jei teisingai nurodëte þaidëjo vardà jis tuojau bus atblokuotas.");
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:unbanip(playerid,params[])
{
    if(PlayerDB[playerid][UnBanPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new IPAdressas[16];
        if(sscanf(params, "s[16]", IPAdressas))
        {
            UsageMessage(playerid,"• Atblokuoti þaidëjo IP: /unbanip [IP ADRESSAS].");
        }
        else
        {
            new query[400];
            mysql_format(connectionHandle, query, 400, "DELETE FROM `ipbans` WHERE `IP-Adress` = '%e';", IPAdressas);
            mysql_function_query(connectionHandle,query,false,"SendQuery","");
            SendClientMessage(playerid, -1, "• Jei teisingai nurodëte IP jis tuojau bus atblokuotas.");
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:baninfoip(playerid,params[])
{
    if(PlayerDB[playerid][UnBanPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new IPAdressas[16];
        if(sscanf(params, "s[16]", IPAdressas))
        {
            UsageMessage(playerid,"• Suþinoti IP blokavimo prieþastá: /baninfoip [IP ADRESSAS].");
        }
        else
        {
            new query[400];
            mysql_format(connectionHandle, query, 400, "SELECT * FROM `ipbans` WHERE `IP-Adress` = '%e' LIMIT 1;", IPAdressas);
            mysql_function_query(connectionHandle,query,true,"OnPlayerRequestCheckBanInfoIP","d",playerid);

        }
        return 1;
    }
    else
    {
        return 0;
    }
}

CMD:baninfo(playerid,params[])
{
    if(PlayerDB[playerid][UnBanPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nick[24];
        if(sscanf(params, "s[24]", nick))
        {
            UsageMessage(playerid,"• Informacija apie þaidëjo blokavimà: /baninfo [V_P]");
        }
        else
        {
            if(IsValidNickName(nick) == 0)
            {
                ErrorMsg(playerid,"• Blogas V_P.");
            }
            else
            {
                new query[128];
                mysql_format(connectionHandle, query, 128, "SELECT `Priezastis`,`Tipas`,`GaliojimoPabaiga` FROM `bans` WHERE `Vardas` = '%e' LIMIT 1;", nick);
                mysql_function_query(connectionHandle,query,true,"OnPlayerRequestCheckBanInfo","d",playerid);
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
forward OnPlayerRequestCheckBanInfo(playerid);
public OnPlayerRequestCheckBanInfo(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}INFO", "{FFFFFF}Þaidëjas: {5BC236}Neuþblokuotas\n", "Gerai", "");
    }
    else
    {
        if(cache_get_row_int(0, 1) == 0)
        {
            new info[256];
            new koment[144];
            cache_get_row(0, 0, koment);
            format(info,sizeof(info),"{FFFFFF}Þaidëjas: {CC0000}Uþblokuotas \t{FFFFFF}Komentaras: {FFC200}%s",koment);
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}INFO", info, "Gerai", "");
        }
        else
        {
            if(cache_get_row_int(0, 2) > gettime())
            {
                new info[256];
                new koment[144];
                cache_get_row(0, 0, koment);
                format(info,sizeof(info),"{FFFFFF}Þaidëjas: {CC0000}Uþblokuotas \t{FFFFFF}Komentaras: {FFC200}%s",koment);
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}INFO", info, "Gerai", "");
            }
            else
            {
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}INFO", "{FFFFFF}Þaidëjas: {5BC236}Neuþblokuotas\n", "Gerai", "");
            }
        }
    }
    return 1;
}


forward OnPlayerRequestCheckBanInfoIP(playerid);
public OnPlayerRequestCheckBanInfoIP(playerid)
{
    if(cache_get_row_count() == 1)
    {
        new info[250];
        new Data1[16];
        new Data2[144];
        cache_get_row(0, 0, Data1);
        cache_get_row(0, 1, Data2);
        format(info, 250, "Uþblokuotas IP adresas: %s\nPrieþastis: (%s).", Data1,Data2);
        ShowPlayerDialog(playerid, 8,DIALOG_STYLE_MSGBOX, "{AFAFAF}IP BAN INFO", info, "Gerai","");
    }
    else
    {
        ErrorMsg(playerid,"• Ðis IP adresas nëra blokuotas.");
    }
    return 1;
}
CMD:przkom(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        SendClientMessage(playerid, GELTONA, "• Privilegijuotø þaidëjø priþiûrëtojo komandos:");
        SendClientMessage(playerid, -1, "••• Duoti vienà ispëjimà nusiþengusiam administratoriui: /duotiaispejima [V_P/ID] [Prieþastis]");
        SendClientMessage(playerid, -1, "••• Duoti ispëjimà nusiþengusiam administratoriui(neprisijungusiam): /duotiaispejimaoff [V_P] [Prieþastis]");
        SendClientMessage(playerid, -1, "••• Duoti vienà ispëjimà nusiþengusiam VIP nariui: /duotivispejima [V_P/ID] [Prieþastis]");
        SendClientMessage(playerid, -1, "••• Duoti ispëjimà nusiþengusiam VIP nariui(neprisijungusiam): /duotivispejimaoff [V_P] [Prieþastis]");
        SendClientMessage(playerid, -1, "••• Nuimti vienà Admin áspëjimà: /naispejima [Vardas_Pavardë/ID].");
        SendClientMessage(playerid, -1, "••• Nuimti vienà Admin áspëjimà atsijungusiam: /naispejimaoff [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "••• Nuimti vienà VIP áspëjimà: /nvispejima [Vardas_Pavardë/ID].");
        SendClientMessage(playerid, -1, "••• Nuimti vienà VIP áspëjimà atsijungusiam: /nvispejimaoff [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "");
    }
    if(PlayerDB[playerid][UnBanPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        SendClientMessage(playerid, GELTONA, "• Unban priþiûrëtojo komandos:");
        SendClientMessage(playerid, -1, "••• Atblokuoti þaidëjà pagal V_P: /unban [Tikslus þaidëjo V_P].");
        SendClientMessage(playerid, -1, "••• Atblokuoti þaidëjo IP: /unbanip [Tikslus IP ADRESSAS].");
        SendClientMessage(playerid, -1, "••• Suþinoti IP blokavimo prieþastá: /baninfoip [Tikslus IP ADRESSAS].");
        SendClientMessage(playerid, -1, "••• Informacija apie vartotojo blokavimà: /baninfo [Tikslus þaidëjo V_P].");
        SendClientMessage(playerid, -1, "");
    }
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        SendClientMessage(playerid, GELTONA, "• Direktoriø priþiûrëtojo komandos:");
        SendClientMessage(playerid, -1, "••• Darbø su pakvietimais sàraðas: /darbuidai.");
        SendClientMessage(playerid, -1, "••• Uþdëti direktoriø: /udirektoriu [V_P/ID] [Darbo ID].");
        SendClientMessage(playerid, -1, "••• Uþdëti direktoriø: /udirektoriuoff [Darbo ID] [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "••• Nuimti darbo sutartá atsijungusiam þaidëjui: /nuimtisutartioff [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "••• Nuimti darbo sutartá: /nuimtisutarti [Vardas_Pavardë/ID].");
        SendClientMessage(playerid, -1, "••• Ispëti direktoriø: /ddispejima [Vardas_Pavardë tikslus] [Prieþastis].");

        SendClientMessage(playerid, -1, "••• Skelbti praneðimà: /dp [Praneðimas].");

        SendClientMessage(playerid, -1, "");
    }
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        SendClientMessage(playerid, GELTONA, "• Lyderiø priþiûrëtojo komandos:");
        SendClientMessage(playerid, -1, "••• Lucchese Mafija - 1  Genovese - 2.");
        SendClientMessage(playerid, -1, "••• Uþdëti mafijos lyderá: /ulyderi [V_P/ID] [1 / 2].");
        SendClientMessage(playerid, -1, "••• Uþdëti mafijos lyderá offline: /ulyderioff [1 / 2] [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "••• Nuimti darbo sutartá atsijungusiam þaidëjui: /nuimtisutartioff [Vardas_Pavardë].");
        SendClientMessage(playerid, -1, "••• Nuimti darbo sutartá: /nuimtisutarti [Vardas_Pavardë/ID].");
        SendClientMessage(playerid, -1, "••• Ájungti bendrà mafijø racijà: /ijungtimr.");
        SendClientMessage(playerid, -1, "••• Iðjungti bendrà mafijø racijà: /isjungtimr.");
        SendClientMessage(playerid, -1, "••• Ispëti direktoriø: /ddispejima [Vardas_Pavardë tikslus] [Prieþastis].");
        SendClientMessage(playerid, -1, "");
    }
    return 1;
}

CMD:priziuretojai(playerid,params[])
{
    mysql_function_query(connectionHandle,"SELECT `Name`,`DirektoriuPriziuretojas`,`UnBanPriziuretojas`,`PrivPriziuretojas`,`LyderiuPriziuretojas`,`SiandienZaista`,`DatePlayerBecamePriz` FROM `players` WHERE `DirektoriuPriziuretojas` = 1 OR `UnBanPriziuretojas` = 1 OR `PrivPriziuretojas` = 1 OR `LyderiuPriziuretojas` = 1;",true,"OnPlayerRequestListOfPriziur","d",playerid);
    return 1;
}
forward OnPlayerRequestListOfPriziur(playerid);
public OnPlayerRequestListOfPriziur(playerid)
{
    new rows = cache_get_row_count();
    if(rows == 0)
    {
        ErrorMsg(playerid,"• Serveris neturi priþiûrëtojø.");
    }
    else
    {
        new DirPriziuretojai,LydPriziuretojai,PrivPriziuretojai,UnbanPriziuretojai;

        new DirPrizTxt[400];
        new LydPrizTxt[400];
        new PrivPrizTxt[400];
        new UnbanPrizTxt[400];
        format(DirPrizTxt, 400, "{47AB3F}Direktoriø priþiûrëtojas(-ai):\n\n");
        format(LydPrizTxt, 400, "{47AB3F}Lyderiø priþiûrëtojas(-ai):\n\n");
        format(PrivPrizTxt, 400, "{47AB3F}Administratoriø ir VIP priþiûrëtojas(-ai):\n\n");
        format(UnbanPrizTxt, 400, "{47AB3F}Unban priþiûrëtojas(-ai):\n\n");

        for(new row = 0;row<rows;row++)
        {
            new Nick[24];
            cache_get_row(row, 0, Nick);
            new Date[12];
            cache_get_row(row, 6, Date);
            if(cache_get_row_int(row, 1) == 1)
            {
                DirPriziuretojai++;
                new PrizID;
                if(!sscanf(Nick, "u", PrizID))
                {
                    if(IsPlayerConnected(PrizID))
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {00FF00}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(PrizID),PlayerDB[PrizID][SiandienZaista],Date);
                        strcat(DirPrizTxt, string);
                        if(PlayerDB[PrizID][AfkState] == true)
                        {
                            strcat(DirPrizTxt, ", {FF0000}AFK\n");
                        }
                        else
                        {
                            strcat(DirPrizTxt, ". \n");
                        }
                    }
                    else
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n", Nick,cache_get_row_int(row, 5),Date);
                        strcat(DirPrizTxt, string);
                    }
                }
            }
            if(cache_get_row_int(row, 4) == 1)
            {
                LydPriziuretojai++;
                new PrizID;
                if(!sscanf(Nick, "u", PrizID))
                {
                    if(IsPlayerConnected(PrizID))
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {00FF00}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(PrizID),PlayerDB[PrizID][SiandienZaista],Date);
                        strcat(LydPrizTxt, string);
                        if(PlayerDB[PrizID][AfkState] == true)
                        {
                            strcat(LydPrizTxt, ", {FF0000}AFK\n");
                        }
                        else
                        {
                            strcat(LydPrizTxt, ". \n");
                        }
                    }
                    else
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n", Nick,cache_get_row_int(row, 5),Date);
                        strcat(LydPrizTxt, string);
                    }
                }
            }
            if(cache_get_row_int(row, 3) == 1)
            {
                PrivPriziuretojai++;
                new PrizID;
                if(!sscanf(Nick, "u", PrizID))
                {
                    if(IsPlayerConnected(PrizID))
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {00FF00}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(PrizID),PlayerDB[PrizID][SiandienZaista],Date);
                        strcat(PrivPrizTxt, string);
                        if(PlayerDB[PrizID][AfkState] == true)
                        {
                            strcat(PrivPrizTxt, ", {FF0000}AFK\n");
                        }
                        else
                        {
                            strcat(PrivPrizTxt, ". \n");
                        }
                    }
                    else
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n", Nick,cache_get_row_int(row, 5),Date);
                        strcat(PrivPrizTxt, string);
                    }
                }
            }
            if(cache_get_row_int(row, 2) == 1)
            {
                UnbanPriziuretojai++;
                new PrizID;
                if(!sscanf(Nick, "u", PrizID))
                {
                    if(IsPlayerConnected(PrizID))
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {00FF00}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(PrizID),PlayerDB[PrizID][SiandienZaista],Date);
                        strcat(UnbanPrizTxt, string);
                        if(PlayerDB[PrizID][AfkState] == true)
                        {
                            strcat(UnbanPrizTxt, ", {FF0000}AFK\n");
                        }
                        else
                        {
                            strcat(UnbanPrizTxt, ". \n");
                        }
                    }
                    else
                    {
                        new string[150];
                        format(string, 150, "{FFFFFF}• {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n", Nick,cache_get_row_int(row, 5),Date);
                        strcat(UnbanPrizTxt, string);
                    }
                }
            }
        }
        new info[2048];
        strcat(info,DirPrizTxt);
        strcat(info, "\n");
        strcat(info,LydPrizTxt);
        strcat(info, "\n");
        strcat(info,PrivPrizTxt);
        strcat(info, "\n");
        strcat(info,UnbanPrizTxt);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Serverio priþiûrëtojai", info, "Gerai", "");
    }
    return 1;
}

CMD:imti(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 4)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                {
                    new id;
                    if(sscanf(params, "u", id))
                    {
                        UsageMessage(playerid,"• Imti pinigus ið keleivio: /imti [V_P/ID].");
                    }
                    else
                    {
                        if(IsPlayerConnected(id))
                        {
                            if(id == playerid)
                            {
                                ErrorMsg(playerid,"• Ið savæs imti pinigø negalite.");
                            }
                            else
                            {
                                if(IsPlayerInVehicle(id, vehicleid))
                                {
                                    if(PlayerDB[id][ImamiPinigai] == true)
                                    {
                                        ErrorMsg(playerid,"• Ið ðio þaidëjo jau imami pinigai.");
                                    }
                                    else
                                    {
                                        GetPlayerPos(id, PlayerDB[id][PaslauguAtskaitosX],PlayerDB[id][PaslauguAtskaitosY],PlayerDB[id][PaslauguAtskaitosZ]);
                                        TextDrawShowForPlayer(id, Taksometras1);
                                        TextDrawShowForPlayer(id, Taksometras2);
                                        TextDrawShowForPlayer(id, Taksometras3);
                                        TextDrawShowForPlayer(id, Taksometras4[id]);
                                        TextDrawShowForPlayer(id, Taksometras5[id]);
                                        PlayerDB[id][ImamiPinigai] = true;
                                        new string[144];
                                        format(string, 144, "• Nusprendëte imti pinigus ið %s(%i)", Vardas(id),id);
                                        SendClientMessage(playerid, ZALIA, string);
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Nurodytas þaidëjas nesëdi jûsø maðinoje.");
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Maðina neturi taksometro.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Turite bûti maðinos vairuotojas.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Privalote bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik taksistams.");
    }
    return 1;
}
stock GetVehicleDriver(vehicleid)
{
    for(new i=0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                {
                    return i;
                }
            }
        }
    }
    return -1;
}
CMD:taxi(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 4)
    {
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleid][VehicleWithOwner] == true && VehicleDB[vehicleid][VehicleOwnerID] == playerid)
            {
                switch(GetVehicleModel(vehicleid))
                {
                    case 602:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.499999, 0.759999, 0.000000, 0.000000, 0.000000); //Object Model: 19308 |
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 477:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.504999, 0.799999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 562:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.389999, 0.849999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 559:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.369999, 0.814999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 560:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.269999, 0.909999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 405:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.404999, 0.844999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 402:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.519999, 0.839999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 565:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.708499, 0.774999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 561:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.303500, 0.904999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 558:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.548499, 0.944999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 550:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.418500, 0.789999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 551:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.418500, 0.979999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 400:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.418500, 0.904999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 534:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.418500, 0.719999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 491:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.688499, 0.809999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 419:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.563499, 0.769999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 489:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.113500, 1.179999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 479:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.433500, 1.064999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 507:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.528499, 0.879999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 418:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.528499, 1.119999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 458:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.528499, 0.804999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 426:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.773499, 0.924999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 526:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.378500, 0.749999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 527:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.188500, 0.954999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 516:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.188500, 0.929999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 411:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.188500, 0.779999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 451:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.543499, 0.669999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 421:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.413500, 0.789999, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    case 579:
                    {
                        if(VehicleDB[vehicleid][VehicleWithTaxometer] == true)
                        {
                            DestroyObject(VehicleDB[vehicleid][VehicleTaxometerObjectID]);
                            SendClientMessage(playerid, RAUDONA, "• Taxi þenklas nuimtas.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = false;
                        }
                        else
                        {
                            VehicleDB[vehicleid][VehicleTaxometerObjectID] = CreateObject(19308, 5000, 5000, 5000, 0, 0, 0);
                            AttachObjectToVehicle(VehicleDB[vehicleid][VehicleTaxometerObjectID], vehicleid, 0.000000, -0.413500, 1.329998, 0.000000, 0.000000, 0.000000);
                            SendClientMessage(playerid, ZALIA, "• Sëkmingai uþsidëjote Taxi þenklà ant maðinos,dabar galite veþioti keleivius su nuosava maðina.");
                            VehicleDB[vehicleid][VehicleWithTaxometer] = true;
                        }
                    }
                    default:
                    {
                        ErrorMsg(playerid,"• Blogas maðinos modelis.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði transporto priemonë turi priklausyti jums.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite vairuoti maðinà.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik taksistams.");
    }
    return 1;
}
CMD:ant(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(PlayerDB[playerid][PlayerSpectatesOther] == true)
        {
            ErrorMsg(playerid,"• Naudojantis þaidëjø prieþiûros komandomis ðios komandos naudoti negalima.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Norëdami naudotis ðia komanda,turite iðlipti ið maðinos.");
            return 1;
        }
        if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
        {
            ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas.");
            return 1;
        }
  		if(IsPlayerInWarZone(playerid))
        {
			ErrorMsg(playerid,"• Jûs esate karo zonoje.");
   			return 1;
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Surakinti/Atrakinti þaidëjà: /ant [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(playerid == id)
                {
                    ErrorMsg(playerid,"• Savæs neareðtuok.");
                    return 1;
                }
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 6, Cords[0], Cords[1], Cords[2]))
                {
                    if(PlayerDB[id][Suristas] == true)
                    {
                        PlayerDB[id][Suristas] = false;
                        SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
                        TogglePlayerControllable(id, true);
                        new string[128];
                        format(string, 128, "Jus iðlaisvino: {37DB46}%s", Vardas(playerid));
                        SendClientMessage(id, 0xFD0005FFF, string);
                        format(string, 128, "• %s iðlaisvinau %s", Vardas(playerid),Vardas(id));
                        foreach(new i : Player)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                            {
                                SendClientMessage(i, 0xE3BA24FF, string);
                            }
                        }
                    }
                    else if(PlayerDB[id][Surakintas] == false)
                    {
                        SetPlayerSpecialAction(id,SPECIAL_ACTION_CUFFED);
                        SetPlayerAttachedObject(id,0,19418,5,0.016000,0.032000,0.025000,17.500005,-10.099991,-48.099990,1.0,1.0,1.0);
                        TogglePlayerControllable(id, false);
                        PlayerDB[id][Surakintas] = true;
                        new string[128];
                        format(string, 128, "Jus surakino: {33DD46}%s", Vardas(playerid));
                        SendClientMessage(id, 0x39A62FFF, string);
                        format(string, 128, "• %s surakinau %s", Vardas(playerid),Vardas(id));
                        foreach(new i : Player)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                            {
                                SendClientMessage(i, 0xE3BA24FF, string);
                            }
                        }
                    }
                    else
                    {
                        PlayerDB[id][Surakintas] = false;
                        SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
                        RemovePlayerAttachedObject(id, 0);
                        TogglePlayerControllable(id, true);
                        new string[128];
                        format(string, 128, "Jus paleido: {37DB46}%s", Vardas(playerid));
                        SendClientMessage(id, 0xFD0005FFF, string);
                        format(string, 128, "• %s atrakinau %s", Vardas(playerid),Vardas(id));
                        foreach(new i : Player)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                            {
                                SendClientMessage(i, 0xE3BA24FF, string);
                            }
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}
encode_tires(tires1, tires2, tires3, tires4)
{
    return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}
stock CreateSpikes(playerid,Float:X,Float:Y,Float:Z,Float:R,VirtualW,Interior)
{
    new tmpObjectID = CreateDynamicObject(2899, X, Y, Z, 0, 0, R, VirtualW, Interior);
    SpygliaiInfo[playerid][SpygliaiX] = X;
    SpygliaiInfo[playerid][SpygliaiY] = Y;
    SpygliaiInfo[playerid][SpygliaiZ] = Z;
    SpygliaiInfo[playerid][SpygliaiPadeti] = true;
    SpygliaiInfo[playerid][SpygliuObjektas] = tmpObjectID;
    new string[100];
    format(string, 100, "• %s: Apvaþiuokite kliûtá", Vardas(playerid));
    SpygliaiInfo[playerid][SpygliuLabel] = CreateDynamic3DTextLabel(string, PILKA, X,Y,Z+0.25, 25, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VirtualW, Interior);
    return tmpObjectID;
}
CMD:dzinute(playerid,params[])
{
    switch(PlayerDB[playerid][Job])
    {
        case 1..DARBU_SKAICIUS:
        {
            if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
            {
                if(isnull(params))
                {
                    new query[144];
                    mysql_format(connectionHandle, query, 144, "SELECT `Zinute` FROM `direktoriuzinutes` WHERE `DarboID` = '%i' LIMIT 1;", PlayerDB[playerid][Job]);
                    mysql_function_query(connectionHandle,query,true,"OnPlayerRequestDirectorMessage","d",playerid);
                }
                else
                {
                    if(strlen(params) < 3)
                    {
                        ErrorMsg(playerid,"• Þinutës ilgis turi bûti bent 3 simboliai.");
                    }
                    else
                    {
                        new query[512];
                        mysql_format(connectionHandle, query, 512, "UPDATE `direktoriuzinutes` SET `Zinute` = '%e' WHERE `DarboID` = '%i';", params,PlayerDB[playerid][Job]);
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                        SendClientMessage(playerid, ZALIA, "• Þinutë sëkmingai atnaujinta.");
                        cmd_dzinute(playerid,"");
                    }
                }
            }
            else
            {
                new query[144];
                mysql_format(connectionHandle, query, 144, "SELECT `Zinute` FROM `direktoriuzinutes` WHERE `DarboID` = '%i' LIMIT 1;", PlayerDB[playerid][Job]);
                mysql_function_query(connectionHandle,query,true,"OnPlayerRequestDirectorMessage","d",playerid);
            }
        }
        default:
        {
            ErrorMsg(playerid,"• Privalote dirbti darbe su pakvietimu.");
        }
    }
    return 1;
}
forward OnPlayerRequestDirectorMessage(playerid);
public OnPlayerRequestDirectorMessage(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Ávyko klaida, praðome susisiekti su serverio administracija.");
    }
    else
    {
        new info[512];
        cache_get_row(0, 0, info);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{FFFFFF}Svarbi direktoriaus þinutë", info, "Gerai","");
    }
    return 1;
}
CMD:premija(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToGiveBonuses] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite dalinti premijas.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        new kiekis;
        if(sscanf(params, "i", kiekis))
        {
            UsageMessage(playerid,"• Iðdalinti premijas aplink esantiems darbuotojams: /premija [Kiekis].");
        }
        else
        {
            if(kiekis > DarboInformacija[JobIDToWorkWith][DarboFondas])
            {
                ErrorMsg(playerid,"• Darbo fonde tiek pinigø nëra.");
                cmd_dfondas(playerid,"");
            }
            else if(kiekis < 1000)
            {
                ErrorMsg(playerid,"• Dalinate per maþà sumà.");
            }
            else
            {
                new count;
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                        {
                            count++;
                        }
                    }
                }
                if(count == 1)
                {
                    ErrorMsg(playerid,"• Prie jûsø yra tik vienas firmos darbuotojas.");
                }
                else
                {
                    if(kiekis % count == 0)
                    {
                        new string[128];
                        format(string, 128, "** Gavote ið direktoriaus/pavaduotojo: %i €.",  kiekis / count);
                        foreach(new i : Player)
                        {
                            if(PlayerDB[i][Job] == JobIDToWorkWith)
                            {
                                if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                                {
                                    PlayerDB[i][MoneyInPocket]+= kiekis / count;
                                    SendClientMessage(i, ZALIA, string);
                                }
                            }
                        }
                        new query[250];
                        mysql_format(connectionHandle, query, 250, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Iðdalintos premijos %i þaidëjams viso: %i €.');", JobIDToWorkWith,count,kiekis);
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                        DarboInformacija[JobIDToWorkWith][DarboFondas]-=kiekis;
                    }
                    else
                    {
                        kiekis = kiekis - (kiekis % count);
                        new string[128];
                        format(string, 128, "** Gavote ið direktoriaus/pavaduotojo: %i €.",  kiekis / count);
                        foreach(new i : Player)
                        {
                            if(PlayerDB[i][Job] == JobIDToWorkWith)
                            {
                                if(IsPlayerInRangeOfPoint(i, 15, Cords[0], Cords[1], Cords[2]))
                                {
                                    PlayerDB[i][MoneyInPocket]+= kiekis / count;
                                    SendClientMessage(i, ZALIA, string);
                                }
                            }
                        }
                        new query[250];
                        mysql_format(connectionHandle, query, 250, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Iðdalintos premijos %i þaidëjams viso: %i €.');", JobIDToWorkWith,count,kiekis);
                        mysql_function_query(connectionHandle,query,false,"SendQuery","");
                        DarboInformacija[JobIDToWorkWith][DarboFondas]-= kiekis;
                    }
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai iðdalinote premijas.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
CMD:premijav(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(PlayerDB[playerid][Direktorius] <= 0)
        {
            if(PavaduotojaiNustatymai[PlayerDB[playerid][Pavaduotojas]][PavRightToGiveBonuses] == 0)
            {
                ErrorMsg(playerid,"• Jûs,kaip pavaduotojas,neturite teisës dalinti premijas.");
                return 1;
            }
        }
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        new kiekis;
        if(sscanf(params, "i", kiekis))
        {
            UsageMessage(playerid,"• Iðdalinti premijas visiems darbuotojams: /premijav [Kiekis].");
        }
        else
        {
            if(kiekis > DarboInformacija[JobIDToWorkWith][DarboFondas])
            {
                ErrorMsg(playerid,"• Darbo fonde tiek pinigø nëra.");
                cmd_dfondas(playerid,"");
            }
            else if(kiekis < 1000)
            {
                ErrorMsg(playerid,"• Dalinate per maþà sumà.");
            }
            else
            {
                new count;
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith && PlayerDB[i][Loaded] == 1)
                    {
                        count++;
                    }
                }
                if(kiekis % count == 0)
                {
                    new string[128];
                    format(string, 128, "** Gavote ið direktoriaus/pavaduotojo: %i €.",  kiekis / count);
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == JobIDToWorkWith && PlayerDB[i][Loaded] == 1)
                        {
                            PlayerDB[i][MoneyInPocket]+=kiekis / count;
                            SendClientMessage(i, ZALIA, string);
                        }
                    }
                    DarboInformacija[JobIDToWorkWith][DarboFondas]-=kiekis;
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai iðdalinote premijas.");
                    new query[250];
                    mysql_format(connectionHandle, query, 250, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Iðdalintos premijos %i þaidëjams viso: %i €.');", JobIDToWorkWith,count,kiekis);
                    mysql_function_query(connectionHandle,query,false,"SendQuery","");
                }
                else
                {
                    kiekis = kiekis - (kiekis % count);
                    new string[128];
                    format(string, 128, "** Gavote ið direktoriaus/pavaduotojo: %i €.",  kiekis / count);
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][Job] == JobIDToWorkWith && PlayerDB[i][Loaded] == 1)
                        {
                            PlayerDB[i][MoneyInPocket]+=kiekis / count;
                            SendClientMessage(i, ZALIA, string);
                        }
                    }
                    DarboInformacija[JobIDToWorkWith][DarboFondas]-=kiekis;
                    SendClientMessage(playerid, ZALIA, "• Sëkmingai iðdalinote premijas.");
                    new query[250];
                    mysql_format(connectionHandle, query, 250, "INSERT INTO `distorijos` (`DARBOID`,`Informacija`) VALUES ('%d','Iðdalintos premijos %i þaidëjams viso: %i €.');", JobIDToWorkWith,count,kiekis);
                    mysql_function_query(connectionHandle,query,false,"SendQuery","");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
CMD:darbuotojai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new info[1024];
        new count = 0;
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        switch(JobIDToWorkWith)
        {
            case 1:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][BaudosTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }

            case 2:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Pagydimai %d | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][PagydimaiTotal],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 3..5:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 6:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][BaudosTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 7..8:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 9:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][BaudosTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 10:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][AtvykimaiTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 11:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][BaudosTotal],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
            case 21:
            {
                foreach(new i : Player)
                {
                    if(PlayerDB[i][Job] == JobIDToWorkWith)
                    {
                        if(count > 0)
                        {
                            strcat(info, "\n");
                        }
                        count++;
                        new string[144];
                        format(string, 144, "%i. %s Prisijungë %s | Ðiandien %dmin | Nuveþimai: %i | Priimtas %s | Rangas (%i) | Áspëjimai %i",
                            count,Vardas(i),PlayerDB[i][PrisijungimoData],PlayerDB[i][SiandienZaista],PlayerDB[i][NuveztiKroviniai],PlayerDB[i][DarboPradziosData],PlayerDB[i][Rangas],PlayerDB[i][JobWarnings]);
                        SendClientMessage(playerid, GELTONA, string);
                        strcat(info, string);
                    }
                }
                if(count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Prisijungæ darbuotojai", info, "Gerai", "");
                }
                else
                {
                    SendClientMessage(playerid, RAUDONA, "• Nëra prisijungusiø darbuotojø.");
                }
            }
        }
    }

    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
CMD:visidarbuotojai(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
        new JobIDToWorkWith;
        if(PlayerDB[playerid][Direktorius] > 0)
        {
            JobIDToWorkWith = PlayerDB[playerid][Direktorius];
        }
        else
        {
            JobIDToWorkWith = PlayerDB[playerid][Pavaduotojas];
        }
        new SQLstring[256];
        mysql_format(connectionHandle, SQLstring, 256, "SELECT `Name`, `Rangas`, `AtvykimaiTotal`, `BaudosTotal`, `SiandienZaista`,`PrisijungimoData`,`JobWarnings`,`DarboPradziosData`,`PagydimaiTotal`,`NuveztiKroviniai` FROM `players` WHERE `Job` = '%i';", JobIDToWorkWith);
        mysql_function_query(connectionHandle,SQLstring,true,"OnLeadRequestHisWorkersInfo","dd",playerid,JobIDToWorkWith);
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
forward OnLeadRequestHisWorkersInfo(playerid,JobIDToWorkWith);
public OnLeadRequestHisWorkersInfo(playerid,JobIDToWorkWith)
{
    if(cache_get_row_count() == 0)
    {
        SendClientMessage(playerid, RAUDONA, "• Darbuotojø nëra.");
    }
    else
    {

        switch(JobIDToWorkWith)
        {
            case 1:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }

            case 2:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Pagydimai %d | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 8),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Pagydimai %d | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 8),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }
            case 4..5:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }
            case 6:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }
            case 7..8:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }
            case 9:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }

            case 10:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Iðkvietimai %d | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 2),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }

            case 11:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Baudos %d | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),cache_get_row_int(row, 3),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }
            case 21:
            {
                new info[2048];
                for(new row = 0;row<cache_get_row_count();row++)
                {
                    new SQLtmpName[24],SQLtmpPrisijungimoData[25],SQLtmpDarboPradziosData[25],id,string[256];
                    cache_get_row(row, 0, SQLtmpName);
                    cache_get_row(row, 5, SQLtmpPrisijungimoData);
                    cache_get_row(row, 7, SQLtmpDarboPradziosData);
                    if(!sscanf(SQLtmpName, "u", id))
                    {
                        if(IsPlayerConnected(id))
                         {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Priimtas %s | Rangas (%i) | Áspëjimai %i {00FF00}(ONLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                        else
                        {
                            format(string, 256, "{FFFFFF}%i. %s Prisijungë %s | Ðiandien %dmin | Priimtas %s | Rangas (%i) | Áspëjimai %i {FF0000}(OFFLINE)",
                                row+1,SQLtmpName,SQLtmpPrisijungimoData,cache_get_row_int(row, 4),SQLtmpDarboPradziosData,cache_get_row_int(row, 1),cache_get_row_int(row, 6));
                        }
                    }
                    if(row == 0)
                    {
                        strcat(info, string);
                    }
                    else
                    {
                        strcat(info, "\n");
                        strcat(info, string);
                    }
                }
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Visi darbuotojai", info, "Gerai","");
            }

        }
    }
    return 1;
}
stock SendClientMessageToLaw(SPALVA,TEKSTAS[])
{
    foreach(new i : Player)
    {
        if(IsJobFromLaw(PlayerDB[i][Job]))
        {
            SendClientMessage(i, SPALVA, TEKSTAS);
        }
    }
}
stock IsJobFromLaw(ID)
{
    switch(ID)
    {
        case 1:
        {
            return 1;
        }
        case 9:
        {
            return 1;
        }
        case 11:
        {
            return 1;
        }
        default:
        {
            return 0;
        }
    }
    return 0;
}
CMD:laukti(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(isnull(params))
        {
            new string[256];
            mysql_format(connectionHandle, string, 256, "SELECT laukimai.id, laukimai.LaukiamoZaidejoID, laukimai.Priezastis, players.Name, laukimai.Data,laukimai.UniqueID FROM laukimai JOIN players ON players.id = laukimai.LaukiamoZaidejoID WHERE laukimai.id = %i;", PlayerDB[playerid][SQLID]);
            mysql_function_query(connectionHandle,string,true,"ShowLauktiList","d",playerid);
        }
        else
        {
            new NickName[24],Reason[80];
            sscanf(params, "s[24]S(N)[80]", NickName,Reason);
            if(isnull(NickName))
            {
                UsageMessage(playerid,"• Laukti kito þaidëjo,kada jis prisijungs: /laukti [Pilnas V_P] [PRIEZASTIS - NEBUTINA]");
            }
            else
            {
                new id;
                sscanf(NickName, "u",id);
                if(IsPlayerConnected(id))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra prisijungæs.");
                    return 1;
                }
                new SQLquery[256];
                mysql_format(connectionHandle, SQLquery, 256, "SELECT `id` FROM `players` WHERE `Name` = '%e' LIMIT 1;", NickName);
                if(strlen(Reason) <= 1)
                {
                    mysql_function_query(connectionHandle,SQLquery,true,"OnInsertToLauktiTableNoReason","d",playerid);
                }
                else
                {
                    mysql_function_query(connectionHandle,SQLquery,true,"OnInsertToWaitTableWithReason","ds",playerid,Reason);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}
forward OnInsertToLauktiTableNoReason(playerid);
public OnInsertToLauktiTableNoReason(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Toks þaidëjas nerastas mûsø duomenø bazëje.");
    }
    else
    {
        new SQLquery[256];
        mysql_format(connectionHandle, SQLquery, 256, "SELECT NULL FROM `laukimai` WHERE `id` = '%i' AND `LaukiamoZaidejoID` = '%i' LIMIT 1;", PlayerDB[playerid][SQLID],cache_get_row_int(0, 0));
        mysql_function_query(connectionHandle,SQLquery,false,"OnInsertToLauktiTableNoReason2","dd",playerid,cache_get_row_int(0, 0));
    }
    return 1;
}
forward OnInsertToLauktiTableNoReason2(playerid,TargetID);
public OnInsertToLauktiTableNoReason2(playerid,TargetID)
{
    if(cache_get_row_count() == 1)
    {
        ErrorMsg(playerid,"• Tokio þaidëjo jau laukiate.");
    }
    else
    {
        new SQLquery[256];
        mysql_format(connectionHandle, SQLquery, 256, "INSERT INTO `laukimai` (`id`, `LaukiamoZaidejoID`, `Priezastis`, `Data`, `UniqueID`) VALUES ('%i', '%i', '', NOW(), NULL);", PlayerDB[playerid][SQLID],TargetID);
        mysql_function_query(connectionHandle,SQLquery,false,"SendQuery","");
        SendClientMessage(playerid, ZALIA, "• Þaidëjo bus laukiama bei jûs bûsite informuotas apie jo prisijungimà.");
    }
    return 1;
}
forward OnInsertToWaitTableWithReason(playerid,Reason[]);
public OnInsertToWaitTableWithReason(playerid,Reason[])
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Toks þaidëjas nerastas mûsø duomenø bazëje.");
    }
    else
    {
        new SQLquery[256];
        mysql_format(connectionHandle, SQLquery, 256, "SELECT NULL FROM `laukimai` WHERE `id` = '%i' AND `LaukiamoZaidejoID` = '%i' LIMIT 1;", PlayerDB[playerid][SQLID],cache_get_row_int(0, 0));
        mysql_function_query(connectionHandle,SQLquery,false,"OnInsertToWaitTableWithReason2","dds",playerid,cache_get_row_int(0, 0),Reason);
    }
    return 1;
}
forward OnInsertToWaitTableWithReason2(playerid,TargetID,Reason[]);
public OnInsertToWaitTableWithReason2(playerid,TargetID,Reason[])
{
    if(cache_get_row_count() == 1)
    {
        ErrorMsg(playerid,"• Tokio þaidëjo jau laukiate.");
    }
    else
    {
        new SQLquery[256];
        mysql_format(connectionHandle, SQLquery, 256, "INSERT INTO `laukimai` (`id`, `LaukiamoZaidejoID`, `Priezastis`, `Data`, `UniqueID`) VALUES ('%i', '%i', '%e', NOW(), NULL);", PlayerDB[playerid][SQLID],TargetID,Reason);
        mysql_function_query(connectionHandle,SQLquery,false,"SendQuery","");
        SendClientMessage(playerid, ZALIA, "• Þaidëjo bus laukiama,bei jûs bûsite informuotas apie jo prisijungimà.");
    }
    return 1;
}
forward ShowLauktiList(playerid);
public ShowLauktiList(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Laukti kito þaidëjo,kada jis prisijungs: /laukti [Pilnas V_P] [ PRIEZASTIS - NEBUTINA ]");
    }
    else
    {
        new info[2048];
        for(new row = 0;row<cache_get_row_count();row++)
        {
            new string[144];
            new SQLtmpName[24],SQLtmpData[30],SQLtmpReason[80];
            cache_get_row(row, 3, SQLtmpName);
            cache_get_row(row, 4, SQLtmpData);
            cache_get_row(row, 2, SQLtmpReason);
            if(strlen(SQLtmpReason) == 0)
            {
                format(string, 144, "%i. %s (%s)\n", row+1,SQLtmpName,SQLtmpData);
            }
            else
            {
                format(string, 144, "%i. %s (%s %s)\n", row+1,SQLtmpName,SQLtmpData,SQLtmpReason);
            }
            strcat(info, string);
            format(string, 144, "LauktiListItem%iID", row);
            SetPVarInt(playerid, string, cache_get_row_int(row, 5));
        }
        ShowPlayerDialog(playerid, 80, DIALOG_STYLE_LIST, "{AFAFAF}Laukiamø sàraðas", info, "Gerai","Trinti");
    }
    return 1;
}
forward InformuotiLaukiancius(playerid);
public InformuotiLaukiancius(playerid)
{
    new string[100],Metai,Menuo,Diena,Valanda,Minute;
    getdate(Metai, Menuo, Diena);
    gettime(Valanda, Minute);
    format(string, 100, "Þaidëjas {00FF00}%s (%d-%02d-%02d %02d:%02d){FFFFFF} prisijungë.", Vardas(playerid),Metai,Menuo,Diena,Valanda,Minute);
    if(cache_get_row_count() > 0)
    {
        foreach(new i : Player)
        {
            for(new row = 0;row<cache_get_row_count();row++)
            {
                if(PlayerDB[i][SQLID] == cache_get_row_int(row, 0) && IsJobFromLaw(PlayerDB[i][Job]) == 1)
                {
                    SendClientMessage(i, 0xFFFFFFFF, string);
                }
            }
        }
    }
    return 1;
}
stock CreateVehicleForRent(Model,Float:X,Float:Y,Float:Z,Float:A,Color1,Color2,CostOfRent)
{
    new vehicleid = CreateVehicle(Model, X, Y, Z, A, Color1, Color2, 300, 0);
    VehicleDB[vehicleid][VehicleEngineState] = false;
    VehicleDB[vehicleid][VehicleLights] = false;
    VehicleDB[vehicleid][VRibotuvas] = false;
    format(VehicleDB[vehicleid][LastDriverName],24,"Nëra");
    VehicleDB[vehicleid][VehicleDedicatedForEvent] = false;

    VehicleDB[vehicleid][VehicleDedicatedForAdmin] = false;
    VehicleDB[vehicleid][TURGUS] = false;
    VehicleDB[vehicleid][Rida] = 0;
    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[Model-400];
    VehicleDB[vehicleid][Dujos] = 0;
    VehicleDB[vehicleid][FuelType] = 0;
    VehicleDB[vehicleid][VMMasina] = false;
    VehicleDB[vehicleid][DARBOMASINA] = false;
    VehicleDB[vehicleid][DARBOID] = 0;
    VehicleDB[vehicleid][VehicleOwnerID] = -1;
    VehicleDB[vehicleid][VehicleNumReg] = -1;
    VehicleDB[vehicleid][VehicleColor1] = Color1;
    VehicleDB[vehicleid][VehicleColor2] = Color2;
    VehicleDB[vehicleid][VehicleDatabaseID] = -1;
    VehicleDB[vehicleid][VehicleWithOwner] = false;
    VehicleDB[vehicleid][VehicleLocked] = 0;
    VehicleDB[vehicleid][VehicleDauztumas] = 0;
    VehicleDB[vehicleid][DujuIranga] = false;
    VehicleDB[vehicleid][AdminMasina] = false;
    VehicleDB[vehicleid][VIPMasina] = false;
    VehicleDB[vehicleid][WeaponSlot1WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot1WeaponBullets] = 0;
    VehicleDB[vehicleid][WeaponSlot2WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot2WeaponBullets] = 0;
    VehicleDB[vehicleid][WeaponSlot3WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot3WeaponBullets] = 0;
    VehicleDB[vehicleid][WeaponSlot4WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot4WeaponBullets] = 0;
    VehicleDB[vehicleid][WeaponSlot5WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot5WeaponBullets] = 0;
    VehicleDB[vehicleid][WeaponSlot6WeaponModel] = 0;
    VehicleDB[vehicleid][WeaponSlot6WeaponBullets] = 0;
    VehicleDB[vehicleid][DrugsSlot1] = 0;
    VehicleDB[vehicleid][DrugsSlot2] = 0;
    VehicleDB[vehicleid][DrugsSlot3] = 0;
    VehicleDB[vehicleid][VehicleWithTaxometer] = false;
    VehicleDB[vehicleid][VehicleTaxometerObjectID] = -1;
    VehicleDB[vehicleid][VehicleDezesObjectID] = -1;
    VehicleDB[vehicleid][Pardavinejama] = false;
    VehicleDB[vehicleid][PardavimoKaina] = -1;
    VehicleDB[vehicleid][MirgalkesObjektas] = -1;
    VehicleDB[vehicleid][PakrautuDeziuSkaicius] = 0;
    VehicleDB[vehicleid][SuSvitureliais] = false;
    VehicleDB[vehicleid][SvitureliuObjektas] = -1;
    VehicleDB[vehicleid][PakrautasMaistas] = false;
    VehicleDB[vehicleid][PakrautasSmelis] = false;
    VehicleDB[vehicleid][PakrautosDetales] = false;
    VehicleDB[vehicleid][PakrautaMasina] = -1;
    VehicleDB[vehicleid][PakrautaElektronika] = false;
    VehicleDB[vehicleid][PripildytaDegalu] = false;
    VehicleDB[vehicleid][VehicleForRent] = true;
    VehicleDB[vehicleid][VehicleRentingCost] = CostOfRent;
    new string[60];
    format(string, 60, "[!] Ði transporto priemonë yra nuomuojama uþ %i €/min.", CostOfRent);
    CreateDynamic3DTextLabel(string, PILKA, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid, 1);
    return 1;
}
CMD:darbokomandos(playerid,params[])
{
    switch(PlayerDB[playerid][Job])
    {
        case 1:
        {
            new info[3700];
            strcat(info, "{0099CC}„Policijos“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bauda [Vardas_Pavardë/ID] {FFFFFF}- uþdëti átarimo lygá þaidëjui.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ist [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti kolegà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ant [Vardas_Pavardë/ID] {FFFFFF}- surakinti/atrakinti þaidëjà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ita [Vardas_Pavardë/ID] {FFFFFF}- átarti þaidëjà uþ nusiþengimus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isodinti [Vardas_Pavardë/ID] {FFFFFF}- ásodinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/gaudomi,/ieskomi {FFFFFF}- parodo gaudomø/ieðkomø þaidëjø sàraðà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/patikrinti [Vardas_Pavardë/ID] {FFFFFF}- atlikti nuodugnø þaidëjo patikrinimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/spygliai {FFFFFF}- padëti/nuimti spyglius vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/mpaz [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi motociklo vairavimo teises.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/mtei [Vardas_Pavardë/ID] {FFFFFF}- atimti motociklo vairavimo teises ið þaidëjo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/atimtiginklus [Vardas_Pavardë/ID] {FFFFFF}- atimti ið þaidëjo ginklus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kliutis(2) {FFFFFF}- padëti/nuimti kliutá vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sekti [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti pasirinkto þaidëjo sekimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bega [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti þaidëjo gaudimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sudirzu [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas uþsisegæs dirþà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tr [ Þinutës tekstas ] {FFFFFF}- bendrauti vieðai su kitais teisësaugininkais.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/islaipinti [Vardas_Pavardë/ID] {FFFFFF}- iðlaipinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/unita [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti þaidëjà nuo paskutiniø kaltinimø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tazeris {FFFFFF}- pasiimti/pasidëti tazerá.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/arafk [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas AFK.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/aglic [Vardas_Pavardë/ID] {FFFFFF}- atimti ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/glic [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/laukti [Vardas_Pavardë][prieþastis(nebûtina)]{FFFFFF} - laukti tam tikro þaidëjo prisijungimo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ppaz [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi pilotavimo teises.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ptei [Vardas_Pavardë/ID] {FFFFFF}- atimti pilotavimo teises ið þaidëjo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kon [Vardas_Pavardë/ID] {FFFFFF}- konfiskuoti ið þaidëjo narkotines medþiagas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/skydas {FFFFFF}- uþsidëti/nusiimti apsauginá skydà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/patruliuoju {FFFFFF}- patrulio reþimas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/nuimtibomba {FFFFFF}- nuimti bombà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 2:
        {
            new info[3700];
            strcat(info, "{0099CC}„Medikø“ darbui priklausanèios komandos:\n");
            strcat(info, "\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sarvai [Vardas_Pavardë/ID] {FFFFFF}- pasiûlo ásigyti ðarvus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/gydyti [Vardas_Pavardë/ID] {FFFFFF}- pagydyti pasirinktà þaidëjà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isblaivyti [Vardas_Pavardë/ID] {FFFFFF}- iðblaivyti pasirinktà þaidëjà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/pvaistineles [Vardas_Pavardë/ID] {FFFFFF}- parduoti þaidëjui 5 vnt. vaistinëliø(namui).\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kviecia {FFFFFF}- parodo kas kvieèià medikus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/vaziuoju [Vardas_Pavardë/ID] {FFFFFF}- priima iðkvietimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/vaistineles {FFFFFF}- parodo trumpà informacijà apie medikø naudojamas vaistineles.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 4:
        {
            new info[3700];
            strcat(info, "{0099CC}„Taksistø“ firmai priklausanèios komandos:\n");
            strcat(info, "\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kviecia {FFFFFF}- parodo kas kvieèià vairuotojus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/vaziuoju [Vardas_Pavardë/ID] {FFFFFF}- priima iðkvietimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/imti [Vardas_Pavardë/ID] {FFFFFF}- pradëti imti pinigus ið þaidëjo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/taxi {FFFFFF}- uþdëti taxi þenklà ant nuosavos maðinos,bei ámontuoti taksometrà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kurbudeti {FFFFFF}- surasti budëjimo vietas bei suþinoti iki jø atstumà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 5:
        {
            new info[3700];
            strcat(info, "{0099CC}„Mechanikø“ darbui priklausanèios komandos:\n");
            strcat(info, "\n");
            strcat(info, "{FFFFFF}» {99D6EB}Paspaudus klaviðà {FFFFFF}+ {99D6EB}jûs pradësite tempti transporto priemonæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/taisyti {FFFFFF}- sutaiso transporto priemonæ uþ 100€.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/piltidegalus {FFFFFF}– ápila 20l benzino.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/piltidujas {FFFFFF}- ápila 20l dujø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tune {FFFFFF}- tuninguoti maðinà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/boom {FFFFFF}- sunaikina transporto priemonæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kviecia {FFFFFF}- parodo kas kvieèià mechanikus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/vaziuoju [Vardas_Pavardë/ID] {FFFFFF}- priima iðkvietimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/mkma {FFFFFF}- konfiskuoti paþymëtà motociklà / dviratá (Þymima su „ENTER“).\n");
           	strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 7:
        {
            new info[3700];
            strcat(info, "{0099CC}„Lucchese Mafijai“ priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/virve [Vardas_Pavardë/ID] {FFFFFF}- suriðti arba iðlaisvinti þaidëjà ið panèiø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isodinti [Vardas_Pavardë/ID] [Vieta(1-3)] {FFFFFF}- Ásodinti suriðtà arba surakintà þaidëjà á maðinà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/islaipinti [Vardas_Pavardë/ID] {FFFFFF}- Iðlaipinti þaidëjà priverstinai ið transporto priemonës.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/siulytinark [Vardas_Pavardë/ID] [Kokainas/Heroinas/Kanapes] [Kiekis] [Kaina] {FFFFFF}- siûlyti ásigyti narkotiniø medþiagø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/siulytigun [Vardas_Pavardë/ID] [Kulkø skaièius] [Vienos kulkos kaina] {FFFFFF}- siûlyti ásigyti ginklà bei amunicijos.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/padetibomba {FFFFFF}- uþminuoti banko seifà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bomboslaikas {FFFFFF}- parodo,kiek laiko liko iki bombos sprogimo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/mr [ Þinutës tekstas ] {FFFFFF}- bendrauti vieðai su kitos mafijos nariais.");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 8:
        {
            new info[3700];
            strcat(info, "{0099CC}„Genovese Mafijai“ priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/virve [Vardas_Pavardë/ID] {FFFFFF}- suriðti arba iðlaisvinti þaidëjà ið panèiø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isodinti [Vardas_Pavardë/ID] [Vieta(1-3)] {FFFFFF}- Ásodinti suriðtà arba surakintà þaidëjà á maðinà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/islaipinti [Vardas_Pavardë/ID] {FFFFFF}- Iðlaipinti þaidëjà priverstinai ið transporto priemonës.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/siulytinark [Vardas_Pavardë/ID] [Kokainas/Heroinas/Kanapes] [Kiekis] [Kaina] {FFFFFF}- siûlyti ásigyti narkotiniø medþiagø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/siulytigun [Vardas_Pavardë/ID] [Kulkø skaièius] [Vienos kulkos kaina] {FFFFFF}- siûlyti ásigyti ginklà bei amunicijos.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/padetibomba {FFFFFF}- uþminuoti banko seifà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bomboslaikas {FFFFFF}- parodo,kiek laiko liko iki bombos sprogimo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/mr [ Þinutës tekstas ] {FFFFFF}- bendrauti vieðai su kitos mafijos nariais.");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 9:
        {
            new info[3700];
            strcat(info, "{0099CC}„Aras“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bauda [Vardas_Pavardë/ID] {FFFFFF}- uþdëti átarimo lygá þaidëjui.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ist [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti kolegà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ant [Vardas_Pavardë/ID] {FFFFFF}- surakinti/atrakinti þaidëjà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ita [Vardas_Pavardë/ID] {FFFFFF}- átarti þaidëjà uþ nusiþengimus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isodinti [Vardas_Pavardë/ID] {FFFFFF}- ásodinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/gaudomi,/ieskomi {FFFFFF}- parodo gaudomø/ieðkomø þaidëjø sàraðà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kon [Vardas_Pavardë/ID] {FFFFFF}- konfiskuoti ið þaidëjo narkotines medþiagas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/patikrinti [Vardas_Pavardë/ID] {FFFFFF}- atlikti nuodugnø þaidëjo patikrinimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/spygliai {FFFFFF}- padëti/nuimti spyglius vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/atimtiginklus [Vardas_Pavardë/ID] {FFFFFF}- atimti ið þaidëjo ginklus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kliutis(2){FFFFFF} - padëti/nuimti kliutá vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sekti [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti pasirinkto þaidëjo sekimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bega [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti þaidëjo gaudimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tr [ Þinutës tekstas ] {FFFFFF}- bendrauti vieðai su kitais teisësaugininkais.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/islaipinti [Vardas_Pavardë/ID] {FFFFFF}- iðlaipinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/unita [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti þaidëjà nuo paskutiniø kaltinimø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tazeris {FFFFFF}- pasiimti/pasidëti tazerá.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/arafk [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas AFK.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/aglic [Vardas_Pavardë/ID] {FFFFFF}- atimti ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/glic [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/laukti [Vardas_Pavardë][prieþastis(nebûtina)] {FFFFFF}- laukti tam tikro þaidëjo prisijungimo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/skydas {FFFFFF}- uþsidëti/nusiimti apsauginá skydà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bomba {FFFFFF}- padëti bombà sprogdinimui.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/nuimtibomba {FFFFFF}- nuimti bombà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bomboslaikas {FFFFFF}- parodo,kiek laiko liko iki bombos sprogimo.");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 10:
        {
            new info[3700];
            strcat(info, "{0099CC}„Radistø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rskelbimas [Tekstas] {FFFFFF}- skelbti skelbimà vieðai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/reteris {FFFFFF}- informacija apie eterá.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rlaidospav [Naujas Laidos Pavadinimas] {FFFFFF}- pakeisti laidos pavadinimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rsneketi [Tekstas] {FFFFFF}- raðyti per eterá,kaip laidos vedëjas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rkviesti [Vardas_Pavardë/ID] {FFFFFF}- pakviesti þaidëjà á tesioginá eterá kaip paðnekovà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/risspirti [Vardas_Pavardë/ID] {FFFFFF}- nutraukti pokalbá tesioginiame eteryje su þaidëju.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 11:
        {
            new info[3700];
            strcat(info, "{0099CC}„SPD“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bauda [Vardas_Pavardë/ID] {FFFFFF}- uþdëti átarimo lygá þaidëjui.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ist [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti kolegà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ant [Vardas_Pavardë/ID] {FFFFFF}- surakinti/atrakinti þaidëjà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ita [Vardas_Pavardë/ID] {FFFFFF}- átarti þaidëjà uþ nusiþengimus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/isodinti [Vardas_Pavardë/ID] {FFFFFF}- ásodinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/gaudomi,/ieskomi {FFFFFF}- parodo gaudomø/ieðkomø þaidëjø sàraðà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/alko [Vardas_Pavardë/ID] {FFFFFF}- patikrinti þaidëjo blaivumo lygá.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/paz,mpaz [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi maðinos/motociklo vairavimo teises.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tei,/mtei [Vardas_Pavardë/ID] {FFFFFF}- atimti maðinos/motociklo vairavimo teises ið þaidëjo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kon [Vardas_Pavardë/ID] {FFFFFF}- konfiskuoti ið þaidëjo narkotines medþiagas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/patikrinti [Vardas_Pavardë/ID] {FFFFFF}- atlikti nuodugnø þaidëjo patikrinimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/spygliai {FFFFFF}- padëti/nuimti spyglius vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/atimtiginklus [Vardas_Pavardë/ID] {FFFFFF}- atimti ið þaidëjo ginklus.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/kliutis(2) {FFFFFF}- padëti/nuimti kliutá vietoje kurioje esate.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sekti [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti pasirinkto þaidëjo sekimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bega [Vardas_Pavardë/ID] {FFFFFF}- pradëti/nutraukti þaidëjo gaudimà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/sudirzu [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas uþsisegæs dirþà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tr [ Þinutës tekstas ] {FFFFFF}- bendrauti vieðai su kitais teisësaugininkais.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/islaipinti [Vardas_Pavardë/ID] {FFFFFF}- iðlaipinti þaidëjà priverstinai.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/unita [Vardas_Pavardë/ID] {FFFFFF}- iðteisinti þaidëjà nuo paskutiniø kaltinimø.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/tazeris {FFFFFF}- pasiimti/pasidëti tazerá.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/arafk [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas AFK.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/aglic [Vardas_Pavardë/ID] {FFFFFF}- atimti ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/glic [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi ginklø licenzijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/laukti [Vardas_Pavardë][prieþastis[nebûtina] {FFFFFF}- laukti tam tikro þaidëjo prisijungimo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ppaz [Vardas_Pavardë/ID] {FFFFFF}- patikrinti ar þaidëjas turi pilotavimo teises.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/ptei [Vardas_Pavardë/ID] {FFFFFF}- atimti pilotavimo teises ið þaidëjo.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/skydas {FFFFFF}- uþsidëti/nusiimti apsauginá skydà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/nuimtibomba {FFFFFF}- nuimti bombà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {FFFFFF}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {FFFFFF}- perþiûrëti darbo laiko grafikà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {FFFFFF}- bendra darbo racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {FFFFFF}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {FFFFFF}- perþiûrëti prisijungusius kolegas.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 13:
        {
            new info[3700];
            strcat(info, "{0099CC}„Autobusø vairuotojø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB} /r {FFFFFF}- darbo bendra racija.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 14:
        {
            new info[3700];
            strcat(info, "{0099CC}„Ugniagesiø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB} /r {FFFFFF}- darbo bendra racija.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 15:
        {
            new info[3700];
            strcat(info, "{0099CC}„Valytojø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB} /r {FFFFFF}- darbo bendra racija.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 16:
        {
            new info[3700];
            strcat(info, "{0099CC}„Oro ir Vandens kurjeriø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB} /r {FFFFFF}- darbo bendra racija.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 19:
        {
            new info[3700];
            strcat(info, "{0099CC}„BurgerShot maisto kurjeriø“ darbui priklausanèios komandos:\n");
            strcat(info, "{FFFFFF}» {99D6EB} /r {FFFFFF}- darbo bendra racija.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        case 21:
        {
            new info[3700];
            strcat(info, "{0099CC}„Tolimûjø reisø vairuotojø“ darbui priklausanèios komandos:\n");
            strcat(info, " \n");
            strcat(info, "{FFFFFF}» {99D6EB}/rangai {ffffff}- perþiûrëti visø rangø informacijà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/darbografikas {ffffff}- jûsø darbo laiko grafikas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/bendradarbiai {ffffff}- perþiûrëti prisijungusius kolegas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/dzinute {ffffff}- perþiûrëti direktoriaus paliktà þinutæ.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/r {ffffff}- fûristø bendra racija.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/marsrutai {ffffff}- navigacija, kuri padës rasti reikalingas vietas.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/atkabinti {ffffff}- atkabinti priekabà.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/pakrautitr(iskrautitr) {ffffff}- pakrauti/iðkrauti tr. priemonæ tam tikroje vietoje.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/krautivaistus(iskrautivaistus) {ffffff}- pakrauti/iðkrauti vastinëles tam tikroje vietoje.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/krautidetales {ffffff}- pakrauti/iðkrauti detalës tam tikroje vietoje.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/trlikutis {ffffff}- tr. priemoniø likutis salonuose.\n");
            strcat(info, "{FFFFFF}» {99D6EB}/vaistulikutis {ffffff}- paskambinti medikø operatorei ir suþinoti vaistinëliø likutá ligoninëje.\n");
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Jûsø darbo komandos", info, "Gerai", "");
        }
        default:
        {
            ErrorMsg(playerid,"• Ði komanda skirta darbams su komandomis.");
        }
    }
    return 1;
}
CMD:taisyti(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 5)
    {
        if(PlayerDB[playerid][BEGA] == 1)
        {
            ErrorMsg(playerid,"• Jûs gaudo policija, todël negalite naudoti ðios komandos.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            new Float:Health;
            GetVehicleHealth(vehicleid, Health);
            if(Health < 1000.0)
            {
                if(PlayerDB[playerid][MoneyInPocket] < 100)
                {
                    new string[80];
                    format(string, 80, "• Nepakanka pinigø maðinos taisimui (turi %d €, reikia 100 €, trûksta %d €).", PlayerDB[playerid][MoneyInPocket],100 - PlayerDB[playerid][MoneyInPocket]);
                    SendClientMessage(playerid, RAUDONA, string);
                }
                else
                {
                    PlayerDB[playerid][MoneyInPocket]-=100;
                    RepairVehicle(vehicleid);
                    SetVehicleHealth(vehicleid, 1000);
                    SendClientMessage(playerid, ZALIA, "• Maðina sutaisyta.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Transporto priemonës taisyti nereikia.");
            }
        }
        else
        {
            ErrorMsg(playerid,"Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mechanikams.");
    }
    return 1;
}

CMD:mkma(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 5)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia iðlipkite ið maðinos.");
        }
        else
        {
            new int = GetPVarInt(playerid, "PazymetasMoto");
            if(IsValidVehicle(int) && IsABike(GetVehicleModel(int)))
            {
            	//for(new i=400; i<612; i++)
            	//{
                	//if(VehicleDB[int][TURGUS] == 1) return ErrorMsg(playerid, "• Turgaus transportà negalite konfiskuoti.");)
                	//{
						//SendClientMessage(playerid, RAUDONA, "• Turgaus motociklus konfiskuoti negalima!");
					//	break;
				//	}
            	//}
                new Float:Cords[3];
                GetVehiclePos(int, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(playerid, 6, Cords[0], Cords[1], Cords[2]))
                {
                    GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                    SetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                    switch(random(4))
                    {
                        case 0: SetVehiclePosExt(int,-2133.6887,-814.6821,31.5357,269.1461);
                        case 1: SetVehiclePosExt(int,-2127.2273,-837.2811,31.5181,81.0126);
                        case 2: SetVehiclePosExt(int,-2134.1216,-888.2697,31.5359,283.3923);
                        case 3: SetVehiclePosExt(int,-2125.5100,-920.2221,31.5351,84.5808);
                    }
                    SendClientMessage(playerid, ZALIA, "• Transporto priemonë buvo sëkmingai konfiskuota.");
                    SetPVarInt(playerid, "PazymetasMoto", -1);
                }
                else
                {
                    ErrorMsg(playerid,"• Transporto priemonë yra per toli.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Turite paþymëti motociklà bandydamas á já ilipti su „ENTER“.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mechanikams.");
    }
    return 1;
}
CMD:piltidujas(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 5)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(VehicleDB[vehicleid][DujuIranga] == 1)
            {
                VehicleDB[vehicleid][Dujos] += 20;
                SendClientMessage(playerid, ZALIA, "• Maðinos dujø balionas buvo papildytas 20l dujø..");
                if(VehicleDB[vehicleid][Dujos] > DegaluTalpa[GetVehicleModel(vehicleid)-400])
                {
                    SendClientMessage(playerid, RAUDONA, "• Taèiau ðiek tiek iðsiliejo ant þemës..");
                    VehicleDB[vehicleid][Dujos] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                }
            }
            else
            {
                ErrorMsg(playerid,"• Maðina neturi ádiegtos dujø árangos.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mechanikams.");
    }
    return 1;
}
CMD:piltidegalus(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 5)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new vehicleid = GetPlayerVehicleID(playerid);
            VehicleDB[vehicleid][Bendzinas]+=20;
            SendClientMessage(playerid, ZALIA, "• Á maðinà ápylëte 20l benzino..");
            if(VehicleDB[vehicleid][Bendzinas] >  DegaluTalpa[GetVehicleModel(vehicleid)-400])
            {
                SendClientMessage(playerid, RAUDONA, "• Taèiau ðiek tiek iðsiliejo ant þemës..");
                VehicleDB[vehicleid][Bendzinas] =  DegaluTalpa[GetVehicleModel(vehicleid)-400];
            }
        }
        else
        {
            ErrorMsg(playerid,"• Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mechanikams.");
    }
    return 1;
}
CMD:tune(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 5)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            ShowPlayerTuningMeniu(playerid);
        }
        else
        {
            ErrorMsg(playerid,"• Jûs turite bûti maðinoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mechanikams.");
    }
    return 1;
}
CMD:atkabinti(playerid)
{
	if(PlayerDB[playerid][Job] != 21)
	{
		ErrorMsg(playerid,"• Ði komanda tik fûristams.");
	}
	if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);

		if(IsTrailerAttachedToVehicle(tmpcar))
		{
			DetachTrailerFromVehicle(tmpcar);
		}
		else
		{
			ErrorMsg(playerid,"• Jûs nieko neprisikabinæ.");
		}
	}

	return 1;
}
stock ShowPlayerTuningMeniu(playerid)
{
    ShowPlayerDialog(playerid, 90, DIALOG_STYLE_LIST, "{AFAFAF}Tuningo meniu", "Paint Jobs\nSpalvos\nHoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nWheels\nHydraulics\nNitrous Oxide", "Rinktis", "Atðaukti");
}
stock IsValidComponentForVehicleModel(VehicleModel,Component)
{
    if(IsABike(VehicleModel) == 1)
    {
        return 0;
    }
    if(IsVehicleAircraft(VehicleModel) == 1)
    {
        return 0;
    }
    if(Component == 1008 || Component == 1009 || Component == 1010)
    {
        return 1;
    }
    if(Component == 1025)
    {
        switch(VehicleModel)
        {
            case 537,538:
            {
                return 0;
            }
            default:
            {
                return 1;
            }
        }
    }
    if(Component >= 1073 && Component < 1086)
    {
        switch(VehicleModel)
        {
            case 537,538:
            {
                return 0;
            }
            default:
            {
                return 1;
            }
        }
    }
    if(Component == 1087)
    {
        switch(VehicleModel)
        {
            case 448:
            {
                return 0;
            }
            case 461..463:
            {
                return 0;
            }
            case 468:
            {
                return 0;
            }
            case 471:
            {
                return 0;
            }
            case 481:
            {
                return 0;
            }
            case 509..510:
            {
                return 0;
            }
            case 521..523:
            {
                return 0;
            }
            case 581:
            {
                return 0;
            }
            case 586:
            {
                return 0;
            }
            default:
            {
                return 1;
            }
        }
    }
    else
    {
        switch(VehicleModel)
        {
            case 400:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    case 1018..1021://Exhausts
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 401:
            {
                switch(Component)
                {
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1019..1020://Exhaust Large and twist
                    {
                        return 1;
                    }
                    case 1013://Round fog lamps
                    {
                        return 1;
                    }
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1001: //WIN SPOILER
                    {
                        return 1;
                    }
                    case 1049://Alien spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 402:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 405:
            {
                switch(Component)
                {
                    case 1018..1021://Exhausts except small
                    {
                        return 1;
                    }
                    case 1000..1001://Pro/Win Spoiler
                    {
                        return 1;
                    }
                    case 1014://Champ spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 409:
            {
                switch(Component)
                {
                    case 1009://2x nitro
                    {
                        return 1;
                    }
                    default:
                    {
                        return 1;
                    }
                }
            }
            case 410:
            {
                switch(Component)
                {
                    case 1019..1021://Twin/Large/Medium
                    {
                        return 1;
                    }
                    case 1013://Round fog
                    {
                        return 1;
                    }
                    case 1024://Square Fog
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 411:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 415:
            {
                switch(Component)
                {
                    case 1018..1019://Twin/Upswept exhausts
                    {
                        return 1;
                    }
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 418:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1020..1021://Large /Medium exhaust
                    {
                        return 1;
                    }
                    case 1006://Roof scoop
                    {
                        return 1;
                    }
                    case 1002://Drag spoiler
                    {
                        return 1;
                    }
                    case 1012://Worx spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 419:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 420:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1004..1005://Hoods
                    {
                        return 1;
                    }
                    case 1019://Twin exhaust
                    {
                        return 1;
                    }
                    case 1021://Medium exhaust
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 421:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1018..1021://Exhausts except small
                    {
                        return 1;
                    }
                    case 1014://Champ spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoil
                    {
                        return 1;
                    }
                    case 1016://Spoiler Worx
                    {
                        return 1;
                    }
                    case 1000://Pro spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 422:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    case 1019..1021://Twin/Large/Medium
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 426:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1019://Twin
                    {
                        return 1;
                    }
                    case 1021://Medium
                    {
                        return 1;
                    }
                    case 1006://Roof scoop
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 429:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 436:
            {
                switch(Component)
                {
                    case 1019..1022://Exhausts except twin
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1001: //WIN SPOILER
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 438:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 439:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 442:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 445:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 451:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 458:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 466..467:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 477:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1018..1021://Exhausts
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 478:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1004..1005://Hoods 2
                    {
                        return 1;
                    }
                    case 1012://Worx hood
                    {
                        return 1;
                    }
                    case 1020..1022://Exhausts
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 479..480:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 489:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    case 1018..1020:
                    {
                        return 1;
                    }
                    case 1006:///Roof
                    {
                        return 1;
                    }
                    case 1002:
                    {
                        return 1;
                    }
                    case 1000:
                    {
                        return 1;
                    }
                    case 1016:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 491:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1018..1021:
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1014://Champ spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 492:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1004..1006:
                    {
                        return 1;
                    }
                    case 1000:
                    {
                        return 1;
                    }
                    case 1016:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 496:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1006:
                    {
                        return 1;
                    }
                    case 1011:
                    {
                        return 1;
                    }
                    case 1019..1020:
                    {
                        return 1;
                    }
                    case 1142..1143:
                    {
                        return 1;
                    }
                    case 1023:
                    {
                        return 1;
                    }
                    case 1001..1003:
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 500:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1019..1021:
                    {
                       return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 506:
            {
                switch(Component)
                {
                    case 1009://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 507:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 516:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1004:
                    {
                        return 1;
                    }
                    case 1018..1021://Exhausts
                    {
                        return 1;
                    }
                    case 1002://Drag spoiler
                    {
                        return 1;
                    }
                    case 1012://Worx spoiler
                    {
                        return 1;
                    }
                    case 1000://PRO
                    {
                        return 1;
                    }
                    case 1015:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 517:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1018..1020://Exhausts
                    {
                        return 1;
                    }
                    case 1002://Drag spoiler
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1012://Worx spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 518:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1019..1020://Exhausts
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1001: //WIN SPOILER
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    case 1005:
                    {
                        return 1;
                    }
                    case 1013://Round fog
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 526:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 527:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1018://UPSET
                    {
                        return 1;
                    }
                    case 1020..1021://Medium large
                    {
                        return 1;
                    }
                    case 1014..1015://Race + champ
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 529:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1018..1020://exhausts
                    {
                        return 1;
                    }
                    case 1014..1015://Race + champ
                    {
                        return 1;
                    }
                    case 1011..1012://scoopai
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 533:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 534:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1100..1101:
                    {
                        return 1;
                    }
                    case 1106:
                    {
                        return 1;
                    }
                    case  1122..1127:
                    {
                        return 1;
                    }
                    case 1178..1180:
                    {
                        return 1;
                    }
                    case 1185:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 535:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1109..1121:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 536:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1103..1105:
                    {
                        return 1;
                    }
                    case 1107..1108:
                    {
                        return 1;
                    }
                    case 1128:
                    {
                        return 1;
                    }
                    case 1181..1184:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 540:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1004:
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1018..1020:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 541:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 542:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1144..1145:
                    {
                        return 1;
                    }
                    case 1018..1021:
                    {
                        return 1;
                    }
                    case 1014..1015:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 545:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 546:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1004:
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1018..1019:
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1001..1002:
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 547:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1142..1143:
                    {
                        return 1;
                    }
                    case 1018..1021:
                    {
                        return 1;
                    }
                    case 1012://Worx spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1000://Pro spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 549:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1011..1012://Worx+Race hood
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1018..1020:
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 550:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1018..1020:
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1001: //WIN SPOILER
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 551:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1005:
                    {
                        return 1;
                    }
                    case 1018..1021:
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1002://Drag spoiler
                    {
                        return 1;
                    }
                    case 1012://Worx spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 555:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 558:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1088..1095:
                    {
                        return 1;
                    }
                    case 1163..1168:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 559:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1065..1072:
                    {
                        return 1;
                    }
                    case 1158..1162:
                    {
                        return 1;
                    }
                    case 1173:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 560:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1026..1033:
                    {
                        return 1;
                    }
                    case 1138..1141:
                    {
                        return 1;
                    }
                    case 1169..1170:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 561:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1055..1064:
                    {
                        return 1;
                    }
                    case 1154..1157:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 562:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1034..1041:
                    {
                        return 1;
                    }
                    case 1146..1149:
                    {
                        return 1;
                    }
                    case 1171..1172:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 565:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1045..1054:
                    {
                        return 1;
                    }
                    case 1150..1153:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 566:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 567:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1102:
                    {
                        return 1;
                    }
                    case 1129..1133:
                    {
                        return 1;
                    }
                    case 1186..1189:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 575:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1042..1044:
                    {
                        return 1;
                    }
                    case 1099:
                    {
                        return 1;
                    }
                    case 1174..1177:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 576:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    case 1134..1137:
                    {
                        return 1;
                    }
                    case 1190..1193:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 579:
            {
                switch(Component)
                {
                    case 1008..1010://nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 580:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1018:
                    {
                        return 1;
                    }
                    case 1020:
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1001: //WIN SPOILER
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler..
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 585:
            {
                switch(Component)
                {
                    case 1142..1145://Vents
                    {
                        return 1;
                    }
                    case 1018..1020:
                    {
                        return 1;
                    }
                    case 1013://Round fog lamps
                    {
                        return 1;
                    }
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    case 1001://Win spoiler
                    {
                        return 1;
                    }
                    case 1023://Fury spoiler
                    {
                        return 1;
                    }
                    case 1003://Alpha spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 587:
            {
                switch(Component)
                {
                    case 1008..1010:
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 589:
            {
                switch(Component)
                {
                    case 1008..1010:
                    {
                        return 1;
                    }
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    case 1144..1145://Square vents
                    {
                        return 1;
                    }
                    case 1018:
                    {
                        return 1;
                    }
                    case 1020:
                    {
                        return 1;
                    }
                    case 1013:// Round fog lamps
                    {
                        return 1;
                    }
                    case 1024://Square Fog Lamps
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    case 1016://Spoiler Worx
                    {
                        return 1;
                    }
                    case 1000://Pro spoiler
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 600:
            {
                switch(Component)
                {
                    case 1004..1005://Furry,Champ scoops hoodai
                    {
                        return 1;
                    }
                    case 1020:
                    {
                        return 1;
                    }
                    case 1018:
                    {
                        return 1;
                    }
                    case 1022:
                    {
                        return 1;
                    }
                    case 1013://Round fog lamps
                    {
                        return 1;
                    }
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    case 1006:// Roof scoop
                    {
                        return 1;
                    }
                    case 1007://Right sideskirt
                    {
                        return 1;
                    }
                    case 1017://Left sideskirt
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            case 602..603:
            {
                switch(Component)
                {
                    case 1008..1010://Nitros
                    {
                        return 1;
                    }
                    default:
                    {
                        return 0;
                    }
                }
            }
            default:
            {
                return 0;
            }
        }
    }
    return 0;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
    if(GetPlayerInterior(playerid) == 0)
    {
        Kick(playerid);
    }
    return 0;
}
forward CloseKMA();
public CloseKMA()
{
    KMAVartaiState = false;
    MoveDynamicObject(KMAVartai, -2154.4451, -754.2456, 31.1827, 2, 0,0,90);
    return 1;
}

CMD:darbuidai(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        SendClientMessage(playerid, GELTONA, "• Darbø identifikacijos numeriai:");
        SendClientMessage(playerid, -1, "0. Direktoriaus statusui nuimti");
        SendClientMessage(playerid, -1, "1. Policija");
        SendClientMessage(playerid, -1, "2. Medikai");
        SendClientMessage(playerid, -1, "4. Taxi Firma");
        SendClientMessage(playerid, -1, "5. Mechanikai");
        SendClientMessage(playerid, -1, "7. Lucchese Mafija");
        SendClientMessage(playerid, -1, "8. Genovese Mafija");
        SendClientMessage(playerid, -1, "9. „Aras“");
        SendClientMessage(playerid, -1, "10. Radistai");
        SendClientMessage(playerid, -1, "11. SPD");
        SendClientMessage(playerid, -1, "13. Autobusø vairuotojai (Darbas be pakvietimo)");
        SendClientMessage(playerid, -1, "14. Ugnegiasiai (Darbas be pakvietimo)");
        SendClientMessage(playerid, -1, "15. Valytojai (Darbas be pakvietimo)");
        SendClientMessage(playerid, -1, "16. Oro ir Vandens kurjeriai (Darbas be pakvietimo)");
        SendClientMessage(playerid, -1, "19. BurgerShot Maisto kurjeris (Darbas be pakvietimo)");
        SendClientMessage(playerid, -1, "21. Fûristai");

        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:udirektoriu(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new TargetID,JobID;
        if(sscanf(params, "ui", TargetID,JobID))
        {
            UsageMessage(playerid,"• Uþdëti direktoriaus statusà: /udirektoriu [V_P/ID] [Darbo ID(/darbuidai)].");
        }
        else
        {
            if(IsPlayerConnected(TargetID))
            {
                if(PlayerDB[TargetID][Direktorius] > 0 && (PlayerDB[TargetID][Direktorius] == 7 || PlayerDB[TargetID][Direktorius] == 8))
                {
                    ErrorMsg(playerid,"• Pasirinktas þaidëjas yra mafijos lyderis.");
                    return 1;
                }
                switch(JobID)
                {
                    case 0:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 0)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip nëra direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 0;
                            SendClientMessage(TargetID, RAUDONA, "Jûs buvote nuðalintas nuo direktoriaus pareigø.");
                            SendClientMessage(TargetID, GELTONA, "Dëkojame uþ darbà,jeigu galvojate,kad buvote nuðalintas be prieþasties,praðome praneðti serverio vyr.administratoriams.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo nuðalintas nuo direktoriaus pareigø.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                        }
                    }
                    case 1:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 1)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 1;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas eiti Policijos departamento direktoriaus pareigas.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Policijos departamento direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 2:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 2)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 2;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas eiti Medikø direktoriaus pareigas.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Medikø direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 4:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 4)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 4;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas eiti Taxi Firmos direktoriaus pareigas.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Taxi Firmos direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);

                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 5:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 5)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 5;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas eiti Mechanikø Firmos direktoriaus pareigas.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Mechanikø Firmos direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 9:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 9)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 9;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas „Aro“ direktoriumi.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas „Aro“ direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);

                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 10:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 10)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 10;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas Radistø direktoriumi.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Radistø direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);

                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 11:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 11)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 11;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas SPD direktoriumi.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas SPD direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);

                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 21:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 21)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios firmos direktorius.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 21;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas Fûristø direktoriumi.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Fûristø direktoriumi.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);

                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            format(PlayerDB[playerid][DatePlayerBecamePav],12,"%04d-%02d-%02d",Year,Month,Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    default:
                    {
                        ErrorMsg(playerid,"• Blogai nurodytas Darbo ID.");
                        cmd_darbuidai(playerid,"");
                    }
                }
                SavePlayerData(TargetID);
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:udirektoriuoff(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Target[24],DarboNumber;
        if(sscanf(params, "ds[24]", DarboNumber,Target))
        {
            UsageMessage(playerid,"• Uþdëti direktoriaus statusà atsijungusiam þaidëjui: /udirektoriuoff [Darbo ID(/darbuidai)] [V_P].");
        }
        else
        {
            if(IsValidNickName(Target))
            {
                if(DarboNumber >= 0  && (DarboNumber <= 11 || DarboNumber == 21))
                {
                    new QueryString[180];
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    mysql_format(connectionHandle, QueryString, 180, "UPDATE `players` SET `Direktorius` = '%i',`DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", DarboNumber,Year,Month,Day,Target);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, ZALIA, "• Jei teisingai nurodëte þaidëjo vardà direktoriaus statusas bus pakeistas.");
                }
                else
                {
                    ErrorMsg(playerid,"• Blogas darbo ID.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas V_P");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:nuimtisutarti(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Target;
        if(sscanf(params, "u",Target))
        {
            UsageMessage(playerid,"• Nuimti darbo sutartá: /nuimtisutarti [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(Target))
            {
                if(PlayerDB[Target][DarboSutartiesPabaiga] > gettime())
                {
                    PlayerDB[Target][DarboSutartiesPabaiga] = 0;

                    SendClientMessage(Target, ZALIA, "• Direktoriø arba Lyderiø priþiûrëtojas nuëmë jums darbo sutartá.");
                    SendClientMessage(playerid, ZALIA, "• Nuëmete darbo sutartá nuo pasirinkto þaidëjo.");
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas neturi galiojanèios sutarties.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:nuimtisutartioff(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Target[24];
        if(sscanf(params, "s[24]",Target))
        {
            UsageMessage(playerid,"• Nuimti darbo sutartá atsijungusiam þaidëjui: /nuimtisutartioff [V_P].");
        }
        else
        {
            if(IsValidNickName(Target))
            {
                new QueryString[144];
                mysql_format(connectionHandle, QueryString, 144, "UPDATE `players` SET `DarboSutartiesPabaiga` = '0' WHERE `Name` = '%e' LIMIT 1;",Target);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, ZALIA, "• Jei teisingai nurodëte þaidëjo vardà darbo sutartis bus nuimta.");
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas V_P");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    switch(VehicleDB[vehicleid][DARBOID])
    {
        case 6:
        {
            if(newstate == 1)
            {
                if(GetVehicleModel(vehicleid) == 541)
                {
                    VehicleDB[vehicleid][MirgalkesObjektas] = CreateObject(18646, -0.474999, 0.000000, 999, 0.000000, 0.000000, 0.000000); //Object Model: 18646 |
                    AttachObjectToVehicle(VehicleDB[vehicleid][MirgalkesObjektas], vehicleid, -0.474999, 0.000000, 0.679999, 0.000000, 0.000000, 0.000000); //Object Model: 18646 |
                }
            }
            else
            {
                if(IsValidObject(VehicleDB[vehicleid][MirgalkesObjektas]))
                {
                    DestroyObject(VehicleDB[vehicleid][MirgalkesObjektas]);
                    VehicleDB[vehicleid][MirgalkesObjektas] = INVALID_OBJECT_ID;
                }
            }
        }
    }
    return 1;
}
stock IsJobFromMafia(JobID)
{
    if(JobID == 7)
        return 1;
    else if(JobID == 8)
        return 1;
    else
        return 0;
}
CMD:virve(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]))
    {
        if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
        {
            ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas.");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia iðlipkite ið tr. priemonës.");
            return 1;
        }
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Suriðti/Atriðti pasirinktà þaidëjà: /virve [V_P/ID].");
        }
        else
        {
            if(!IsPlayerConnected(id))
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
            else if(id == playerid)
            {
                ErrorMsg(playerid,"• Tai atlikti sau paèiam sunkiai ámanoma.");
            }
            else
            {
                new Float:x,Float:y,Float:z;
                GetPlayerPos(playerid, x, y, z);
                if(IsPlayerInRangeOfPoint(id, 3, x, y, z))
                {
                    if(PlayerDB[id][Surakintas] == true)
                    {
                        PlayerDB[id][Surakintas] = false;
                        SetPlayerSpecialAction(id,SPECIAL_ACTION_NONE);
                        TogglePlayerControllable(id, true);
                        new string[128];
                        format(string, 128, "Jus iðlaisvino: {37DB46}%s", Vardas(playerid));
                        SendClientMessage(id, 0xFD0005FFF, string);
                        format(string, 128, "• %s iðlaisvinau ið antrankiø %s", Vardas(playerid),Vardas(id));
                        foreach(new i : Player)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, x,y,z))
                            {
                                SendClientMessage(i, 0xE3BA24FF, string);
                            }
                        }
                    }
                    else if(PlayerDB[id][Suristas] == true)
                    {
                        if(PlayerDB[id][Surakintas] == false)
                        {
                            TogglePlayerControllable(id, true);
                        }
                        PlayerDB[id][Suristas] = false;
                        new string[128];
                        format(string, 128, "• %s(%i) atriðo %s(%i).", Vardas(playerid),playerid,Vardas(id),id);
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, x, y, z))
                            {
                                SendClientMessage(i, PILKA, string);
                            }
                        }
                    }
                    else
                    {
                        TogglePlayerControllable(id, 0);
                        PlayerDB[id][Suristas] = true;
                        new string[128];
                        format(string, 128, "• %s(%i) suriðo %s(%i).", Vardas(playerid),playerid,Vardas(id),id);
                        for(new i = 0;i<=GetPlayerPoolSize();i++)
                        {
                            if(IsPlayerInRangeOfPoint(i, 15, x, y, z))
                            {
                                SendClientMessage(i, PILKA, string);
                            }
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Taikinys yra per toli.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijozams.");
    }
    return 1;
}
stock UpdateHeroineStatusAtFactory()
{
    new string[20];
    format(string, 20, "%dg. heroino", HeroineInFactory);
    UpdateDynamic3DTextLabelText(DrugHeroinasText3D, 0xFFFFFFFF, string);
    return 1;
}
stock UpdateKokaineStatusAtFactory()
{
    new string[20];
    format(string, 20, "%dg. kokaino", KokaineInFactory);
    UpdateDynamic3DTextLabelText(DrugKokainasText3D, 0xFFFFFFFF, string);
    return 1;
}
forward AutoCheckForFactoryEvent();
public AutoCheckForFactoryEvent()
{
    if(FactoryEventNextStart == 0)
    {
        FactoryEventNextStart = gettime() + 5 * 60;
    }
    if(FactoryEventInProgress == false && FactoryEventNextStart <= gettime())
    {
        new OFFICERS = 0;
        new LuccheseMembers = 0;
        new GenoveseMembers = 0;
        for(new player = 0; player<=GetPlayerPoolSize();player++)
        {
            if(PlayerDB[player][AfkState] == true)
            {
                continue;
            }
            if(IsJobFromLaw(PlayerDB[player][Job]))
            {
                OFFICERS+=1;
            }
            else if(IsJobFromMafia(PlayerDB[player][Job]))
            {
                if(PlayerDB[player][Job] == 7)
                {
                    LuccheseMembers+=1;
                }
                else
                {
                    GenoveseMembers+=1;
                }
            }
        }
        if(OFFICERS >= 3 && (LuccheseMembers >= 3 || GenoveseMembers >= 3))
        {
            StartingFactoryEvent();
        }
    }
    return 1;
}
stock StartingFactoryEvent()
{
    FactoryEventInProgress = true;
    HeroineInFactory = 1500;
    KokaineInFactory = 1500;
    UpdateKokaineStatusAtFactory();
    UpdateHeroineStatusAtFactory();
    for(new playerid = 0;playerid<=GetPlayerPoolSize();playerid++)
    {
        if(IsJobFromMafia(PlayerDB[playerid][Job]))
        {
            SendClientMessage(playerid, -1, "");
            SendClientMessage(playerid, RAUDONA, "~ Narkotikø Gamykla ~");
            SendClientMessage(playerid, RAUDONA, "• Turite puikià galimybæ apðvarinti ðià gamyklà bei susirinkti visus ten esanèius narkotikus.");
            SendClientMessage(playerid, RAUDONA, "• Taèiau iðlikite budrûs,nes tai jums padaryti gali sutrugdyti kita mafija arba teisësaugos pareigûnai.");
            SendClientMessage(playerid, RAUDONA, "• Todël paskubëkite,nes ðiai gamyklai apðvarinti turite tik 30 minuèiø.");
            SendClientMessage(playerid, RAUDONA, "• Narkotikø gamykla þemëlapyje yra paþymëta kaukolës þenklu.");
            SendClientMessage(playerid, -1, "");
        }
        else if(IsJobFromLaw(PlayerDB[playerid][Job]))
        {
            SendClientMessage(playerid, -1, "");
            SendClientMessage(playerid, RAUDONA, "~ Narkotikø Gamykla ir vël atvira ~");
            SendClientMessage(playerid, RAUDONA, "• Jûsø kaip teisësaugos pareigûnø darbas yra kuo greièiau sunaikinti ðios gamyklos produkcijà bei neleisti jei paplisti.");
            SendClientMessage(playerid, RAUDONA, "• Narkotikø gamykla þemëlapyje yra paþymëta kaukolës þenklu.");
            SendClientMessage(playerid, -1, "");

        }
    }
    SetTimer("FactoryEventEnd", 30 * 60 * 1000, false);
}
forward FactoryEventEnd();
public FactoryEventEnd()
{
    FactoryEventNextStart = gettime() + (60 * 60);
    FactoryEventInProgress = false;

    new string[128];
    SendClientMessageToAll(0x00730BFF, "••• Narkotiniø medþiagø sandelio statistika:");
    SendClientMessageToAll(0x00730BFF,"• Lucchese mafija pasiemë:");
    format(string, 128, "%i {00730B}mg heroino, {00BA12}%i {00730B}mg kokaino, iðviso: {00BA12}%i {00730B}narkotikø.", LuccheseTookHeroino,LuccheseTookCoco,LuccheseTookHeroino+LuccheseTookCoco);
    SendClientMessageToAll(0x00BA12FF, string);

    SendClientMessageToAll(0x00730BFF,"• Genovese mafija pasiemë:");
    format(string, 128, "%i {00730B}mg heroino, {00BA12}%i {00730B}mg kokaino, iðviso: {00BA12}%i {00730B}narkotikø.", GenoveseTookHeroino,GenoveseTookCoco,GenoveseTookHeroino+GenoveseTookCoco);
    SendClientMessageToAll(0x00BA12FF, string);

    SendClientMessageToAll(0x00730BFF,"• Teisësauga sunaikino:");
    format(string, 128, "%i {00730B}mg heroino, {00BA12}%i {00730B}mg kokaino, iðviso: {00BA12}%i {00730B}narkotikø.", LawTookHeroino,LawTookCoco,LawTookHeroino+LawTookCoco);
    SendClientMessageToAll(0x00BA12FF, string);
    LuccheseTookCoco = 0;
    GenoveseTookCoco = 0;
    LawTookCoco = 0;
    LuccheseTookHeroino = 0;
    GenoveseTookHeroino = 0;
    LawTookHeroino = 0;

}

CMD:tazeris(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        switch(PlayerDB[playerid][TazerioBusena])
        {
            case true:
            {
                PlayerDB[playerid][TazerioBusena] = false;
                SendClientMessage(playerid, RAUDONA, "• Tazerio efektas iðjungtas ant pistoletø.");
            }
            case false:
            {
                PlayerDB[playerid][TazerioBusena] = true;
                SendClientMessage(playerid, ZALIA, "• Tazerio efektas ájungtas ant pistoletø.");
                new WeaponID, AmmoCount;
                GetPlayerWeaponData(playerid, 2, WeaponID, AmmoCount);
                if(WeaponID > 0 && AmmoCount > 0)
                {
                    SetPlayerArmedWeapon(playerid, WeaponID);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}
CMD:bomba(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            ErrorMsg(playerid,"• Pirmiausia turite iðlipti ið transporto priemonës.");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid, 1.5, -715.7781,976.9869,12.4900))
        {
            if(LuccheseGatesDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti, vartai ir taip jau iðkritæ..");
            }
            else if(LuccheseGatesSideABroken == false)
            {
                if(LuccheseGatesSideAPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(LuccheseGatesSideAPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta, bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimerEx("PlantingBombLuccheseGates", 2000, false, "d", 1);
                    LuccheseGatesSideAPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Lucchese mafijos vartø A pusës.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios pusës sprogdinti nereikia,sprogdinkite kitoje puseje.");
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, -715.45203, 967.58472, 12.29980))
        {
            if(LuccheseGatesDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti,vartai ir taip jau iðkritæ..");
            }
            else if(LuccheseGatesSideBBroken == false)
            {
                if(LuccheseGatesSideBPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(LuccheseGatesSideBPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta,bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimerEx("PlantingBombLuccheseGates", 2000, false, "d", 2);
                    LuccheseGatesSideBPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Lucchese mafijos vartø B pusës.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios pusës sprogdinti nereikia,sprogdinkite kitoje puseje.");
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1, -675.0396, 938.2418, 12.3013))
        {
            if(LuccheseDoorsDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti,durys ir taip jau iðkritusios..");
            }
            else
            {
                if(LuccheseDoorsPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(LuccheseDoorsPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta,bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimer("PlantingBombLuccheseDoors", 2000, false);
                    LuccheseDoorsPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Lucchese mafijos sleptuvës durø.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
        }
        //Genovese
        else if(IsPlayerInRangeOfPoint(playerid, 1.5,  -1058.81750, -1260.80530, 128.60240))
        {
            if(GenoveseGatesDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti,vartai ir taip jau iðkritæ..");
            }
            else if(GenoveseGatesSideABroken == false)
            {
                if(GenoveseGatesSideAPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(GenoveseGatesSideAPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta,bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimerEx("PlantingBombGenoveseGates", 2000, false, "d", 1);
                    GenoveseGatesSideAPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Genovese mafijos vartø A pusës.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios pusës sprogdinti nereikia,sprogdinkite kitoje puseje.");
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, -1058.81750, -1250.30530, 128.60240))
        {
            if(GenoveseGatesDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti,vartai ir taip jau iðkritæ..");
            }
            else if(GenoveseGatesSideBBroken == false)
            {
                if(GenoveseGatesSideBPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(GenoveseGatesSideBPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta,bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimerEx("PlantingBombGenoveseGates", 2000, false, "d", 2);
                    GenoveseGatesSideBPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Genovese mafijos vartø B pusës.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ðios pusës sprogdinti nereikia,sprogdinkite kitoje puseje.");
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1, -1070.31995, -1292.08923, 129.57220))
        {
            if(GenoveseDoorsDown == true)
            {
                ErrorMsg(playerid,"• Nëra kà sprogdinti,durys ir taip jau iðkritusios..");
            }
            else
            {
                if(GenoveseDoorsPlanting == true)
                {
                    ErrorMsg(playerid,"• Bomba jau dedama.");
                }
                else if(GenoveseDoorsPlanted == true)
                {
                    ErrorMsg(playerid,"• Bomba jau padëta,bëk ðalin.");
                }
                else
                {
                    ClearAnimations(playerid, 1);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                    SetTimer("PlantingBombGenoveseDoors", 2000, false);
                    GenoveseDoorsPlanting = true;
                    cmd_tr(playerid,"Uþminuoju bombà prie Genovese mafijos sleptuvës durø.");
                    switch(PlayerDB[playerid][VIP])
                    {
                        case 1:
                        {
                            PlusPlayerScore(playerid,20);
                            PlayerDB[playerid][Job9XP]+=20;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +20XP prie darbo(„Aro“) patirties.");
                        }
                        case 2:
                        {
                            PlusPlayerScore(playerid,10);
                            PlayerDB[playerid][Job9XP]+=10;
                            SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos uþminavimà gavote +10XP prie darbo(„Aro“) patirties.");
                        }
                    }
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti prie galimai sprogdinamo objekto.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugininkams.");
    }
    return 1;
}
forward PlantingBombLuccheseGates(Site);
public PlantingBombLuccheseGates(Site)
{
    switch(Site)
    {
        case 1:
        {
            LuccheseGatesSideABombObject = CreateDynamicObject(1252, -715.45203, 977.08472, 12.2998,   0.00000, 0.00000, 90.00000);
            LuccheseGatesSideAPlanting = false;
            LuccheseGatesSideAPlanted = true;
            SetTimerEx("DetonatingBombLuccheseGates", 11000, false, "d", 1);
        }
        case 2:
        {
            LuccheseGatesSideBBombObject = CreateDynamicObject(1252, -715.45203, 967.58472, 12.29980,   0.00000, 0.00000, 90.00000);
            LuccheseGatesSideBPlanting = false;
            LuccheseGatesSideBPlanted = true;
            SetTimerEx("DetonatingBombLuccheseGates", 11000, false, "d", 2);
        }
    }
    return 1;
}
forward DetonatingBombLuccheseGates(Site);
public DetonatingBombLuccheseGates(Site)
{
    switch(Site)
    {
        case 1:
        {
            CreateExplosion(-715.45203, 977.08472, 12.2998, 11, 5);
            DestroyDynamicObject(LuccheseGatesSideABombObject);
            LuccheseGatesSideAPlanted = false;
            LuccheseGatesSideABroken = true;
            if(LuccheseGatesSideBBroken == true)
            {
                LuccheseGatesDown = true;
                MoveDynamicObject(LuccheseMafijaGates, -712.3687, 971.9977, 11.5650, 6, 90, -3, 90);
                UpdateDynamic3DTextLabelText(LuccheseMafijaGatesText, PILKA, "{AFAFAF}Vartai buvo iðsprogdinti.");
                SetTimer("ResetLuccheseGates", 5 * 60 * 1000, false);
            }
        }
        case 2:
        {
            CreateExplosion(-715.45203, 967.58472, 12.29980, 11, 5);
            DestroyDynamicObject(LuccheseGatesSideBBombObject);
            LuccheseGatesSideBPlanted = false;
            LuccheseGatesSideBBroken = true;
            if(LuccheseGatesSideABroken == true)
            {
                LuccheseGatesDown = true;
                MoveDynamicObject(LuccheseMafijaGates, -712.3687, 971.9977, 11.5650, 6, 90, -3, 90);
                UpdateDynamic3DTextLabelText(LuccheseMafijaGatesText, PILKA, "{AFAFAF}Vartai buvo iðsprogdinti.");
                SetTimer("ResetLuccheseGates", 5 * 60 * 1000, false);
            }
        }
    }
    return 1;
}
forward ResetLuccheseGates();
public ResetLuccheseGates()
{
    LuccheseGatesSideABroken = false;
    LuccheseGatesSideAPlanting = false;
    LuccheseGatesSideAPlanted = false;
    LuccheseGatesSideBBroken = false;
    LuccheseGatesSideBPlanting = false;
    LuccheseGatesSideBPlanted = false;
    LuccheseGatesDown = false;
    MoveDynamicObject(LuccheseMafijaGates, -715.38000, 972.19702, 13.85900,15,   0.00000, 0.00000, 90.00000);
    LuccheseMafijaGatesState = false;
    UpdateDynamic3DTextLabelText(LuccheseMafijaGatesText, PILKA, "{AFAFAF}Uþdarë: {FF0000}Sistema");
    return 1;
}
forward PlantingBombLuccheseDoors();
public PlantingBombLuccheseDoors()
{
    LuccheseDoorsBombObject = CreateDynamicObject(1252, -675.03961, 938.24182, 12.30130,   0.00000, 0.00000, 90.00000);
    LuccheseDoorsPlanting = false;
    LuccheseDoorsPlanted = true;
    SetTimer("DetonatingBombLuccheseDoors", 8000, false);
    return 1;
}
forward DetonatingBombLuccheseDoors();
public DetonatingBombLuccheseDoors()
{
    CreateExplosion(-675.03961, 938.24182, 12.30130, 11, 3);
    DestroyDynamicObject(LuccheseDoorsBombObject);
    LuccheseDoorsPlanted = false;
    LuccheseDoorsDown = true;
    MoveDynamicObject(LuccheseMafijaGarageDoors, -674.9693, 938.2260, 11.6320, 6, 90.0000, 0.0000, 90.0000);
    SetTimer("ResetLuccheseDoors", 5 * 60 * 1000, false);
    return 1;
}
forward ResetLuccheseDoors();
public ResetLuccheseDoors()
{
    LuccheseDoorsPlanting = false;
    LuccheseDoorsPlanted = false;
    LuccheseDoorsDown = false;
    MoveDynamicObject(LuccheseMafijaGarageDoors, -674.9693, 938.2260, 11.5632,15,   0.0000, 0.0000, 90.0000);
    LuccheseMafijaGarageDoorsState = false;
    return 1;
}

//Genovese alternative
forward PlantingBombGenoveseGates(Site);
public PlantingBombGenoveseGates(Site)
{
    switch(Site)
    {
        case 1:
        {
            GenoveseGatesSideABombObject = CreateDynamicObject(1252, -1058.81750, -1260.80530, 128.60240,   0.00000, 0.00000, 90.00000);
            GenoveseGatesSideAPlanting = false;
            GenoveseGatesSideAPlanted = true;
            SetTimerEx("DetonatingBombGenoveseGates", 11000, false, "d", 1);
        }
        case 2:
        {
            GenoveseGatesSideBBombObject = CreateDynamicObject(1252, -1058.81750, -1250.30530, 128.60240,   0.00000, 0.00000, 90.00000);
            GenoveseGatesSideBPlanting = false;
            GenoveseGatesSideBPlanted = true;
            SetTimerEx("DetonatingBombGenoveseGates", 11000, false, "d", 2);
        }
    }
    return 1;
}
forward DetonatingBombGenoveseGates(Site);
public DetonatingBombGenoveseGates(Site)
{
    switch(Site)
    {
        case 1:
        {
            CreateExplosion(-1058.81750, -1260.80530, 128.60240, 11, 5);
            DestroyDynamicObject(GenoveseGatesSideABombObject);
            GenoveseGatesSideAPlanted = false;
            GenoveseGatesSideABroken = true;
            if(GenoveseGatesSideBBroken == true)
            {
                GenoveseGatesDown = true;
                MoveDynamicObject(GenoveseMafijaGates, -1061.8350, -1255.9030, 128.3200, 6, 90.5000, -3.0000, -90.0000);
                UpdateDynamic3DTextLabelText(GenoveseMafijaGatesText, PILKA, "{AFAFAF}Vartai buvo iðsprogdinti.");
                SetTimer("ResetGenoveseGates", 5 * 60 * 1000, false);
            }
        }
        case 2:
        {
            CreateExplosion(-1058.81750, -1250.30530, 128.60240, 11, 5);
            DestroyDynamicObject(GenoveseGatesSideBBombObject);
            GenoveseGatesSideBPlanted = false;
            GenoveseGatesSideBBroken = true;
            if(GenoveseGatesSideABroken == true)
            {
                GenoveseGatesDown = true;
                MoveDynamicObject(GenoveseMafijaGates, -1061.8350, -1255.9030, 128.3200, 6, 90.5000, -3.0000, -90.0000);
                UpdateDynamic3DTextLabelText(GenoveseMafijaGatesText, PILKA, "{AFAFAF}Vartai buvo iðsprogdinti.");
                SetTimer("ResetGenoveseGates", 5 * 60 * 1000, false);
            }
        }
    }
    return 1;
}
forward ResetGenoveseGates();
public ResetGenoveseGates()
{
    GenoveseGatesSideABroken = false;
    GenoveseGatesSideAPlanting = false;
    GenoveseGatesSideAPlanted = false;
    GenoveseGatesSideBBroken = false;
    GenoveseGatesSideBPlanting = false;
    GenoveseGatesSideBPlanted = false;
    GenoveseGatesDown = false;
    MoveDynamicObject(GenoveseMafijaGates, -1058.8350, -1255.9030, 130.8790,15, 0.0000, 0.0000, -90.0000);
    GenoveseMafijaGatesState = false;
    UpdateDynamic3DTextLabelText(GenoveseMafijaGatesText, PILKA, "{AFAFAF}Uþdarë: {FF0000}Sistema");
    return 1;
}

forward PlantingBombGenoveseDoors();
public PlantingBombGenoveseDoors()
{
    GenoveseDoorsBombObject = CreateDynamicObject(1252, -1070.31995, -1292.08923, 129.57220,   0.00000, 0.00000, 90.00000);
    GenoveseDoorsPlanting = false;
    GenoveseDoorsPlanted = true;
    SetTimer("DetonatingBombGenoveseDoors", 8000, false);
    return 1;
}
forward DetonatingBombGenoveseDoors();
public DetonatingBombGenoveseDoors()
{
    CreateExplosion(-1070.31995, -1292.08923, 129.57220, 11, 3);
    DestroyDynamicObject(GenoveseDoorsBombObject);
    GenoveseDoorsPlanted = false;
    GenoveseDoorsDown = true;
    MoveDynamicObject(GenoveseMafijaGarageDoors, -1070.1543, -1292.0240, 128.3708, 6, 90.0000, 0.0000, 90.0000);
    SetTimer("ResetGenoveseDoors", 5 * 60 * 1000, false);
    return 1;
}
forward ResetGenoveseDoors();
public ResetGenoveseDoors()
{
    GenoveseDoorsPlanting = false;
    GenoveseDoorsPlanted = false;
    GenoveseDoorsDown = false;
    MoveDynamicObject(GenoveseMafijaGarageDoors, -1070.15430, -1292.02405, 128.37080,15,   0.00000, 0.00000, 90.00000);
    GenoveseMafijaGarageDoorsState = false;
    return 1;
}
PreloadAnimLib(playerid, animlib[])
{
    ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
CMD:zonos(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        new info[400];
        switch(A51_UZIMTA)
        {
            case 0:
            {
                strcat(info, "{FFFFFF}A51 zona - {00FF00}laisva\n");
            }
            case 1:
            {
                strcat(info, "{FFFFFF}A51 zona - {FF0000}uþimta(Policijos)\n");
            }
            case 9:
            {
                strcat(info, "{FFFFFF}A51 zona - {FF0000}uþimta(„Aras“)\n");
            }
        }
        switch(A52_UZIMTA)
        {
            case 0:
            {
                strcat(info, "{FFFFFF}A52 zona - {00FF00}laisva");
            }
            case 1:
            {
                strcat(info, "{FFFFFF}A52 zona - {FF0000}uþimta(Policijos)");
            }
            case 9:
            {
                strcat(info, "{FFFFFF}A52 zona - {FF0000}uþimta(„Aras“)");
            }
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}A51 ir A52 zonø informacija", info, "Gerai","");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugos pareigûnams.");
    }
    return 1;
}
stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;    // Making the vehicle rotation compatible with pawns sin/cos
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
    y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
    z = zoff + z;
}
CMD:xp(playerid,params[])
{
    new info[1024];
    new string[128];
    format(string, 128, "{FFFFFF}Policijos pareigûno patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job1XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Mediko patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job2XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Taksi vairuotojo patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job4XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Mechaniko patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job5XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}„Aro“ bûrio nario patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job9XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Patirtis Lucchese mafijoje: {00FF00}%d XP\n", PlayerDB[playerid][Job7XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Patirtis Genovese mafijoje: {00FF00}%d XP\n", PlayerDB[playerid][Job8XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Radijos laidø vedëjo patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job10XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Tolimûjø reisø vairuotojo patirtis: {00FF00}%d XP\n\n", PlayerDB[playerid][Job21XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Bendra patirtis: {00FF00}%d XP\n", GetPlayerScore(playerid));
    strcat(info, string);
    format(string, 128, "{FFFFFF}Bendra darbø patirtis: {00FF00}%d XP\n", PlayerDB[playerid][Job1XP]+PlayerDB[playerid][Job2XP]+PlayerDB[playerid][Job4XP]+PlayerDB[playerid][Job5XP]+PlayerDB[playerid][Job7XP]+PlayerDB[playerid][Job8XP]+PlayerDB[playerid][Job9XP]+PlayerDB[playerid][Job10XP]+PlayerDB[playerid][Job21XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Bendra patirtis teisësaugoje: {00FF00}%d XP\n", PlayerDB[playerid][Job1XP]+PlayerDB[playerid][Job9XP]);
    strcat(info, string);
    format(string, 128, "{FFFFFF}Bendra patirtis mafijose: {00FF00}%d XP", PlayerDB[playerid][Job7XP]+PlayerDB[playerid][Job8XP]);
    strcat(info, string);

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patirtis", info, "Gerai","");
    return 1;
}
forward MakeControllable(playerid);
public MakeControllable(playerid)
{
    TogglePlayerControllable(playerid, 1);
}
forward CloseBankDoors1();
public CloseBankDoors1()
{
    MoveDynamicObject(BankoSecurityDurys, 1375.8600, -963.8800, 199.9900, 0.05, 0, 0, 0);
    BankSecurityDoorsDestroyed = false;
    BankSecurityDoorsOpen = false;
    BankSecurityDoorsBeingPlanted = false;
    BankSecurityDoorsTimeLock = 0;
}
CMD:padetibomba(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]))
    {
        if(IsJobFromMafia(PlayerDB[playerid][Direktorius]) == 0 && IsJobFromMafia(PlayerDB[playerid][Pavaduotojas]) == 0)
        {
            ErrorMsg(playerid,"• Ðià komandà gali naudoti tik mafijos vadas arba vado pavaduotojas.");
            return 1;
        }
        new LawOfficers = 0;
        new bool:LawValdziaOn = false;
        for(new p = 0; p<=GetPlayerPoolSize();p++)
        {
            if(IsJobFromLaw(PlayerDB[p][Job]) && PlayerDB[p][AfkState] == false)
            {
                LawOfficers+=1;
                if(IsJobFromLaw(PlayerDB[p][Direktorius]) == 1 || IsJobFromLaw(PlayerDB[p][Pavaduotojas]) == 1)
                {
                    LawValdziaOn = true;
                }
            }
        }
        if(LawValdziaOn == false)
        {
            ErrorMsg(playerid,"• Nëra nei vieno teisësaugos institucijø direktoriaus ar pavaduotojo.");
            return 1;
        }
        if(gettime() < BankCantBeRobbedTill)
        {
            ErrorMsg(playerid,"• Nepraëjo 2 valandos nuo praëjusio grobimo.");
            return 1;
        }
        new hours;
        gettime(hours);
        if(hours >= 0 && hours < 8)
        {
            ErrorMsg(playerid,"• Ðià komandà galima naudoti tik nuo 8:00 iki 23:59.");
            return 1;
        }
        if(LawOfficers < 5)
        {
            ErrorMsg(playerid,"• Norint naudotis ðia komanda serveryje turi bûti bent 5 aktyvûs teisësaugininkai.");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid, 1, 1375.9926, -963.7932, 201.0964))
        {
            if(BankSecurityDoorsOpen == true)
            {
                ErrorMsg(playerid,"• Durys atidarytos,nereikia sprogdinti.");
            }
            else if(BankSecurityDoorsDestroyed == true)
            {
                ErrorMsg(playerid,"• Durys jau sugadintos.");
            }
            else if(BankSecurityDoorsBeingPlanted == true)
            {
                ErrorMsg(playerid,"• Bomba padëta.");
            }
            else
            {
                BankSecurityDoorsBeingPlanted = true;
                ClearAnimations(playerid, 1);
                ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                SetTimer("PlantingBankDoors", 2000, false);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2, 1376.5295, -968.5149, 201.4500))
        {
            if(BankSafeOpen == true)
            {
                ErrorMsg(playerid,"• Seifas atviras.");
            }
            else if(BankoSeifasSprogo == true)
            {
                ErrorMsg(playerid,"• Jau susprogo.");
            }
            else if(BankSafePlanted == true)
            {
                ErrorMsg(playerid,"• Seifas jau uþminuotas.");
            }
            else
            {
                new laikas;
                if(sscanf(params, "d", laikas))
                {
                    UsageMessage(playerid,"• Sprogdinti seifà pasirinkus sprogdinimo laikà: /padetibomba [10/15/25]");
                }
                else
                {
                    switch(laikas)
                    {
                        case 10:
                        {
                            BankSafePlanted = true;
                            ClearAnimations(playerid, 1);
                            ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                            SetTimerEx("PlantingBankSafe", 2000, false,"d",10);
                            SendClientMessage(playerid, RAUDONA, "• Seifas minuojamas ir sprogs uþ 10min. Taèiau dar yra galimybë iðminuoti.");
                        }
                        case 15:
                        {
                            BankSafePlanted = true;
                            ClearAnimations(playerid, 1);
                            ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                            SetTimerEx("PlantingBankSafe", 2000, false,"d",15);
                            SendClientMessage(playerid, RAUDONA, "• Seifas minuojamas ir sprogs uþ 15min. Taèiau dar yra galimybë iðminuoti.");
                        }
                        case 25:
                        {
                            BankSafePlanted = true;
                            ClearAnimations(playerid, 1);
                            ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 3000, 1);
                            SetTimerEx("PlantingBankSafe", 2000, false,"d",25);
                            SendClientMessage(playerid, RAUDONA, "• Seifas minuojamas ir sprogs uþ 25min. Taèiau dar yra galimybë iðminuoti.");
                        }
                        default:
                        {
                            UsageMessage(playerid,"• Sprogdinti seifà pasirinkus sprogdinimo laikà: /padetibomba [10/15/25]");
                        }
                    }
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti prie objekto kurá galima bûtu uþminuoti.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik Mafijø nariams.");
    }
    return 1;
}
forward PlantingBankSafe(Time);
public PlantingBankSafe(Time)
{
    BankCantBeRobbedTill = gettime() + Time * 60 + (2 * 60*60);
    switch(Time)
    {
        case 25:
        {
            BankBomb[0] = CreateDynamicObject(1252, 1375.53735, -968.39624, 201.39302,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[1] = CreateDynamicObject(1252, 1375.53662, -968.41766, 202.52788,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[2] = CreateDynamicObject(1252, 1375.59167, -968.35229, 200.34160,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[3] = CreateDynamicObject(1252, 1377.37781, -968.31964, 202.71315,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[4] = CreateDynamicObject(1252, 1377.48157, -968.37091, 200.36707,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[5] = CreateDynamicObject(1252, 1376.60120, -968.29150, 201.01996,   0.00000, 0.00000, 0.00000,1,20);
            BankExplosionTimer = SetTimer("BankExplosion25",  25 * 60 * 1000, false);
        }
        case 15:
        {
            BankBomb[0] = CreateDynamicObject(1252, 1375.53735, -968.39624, 201.39302,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[1] = CreateDynamicObject(1252, 1375.53662, -968.41766, 202.52788,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[2] = CreateDynamicObject(1252, 1375.59167, -968.35229, 200.34160,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[3] = CreateDynamicObject(1252, 1377.37781, -968.31964, 202.71315,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[4] = CreateDynamicObject(1252, 1377.38293, -968.31964, 201.62128,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[5] = CreateDynamicObject(1252, 1377.48157, -968.37091, 200.36707,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[6] = CreateDynamicObject(1252, 1376.52771, -968.37158, 202.80426,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[7] = CreateDynamicObject(1252, 1376.58215, -968.37067, 200.14447,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[8] = CreateDynamicObject(1252, 1376.60120, -968.29150, 201.01996,   0.00000, 0.00000, 0.00000,1,20);
            BankExplosionTimer = SetTimer("BankExplosion15", 15  * 60 * 1000, false);
        }
        case 10:
        {
            BankBomb[0] = CreateDynamicObject(1252, 1375.57227, -968.37128, 200.80388,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[1] = CreateDynamicObject(1252, 1375.53735, -968.39624, 201.39302,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[2] = CreateDynamicObject(1252, 1375.53503, -968.44019, 201.95515,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[3] = CreateDynamicObject(1252, 1375.53662, -968.41766, 202.52788,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[4] = CreateDynamicObject(1252, 1375.59167, -968.35229, 200.34160,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[5] = CreateDynamicObject(1252, 1376.38354, -968.37097, 202.32574,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[6] = CreateDynamicObject(1252, 1376.41663, -968.36432, 201.19902,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[7] = CreateDynamicObject(1252, 1376.38257, -968.37097, 200.39018,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[8] = CreateDynamicObject(1252, 1377.18347, -968.37091, 202.71315,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[9] = CreateDynamicObject(1252, 1377.18860, -968.37091, 201.62128,   0.00000, 0.00000, 0.00000,1,20);
            BankBomb[10] = CreateDynamicObject(1252, 1377.25281, -968.34094, 200.57227,   0.00000, 0.00000, 0.00000,1,20);
            BankExplosionTimer = SetTimer("BankExplosion10", 10  * 60 * 1000, false);
        }
    }
    BankExplodesAt = gettime() + 60*Time;
}

forward PlantingBankDoors();
public PlantingBankDoors()
{
    BankDoorsBomb = CreateDynamicObject(1252, 1375.9926, -963.7932, 201.0964, 0, 0, 0.00000,1,20);
    SetTimer("DetonatingBankDoors", 11000, false);
}
forward BankExplosion10();
forward BankExplosion15();
forward BankExplosion25();

public BankExplosion10()
{
    for(new p = 0;p<=GetPlayerPoolSize();p++)
    {
        if(IsPlayerInRangeOfPoint(p, 100, 1375.9926, -963.7932, 201.0964))
        {
            if(GetPlayerVirtualWorld(p) == 1 && GetPlayerInterior(p) == 20)
            {
                CreateExplosionForPlayer(p, 1376.38354, -968.37097, 202.32574, 11, 10);
            }
        }
    }
    DestroyDynamicObject(BankBomb[0]);
    DestroyDynamicObject(BankBomb[1]);
    DestroyDynamicObject(BankBomb[2]);
    DestroyDynamicObject(BankBomb[3]);
    DestroyDynamicObject(BankBomb[4]);
    DestroyDynamicObject(BankBomb[5]);
    DestroyDynamicObject(BankBomb[6]);
    DestroyDynamicObject(BankBomb[7]);
    DestroyDynamicObject(BankBomb[8]);
    DestroyDynamicObject(BankBomb[9]);
    DestroyDynamicObject(BankBomb[10]);
    MoveDynamicObject(BankoSeifas, 1376.5295, -968.5149, 199.9500, 90, 90.0000, 0.0000, -9.1333);
    BankExplodesAt = 0;
    BankSafeOpen = true;
    BankSafePlanted = false;
    BankoSeifasSprogo = true;
    for(new ObjectNum = 0;ObjectNum < 10; ObjectNum++)
    {
        if(IsValidDynamicObject(BankMoneyStack[ObjectNum]))
        {
            DestroyObject(BankMoneyStack[ObjectNum]);
            BankMoneyStack[ObjectNum] = INVALID_OBJECT_ID;
        }
        BankMoneyStackTaken[ObjectNum] = false;
    }
    BankMoneyStack[0] = CreateDynamicObject(1550, 1378.24536, -977.55951, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[1] = CreateDynamicObject(1550, 1377.83240, -977.64569, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[2] = CreateDynamicObject(1550, 1377.97192, -977.26794, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    TakeStackLabel = CreateDynamic3DTextLabel("[!] Maiðui paimti spauskite ALT.", RAUDONA , 1377.8324, -977.1457, 200.3519, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 20);
    SetTimer("EndBankRobbery", 1000 * 60 * 15, false);
    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
    {
        if(IsJobFromLaw(PlayerDB[pid][Job]))
        {
            SendClientMessage(pid, RAUDONA, "[EKSTREMALI SITUACIJA] San-Fierro miesto centr. banke ávyko sprogimas,buvo ásilauþta á banko saugyklà.");
            SendClientMessage(pid, RAUDONA, "Skubëkite á ávykio vietà uþkirsti kelià nelegaliai apiplëðimui.");
        }
    }
}
public BankExplosion15()
{
    for(new p = 0;p<=GetPlayerPoolSize();p++)
    {
        if(IsPlayerInRangeOfPoint(p, 100, 1375.9926, -963.7932, 201.0964))
        {
            if(GetPlayerVirtualWorld(p) == 1 && GetPlayerInterior(p) == 20)
            {
                CreateExplosionForPlayer(p, 1376.38354, -968.37097, 202.32574, 11, 10);
            }
        }
    }
    DestroyDynamicObject(BankBomb[0]);
    DestroyDynamicObject(BankBomb[1]);
    DestroyDynamicObject(BankBomb[2]);
    DestroyDynamicObject(BankBomb[3]);
    DestroyDynamicObject(BankBomb[4]);
    DestroyDynamicObject(BankBomb[5]);
    DestroyDynamicObject(BankBomb[6]);
    DestroyDynamicObject(BankBomb[7]);
    DestroyDynamicObject(BankBomb[8]);
    DestroyDynamicObject(BankBomb[9]);
    DestroyDynamicObject(BankBomb[10]);
    MoveDynamicObject(BankoSeifas, 1376.5295, -968.5149, 199.9500, 90, 90.0000, 0.0000, -9.1333);
    BankSafeOpen = true;
    BankSafePlanted = false;
    BankExplodesAt = 0;
    BankoSeifasSprogo = true;
    for(new ObjectNum = 0;ObjectNum < 10; ObjectNum++)
    {
        if(IsValidDynamicObject(BankMoneyStack[ObjectNum]))
        {
            DestroyObject(BankMoneyStack[ObjectNum]);
            BankMoneyStack[ObjectNum] = INVALID_OBJECT_ID;
        }
        BankMoneyStackTaken[ObjectNum] = false;
    }
    BankMoneyStack[0] = CreateDynamicObject(1550, 1378.24536, -977.55951, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[1] = CreateDynamicObject(1550, 1377.83240, -977.64569, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[2] = CreateDynamicObject(1550, 1377.97192, -977.26794, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[3] = CreateDynamicObject(1550, 1377.52600, -977.41846, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[4] = CreateDynamicObject(1550, 1377.36658, -977.79840, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[5] = CreateDynamicObject(1550, 1378.42224, -977.15747, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[6] = CreateDynamicObject(1550, 1378.73694, -977.60443, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    TakeStackLabel = CreateDynamic3DTextLabel("[!] Maiðui paimti spauskite ALT.", RAUDONA , 1377.8324, -977.1457, 200.3519, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 20);
    SetTimer("EndBankRobbery", 1000 * 60 * 15, false);
    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
    {
        if(IsJobFromLaw(PlayerDB[pid][Job]))
        {
            SendClientMessage(pid, RAUDONA, "[EKSTREMALI SITUACIJA] San-Fierro miesto centr. banke ávyko sprogimas,buvo ásilauþta á banko saugyklà.");
            SendClientMessage(pid, RAUDONA, "Skubëkite á ávykio vietà uþkirsti kelià nelegaliai apiplëðimui.");
        }
    }
}
public BankExplosion25()
{
    for(new p = 0;p<=GetPlayerPoolSize();p++)
    {
        if(IsPlayerInRangeOfPoint(p, 100, 1375.9926, -963.7932, 201.0964))
        {
            if(GetPlayerVirtualWorld(p) == 1 && GetPlayerInterior(p) == 20)
            {
                CreateExplosionForPlayer(p, 1376.38354, -968.37097, 202.32574, 11, 10);
            }
        }
    }
    DestroyDynamicObject(BankBomb[0]);
    DestroyDynamicObject(BankBomb[1]);
    DestroyDynamicObject(BankBomb[2]);
    DestroyDynamicObject(BankBomb[3]);
    DestroyDynamicObject(BankBomb[4]);
    DestroyDynamicObject(BankBomb[5]);
    DestroyDynamicObject(BankBomb[6]);
    DestroyDynamicObject(BankBomb[7]);
    DestroyDynamicObject(BankBomb[8]);
    DestroyDynamicObject(BankBomb[9]);
    DestroyDynamicObject(BankBomb[10]);
    MoveDynamicObject(BankoSeifas, 1376.5295, -968.5149, 199.9500, 90, 90.0000, 0.0000, -9.1333);
    BankSafeOpen = true;
    BankSafePlanted = false;
    BankExplodesAt = 0;
    BankoSeifasSprogo = true;
    for(new ObjectNum = 0;ObjectNum < 10; ObjectNum++)
    {
        if(IsValidDynamicObject(BankMoneyStack[ObjectNum]))
        {
            DestroyObject(BankMoneyStack[ObjectNum]);
            BankMoneyStack[ObjectNum] = INVALID_OBJECT_ID;
        }
        BankMoneyStackTaken[ObjectNum] = false;
    }
    BankMoneyStack[0] = CreateDynamicObject(1550, 1378.24536, -977.55951, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[1] = CreateDynamicObject(1550, 1377.83240, -977.64569, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[2] = CreateDynamicObject(1550, 1377.97192, -977.26794, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[3] = CreateDynamicObject(1550, 1377.52600, -977.41846, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[4] = CreateDynamicObject(1550, 1377.36658, -977.79840, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[5] = CreateDynamicObject(1550, 1378.42224, -977.15747, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[6] = CreateDynamicObject(1550, 1378.73694, -977.60443, 200.35193,   0.00000, 0.00000, 0.00000,1,20);
    BankMoneyStack[7] = CreateDynamicObject(1550, 1378.57739, -976.89459, 200.15588,   0.00000, -18.00000, -47.00000,1,20);
    BankMoneyStack[8] = CreateDynamicObject(1550, 1377.63953, -977.00494, 200.15588,   0.00000, -18.00000, 258.00000,1,20);
    BankMoneyStack[9] = CreateDynamicObject(1550, 1378.07874, -976.96252, 200.15588,   0.00000, 0.00000, 0.00000,1,20);
    TakeStackLabel = CreateDynamic3DTextLabel("[!] Maiðui paimti spauskite ALT.", RAUDONA , 1377.8324, -977.1457, 200.3519, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 20);
    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
    {
        if(IsJobFromLaw(PlayerDB[pid][Job]))
        {
            SendClientMessage(pid, RAUDONA, "[EKSTREMALI SITUACIJA] San-Fierro miesto centr. banke ávyko sprogimas,buvo ásilauþta á banko saugyklà.");
            SendClientMessage(pid, RAUDONA, "Skubëkite á ávykio vietà uþkirsti kelià nelegaliai apiplëðimui.");
        }
    }
    SetTimer("EndBankRobbery", 1000 * 60 * 15, false);
}
forward DetonatingBankDoors(Site);
public DetonatingBankDoors(Site)
{
    for(new p = 0;p<=GetPlayerPoolSize();p++)
    {
        if(IsPlayerInRangeOfPoint(p, 100, 1375.9926, -963.7932, 201.0964))
        {
            if(GetPlayerVirtualWorld(p) == 1 && GetPlayerInterior(p) == 20)
            {
                CreateExplosionForPlayer(p, 1375.9926, -963.7932, 201.0964, 11, 2);
            }
        }
    }
    MoveDynamicObject(BankoSecurityDurys, 1375.8600, -963.8800, 199.9900, 0.05, 90.0000, 7.6877, 0.0000);
    DestroyDynamicObject(BankDoorsBomb);
    BankSecurityDoorsDestroyed = true;
    BankSecurityDoorsOpen = true;
    BankSecurityDoorsBeingPlanted = false;
    SetTimer("CloseBankDoors1", 60 * 60000, false);
    for(new pid = 0;pid <= GetPlayerPoolSize();pid++)
    {
        if(IsJobFromLaw(PlayerDB[pid][Job]))
        {
            SendClientMessage(pid, RAUDONA, "[EKSTREMALI SITUACIJA] San-Fierro miesto centr. banke ávyko sprogimas,numanoma,kad vykdomas apipleðimas.");
            SendClientMessage(pid, RAUDONA, "Skubëkite á ávykio vietà uþkirsti kelià nelegaliai veiklai.");
        }
    }
}

CMD:nuimtibomba(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(IsPlayerInRangeOfPoint(playerid, 2, 1376.5295, -968.5149, 201.4500))
        {
            if(BankSafePlanted == true)
            {
                ClearAnimations(playerid, 1);
                ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_In", 4.1, 1, 1, 1, 0, 29000, 1);
                SetTimerEx("DefusingBankSafe", 29000, false,"d",playerid);
                GameTextForPlayer(playerid, "~R~Bandoma nukenksminti bomba..", 29000, 3);
            }
            else
            {
                ErrorMsg(playerid,"• Seifas nëra uþminuotas.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugai.");
    }
    return 1;
}
forward DefusingBankSafe(playerid);
public DefusingBankSafe(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 3, 1376.5295, -968.5149, 201.4500))
    {
        if(BankSafePlanted == true)
        {
            KillTimer(BankExplosionTimer);
            DestroyDynamicObject(BankBomb[0]);
            DestroyDynamicObject(BankBomb[1]);
            DestroyDynamicObject(BankBomb[2]);
            DestroyDynamicObject(BankBomb[3]);
            DestroyDynamicObject(BankBomb[4]);
            DestroyDynamicObject(BankBomb[5]);
            DestroyDynamicObject(BankBomb[6]);
            DestroyDynamicObject(BankBomb[7]);
            DestroyDynamicObject(BankBomb[8]);
            DestroyDynamicObject(BankBomb[9]);
            DestroyDynamicObject(BankBomb[10]);
            SendClientMessage(playerid, ZALIA, "• Bomba buvo nukenksminta.");
            cmd_tr(playerid,"Nukenksminau bombà, kuri buvo padëta San-Fierro banke.");
            switch(PlayerDB[playerid][VIP])
            {
                case 1:
                {
                    PlusPlayerScore(playerid,100);
                    PlayerDB[playerid][Job9XP]+=100;
                    SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos nukenksminimà gavote +100XP prie darbo(„Aro“) patirties.");
                }
                case 2:
                {
                    PlusPlayerScore(playerid,50);
                    PlayerDB[playerid][Job9XP]+=50;
                    SendClientMessage(playerid, ZALIA, "• Uþ sëkmingà bombos nukenksminimà gavote +50XP prie darbo(„Aro“) patirties.");
                }
            }
            new string[128];
            format(string, 128, "** Bomba buvo iðminuota. Iðminavæs þaidëjas %s(%i).", Vardas(playerid),playerid);
            for(new i = 0;i <= GetPlayerPoolSize();i++)
            {
                if(PlayerDB[i][Job] == 7 || PlayerDB[i][Job] == 8)
                {
                    SendClientMessage(i, RAUDONA, string);
                }
            }
            BankSafePlanted = false;
            BankExplodesAt = 0;
        }
    }
    return 1;
}
forward EndBankRobbery();
public EndBankRobbery()
{
    MoveDynamicObject(BankoSeifas,  1376.52954, -968.51489, 201.45001,90,   0.00000, 0.00000, 0.00000);
    BankSafeOpen = false;
    BankSafePlanted = false;
    BankoSeifasSprogo = false;
    if(IsValidDynamic3DTextLabel(TakeStackLabel))
    {
        DestroyDynamic3DTextLabel(TakeStackLabel);
    }
}
CMD:rskelbimas(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new input[144];
        if(sscanf(params, "s[144]", input))
        {
            UsageMessage(playerid,"• Skelbti skelbimà per radijà: /rskelbimas [Skelbimo tekstas].");
        }
        else
        {
            if(strlen(input) < 12)
            {
                ErrorMsg(playerid,"• Per trumpas skelbimas.");
            }
            else
            {
                new string[120];
                format(string, 120, "Radistas {FF3900}%s(%i) {FC6C43}skelbia skelbimà:",Vardas(playerid),playerid);
                for(new p = 0;p<=GetPlayerPoolSize();p++)
                {
                    SendClientMessage(p, 0xfc6c43FF, string);
                    SendClientMessage(p, 0xff3900FF, input);
                }
                SendClientMessage(playerid, ZALIA, "• Sëkmingai paskelbëte skelbimà.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:reteris(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new info[360];
        new C_Valandos,C_Minutes,C_Sekundes;
        C_Sekundes = gettime() - Eteris_LastUpdateTime;
        while(C_Sekundes >= 60)
        {
            C_Minutes+=1;
            C_Sekundes-=60;
        }
        while(C_Minutes >= 60)
        {
            C_Valandos+=1;
            C_Minutes-=60;
        }
        format(info, 360, "Ðiuo metu vykstanèios laidos pavadinimas - „%s“ \nLaida vyksta jau %02dval. %02dmin. %02dsek. \nLaidà pradëjæs radistas: %s", Eteris_LPavadinimas,C_Valandos,C_Minutes,C_Sekundes,Eteris_LStarter);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Eterio informacija", info, "Gerai","");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:rlaidospav(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new input[49];
        if(sscanf(params, "s[49]", input))
        {
            UsageMessage(playerid,"• Atnaujinti laidos pavadinimà: /rlaidospav [Naujas laidos pavadinimas].");
        }
        else
        {
            if(strlen(input) < 4)
            {
                ErrorMsg(playerid,"• Laidos pavadinimas netinkamas.");
            }
            else
            {
                format(Eteris_LPavadinimas, 49, "%s", input);
                format(Eteris_LStarter, 24, "%s", Vardas(playerid));
                Eteris_LastUpdateTime = gettime();
                new string[144];
                format(string, 144, "• Sëkmingai atnaujinote laidos pavadinimà á „%s“", input);
                SendClientMessage(playerid, ZALIA, string);
                format(string, 144, "Atnaujinau radijo laidos pavadinimà á „%s“", input);
                cmd_r(playerid,string);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:rsneketi(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new input[144];
        if(sscanf(params, "s[144]", input))
        {
            UsageMessage(playerid,"• Raðyti eteryje: /rsneketi [Tekstas].");
        }
        else
        {
            new string[144];
            format(string, 144, "Radijos laidos {FF3900}„%s“{FC6C43} vedëjas {FF3900}%s(%i){FC6C43}:",Eteris_LPavadinimas,Vardas(playerid),playerid);
            for(new p = 0;p<=GetPlayerPoolSize();p++)
            {
                SendClientMessage(p, 0xfc6c43FF, string);
                SendClientMessage(p, 0xff3900FF, input);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:rkviesti(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Pakviesti þaidëjà á eterá: /rkviesti [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id) && id != playerid)
            {
                if(PlayerDB[id][RadijosPasnekovas] == true)
                {
                    ErrorMsg(playerid,"• Þaidëjas jau yra pakviestas á tesioginá eterá.");
                }
                else
                {
                    PlayerDB[id][RadijosPasnekovas] = true;
                    new string[169];
                    format(string, 169, "• Sëkmingai pakvietëte %s(%i) á tesioginá eterá.", Vardas(id),id);
                    SendClientMessage(playerid, ZALIA, string);
                    SendClientMessage(id, -1, "• Jûs buvote pakviestas á tesioginá radijos eterá pokalbiui. Norëdami ðnekëti naudokite komandà /ieteri.");
                    format(string, 169, "{FF3900}%s(%i){FC6C43} buvo pakviestas á tesioginá eterá radijos laidoje: {FF3900}„%s“{FC6C43}.",Vardas(id),id,Eteris_LPavadinimas);
                    for(new p = 0;p<=GetPlayerPoolSize();p++)
                    {
                        if(p == id || p == playerid)
                        {
                            continue;
                        }
                        SendClientMessage(p, 0xfc6c43FF, string);
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas yra neprisijungæs.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:risspirti(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 10)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Iðmesti þaidëjà ið eterio: /risspirti [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id) && id != playerid)
            {
                if(PlayerDB[id][RadijosPasnekovas] == false)
                {
                    ErrorMsg(playerid,"• Þaidëjas negali ðnekëti tesioginiame eteryje.");
                }
                else
                {
                    PlayerDB[id][RadijosPasnekovas] = false;
                    new string[144];
                    format(string, 144, "• Baigëte pokalbá su %s(%i). Þaidëjas nebegali raðyti tiesioginiame eteryje.", Vardas(id),id);
                    SendClientMessage(playerid, ZALIA, string);
                    SendClientMessage(id, -1, "• Radistas uþbaigë pokalbá su jumis tiesioginiame eteryje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjas yra neprisijungæs.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik radijos laidø vedëjams.");
    }
    return 1;
}
CMD:ieteri(playerid,params[])
{
    if(PlayerDB[playerid][RadijosPasnekovas] == true)
    {
        new input[90];
        if(sscanf(params, "s[90]", input))
        {
            UsageMessage(playerid,"• Raðyti á eterá: /ieteri [Tekstas].");
        }
        else
        {
            new string[144];
            format(string, 144, "[RADIJAS | SKAMBUTIS] {FF3900}%s(%i){FC6C43}: %s",Vardas(playerid),playerid,input);
            for(new p = 0;p<=GetPlayerPoolSize();p++)
            {
                SendClientMessage(p, 0xfc6c43FF, string);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Neturite pakvietimo á tesioginá eterá.");
    }
    return 1;
}




forward OnLoadHousesList();
public OnLoadHousesList()
{
    if(LoadedHouses > 0)
    {
        for(new HouseIDOLHL = 0;HouseIDOLHL <= LoadedHouses;HouseIDOLHL++)
        {
            HouseInfo[HouseIDOLHL][HouseID] = -1;
            HouseInfo[HouseIDOLHL][HouseBought] = 0;
            DestroyDynamicPickup(HouseInfo[HouseIDOLHL][HousePickupID]);
            HouseInfo[HouseIDOLHL][HousePickupID] = -10;
            HouseInfo[HouseIDOLHL][HouseCost] = -1;
            DestroyDynamic3DTextLabel(HouseInfo[HouseIDOLHL][HouseLabel]);
            HouseInfo[HouseIDOLHL][HouseVirtualWorld] = -1;
            HouseInfo[HouseIDOLHL][HouseInteriorNumber] = -1;
            HouseInfo[HouseIDOLHL][HouseForCredits] = 0;
            HouseInfo[HouseIDOLHL][HouseMoneyInside] = 0;
        }
        LoadedHouses = 0;
        HousesWithOwners = 0;
    }
    new rows,tmpint;
    cache_get_data(rows,tmpint);
    for(new row = 0;row < rows && rows < MAX_HOUSES;row++)
    {
		new tmpstr[42];
        HouseInfo[row][HouseID] = cache_get_row_int(row, 0);
        HouseInfo[row][HouseBought] = cache_get_row_int(row, 1);
        HouseInfo[row][HouseCost] = cache_get_row_int(row, 2);
        HouseInfo[row][HousePosX] = cache_get_row_float(row, 3);
        HouseInfo[row][HousePosY] = cache_get_row_float(row, 4);
        HouseInfo[row][HousePosZ] = cache_get_row_float(row, 5);
        cache_get_row(row, 6, HouseInfo[row][HouseOwner], 1, 24);
        HouseInfo[row][HouseVirtualWorld] = cache_get_row_int(row, 7);
        HouseInfo[row][HouseInteriorNumber] = cache_get_row_int(row, 8);
        HouseInfo[row][HouseForCredits] = cache_get_row_int(row, 9);
        HouseInfo[row][HouseDoorsLocked] = cache_get_row_int(row, 10);
        HouseInfo[row][VaistaiNamie] = cache_get_row_int(row, 11);
        
		cache_get_row(row, 12, tmpstr);
  		format(HouseInfo[row][NamoRaktas], 24, "%s", tmpstr);
  		printf("Pirmas raktas: %s", HouseInfo[row][NamoRaktas]);
  		

		HouseInfo[row][HouseMoneyInside] = cache_get_row_int(row, 13);
		HouseInfo[row][Siuksles] = cache_get_row_int(row, 14);
		HouseInfo[row][NarkSlotState] = cache_get_row_int(row, 15);
		HouseInfo[row][NarkHome] = cache_get_row_int(row, 16);
		HouseInfo[row][NarkHomeHeroinas] = cache_get_row_int(row, 17);
		HouseInfo[row][NarkHomeKokainas] = cache_get_row_int(row, 18);
		HouseInfo[row][KiekTelpaNarku] = cache_get_row_int(row, 19);
		HouseInfo[row][HouseMokesciai] = cache_get_row_int(row, 20);
		HouseInfo[row][SviesaIjungta] = cache_get_row_int(row, 21);

        new text[256];

        if(HouseInfo[row][HouseForCredits] == 0)
        {
            if(HouseInfo[row][HouseBought] == 0)
            {
                format(text, 256, "%i Namas\nKaina: {FF0000}%s {FF7B24}€\nSavininkas: {FF0000}Nëra", HouseInfo[row][HouseID],AddSpaces(HouseInfo[row][HouseCost]));
                HouseInfo[row][HousePickupID] = CreateDynamicPickup(1273, 2, HouseInfo[row][HousePosX], HouseInfo[row][HousePosY],HouseInfo[row][HousePosZ], HouseInfo[row][HouseVirtualWorld]);// zalias
            }
            else
            {

                HousesWithOwners++;
                format(text, 256, "%i Namas\nKaina: {FF0000}%s {FF7B24}€\nSavininkas:{FF0000} %s", HouseInfo[row][HouseID],AddSpaces(HouseInfo[row][HouseCost]),HouseInfo[row][HouseOwner]);
                printf("%s", text);
                HouseInfo[row][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[row][HousePosX], HouseInfo[row][HousePosY],HouseInfo[row][HousePosZ], HouseInfo[row][HouseVirtualWorld]); // melynas
            }
        }
        else
        {
            if(HouseInfo[row][HouseBought] == 0)
            {
                format(text, 256, "%i Namas\nKaina: {FF0000}%s {FF7B24}kreditø\nSavininkas: {FF0000}Nëra", HouseInfo[row][HouseID],AddSpaces(HouseInfo[row][HouseCost]));
                HouseInfo[row][HousePickupID] = CreateDynamicPickup(1273, 2, HouseInfo[row][HousePosX], HouseInfo[row][HousePosY],HouseInfo[row][HousePosZ], HouseInfo[row][HouseVirtualWorld]);// zalias
            }
            else
            {
                HousesWithOwners++;
                format(text, 256, "%i Namas\nKaina: {FF0000}%s {FF7B24}kreditø\nSavininkas:{FF0000} %s", HouseInfo[row][HouseID],AddSpaces(HouseInfo[row][HouseCost]),HouseInfo[row][HouseOwner]);
                printf("%s", text);
                HouseInfo[row][HousePickupID] = CreateDynamicPickup(1272, 2, HouseInfo[row][HousePosX], HouseInfo[row][HousePosY],HouseInfo[row][HousePosZ], HouseInfo[row][HouseVirtualWorld]); // melynas
            }
        }
        HouseInfo[row][HouseLabel] = CreateDynamic3DTextLabel(text, 0xFF7B24FF, HouseInfo[row][HousePosX], HouseInfo[row][HousePosY],HouseInfo[row][HousePosZ], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseInfo[row][HouseVirtualWorld]);
        LoadedHouses+=1;
    }
    return 1;
}

forward LetPlayerDrive(playerid);
public LetPlayerDrive(playerid)
{
    TogglePlayerControllable(playerid, 1);
    return 1;
}
CMD:skginklai(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        new Ammo,WeaponID;
        if(sscanf(params, "k<weapon>d", WeaponID,Ammo))
        {
            UsageMessage(playerid,"• Komandos naudojimas: /skginklai [Ginklo pavadinimas arba ID] [Kulkø skaièius]");
        }
        else
        {
            if(WeaponID != 0)
            {
                if(Ammo < 0)
                {
                    Ammo = Ammo * (-1);
                }

                GivePlayerWeaponEx(playerid,WeaponID,Ammo);
                SendClientMessage(playerid, ZALIA, "• Ginklas paimtas");
            }
            else
            {
                ErrorMsg(playerid,"• Blogas ginklo ID");
            }
        }
    }
    return 1;
}
CMD:akomandos(playerid,params[])
{
    new info[2800];
    strcat(info,"{FFFFFF}I lygio administratoriaus komandos:\n\n");
    strcat(info,"\t{33AA33}/achat [Tekstas] {FFFFFF}- Paraðysite á administratoriø pokalbá, kurá matys tik administratoriai.\n");
    strcat(info,"\t{33AA33}/s [Tekstas] {FFFFFF}- Paraðo þinutæ visiems prisijungusiems þaidëjams.\n");
    strcat(info,"\t{33AA33}/gydytis {FFFFFF}- Susitaisysite maðina, bei pasigydysite.\n");
    strcat(info,"\t{33AA33}/to [Vardas_Pavardë/ID] {FFFFFF}- Nukeliausite pas kità þaidëjà.\n");
    strcat(info,"\t{33AA33}/pzu [Vardas_Pavardë/ID] {FFFFFF}- Priþiûrësite þaidëjà.\n");
    strcat(info,"\t{33AA33}/ginklai {FFFFFF}- Gausite administratoriø ginklus.\n");
    strcat(info,"\t{33AA33}/sk {FFFFFF}- Pradësite atgaliná skaièiavimà.\n");
    strcat(info,"\t{33AA33}/boom {FFFFFF}- Susprogdinsite tr.priemonæ kurioje sëdite.\n");
    strcat(info,"\t{33AA33}/kick [Vardas_Pavardë/ID] [Prieþastis] {FFFFFF}- Iðmesite þaidëjà ið serverio\n");
    strcat(info,"\t{33AA33}/tpm {FFFFFF}- Atsiteleportuosite prie savo nuosavos pirmos tr.priemonës\n");
    strcat(info,"\t{33AA33}/tpm1  {FFFFFF}- Atsiteleportuosite prie savo nuosavos antros tr.priemonës\n");
    strcat(info,"\t{33AA33}/tpdrag {FFFFFF}- Atsiteleportuosite á drag vieta.\n");
    strcat(info,"\t{33AA33}/tpdrift[2] {FFFFFF}- Atsiteleportuosite á drift vietas.\n");
    strcat(info,"\t{33AA33}/tpnascar {FFFFFF}- Atsiteleportuosite á nascar zonà.\n");
    strcat(info,"\t{33AA33}/tpbull {FFFFFF}- Atsiteleportuosite prie buliø kautyniø zonos.\n");
    strcat(info,"\t{33AA33}/race {FFFFFF}- Ájungsite/Iðjungsite race tr.priemonnes.\n");
    strcat(info,"\t{33AA33}/nascar {FFFFFF}- Ájungsite/Iðjungsite nascar tr.priemonnes.\n");
    strcat(info,"\t{33AA33}/azg [Vardas_Pavardë/ID] {FFFFFF}- Atimsite þaidëjo ginklus.\n");
    strcat(info,"\t{33AA33}/padeti [Vardas_Pavardë/ID] {FFFFFF}- Atsakysite á þaidëjo pagalbos klausimà.\n");
    strcat(info,"\t{33AA33}/az {FFFFFF}- Paraðyti þaidëjui asmeninæ þinutæ.\n");
    strcat(info,"\n{FFFFFF}II lygio administratoriaus komandos + virðuje paminëtos komandos:\n\n");
    strcat(info,"\t{33AA33}/mute [Vardas_Pavardë/ID] [Sekundës] [Prieþastis] {FFFFFF}- Uþtildysite þaidëjà.\n");
    strcat(info,"\t{33AA33}/unmute [Vardas_Pavardë/ID] [Prieþastis] {FFFFFF}- Atitildysite þaidëjà, kurá uþtildëte.\n");
    strcat(info,"\t{33AA33}/get [Vardas_Pavardë/ID] {FFFFFF}- Atkelsite þaidëjà prie savæs.\n");
    strcat(info,"\t{33AA33}/banex [Vardas_Pavardë/ID] [Laikas] [Prieþastis] {FFFFFF}- Uþblokuosite laikinai þaidëjà.\n");
    strcat(info,"\t+ Gausite papildomai 2 patirties taðkus á minute.\n");
    strcat(info,"\n{FFFFFF}III lygio administratoriaus komandos + virðuje paminëtos komandos:\n\n");
    strcat(info,"\t{33AA33}/heal [Vardas_Pavardë/ID] {FFFFFF}- Pagydysite þaidëjà ir uþdësite ðarvus.\n");
    strcat(info,"\t{33AA33}/ginklai {FFFFFF}- Gausite geresnius administratoriaus ginklus.\n");
    strcat(info,"\t{33AA33}/ban [Vardas_Pavardë/ID] [Prieþastis] {FFFFFF}- Uþblokuosite þaidëjà.\n");
    strcat(info,"\t{33AA33}/pildyti {FFFFFF}- Pripilsite degalø á tr.priemone.\n");
    strcat(info,"\t+ Gausite papildomai 3 patirties taðkus á minute.");

    strcat(info,"\n\n");
    strcat(info,"{FF0000}Administatoriaus statusà galite ásigyti paraðius /kreditai komandà.");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Admin Komandos", info, "Gerai", "");
    return 1;
}

CMD:spalva(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if(PlayerDB[playerid][BEGA] == 1)
        {
            ErrorMsg(playerid,"• Jûsø ieðko policija, todël ðios komandos naudoti negalite.");
            return 1;
        }
        ShowPlayerDialog(playerid, 215, DIALOG_STYLE_LIST, "{AFAFAF}Spalvos valdymas", "Paprasto þaidëjo spalva\nAdministratoriaus spalva\nVIP spalva", "Rinktis", "Atðaukti");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:salmas(playerid,params[])
{
    if(PlayerDB[playerid][Salmas18645] == 1)
    {
        if(PlayerDB[playerid][SuSalmu] == true)
        {
            RemovePlayerAttachedObject(playerid, SLOTForHelmet);
            PlayerDB[playerid][SuSalmu] = false;
        }
        else
        {
            if(IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
            {
                switch(GetPlayerSkin(playerid))
                {
                    case 0, 65, 74, 149, 208, 273: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
                    case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
                    case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
                    case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
                    case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
                    case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
                    case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
                    case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
                    case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
                    case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
                }
                SendClientMessage(playerid, ZALIA, "• Ðalmas uþdëtas sëkmingai");
                PlayerDB[playerid][SuSalmu] = true;
            }
            else
            {
                ErrorMsg(playerid,"• Ðalmo uþsidëti negalite.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Jûs neturite ðalmo.");
    }
    return 1;
}
CMD:mute(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 1)
    {
        new id,time,reason[64];
        //[dalis vardo] [sekundës] [prieþastis]
        if(sscanf(params, "uis[64]", id,time,reason))
        {
            UsageMessage(playerid,"Atimti teisæ ðnekëti: /mute [dalis vardo] [sekundës] [prieþastis]");
        }
        else
        {
            if(!IsPlayerConnected(id))
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
            else if(id == playerid && PlayerDB[playerid][adminlvl] != 5)
            {
                ErrorMsg(playerid,"• Ðavæs nutildyti negalite.");
            }
            else
            {
                if(time <= 1)
                {
                    ErrorMsg(playerid,"• Jûsø nurodytas laikas yra netinkamas jis turi bûti nurodytas teigiamas naturalusis skaièius ir didesnis uþ vienetà.");
                }
                else
                {
                    if(strlen(reason) < 4)
                    {
                        ErrorMsg(playerid,"• Jûsø nurodyta prieþastis yra per trumpa.");
                    }
                    else if(time > 7200 && PlayerDB[playerid][adminlvl] != 5)
                    {
                        ErrorMsg(playerid,"• Jûsø nurodytas laikas virðija 7200 sekundþiø.");
                    }
                    else if(time > 86400)
                    {
                        ErrorMsg(playerid,"• Daugiau nei 24 valandoms negalima.");
                    }
                    else if(PlayerDB[id][adminlvl] >= 4)
                    {
                        ErrorMsg(playerid,"• Ðio þaidëjo negalite nutildyti.");
                    }
                    else
                    {
                        if(PlayerDB[id][MutedPlayer] > 0)
                        {
                            ErrorMsg(playerid,"• Þaidëjas jau yra nutildytas.");
                        }
                        else
                        {
                            PlayerDB[id][MutedPlayer] = time;
                            format(PlayerDB[id][PlayerWhoGaveMute], 24, "%s", Vardas(playerid));
                            new string[128];
                            format(string, 128, "Ið jûsø buvo atimta teisë ðnekëti %i sekundëms. Teisæ atëmæs administratorius: %s(%i).", time,Vardas(playerid),playerid);
                            SendClientMessage(id, RAUDONA, string);
                            format(string, 128, "Prieþastis: %s", reason);
                            SendClientMessage(id, RAUDONA, string);
                            format(string, 128, "• Atëmete ið þaidëjo %s(%i) teisæ ðnekëti %i sekundëms.",Vardas(id),id,time);
                            SendClientMessage(playerid, ZALIA, string);
                            new years,month,day;
                            getdate(years, month, day);
                            new querys[512];
                            mysql_format(connectionHandle, querys, 512, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Administracija(%e) atëmë ið jûsø teisæ ðnekëti %d sek. uþ %e(%d-%02d-%02d)');", Vardas(id),Vardas(playerid),time,reason,years,month,day);
                            mysql_function_query(connectionHandle,querys,false,"SendQuery","");

                            format(string, sizeof(string), "Administratorius {7BAE39}%s {AADB69}uþtildë {7BAE39}%s {7BAE39}%d {AADB69}sek.",Vardas(playerid),Vardas(id),time);
                            SendClientMessageToAll(0xAADB69FF, string);
                            format(string, sizeof(string), "Prieþastis: {7BAE39}%s", reason);
                            SendClientMessageToAll(0xAADB69FF, string);

                        }
                    }
                }
            }

        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:unmute(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 1)
    {
        new id,reason[100];
        if(sscanf(params,"u s[100]",id,reason))
        {
            UsageMessage(playerid,"Suteikti teisæ ðnekëti: /unmute [V_P/ID] [Prieþastis].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid && PlayerDB[playerid][adminlvl] >= 4)
                {
                    ErrorMsg(playerid,"• Savæs negalite atitildyti.");
                    return 1;
                }

                else if(strlen(reason) < 3)
                {
                    ErrorMsg(playerid,"• Prieþastis per trumpa.");
                    return 1;
                }
                else if(PlayerDB[id][MutedPlayer] > 1)
                {
                    if(strcmp(PlayerDB[id][PlayerWhoGaveMute], Vardas(playerid), false) == 0 || PlayerDB[playerid][adminlvl] >= 4)
                    {
                        new string[128];

                        format(string,sizeof(string),"Administratorius {90C44D}%s {BBE880}atitildë þaidëjà {90C44D}%s",Vardas(playerid),Vardas(id));
                        SendClientMessageToAll(0xBBE880FF, string);
                        format(string,sizeof(string),"Prieþastis: {90C44D}%s",reason);
                        SendClientMessageToAll(0xBBE880FF, string);

                        if(IsValidDynamic3DTextLabel(PlayerDB[id][PlayerMuteLabel]))
                        {
                            DestroyDynamic3DTextLabel(PlayerDB[id][PlayerMuteLabel]);
                        }
                        format(string, 128, "• Graþinote teisæ ðnekëti %s(%i).", Vardas(id),id);
                        SendClientMessage(playerid, ZALIA, string);
                        PlayerDB[id][MutedPlayer] = 0;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Ne jûs atëmete teisæ ið þaidëjo ðnekëti.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas nëra praradæs teisës ðnekëti.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}

stock SetPlayerPosExt(playerid,Float:x, Float:y, Float:z,Float:A)
{
    SetPlayerPos(playerid, x,y,z);
    SetPlayerFacingAngle(playerid, A);
}
stock TeleportPlayerInToJail(playerid)
{
    SetPlayerSkinEx(playerid, 268);
    PlayerDB[playerid][BEGA] = 0;
    PlayerDB[playerid][BegaLaiko] = 0;
    SetPlayerColor(playerid, NematomaPilka);
    SetPlayerInterior(playerid, 1);
    SetPlayerVirtualWorld(playerid, 0);
    switch(random(21))
    {
        case 0:
        {
            SetPlayerPosExt(playerid,1283.0347,1446.5723,1206.1820,197.0657); // RandomPoint Jail
        }
        case 1:
        {
            SetPlayerPosExt(playerid,1286.9175,1446.6348,1206.1820,202.9235); // RandomPoint Jail
        }
        case 2:
        {
            SetPlayerPosExt(playerid,1283.0493,1457.3927,1206.1820,220.7518); // RandomPoint Jail
        }
        case 3:
            SetPlayerPosExt(playerid,1287.1333,1457.7102,1206.1820,220.7518); // RandomPoint Jail
        case 4:
            SetPlayerPosExt(playerid,1286.9312,1461.9958,1206.1820,352.2661); // RandomPoint Jail
        case 5:
            SetPlayerPosExt(playerid,1283.0293,1461.9600,1206.1820,352.2661); // RandomPoint Jail
        case 6:
            SetPlayerPosExt(playerid,1283.2051,1472.1472,1206.1820,338.9858); // RandomPoint Jail
        case 7:
            SetPlayerPosExt(playerid,1286.8750,1472.2604,1206.1820,338.9858); // RandomPoint Jail
        case 8:
            SetPlayerPosExt(playerid,1287.0981,1475.6069,1202.3860,242.1965); // RandomPoint Jail
        case 9:
            SetPlayerPosExt(playerid,1312.5186,1474.9363,1202.3860,93.5525); // RandomPoint Jail
        case 10:
            SetPlayerPosExt(playerid,1314.5605,1464.4125,1202.3860,93.5525); // RandomPoint Jail
        case 11:
            SetPlayerPosExt(playerid,1313.0366,1454.1991,1202.3860,93.5525); // RandomPoint Jail
        case 12:
            SetPlayerPosExt(playerid,1311.3828,1443.2078,1202.3860,93.5525); // RandomPoint Jail
        case 13:
            SetPlayerPosExt(playerid,1313.1772,1446.9154,1206.2860,125.2504); // RandomPoint Jail
        case 14:
            SetPlayerPosExt(playerid,1315.6226,1447.1328,1206.2860,170.2504); // RandomPoint Jail
        case 15:
            SetPlayerPosExt(playerid,1315.9229,1451.1661,1206.2860,23.8476); // RandomPoint Jail
        case 16:
            SetPlayerPosExt(playerid,1311.8125,1451.9624,1206.2860,23.8476); // RandomPoint Jail
        case 17:
            SetPlayerPosExt(playerid,1313.0889,1462.2295,1206.2860,23.8476); // RandomPoint Jail
        case 18:
            SetPlayerPosExt(playerid,1316.0786,1461.6659,1206.2860,23.8476); // RandomPoint Jail
        case 19:
            SetPlayerPosExt(playerid,1316.1934,1472.9471,1206.2860,349.5374); // RandomPoint Jail
        case 20:
            SetPlayerPosExt(playerid,1313.0024,1472.7506,1206.2860,349.5374); // RandomPoint Jail
    }
    PlayerDB[playerid][Suristas] = false;
    PlayerDB[playerid][Surakintas] = false;
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 0);
    TogglePlayerControllable(playerid, true);
    return 1;
}
CMD:unjail(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 3)
    {
        new id,reason[90];
        if(sscanf(params,"u s[90]",id,reason))
        {
            UsageMessage(playerid,"Paleisti þaidëjà ið kalëjimo: /unjail [V_P/ID] [Prieþastis].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid && PlayerDB[playerid][adminlvl] != 5)
                {
                    ErrorMsg(playerid,"• Savæs iðlaisvinti negalite.");
                    return 1;
                }
                if(strlen(reason) < 3)
                {
                    ErrorMsg(playerid,"• Prieþastis per trumpa.");
                    return 1;
                }
                if(PlayerDB[id][JailTime] > 1)
                {
                    new string[128];

                    format(string,sizeof(string),"Administratorius {90C44D}%s {BBE880}iðlaisvino {90C44D}%s {BBE880}ið kalëjimo",Vardas(playerid),Vardas(id));
                    SendClientMessageToAll(0xBBE880FF, string);
                    format(string,sizeof(string),"Prieþastis: {90C44D}%s",reason);
                    SendClientMessageToAll(0xBBE880FF, string);
                    PlayerDB[id][JailTime] = 1;


                    format(string, 128, "• Paleidote %s(%i) ið kalëjimo.", Vardas(id),id);
                    SendClientMessage(playerid, ZALIA, string);
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas ne kalëjime.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}
CMD:jail(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 1)
    {
        new id,time,reason[64];
        if(sscanf(params,"uds[64]",id,time,reason))
        {
            UsageMessage(playerid,"Ákalinti þaidëjà: /jail [V_P/ID] [Sekundes] [Prieþastis].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid && PlayerDB[playerid][adminlvl] != 5)
                {
                    ErrorMsg(playerid,"• Savæs ákalinti negalite.");
                }
                else if(PlayerDB[playerid][adminlvl] != 5 && PlayerDB[id][adminlvl] > 0)
                {
                    ErrorMsg(playerid,"• Negalite ákalinti kitø administratoriø.");
                }
                else if(time > 86400)
                {
                    ErrorMsg(playerid,"• Daugiau nei 24 valandoms ákalinti negalima.");
                }
                else if(PlayerDB[playerid][JailTime] == 0)
                {
                    new string[128];
                    RemovePlayerAttachedObject(id, 1);
                    PlayerDB[id][MoneyStackOnBack] = false;
                    ResetPlayerWeaponsEx(id);
                    PlayerDB[playerid][ClothesBeforeJail] = GetPlayerSkin(playerid);
                    PlayerDB[playerid][AprangaBeforeJail] = PlayerDB[playerid][AprangosTipas];
                    PlayerDB[id][JailTime] = PlayerDB[id][WantedLevel] * 30+time;
                    PlayerDB[id][WantedLevel] = 0;
                    PlayerDB[id][BEGA] = 0;
                    PlayerDB[id][BegaLaiko] = 0;
                    SetPlayerColor(id, NematomaPilka);

                    format(string, 128, "• Jûs buvote pasodintas á kalëjimà uþ ávairius nusikaltimus %i sek.", PlayerDB[id][JailTime]);
                    SendClientMessage(id, ZYDRA, string);
                    format(string, 128, "• Administratorius %s(%i) jus nubaudë %i sek. uþ %s.", Vardas(playerid),playerid,time,reason);
                    SendClientMessage(id, RAUDONA, string);
                    SetPlayerSkinEx(id, 268);
                    format(string, 128, "• Ákalinote %s(%i) þaidëjà %i sek. uþ %s.", Vardas(id),id,time,reason);
                    SendClientMessage(playerid, ZALIA, string);
                    new years,month,day;
                    getdate(years, month, day);
                    new querys[512];
                    mysql_format(connectionHandle, querys, 512, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Administracija(%e) ákalino %d sek. uþ %e(%d-%02d-%02d)');", Vardas(id),Vardas(playerid),time,reason,years,month,day);
                    mysql_function_query(connectionHandle,querys,false,"SendQuery","");

                    format(string,sizeof(string),"Administratorius {7BAE39}%s {AADB69}ákalino {7BAE39}%s {7BAE39}%d {AADB69}sek.",Vardas(playerid),Vardas(id),time);
                    SendClientMessageToAll(0xAADB69FF, string);
                    format(string,sizeof(string),"Prieþastis: {7BAE39}%s",reason);
                    SendClientMessageToAll(0xAADB69FF, string);
                    PlayerDB[id][LaukiuVaistu] = false;
                    RemovePlayerAttachedObject(id, 20);

					new PlayerVirtualWorld = GetPlayerVirtualWorld(id);
					if(PlayerVirtualWorld >= 3 && HouseInfo[PlayerVirtualWorld-3][HouseID] >= 0)
					{
						HouseInfo[PlayerVirtualWorld-3][kieknamie]--;
					}
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas jau kalëjime.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}
CMD:radijas(playerid,params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        ShowPlayerDialog(playerid, 137, DIALOG_STYLE_LIST, "{AFAFAF}Radijo valdymo meniø", "Iðjungti radijà\nRadio centras (LT)\nM-1 (LT)\nPower Hit Radio (LT)\nZIP FM (LT)\nRadio Skonto (LV)\nRaadio Uuno (EST)\nRadio ZET (PL)", "Rinktis", "Atðaukti");
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti uþ maðinos vairo.");
    }
    return 1;
}
forward OrlenDegalineFill(playerid,TypeOfFuel);
public OrlenDegalineFill(playerid,TypeOfFuel)
{
    if(!IsPlayerConnected(playerid))
    {
        PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
        return 1;
    }
    TogglePlayerControllable(playerid, false);
    new string[256];
    if(TypeOfFuel == 0)
    {
        PlayerDB[playerid][CostOfLitreFuel] = 14.0;
        format(string, 256, "~y~ IPILTA: ~w~ %0.2fl ~n~ ~y~ KAINA: ~w~ %02.2fEUR/l ~n~ ~b~ SUMA: ~w~ %0.2fEUR ~n~ ~r~BAIGTI SU ENTER",PlayerDB[playerid][PiltaDegalu],PlayerDB[playerid][CostOfLitreFuel],PlayerDB[playerid][SumaUzDegalus]);
    }
    else
    {
        PlayerDB[playerid][CostOfLitreFuel] = 11.0;
        format(string, 256, "~y~ IPILTA: ~w~ %0.2fl ~n~ ~y~ KAINA: ~w~ %02.2fEUR/l ~n~ ~b~ SUMA: ~w~ %0.2fEUR ~n~ ~r~BAIGTI SU ENTER",PlayerDB[playerid][PiltaDegalu],PlayerDB[playerid][CostOfLitreFuel],PlayerDB[playerid][SumaUzDegalus]);
    }
    GameTextForPlayer(playerid, string, 4000, 3);
    new CekisSuma = floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
    if(PlayerDB[playerid][MoneyInPocket] > CekisSuma+1)
    {
        new Float:RandomTuris =  0.121;
        PlayerDB[playerid][PiltaDegalu]+=RandomTuris;
        PlayerDB[playerid][SumaUzDegalus]=PlayerDB[playerid][PiltaDegalu] * PlayerDB[playerid][CostOfLitreFuel];
        switch(TypeOfFuel)
        {
            case 0:
            {
                VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas]+=RandomTuris;
                if(VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas] >= DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400] )
                {
                    VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas] = DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400];
                    GameTextForPlayer(playerid, "~r~PASIEKTAS PILNAS BAKAS ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
                    PlayerDB[playerid][GasStationTimerRunsOrl] = false;
                    KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: benzinas");
                    format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
                    SendClientMessage(playerid, GELTONA, string);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
                    PlayerDB[playerid][PiltaDegalu] = 0;
                    PlayerDB[playerid][SumaUzDegalus] = 0;
                    PlayerDB[playerid][DegaluTipasKuriPila] = -1;
                    PlayerDB[playerid][CostOfLitreFuel] = 0;
                    TogglePlayerControllable(playerid, true);

                }
            }
            case 1:
            {

                VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos]+=RandomTuris;
                if(VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos] >= DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400])
                {
                    VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos] = DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400];
                    PlayerDB[playerid][GasStationTimerRunsOrl] = false;
                    KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
                    GameTextForPlayer(playerid, "~r~PASIEKTAS PILNAS BAKAS ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: Dujos");
                    format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
                    SendClientMessage(playerid, GELTONA, string);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
                    PlayerDB[playerid][PiltaDegalu] = 0;
                    PlayerDB[playerid][SumaUzDegalus] = 0;
                    PlayerDB[playerid][DegaluTipasKuriPila] = -1;
                    PlayerDB[playerid][CostOfLitreFuel] = 0;
                    TogglePlayerControllable(playerid, true);
                }
            }
        }
    }
    else
    {
        PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
        GameTextForPlayer(playerid, "~r~Truksta pinigu ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
        SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
        SendClientMessage(playerid, GELTONA, "Degalø rûðis: Dujos");
        format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
        SendClientMessage(playerid, GELTONA, string);
        format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
        SendClientMessage(playerid, GELTONA, string);
        format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
        SendClientMessage(playerid, GELTONA, string);
        SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
        PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
        PlayerDB[playerid][PiltaDegalu] = 0;
        PlayerDB[playerid][SumaUzDegalus] = 0;
        PlayerDB[playerid][DegaluTipasKuriPila] = -1;
        PlayerDB[playerid][CostOfLitreFuel] = 0;
        TogglePlayerControllable(playerid, true);
    }
    return 1;
}
forward XoomerDegalineFill(playerid,TypeOfFuel);
public XoomerDegalineFill(playerid,TypeOfFuel)
{
    if(!IsPlayerConnected(playerid))
    {
        PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
        return 1;
    }
    TogglePlayerControllable(playerid, false);
    new string[256];
    if(TypeOfFuel == 0)
    {
        PlayerDB[playerid][CostOfLitreFuel] = 14.0;
        format(string, 256, "~y~ IPILTA: ~w~ %0.2fl ~n~ ~y~ KAINA: ~w~ %02.2fEUR/l ~n~ ~b~ SUMA: ~w~ %0.2fEUR ~n~ ~r~BAIGTI SU ENTER",PlayerDB[playerid][PiltaDegalu],PlayerDB[playerid][CostOfLitreFuel],PlayerDB[playerid][SumaUzDegalus]);
    }
    else
    {
        PlayerDB[playerid][CostOfLitreFuel] = 11.0;
        format(string, 256, "~y~ IPILTA: ~w~ %0.2fl ~n~ ~y~ KAINA: ~w~ %02.2fEUR/l ~n~ ~b~ SUMA: ~w~ %0.2fEUR ~n~ ~r~BAIGTI SU ENTER",PlayerDB[playerid][PiltaDegalu],PlayerDB[playerid][CostOfLitreFuel],PlayerDB[playerid][SumaUzDegalus]);
    }
    GameTextForPlayer(playerid, string, 4000, 3);
    new CekisSuma = floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
    if(PlayerDB[playerid][MoneyInPocket] > CekisSuma+1)
    {
        new Float:RandomTuris =  0.121;
        PlayerDB[playerid][PiltaDegalu]+=RandomTuris;
        PlayerDB[playerid][SumaUzDegalus]=PlayerDB[playerid][PiltaDegalu] * PlayerDB[playerid][CostOfLitreFuel];
        switch(TypeOfFuel)
        {
            case 0:
            {
                VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas]+=RandomTuris;
                if(VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas] >= DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400] )
                {
                    VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Bendzinas] = DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400];
                    GameTextForPlayer(playerid, "~r~PASIEKTAS PILNAS BAKAS ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
                    PlayerDB[playerid][GasStationTimerRunsOrl] = false;
                    KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: Benzinas");
                    format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
                    SendClientMessage(playerid, GELTONA, string);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
                    PlayerDB[playerid][PiltaDegalu] = 0;
                    PlayerDB[playerid][SumaUzDegalus] = 0;
                    PlayerDB[playerid][DegaluTipasKuriPila] = -1;
                    PlayerDB[playerid][CostOfLitreFuel] = 0;
                    TogglePlayerControllable(playerid, true);

                }
            }
            case 1:
            {

                VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos]+=RandomTuris;
                if(VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos] >= DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400] )
                {
                    VehicleDB[PlayerDB[playerid][VehiclePlayerExitedLastTime]][Dujos] = DegaluTalpa[GetVehicleModel(PlayerDB[playerid][VehiclePlayerExitedLastTime])-400];
                    PlayerDB[playerid][GasStationTimerRunsOrl] = false;
                    KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
                    GameTextForPlayer(playerid, "~r~PASIEKTAS PILNAS BAKAS ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    SendClientMessage(playerid, GELTONA, "Degalø rûðis: Dujos");
                    format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
                    SendClientMessage(playerid, GELTONA, string);
                    format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
                    SendClientMessage(playerid, GELTONA, string);
                    SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
                    PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
                    PlayerDB[playerid][PiltaDegalu] = 0;
                    PlayerDB[playerid][SumaUzDegalus] = 0;
                    PlayerDB[playerid][DegaluTipasKuriPila] = -1;
                    PlayerDB[playerid][CostOfLitreFuel] = 0;
                    TogglePlayerControllable(playerid, true);
                }
            }
        }
    }
    else
    {
        PlayerDB[playerid][GasStationTimerRunsOrl] = false;
        KillTimer(PlayerDB[playerid][GasStationTimerOrl]);
        GameTextForPlayer(playerid, "~r~Trûksta pinigø ~n~ ~g~PILIMAS BAIGTAS", 2000, 4);
        SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
        SendClientMessage(playerid, GELTONA, "Degalø rûðis: Dujos");
        format(string, 144, "Ipiltø degalø kiekis: %0.2f", PlayerDB[playerid][PiltaDegalu]);
        SendClientMessage(playerid, GELTONA, string);
        format(string, 144, "Vieno litro degalø kaina: %0.2f€", PlayerDB[playerid][CostOfLitreFuel]);
        SendClientMessage(playerid, GELTONA, string);
        format(string, 144, "Suma: %0.2f€", PlayerDB[playerid][SumaUzDegalus]);
        SendClientMessage(playerid, GELTONA, string);
        SendClientMessage(playerid, GELTONA, " ====== SÀSKAITA ====== ");
        PlayerDB[playerid][MoneyInPocket]-=floatround(PlayerDB[playerid][SumaUzDegalus],floatround_round);
        PlayerDB[playerid][PiltaDegalu] = 0;
        PlayerDB[playerid][SumaUzDegalus] = 0;
        PlayerDB[playerid][DegaluTipasKuriPila] = -1;
        PlayerDB[playerid][CostOfLitreFuel] = 0;
        TogglePlayerControllable(playerid, true);
    }
    return 1;
}
CMD:createhouse(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        new CostOfHouseParam,HouseInteriorParam,IsForCreditsParam;
        if(sscanf(params, "iii", CostOfHouseParam,HouseInteriorParam,IsForCreditsParam))
        {
            UsageMessage(playerid,"• Sukurti namà vietoje kur stovite: /createhouse [Namo Kaina] [Namo Interiero ID] [Ar uþ kreditus [0-1] ]");
        }
        else
        {
            if(CostOfHouseParam > 0)
            {
                if(HouseInteriorParam >= 0 && HouseInteriorParam < 10)
                {
                    if(IsForCreditsParam == 1 || IsForCreditsParam == 0)
                    {
                        new Float:X,Float:Y,Float:Z,CreatorVirtualWorld;
                        GetPlayerPos(playerid, X, Y, Z);
                        CreatorVirtualWorld = GetPlayerVirtualWorld(playerid);
                        new QueryString[400];
                        mysql_format(connectionHandle, QueryString, 400, "INSERT INTO `houses` (`HouseID`, `HouseBought`, `HouseCost`, `HousePosX`, `HousePosY`, `HousePosZ`, `HouseOwner`, `HouseVirtualWorld`, `HouseInteriorNumber`, `SoldForCredits`,`HouseDoorsLocked`,`VaistaiNamie`,`PirmasRaktas`,`Siuksles`,`NarkSlotState`,`NarkHome`,`KiekTelpaNarku`) VALUES (NULL, '0', '%d', '%f', '%f', '%f', 'Nëra', '%i', '%i', '%i','1','0','Nera','0','0','0','100');",
						CostOfHouseParam,X,Y,Z,CreatorVirtualWorld,HouseInteriorParam,IsForCreditsParam);
                        mysql_function_query(connectionHandle,QueryString,false,"","");
                        mysql_function_query(connectionHandle,"SELECT * FROM `houses`;",true,"OnLoadHousesList","");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Parametro [Ar uþ kreditus] reikðmë buvo netinkama,tinkamos reikðmës yra 0 arba 1.");
                    }

                }
                else
                {
                    ErrorMsg(playerid,"• Interiero numeris nuo 0 - 9...");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Bloga kaina...");
            }
        }
    }
    return 1;
}
CMD:deletehouse(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        new HouseIDParam;
        if(sscanf(params, "i", HouseIDParam))
        {
            UsageMessage(playerid,"• Sunaikinti namà pagal ID: /deletehouse [ID]");
        }
        else
        {
            if(HouseIDParam >= 0 )
            {
                new QueryString[256];
                mysql_format(connectionHandle, QueryString, 256, "DELETE FROM `houses` WHERE `HouseID` = '%i' LIMIT 1;", HouseIDParam);

                mysql_function_query(connectionHandle,QueryString,false,"","");
                mysql_function_query(connectionHandle,"ALTER TABLE `houses` AUTO_INCREMENT = 1;",false,"","");
                SendClientMessage(playerid, ZALIA, "• Jei namas nurodytu ID egzistavo nuo ðiol jis iðtrintas.");
                mysql_function_query(connectionHandle,"SELECT * FROM `houses`;",true,"OnLoadHousesList","");
            }
            else
            {
                ErrorMsg(playerid,"• Namo ID nurodytas blogai.");
            }
        }
    }
    return 1;
}
CMD:changeworlds(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        new VirtualWorldParam,InteriorParam;
        if(sscanf(params, "ii", InteriorParam,VirtualWorldParam))
        {
            UsageMessage(playerid,"• Nusikelti á interjierà esantá X pasaulyje: /changeworlds [Interiero ID] [Pasaulio ID]");
        }
        else
        {
            if(InteriorParam >= 0  && VirtualWorldParam >= 0)
            {
                SetPlayerInterior(playerid, InteriorParam);
                SetPlayerVirtualWorld(playerid, VirtualWorldParam);
                new string[50];
                format(string, 50, "VirtualW: %i | Interior: %i", VirtualWorldParam,InteriorParam);
                SendClientMessage(playerid, -1, string);
            }
            else
            {
                ErrorMsg(playerid,"• Interjiero arba Virtualaus pasaulio ID nurodytas blogai.");
            }
        }
    }
    return 1;
}
CMD:rastinama(playerid,params[])
{
    new TargetID;
    if(sscanf(params, "i", TargetID))
    {
        UsageMessage(playerid,"• Rasti namo buvimo vietà pagal ID: /rastinama [Namo ID numeris].");
    }
    else
    {
        if(LoadedHouses >= TargetID)
        {
            for(new HNUM46 = 0;HNUM46 <= LoadedHouses;HNUM46++)
            {
                if(HouseInfo[HNUM46][HouseID] == TargetID)
                {
                    if(GetPVarInt(playerid, "HouseICON") > 0)
                    {
                        RemovePlayerMapIcon(playerid, GetPVarInt(playerid, "HouseICON"));
                    }
                    if(HouseInfo[HNUM46][HouseBought] == 0)
                    {
                        SetPVarInt(playerid, "HouseICON", 50);
                        SetPlayerMapIcon(playerid, 50, HouseInfo[HNUM46][HousePosX],HouseInfo[HNUM46][HousePosY],HouseInfo[HNUM46][HousePosZ], 31, 0, MAPICON_GLOBAL);
                        SetPlayerCheckpoint(playerid, HouseInfo[HNUM46][HousePosX],HouseInfo[HNUM46][HousePosY],HouseInfo[HNUM46][HousePosZ],1.2);
                        SendClientMessage(playerid, ZALIA, "• Namas paþymëtas þemëlapyje þalios nuosavybës þenklu (Namuku,nes já galima ásigyti).");
                    }
                    else
                    {
                        SetPVarInt(playerid, "HouseICON", 50);
                        SetPlayerMapIcon(playerid, 50, HouseInfo[HNUM46][HousePosX],HouseInfo[HNUM46][HousePosY],HouseInfo[HNUM46][HousePosZ], 32, 0, MAPICON_GLOBAL);
                        SetPlayerCheckpoint(playerid, HouseInfo[HNUM46][HousePosX],HouseInfo[HNUM46][HousePosY],HouseInfo[HNUM46][HousePosZ],1.2);
                        SendClientMessage(playerid, ZALIA, "• Namas paþymëtas þemëlapyje raudonos nuosavybës þenklu (Namuku,nes namo ásigyti negalima).");
                    }
                    break;
                }
            }
        }
    }
    return 1;
}
CMD:namai(playerid,params[])
{
    new info[1024];
    format(info, 1024, "Namø informacija: \nÐiuo metu serveryje yra %i namai ið kuriø %i turi savininkus\n\nNamø komandos: ", LoadedHouses,HousesWithOwners);
    strcat(info, "\n/rastinama - rasti namà pagal unikalø namo numerá");
    strcat(info, "\n/bustovaldymas - pagrindinis jûsø bûsto valdymas.");
    strcat(info, "\n/atrakintiduris - atrakinti namo,kuriame esate,duris (Veikia tik namo savininkui)");
    strcat(info, "\n/uzrakintiduris - uþrakinti namo,kuriame esate,duris (Veikia tik namo savininkui)");
    strcat(info, "\n/parduotisnama - parduoti namà serveriui (Veikia tik namo savininkui)");
    strcat(info, "\n/parduotinama - parduoti namà pasirinktam þaidëjui (Veikia tik namo savininkui)");
    strcat(info, "\n/pinigainame - valdyti pinigus esanèius namuose (Veikia tik namo savininkui)");
    strcat(info, "\n/pmedikamentus - valdyti pinigus esanèius namuose (Veikia tik namo savininkui)");

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Namø informacija", info, "Gerai","");
    return 1;
}
CMD:bustovaldymas(playerid,params[])
{
	new PlayerInterior = GetPlayerInterior(playerid);
	if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
	{
		new PlayerVW = GetPlayerVirtualWorld(playerid);
       	if(PlayerVW >= 3)
       	{
       		if(HouseInfo[PlayerVW-3][HouseID] >= 0)
       		{
       			if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
       			{
	 				new info[1024];
	 				new string[128];
	 				//new Float:mokesciai = HouseInfo[PlayerVW-3][HouseMokesciai];
					format(string, 128, "{AD5BFF}» {FFFFFF}Jûsø name dabar yra: {26e4b2}%i{FFFFFF} þmonës(-iø){000000}________________________________\n", HouseInfo[PlayerVW-3][kieknamie]);
 					strcat(info, string);
 					format(string, 128, "{AD5BFF}» {FFFFFF}Susikaupæ mokesèiai: {26e4b2}%i{FFFFFF} €.\n", HouseInfo[PlayerVW-3][HouseMokesciai]);
 					strcat(info, string);
 					format(string, 128, "{AD5BFF}» {FFFFFF}Ðiukðliadëþë uþpildyta: {26e4b2}%i{FFFFFF} proc.\n", HouseInfo[PlayerVW-3][Siuksles]);
      				strcat(info, string);
      				format(string, 128, "{AD5BFF}» {FFFFFF}Medikamentai: {26e4b2}%i{FFFFFF} vienetai(-ø).\n", HouseInfo[PlayerVW-3][VaistaiNamie]);
      				strcat(info, string);
 					strcat(info, "\t{AD5BFF}• {FFFF00}Daugiau informacijos gausite paspaudæ ant reikiamo punkto.\n");
      				strcat(info, " \n");
				    if(HouseInfo[PlayerVW-3][HouseDoorsLocked] == 1)
				    {
				    	strcat(info, "{AD5BFF}» {FFFFFF}Durø uþrakto valdymas: {FF0000}Uþdaryti{FFFFFF}.\n");
				    }
				    else
				    {
				    	strcat(info, "{AD5BFF}» {FFFFFF}Durø uþrakto valdymas: {B2FF00}Atidaryti{FFFFFF}.\n");
					}
					strcat(info, "{AD5BFF}» {FFFFFF}Medikamentø naudojimas (Suteikia 150 gyvybiø).\n");
     				strcat(info, "{AD5BFF}» {FFFFFF}Paimti maiðà ið ðiukðliadëþës.\n"); //daryti
					strcat(info, "{AD5BFF}» {FFFFFF}Narkotikø valdymas seife.\n");//daryti
					strcat(info, "{AD5BFF}» {FFFFFF}Pinigø seifo valdymas.\n");
					strcat(info, "{AD5BFF}» {FFFFFF}Parduoti bûstà iRoad vyriausybei.\n");
					strcat(info, "{AD5BFF}» {FFFFFF}Parduoti bûstà privaèiam asmeniui.\n");
					if(HouseInfo[PlayerVW-3][SviesaIjungta] == 1)
				    {
						strcat(info, "{AD5BFF}» {FFFFFF}Valdyti bûsto apðvietimà: {B2FF00}Ájungtas{FFFFFF}.\n");
					}
					else
					{
						strcat(info, "{AD5BFF}» {FFFFFF}Valdyti bûsto apðvietimà: {FF0000}Iðjungtas{FFFFFF}.\n");
					}
	       			ShowPlayerDialog(playerid, 307, DIALOG_STYLE_LIST, "{AFAFAF}Bûsto valdymas", info, "Pasirinkti","Uþdaryti");
				}
 				else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
     		}
		}
    	else
   		{
      	ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:atrakintiduris(playerid,params[])
{
    new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                    if(HouseInfo[PlayerVW-3][HouseDoorsLocked] == 1)
                    {
                        SendClientMessage(playerid, ZALIA, "• Atrakinote namo duris, dabar á namà galës áeiti bet koks praeivis.");
                        HouseInfo[PlayerVW-3][HouseDoorsLocked] = 0;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Namo durys jau atrakintos.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:pmedikamentus(playerid,params[])
{
	new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                	if(PlayerDB[playerid][TuriuNamoVaistu] == 5)
                	{
                    	if(5+HouseInfo[PlayerVW-3][VaistaiNamie] > 10)
                    	{
                        	SendClientMessage(playerid, ZALIA, "• Padëjote á namo seifà 5 vnt. medikamentø sëkmingai. Naudoti galite per {FFFFFF}/bustovaldymas.");
                        	HouseInfo[PlayerVW-3][VaistaiNamie] += 5;
                        	PlayerDB[playerid][TuriuNamoVaistu] -= 5;
                    	}
                    	else
                    	{
                        	ErrorMsg(playerid,"• Daugiau medikamentø á namo seifà netelpa.");
                    	}
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Pirmiausiai nusipirkite medikamentus pas medikus arba vaistinëje.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:uzrakintiduris(playerid,params[])
{
    new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                    if(HouseInfo[PlayerVW-3][HouseDoorsLocked] == 0)
                    {
                        SendClientMessage(playerid, ZALIA, "• Uþrainote namo duris,dabar á namà galësite áeiti tik pats.");
                        HouseInfo[PlayerVW-3][HouseDoorsLocked] = 1;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Namo durys ir taip jau buvo uþrakintos.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:parduotisnama(playerid,params[])
{
    new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                    new info[128];
                    switch(HouseInfo[PlayerVW-3][HouseForCredits])
                    {
                        case 0:
                        {
                            format(info, 128, "Ar tikrai norite parduoti ðá namà serveriui?\nUþ ðá namà galite gauti %s € (90%% namo vertës).", AddSpaces(floatround(HouseInfo[PlayerVW-3][HouseCost] * 0.9, floatround_ceil)));
                            ShowPlayerDialog(playerid, 144, DIALOG_STYLE_MSGBOX, "{AFAFAF}Namo pardavimas", info, "Taip","Ne");
                        }
                        case 1:
                        {
                            format(info, 128, "Ar tikrai norite parduoti ðá namà serveriui?\nUþ ðá namà galite gauti %s kreditø (90%% namo vertës kreditais).", AddSpaces(floatround(HouseInfo[PlayerVW-3][HouseCost] * 0.9, floatround_ceil)));
                            ShowPlayerDialog(playerid, 144, DIALOG_STYLE_MSGBOX, "{AFAFAF}Namo pardavimas", info, "Taip","Ne");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}

CMD:parduotinama(playerid,params[])
{
    new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                    new TargetID,Cost;
                    if(sscanf(params, "ui", TargetID,Cost))
                    {
                        UsageMessage(playerid,"• Parduoti namà pasirinktam þaidëjui: /parduotinama [Vardas_Pavardë/ID] [Kaina €]");
                    }
                    else
                    {
                        if(IsPlayerConnected(TargetID))
                        {
                            if(TargetID == playerid)
                            {
                                ErrorMsg(playerid,"• Savæs pasirinkti negalite.");
                            }
                            else
                            {
                                if(Cost > 9000)
                                {
                                    new info[128];
                                    PlayerDB[playerid][PlayerOfferHouseTo] = TargetID;
                                    PlayerDB[playerid][PlayerOfferHouseCost] = Cost;
                                    format(info, 128, "Ar tikrai norite parduoti ðá namà %s(%i) uþ %s € ? \n{FF0000}Pateikus pasiûlymà jo atsiimti negalësite.", Vardas(TargetID),TargetID,AddSpaces(Cost));
                                    ShowPlayerDialog(playerid, 145, DIALOG_STYLE_MSGBOX, "{AFAFAF}Patvirtinimas", info, "Taip","Ne");
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Blogai nurodyta kaina,patikrinkite kainà ir bandykite siûlyti ið naujo.");
                                }
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:pinigainame(playerid,params[])
{
    new PlayerInterior = GetPlayerInterior(playerid);
    if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    {
        new PlayerVW = GetPlayerVirtualWorld(playerid);
        if(PlayerVW >= 3)
        {
            if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            {
                if(strcmp(HouseInfo[PlayerVW-3][HouseOwner], Vardas(playerid)) == 0)
                {
                    ShowPlayerDialog(playerid, 147, DIALOG_STYLE_LIST, "{AFAFAF}Pinigai namuose", "Pinigø kiekis namuose\nPadëti pinigus\nPasiimti pinigø", "Rinktis", "Uþdaryti");
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis namas jums nepriklauso.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti namo viduje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Turite bûti namo viduje.");
    }
    return 1;
}
CMD:duoti(playerid,params[])
{
    new Money,target;
    if(sscanf(params, "ui", target,Money))
    {
        UsageMessage(playerid,"• Duoti pinigø pasirinktam þaidëjui: /duoti [Vardas_Pavardë/ID] [Pinigø skaièius].");
    }
    else
    {
        if(IsPlayerConnected(target))
        {
            if(target == playerid)
            {
                ErrorMsg(playerid,"• Negalite pasirinkti savæs.");
            }
            else
            {
                new Float:X,Float:Y,Float:Z;
                GetPlayerPos(playerid, X, Y, Z);
                if(IsPlayerInRangeOfPoint(target, 6, X, Y, Z))
                {
                    if(Money > 0)
                    {
                        if(PlayerDB[playerid][MoneyInPocket] >= Money)
                        {
                            PlayerDB[playerid][MoneyInPocket]-=Money;
                            PlayerDB[target][MoneyInPocket]+=Money;
                            new string[128];
                            format(string, 128, "{A1A09E}Davëte þaidëjui {ff9900}%s(%i) %s {A1A09E}€", Vardas(target), target, AddSpaces(Money));
                            SendClientMessage(playerid, GELTONA, string);
                            format(string, 128, "{A1A09E}Gavote ið þaidëjo %s(%i) %s €", Vardas(playerid),playerid, AddSpaces(Money));
                            SendClientMessage(target, ZALIA, string);
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Neturite tiek pinigø.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Pinigø skaièius kurá norite duoti turi bûti naturalusis.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Jûsø pasirinktas þaidëjas yra per toli.");
                }
            }
       }
        else
        {
            ErrorMsg(playerid,"• Jûsø pasirinktas þaidëjas neprisijungæs.");
        }
    }
    return 1;
}
stock SaveMoneyInHouse(ID)
{
    new QueryString[128];
    mysql_format(connectionHandle, QueryString, 128, "UPDATE `houses` SET `HouseMoneyInside` = '%i' WHERE `HouseID` = '%i';",HouseInfo[ID][HouseMoneyInside], HouseInfo[ID][HouseID]);
    mysql_function_query(connectionHandle, QueryString, false, "","");
    return 1;
}
stock SaveHouseOptions(ID)
{
	new QueryString[128];
    mysql_format(connectionHandle, QueryString, 128, "UPDATE `houses` SET `NarkHome`= '%i', `NarkHomeHeroinas` = '%i' WHERE `HouseID` = '%i';",HouseInfo[ID][NarkHome],HouseInfo[ID][NarkHomeHeroinas],HouseInfo[ID][HouseID]);
    mysql_function_query(connectionHandle, QueryString, false, "","");
    
    mysql_format(connectionHandle, QueryString, 128, "UPDATE `houses` SET `NarkHomeKokainas`= '%i', `KiekTelpaNarku` = '%i' WHERE `HouseID` = '%i';",HouseInfo[ID][NarkHomeKokainas],HouseInfo[ID][KiekTelpaNarku],HouseInfo[ID][HouseID]);
    mysql_function_query(connectionHandle, QueryString, false, "","");
    return 1;
}
stock SetValytojaiMisijosCP(MissionID,Float:X,Float:Y,Float:Z)
{
    ValytojaiMisijos[MissionID][MisijosCP_X] = X;
    ValytojaiMisijos[MissionID][MisijosCP_X] = Y;
    ValytojaiMisijos[MissionID][MisijosCP_X] = Z;
    ValytojaiMisijos[MissionID][MisijosCPD] = CreateDynamicCP(X, Y, Z, 2, 0, 0, -1, 1000.0);
    for(new p = 0;p<MAX_PLAYERS;p++)
    {
        TogglePlayerDynamicCP(p, ValytojaiMisijos[MissionID][MisijosCPD], false);
    }
}

//
forward IsvalytaGT(playerid);
public IsvalytaGT(playerid)
{
    TogglePlayerControllable(playerid, true);
    GameTextForPlayer(playerid, "~g~ ISVALYTA..", 3000, 4);
}
forward Pakrauta(playerid);
public Pakrauta(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ PAKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Pristatymo punktas paþymëtas þemëlapyje raudonu simboliu.");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	SetPlayerCheckpoint(playerid, 1608.9095,1637.9711,11.5300, 3.0);
	PlayerDB[playerid][LektuvuCP] = 2;
	ArLektuvuCP = true;
}
forward Pakrauta2(playerid);
public Pakrauta2(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ PAKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Pristatymo punktas paþymëtas þemëlapyje raudonu simboliu");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	SetPlayerCheckpoint(playerid, -1395.1914,-629.9969,14.8535, 3.0);
	PlayerDB[playerid][LektuvuCP] = 4;
	PlayerDB[playerid][VaziuotiToliau] = false;
	ArLektuvuCP = true;
}
forward LaivuPakrauta(playerid);
public LaivuPakrauta(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ PAKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Pristatymo punktas paþymëtas þemëlapyje raudonu simboliu.");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	SetPlayerCheckpoint(playerid, -2393.2195,2312.4785,-0.0861, 3.0);
	PlayerDB[playerid][LaivuCP] = 2;
	ArLaivuCP = true;
}
forward Iskrauta(playerid);
public Iskrauta(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ ISKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Norëdami pratæsti darbà atvykite pakrauti kroviná, kuris yra paþymëtas þemëlapyje raudonu simboliu.");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	PlayerDB[playerid][MoneyInPocket]+=2000 + random(998);
	SetPlayerCheckpoint(playerid, 1923.1576,-2241.5364,14.2584, 3.0);
	PlayerDB[playerid][LektuvuCP] = 3;
	ArLektuvuCP = true;
	PlayerDB[playerid][VaziuotiToliau] = true;
}
forward LaivuIskrauta(playerid);
public LaivuIskrauta(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ ISKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Norëdami pratæsti darbà atvykite pakrauti kroviná, kuris yra paþymëtas þemëlapyje raudonu simboliu.");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	PlayerDB[playerid][MoneyInPocket]+=1300 + random(998);
	SetPlayerCheckpoint(playerid, -2960.6133,497.8852,-0.2069, 3.0);
	PlayerDB[playerid][LaivuCP] = 3;
	ArLaivuCP = true;
}
forward Iskrauta2(playerid);
public Iskrauta2(playerid)
{
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~ ISKRAUTA..", 3000, 4);
	SendClientMessage(playerid, GELTONA, "• Norëdami pratæsti darbà atvykite pakrauti kroviná, kuris yra paþymëtas þemëlapyje raudonu simboliu.");
	SendClientMessage(playerid, GELTONA, "• Nelipkite ið darbinies tr. priemones, nes darbas bus {ff0000}nutrauktas.");
	PlayerDB[playerid][MoneyInPocket]+=2000 + random(998);
	SetPlayerCheckpoint(playerid, -1242.0383,-86.7009,14.8557, 3.0);
	PlayerDB[playerid][LektuvuCP] = 1;
	ArLektuvuCP = true;
}
forward ResetJanitorsMission(cpid);
public ResetJanitorsMission(cpid)
{
    if(ValytojaiMisijos[cpid][MisijosObjektas1M] > 0)
    {
        ValytojaiMisijos[cpid][MisijosObjektas1] = CreateDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas1M], ValytojaiMisijos[cpid][MisijosObjektas1X],ValytojaiMisijos[cpid][MisijosObjektas1Y],ValytojaiMisijos[cpid][MisijosObjektas1Z],ValytojaiMisijos[cpid][MisijosObjektas1RX],ValytojaiMisijos[cpid][MisijosObjektas1RY],ValytojaiMisijos[cpid][MisijosObjektas1RZ]);
    }
    if(ValytojaiMisijos[cpid][MisijosObjektas2M] > 0)
    {
        ValytojaiMisijos[cpid][MisijosObjektas2] = CreateDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas2M], ValytojaiMisijos[cpid][MisijosObjektas2X],ValytojaiMisijos[cpid][MisijosObjektas2Y],ValytojaiMisijos[cpid][MisijosObjektas2Z],ValytojaiMisijos[cpid][MisijosObjektas2RX],ValytojaiMisijos[cpid][MisijosObjektas2RY],ValytojaiMisijos[cpid][MisijosObjektas2RZ]);
    }
    if(ValytojaiMisijos[cpid][MisijosObjektas3M] > 0)
    {
        ValytojaiMisijos[cpid][MisijosObjektas3] = CreateDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas3M], ValytojaiMisijos[cpid][MisijosObjektas3X],ValytojaiMisijos[cpid][MisijosObjektas3Y],ValytojaiMisijos[cpid][MisijosObjektas3Z],ValytojaiMisijos[cpid][MisijosObjektas3RX],ValytojaiMisijos[cpid][MisijosObjektas3RY],ValytojaiMisijos[cpid][MisijosObjektas3RZ]);
    }
    if(ValytojaiMisijos[cpid][MisijosObjektas4M] > 0)
    {
        ValytojaiMisijos[cpid][MisijosObjektas4] = CreateDynamicObject(ValytojaiMisijos[cpid][MisijosObjektas4M], ValytojaiMisijos[cpid][MisijosObjektas4X],ValytojaiMisijos[cpid][MisijosObjektas4Y],ValytojaiMisijos[cpid][MisijosObjektas4Z],ValytojaiMisijos[cpid][MisijosObjektas4RX],ValytojaiMisijos[cpid][MisijosObjektas4RY],ValytojaiMisijos[cpid][MisijosObjektas4RZ]);
    }
    ValytojaiMisijos[cpid][MisijaRuns] = true;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(PlayerDB[i][Job] == 15)
        {
            TogglePlayerDynamicCP(i, ValytojaiMisijos[cpid][MisijosCPD], true);
        }
    }
}

stock StartSviesaforaiVM()
{

    // 1 sviesaforas
    Sviesaforai[0][SfRaudona] = CreateDynamicObject(19282, -2017.26941, -75.67782, 38.73094,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //3 SVIESAFORAS
    Sviesaforai[2][SfRaudona] = CreateDynamicObject(19282, -1997.07019, -64.86737, 38.72758,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //2
    Sviesaforai[1][SfZalia] = CreateDynamicObject(19283, -2012.54675, -59.75591, 37.64650,   0.00000, 0.00000, 0.00000);  // þalia
    //4
    Sviesaforai[3][SfZalia] = CreateDynamicObject(19283, -2002.17188, -80.34086, 37.63469,   0.00000, 0.00000, 0.00000);  // þalia


    Sviesaforai[0][SfRedOn] = true;
    Sviesaforai[1][SfRedOn] = false;
    Sviesaforai[2][SfRedOn] = true;
    Sviesaforai[3][SfRedOn] = false;


    SetTimer("SviesaforaiSwitch1", 12000, false);

    return 1;
}
forward SviesaforaiSwitch1();
public SviesaforaiSwitch1()
{
    new LaikasH;
    gettime(LaikasH);
    if(LaikasH == 23 || LaikasH < 6)
    {
        if(!IsValidDynamicObject(Sviesaforai[0][SfGeltona]))
        {
            Sviesaforai[0][SfGeltona] = CreateDynamicObject(19294, -2017.26941, -75.32891, 38.15669,   0.00000, 0.00000, 0.00000); // geltona
        }
        //3 SVIESAFORAS
        if(!IsValidDynamicObject(Sviesaforai[2][SfGeltona]))
        {
            Sviesaforai[2][SfGeltona] = CreateDynamicObject(19294, -1997.07019, -65.21085, 38.14464,   0.00000, 0.00000, 0.00000); // geltona
        }
        //2
        if(!IsValidDynamicObject(Sviesaforai[1][SfGeltona]))
        {
            Sviesaforai[1][SfGeltona] = CreateDynamicObject(19294, -2012.52942, -59.75595, 38.15188,   0.00000, 0.00000, 0.00000); // geltona
        }
        //4
        if(!IsValidDynamicObject(Sviesaforai[3][SfGeltona]))
        {
            Sviesaforai[3][SfGeltona] = CreateDynamicObject(19294, -2002.18738, -80.34085, 38.17896,   0.00000, 0.00000, 0.00000); // geltona
        }
        Sviesaforai[0][SfRedOn] = false;
        Sviesaforai[1][SfRedOn] = false;
        Sviesaforai[2][SfRedOn] = false;
        Sviesaforai[3][SfRedOn] = false;
        if(IsValidDynamicObject(Sviesaforai[0][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[0][SfRaudona]);
            Sviesaforai[0][SfRaudona] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[2][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[2][SfRaudona]);
            Sviesaforai[2][SfRaudona] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[1][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[1][SfZalia]);
            Sviesaforai[1][SfZalia] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[3][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[3][SfZalia]);
            Sviesaforai[3][SfZalia] = -1;
        }
        SetTimer("SviesaforaiSwitch1", 12000, false);
        return 1;
    }
    if(IsValidDynamicObject(Sviesaforai[0][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfGeltona]);
        Sviesaforai[0][SfGeltona] = -1;
    }
    //3 SVIESAFORAS
    if(IsValidDynamicObject(Sviesaforai[1][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfGeltona]);
        Sviesaforai[1][SfGeltona] = -1;
    }
    //2
    if(IsValidDynamicObject(Sviesaforai[2][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfGeltona]);
        Sviesaforai[2][SfGeltona] = -1;
    }
    //4
    if(IsValidDynamicObject(Sviesaforai[3][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfGeltona]);
        Sviesaforai[3][SfGeltona] = -1;
    }
    // 1 sviesaforas
    Sviesaforai[0][SfMirksintiRaud] = CreateDynamicObject(19290, -2017.26941, -75.67782, 38.73094,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    //3 SVIESAFORAS
    Sviesaforai[2][SfMirksintiRaud] = CreateDynamicObject(19290, -1997.07019, -64.86737, 38.72758,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    //2
    Sviesaforai[1][SfMirksintiZalia] = CreateDynamicObject(19291, -2012.54675, -59.75591, 37.64650,   0.00000, 0.00000, 0.00000);  // mirksinti þalia
    //4
    Sviesaforai[3][SfMirksintiZalia] = CreateDynamicObject(19291, -2002.17188, -80.34086, 37.63469,   0.00000, 0.00000, 0.00000);  // þalia MIRKSINTI
    //
    Sviesaforai[0][SfRedOn] = true;
    Sviesaforai[1][SfRedOn] = false;
    Sviesaforai[2][SfRedOn] = true;
    Sviesaforai[3][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[0][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfRaudona]);
        Sviesaforai[0][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[2][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfRaudona]);
        Sviesaforai[2][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[1][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfZalia]);
        Sviesaforai[1][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[3][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfZalia]);
        Sviesaforai[3][SfZalia] = -1;
    }
    SetTimer("SviesaforaiSwitch2", 4000, false);
    return 1;
}
forward SviesaforaiSwitch2();
public SviesaforaiSwitch2()
{


    // 1 sviesaforas
    Sviesaforai[0][SfGeltona] = CreateDynamicObject(19294, -2017.26941, -75.32891, 38.15669,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[2][SfGeltona] = CreateDynamicObject(19294, -1997.07019, -65.21085, 38.14464,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[1][SfGeltona] = CreateDynamicObject(19294, -2012.52942, -59.75595, 38.15188,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[3][SfGeltona] = CreateDynamicObject(19294, -2002.18738, -80.34085, 38.17896,   0.00000, 0.00000, 0.00000); // geltona

    Sviesaforai[0][SfRedOn] = false;
    Sviesaforai[1][SfRedOn] = false;
    Sviesaforai[2][SfRedOn] = false;
    Sviesaforai[3][SfRedOn] = false;
    if(IsValidDynamicObject(Sviesaforai[0][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfMirksintiRaud]);
        Sviesaforai[0][SfMirksintiRaud] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[2][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfMirksintiRaud]);
        Sviesaforai[2][SfMirksintiRaud] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[1][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfMirksintiZalia]);
        Sviesaforai[1][SfMirksintiZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[3][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfMirksintiZalia]);
        Sviesaforai[3][SfMirksintiZalia] = -1;
    }
    SetTimer("SviesaforaiSwitch3", 2000, false);
    return 1;
}
forward SviesaforaiSwitch3();
public SviesaforaiSwitch3()
{
    // 1 sviesaforas
    Sviesaforai[0][SfZalia] = CreateDynamicObject(19283, -2017.26941, -75.36427, 37.63730,   0.00000, 0.00000, 0.00000); // þalia
    //3 SVIESAFORAS
    Sviesaforai[2][SfZalia] = CreateDynamicObject(19283, -1997.07019, -65.20391, 37.65635,   0.00000, 0.00000, 0.00000); // þalia
    //2
    Sviesaforai[1][SfRaudona] = CreateDynamicObject(19282, -2012.85156, -59.75600, 38.73672,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //4
    Sviesaforai[3][SfRaudona] = CreateDynamicObject(19282, -2001.86389, -80.34084, 38.73856,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //
    Sviesaforai[0][SfRedOn] = false;
    Sviesaforai[1][SfRedOn] = true;
    Sviesaforai[2][SfRedOn] = false;
    Sviesaforai[3][SfRedOn] = true;

    if(IsValidDynamicObject(Sviesaforai[0][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfGeltona]);
        Sviesaforai[0][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[1][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfGeltona]);
        Sviesaforai[1][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[2][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfGeltona]);
        Sviesaforai[2][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[3][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfGeltona]);
        Sviesaforai[3][SfGeltona] = -1;
    }
    SetTimer("SviesaforaiSwitch4", 12000, false);
    return 1;
}
forward SviesaforaiSwitch4();
public SviesaforaiSwitch4()
{
    // 1 sviesaforas
    Sviesaforai[0][SfMirksintiZalia] = CreateDynamicObject(19291, -2017.26941, -75.36427, 37.63730,   0.00000, 0.00000, 0.00000); // mirks þalia
    //3 SVIESAFORAS
    Sviesaforai[2][SfMirksintiZalia] = CreateDynamicObject(19291, -1997.07019, -65.20391, 37.65635,   0.00000, 0.00000, 0.00000); // mirksinti þalia
    //2
    Sviesaforai[1][SfMirksintiRaud] = CreateDynamicObject(19290, -2012.85156, -59.75600, 38.73672,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    //4
    Sviesaforai[3][SfMirksintiRaud] = CreateDynamicObject(19290, -2001.86389, -80.34084, 38.73856,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    Sviesaforai[0][SfRedOn] = false;
    Sviesaforai[1][SfRedOn] = true;
    Sviesaforai[2][SfRedOn] = false;
    Sviesaforai[3][SfRedOn] = true;

    if(IsValidDynamicObject(Sviesaforai[0][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfZalia]);
        Sviesaforai[0][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[2][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfZalia]);
        Sviesaforai[2][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[1][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfRaudona]);
        Sviesaforai[1][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[3][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfRaudona]);
        Sviesaforai[3][SfRaudona] = -1;
    }
    SetTimer("SviesaforaiSwitch5", 4000, false);
    return 1;
}
forward SviesaforaiSwitch5();
public SviesaforaiSwitch5()
{

    // 1 sviesaforas
    Sviesaforai[0][SfGeltona] = CreateDynamicObject(19294, -2017.26941, -75.32891, 38.15669,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[2][SfGeltona] = CreateDynamicObject(19294, -1997.07019, -65.21085, 38.14464,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[1][SfGeltona] = CreateDynamicObject(19294, -2012.52942, -59.75595, 38.15188,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[3][SfGeltona] = CreateDynamicObject(19294, -2002.18738, -80.34085, 38.17896,   0.00000, 0.00000, 0.00000); // geltona
    Sviesaforai[0][SfRedOn] = false;
    Sviesaforai[1][SfRedOn] = false;
    Sviesaforai[2][SfRedOn] = false;
    Sviesaforai[3][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[0][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfMirksintiZalia]);
        Sviesaforai[0][SfMirksintiZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[2][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfMirksintiZalia]);
        Sviesaforai[2][SfMirksintiZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[1][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfMirksintiRaud]);
        Sviesaforai[1][SfMirksintiRaud] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[3][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfMirksintiRaud]);
        Sviesaforai[3][SfMirksintiRaud] = -1;
    }
    SetTimer("SviesaforaiSwitch6", 2000, false);
    return 1;
}
forward SviesaforaiSwitch6();
public SviesaforaiSwitch6()
{
    // 1 sviesaforas
    Sviesaforai[0][SfRaudona] = CreateDynamicObject(19282, -2017.26941, -75.67782, 38.73094,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //3 SVIESAFORAS
    Sviesaforai[2][SfRaudona] = CreateDynamicObject(19282, -1997.07019, -64.86737, 38.72758,   0.00000, 0.00000, 0.00000); // raudona paprasta
    //2
    Sviesaforai[1][SfZalia] = CreateDynamicObject(19283, -2012.54675, -59.75591, 37.64650,   0.00000, 0.00000, 0.00000);  // þalia
    //4
    Sviesaforai[3][SfZalia] = CreateDynamicObject(19283, -2002.17188, -80.34086, 37.63469,   0.00000, 0.00000, 0.00000);  // þalia

    Sviesaforai[0][SfRedOn] = true;
    Sviesaforai[1][SfRedOn] = false;
    Sviesaforai[2][SfRedOn] = true;
    Sviesaforai[3][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[0][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[0][SfGeltona]);
        Sviesaforai[0][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[2][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[2][SfGeltona]);
        Sviesaforai[2][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[1][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[1][SfGeltona]);
        Sviesaforai[1][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[3][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[3][SfGeltona]);
        Sviesaforai[3][SfGeltona] = -1;
    }
    SetTimer("SviesaforaiSwitch1", 12000, false);
    return 1;
}
stock PlayerPravaziavoRaudona(playerid)
{
    if((IsJobFromLaw(PlayerDB[playerid][Job]) || PlayerDB[playerid][Job] == 2) && (VehicleDB[GetPlayerVehicleID(playerid)][DARBOMASINA] || PlayerDB[playerid][Job] == 11))
    {
        return 1;
    }
    if(IsVehicleAircraft(GetVehicleModel(GetPlayerVehicleID(playerid))))
    {
        return 1;
    }
    GameTextForPlayer(playerid, "~r~ PRAVAZIAVOTE ~n~RAUDONA", 2000, 3);

    new RACIJA[144];
    format(RACIJA, 144, "[racija] Miesto kameros uþfiksavo %s vaþiuojanti per sankryþà degant raudonam ðviesaforo signalui.", Vardas(playerid));
    SendClientMessageToLaw(0x0099CCFF,RACIJA);
    ErrorMsg(playerid,"•• Miesto kameros jus uþfiksavo vaþiuojantá per raudonà ðviesaforo signalà.");
    ErrorMsg(playerid,"Paþiûrëk paskutinius átarimus su /itarimai.");
    PlayerDB[playerid][WantedLevel]+=1;
    new Years,Months,Days,Hours,Minutes;
    getdate(Years, Months, Days);
    gettime(Hours, Minutes);
    new query[400];
    mysql_format(connectionHandle, query, 400, "INSERT INTO `itarimai` (`ID`, `Vardas`, `ItarimoTekstas`, `Stars`) VALUES (NULL, '%e', '[%d-%d-%.0d %02d:%02d] Buvote pastebëtas vaþiuojant per raudonà ðviesaforo signalà.', '10');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
    mysql_function_query(connectionHandle,query,false,"SendQuery","");

    return 1;
}
//SVIESAFORAI PRIE TPSF
stock StartSviesaforaiTPSF()
{

    // 1 sviesaforas
    Sviesaforai[4][SfRaudona] = CreateDynamicObject(19282, -2156.65747, 314.97318, 38.53317,   0.00000, 0.00000, 0.00000); // raudona
    //3 SVIESAFORAS
    Sviesaforai[5][SfRaudona] = CreateDynamicObject(19282, -2136.54688, 325.55280, 38.53726,   0.00000, 0.00000, 0.00000); // raudona
    //2
    Sviesaforai[6][SfZalia] = CreateDynamicObject(19283, -2151.54150, 330.27292, 37.43645,   0.00000, 0.00000, 0.00000); // þalia
    //4
    Sviesaforai[7][SfZalia] = CreateDynamicObject(19283, -2141.76074, 310.13474, 37.43106,   0.00000, 0.00000, 0.00000); // þalia


    Sviesaforai[4][SfRedOn] = true;
    Sviesaforai[6][SfRedOn] = false;
    Sviesaforai[5][SfRedOn] = true;
    Sviesaforai[7][SfRedOn] = false;


    SetTimer("SviesaforaiSwitchTPSF1", 12000, false);

    return 1;
}
forward SviesaforaiSwitchTPSF1();
public SviesaforaiSwitchTPSF1()
{
    new LaikasH;
    gettime(LaikasH);
    if(LaikasH == 23 || LaikasH < 6)
    {
        if(!IsValidDynamicObject(Sviesaforai[4][SfGeltona]))
        {
            Sviesaforai[4][SfGeltona] = CreateDynamicObject(19294, -2156.65747, 315.29352, 37.94707,   0.00000, 0.00000, 0.00000); // geltona
        }
        //3 SVIESAFORAS
        if(!IsValidDynamicObject(Sviesaforai[5][SfGeltona]))
        {
            Sviesaforai[5][SfGeltona] = CreateDynamicObject(19294, -2136.54688, 325.23132, 37.94881,   0.00000, 0.00000, 0.00000); // geltona
        }
        //2
        if(!IsValidDynamicObject(Sviesaforai[6][SfGeltona]))
        {
            Sviesaforai[6][SfGeltona] = CreateDynamicObject(19294, -2151.51440, 330.27289, 37.95820,   0.00000, 0.00000, 0.00000); // geltona
        }
        //4
        if(!IsValidDynamicObject(Sviesaforai[7][SfGeltona]))
        {
            Sviesaforai[7][SfGeltona] = CreateDynamicObject(19294, -2141.75659, 310.13474, 37.96486,   0.00000, 0.00000, 0.00000); // geltona
        }

        Sviesaforai[4][SfRedOn] = false;
        Sviesaforai[6][SfRedOn] = false;
        Sviesaforai[5][SfRedOn] = false;
        Sviesaforai[7][SfRedOn] = false;
        if(IsValidDynamicObject(Sviesaforai[4][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[4][SfRaudona]);
            Sviesaforai[4][SfRaudona] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[5][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[5][SfRaudona]);
            Sviesaforai[5][SfRaudona] = -1;
        }

        if(IsValidDynamicObject(Sviesaforai[6][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[6][SfZalia]);
            Sviesaforai[6][SfZalia] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[7][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[7][SfZalia]);
            Sviesaforai[7][SfZalia] = -1;
        }
        SetTimer("SviesaforaiSwitchTPSF1", 12000, false);
        return 1;
    }
    if(IsValidDynamicObject(Sviesaforai[4][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfGeltona]);
        Sviesaforai[4][SfGeltona] = -1;
    }
    //3 SVIESAFORAS
    if(IsValidDynamicObject(Sviesaforai[5][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfGeltona]);
        Sviesaforai[5][SfGeltona] = -1;
    }
    //2
    if(IsValidDynamicObject(Sviesaforai[6][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfGeltona]);
        Sviesaforai[6][SfGeltona] = -1;
    }
    //4
    if(IsValidDynamicObject(Sviesaforai[7][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfGeltona]);
        Sviesaforai[7][SfGeltona] = -1;
    }
    // 1 sviesaforas
    Sviesaforai[4][SfMirksintiRaud] = CreateDynamicObject(19290, -2156.65747, 314.97318, 38.53317,   0.00000, 0.00000, 0.00000); //mirksinti raudona
    //3 SVIESAFORAS
    Sviesaforai[5][SfMirksintiRaud] = CreateDynamicObject(19290, -2136.54688, 325.55280, 38.53726,   0.00000, 0.00000, 0.00000); //mirksinti raudona
    //2
    Sviesaforai[6][SfMirksintiZalia] = CreateDynamicObject(19291, -2151.54150, 330.27292, 37.43645,   0.00000, 0.00000, 0.00000); //mirksinti þalia
    //4
    Sviesaforai[7][SfMirksintiZalia] = CreateDynamicObject(19291, -2141.76074, 310.13474, 37.43106,   0.00000, 0.00000, 0.00000); // mirgsinti þalia
    //
    Sviesaforai[4][SfRedOn] = true;
    Sviesaforai[6][SfRedOn] = false;
    Sviesaforai[5][SfRedOn] = true;
    Sviesaforai[7][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[4][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfRaudona]);
        Sviesaforai[4][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfRaudona]);
        Sviesaforai[5][SfRaudona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfZalia]);
        Sviesaforai[6][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfZalia]);
        Sviesaforai[7][SfZalia] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF2", 4000, false);
    return 1;
}
forward SviesaforaiSwitchTPSF2();
public SviesaforaiSwitchTPSF2()
{


    // 1 sviesaforas
    Sviesaforai[4][SfGeltona] = CreateDynamicObject(19294, -2156.65747, 315.29352, 37.94707,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[5][SfGeltona] = CreateDynamicObject(19294, -2136.54688, 325.23132, 37.94881,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[6][SfGeltona] = CreateDynamicObject(19294, -2151.51440, 330.27289, 37.95820,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[7][SfGeltona] = CreateDynamicObject(19294, -2141.75659, 310.13474, 37.96486,   0.00000, 0.00000, 0.00000); // geltona

    Sviesaforai[4][SfRedOn] = false;
    Sviesaforai[6][SfRedOn] = false;
    Sviesaforai[5][SfRedOn] = false;
    Sviesaforai[7][SfRedOn] = false;


    if(IsValidDynamicObject(Sviesaforai[4][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfMirksintiRaud]);
        Sviesaforai[4][SfMirksintiRaud] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfMirksintiRaud]);
        Sviesaforai[5][SfMirksintiRaud] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfMirksintiZalia]);
        Sviesaforai[6][SfMirksintiZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfMirksintiZalia]);
        Sviesaforai[7][SfMirksintiZalia] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF3", 2000, false);
    return 1;
}
forward SviesaforaiSwitchTPSF3();
public SviesaforaiSwitchTPSF3()
{
    // 1 sviesaforas
    Sviesaforai[4][SfZalia] = CreateDynamicObject(19283, -2156.65747, 315.28308, 37.40407,   0.00000, 0.00000, 0.00000); // þalia
    //3 SVIESAFORAS
    Sviesaforai[5][SfZalia] = CreateDynamicObject(19283, -2136.54688, 325.22528, 37.42852,   0.00000, 0.00000, 0.00000); // þalia
    //2
    Sviesaforai[6][SfRaudona] = CreateDynamicObject(19282, -2151.84668, 330.27286, 38.51684,   0.00000, 0.00000, 0.00000); // raudona
    //4
    Sviesaforai[7][SfRaudona] = CreateDynamicObject(19282, -2141.43677, 310.13474, 38.53990,   0.00000, 0.00000, 0.00000); // raudona
    //
    Sviesaforai[4][SfRedOn] = false;
    Sviesaforai[6][SfRedOn] = true;
    Sviesaforai[5][SfRedOn] = false;
    Sviesaforai[7][SfRedOn] = true;

    if(IsValidDynamicObject(Sviesaforai[4][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfGeltona]);
        Sviesaforai[4][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfGeltona]);
        Sviesaforai[5][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfGeltona]);
        Sviesaforai[6][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfGeltona]);
        Sviesaforai[7][SfGeltona] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF4", 12000, false);
    return 1;
}
forward SviesaforaiSwitchTPSF4();
public SviesaforaiSwitchTPSF4()
{
    // 1 sviesaforas
    Sviesaforai[4][SfMirksintiZalia] = CreateDynamicObject(19291, -2156.65747, 315.28308, 37.40407,   0.00000, 0.00000, 0.00000); //mirksinti þalia
    //3 SVIESAFORAS
    Sviesaforai[5][SfMirksintiZalia] = CreateDynamicObject(19291, -2136.54688, 325.22528, 37.42852,   0.00000, 0.00000, 0.00000); // mirgsinti þalia
    //2
    Sviesaforai[6][SfMirksintiRaud] = CreateDynamicObject(19290, -2151.84668, 330.27286, 38.51684,   0.00000, 0.00000, 0.00000); //mirksinti raudona
    //4
    Sviesaforai[7][SfMirksintiRaud] = CreateDynamicObject(19290, -2141.43677, 310.13474, 38.53990,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    Sviesaforai[4][SfRedOn] = false;
    Sviesaforai[6][SfRedOn] = true;
    Sviesaforai[5][SfRedOn] = false;
    Sviesaforai[7][SfRedOn] = true;

    if(IsValidDynamicObject(Sviesaforai[4][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfZalia]);
        Sviesaforai[4][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfZalia]);
        Sviesaforai[5][SfZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfRaudona]);
        Sviesaforai[6][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfRaudona]);
        Sviesaforai[7][SfRaudona] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF5", 4000, false);
    return 1;
}
forward SviesaforaiSwitchTPSF5();
public SviesaforaiSwitchTPSF5()
{

    // 1 sviesaforas
    Sviesaforai[4][SfGeltona] = CreateDynamicObject(19294, -2156.65747, 315.29352, 37.94707,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[5][SfGeltona] = CreateDynamicObject(19294, -2136.54688, 325.23132, 37.94881,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[6][SfGeltona] = CreateDynamicObject(19294, -2151.51440, 330.27289, 37.95820,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[7][SfGeltona] = CreateDynamicObject(19294, -2141.75659, 310.13474, 37.96486,   0.00000, 0.00000, 0.00000); // geltona
    Sviesaforai[4][SfRedOn] = false;
    Sviesaforai[6][SfRedOn] = false;
    Sviesaforai[5][SfRedOn] = false;
    Sviesaforai[7][SfRedOn] = false;
    if(IsValidDynamicObject(Sviesaforai[4][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfMirksintiZalia]);
        Sviesaforai[4][SfMirksintiZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfMirksintiZalia]);
        Sviesaforai[5][SfMirksintiZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfMirksintiRaud]);
        Sviesaforai[6][SfMirksintiRaud] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfMirksintiRaud]);
        Sviesaforai[7][SfMirksintiRaud] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF6", 2000, false);
    return 1;
}
forward SviesaforaiSwitchTPSF6();
public SviesaforaiSwitchTPSF6()
{
    // 1 sviesaforas
    Sviesaforai[4][SfRaudona] = CreateDynamicObject(19282, -2156.65747, 314.97318, 38.53317,   0.00000, 0.00000, 0.00000); // raudona
    //3 SVIESAFORAS
    Sviesaforai[5][SfRaudona] = CreateDynamicObject(19282, -2136.54688, 325.55280, 38.53726,   0.00000, 0.00000, 0.00000); // raudona
    //2
    Sviesaforai[6][SfZalia] = CreateDynamicObject(19283, -2151.54150, 330.27292, 37.43645,   0.00000, 0.00000, 0.00000); // þalia
    //4
    Sviesaforai[7][SfZalia] = CreateDynamicObject(19283, -2141.76074, 310.13474, 37.43106,   0.00000, 0.00000, 0.00000); // þalia

    Sviesaforai[4][SfRedOn] = true;
    Sviesaforai[6][SfRedOn] = false;
    Sviesaforai[5][SfRedOn] = true;
    Sviesaforai[7][SfRedOn] = false;
    if(IsValidDynamicObject(Sviesaforai[4][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[4][SfGeltona]);
        Sviesaforai[4][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[5][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[5][SfGeltona]);
        Sviesaforai[5][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[6][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[6][SfGeltona]);
        Sviesaforai[6][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[7][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[7][SfGeltona]);
        Sviesaforai[7][SfGeltona] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSF1", 12000, false);
    return 1;
}
//
//SVIESAFORAI PRIE TPSFA
stock StartSviesaforaiTPSFA()
{

    // 1 sviesaforas
    Sviesaforai[8][SfRaudona] = CreateDynamicObject(19282, -2156.65747, 314.97318, 38.53317,   0.00000, 0.00000, 0.00000); // raudona
    //3 SVIESAFORAS
    Sviesaforai[9][SfRaudona] = CreateDynamicObject(19282, -2136.54688, 325.55280, 38.53726,   0.00000, 0.00000, 0.00000); // raudona
    //2
    Sviesaforai[10][SfZalia] = CreateDynamicObject(19283, -2151.54150, 330.27292, 37.43645,   0.00000, 0.00000, 0.00000); // þalia
    //4
    Sviesaforai[11][SfZalia] = CreateDynamicObject(19283, -2141.76074, 310.13474, 37.43106,   0.00000, 0.00000, 0.00000); // þalia


    Sviesaforai[8][SfRedOn] = true;
    Sviesaforai[10][SfRedOn] = false;
    Sviesaforai[9][SfRedOn] = true;
    Sviesaforai[11][SfRedOn] = false;


    SetTimer("SviesaforaiSwitchTPSFA1", 12000, false);

    return 1;
}
forward SviesaforaiSwitchTPSFA1();
public SviesaforaiSwitchTPSFA1()
{
    new LaikasH;
    gettime(LaikasH);
    if(LaikasH == 23 || LaikasH < 6)
    {
        if(!IsValidDynamicObject(Sviesaforai[8][SfGeltona]))
        {
            Sviesaforai[8][SfGeltona] = CreateDynamicObject(19294, -2241.82642, 325.27634, 37.96467,   0.00000, 0.00000, 0.00000); // geltona
        }
        //3 SVIESAFORAS
        if(!IsValidDynamicObject(Sviesaforai[9][SfGeltona]))
        {
            Sviesaforai[9][SfGeltona] = CreateDynamicObject(19294, -2262.12817, 315.44882, 37.96567,   0.00000, 0.00000, 0.00000); // geltona
        }
        //2
        if(!IsValidDynamicObject(Sviesaforai[10][SfGeltona]))
        {
            Sviesaforai[10][SfGeltona] = CreateDynamicObject(19294, -2246.95996, 310.33646, 37.97198,   0.00000, 0.00000, 0.00000); // geltona
        }
        //4

        if(!IsValidDynamicObject(Sviesaforai[11][SfGeltona]))
        {
            Sviesaforai[11][SfGeltona] = CreateDynamicObject(19294, -2256.87988, 330.47513, 37.95327,   0.00000, 0.00000, 0.00000); // geltona
        }

        Sviesaforai[8][SfRedOn] = false;
        Sviesaforai[10][SfRedOn] = false;
        Sviesaforai[9][SfRedOn] = false;
        Sviesaforai[11][SfRedOn] = false;
        if(IsValidDynamicObject(Sviesaforai[8][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[8][SfRaudona]);
            Sviesaforai[8][SfRaudona] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[9][SfRaudona]))
        {
            DestroyDynamicObject(Sviesaforai[9][SfRaudona]);
            Sviesaforai[9][SfRaudona] = -1;
        }

        if(IsValidDynamicObject(Sviesaforai[10][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[10][SfZalia]);
            Sviesaforai[10][SfZalia] = -1;
        }
        if(IsValidDynamicObject(Sviesaforai[11][SfZalia]))
        {
            DestroyDynamicObject(Sviesaforai[11][SfZalia]);
            Sviesaforai[11][SfZalia] = -1;
        }
        SetTimer("SviesaforaiSwitchTPSFA1", 12000, false);
        return 1;
    }

    if(IsValidDynamicObject(Sviesaforai[8][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfGeltona]);
        Sviesaforai[8][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfGeltona]);
        Sviesaforai[9][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfGeltona]);
        Sviesaforai[10][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfGeltona]);
        Sviesaforai[11][SfGeltona] = -1;
    }
    // 1 sviesaforas
    Sviesaforai[8][SfMirksintiRaud] = CreateDynamicObject(19290, -2241.82642, 325.60565, 38.49331,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    //3 SVIESAFORAS
    Sviesaforai[9][SfMirksintiRaud] = CreateDynamicObject(19290, -2262.12817, 315.13922, 38.54745,   0.00000, 0.00000, 0.00000); // mirksinti raudona
    //2
    Sviesaforai[10][SfMirksintiZalia] = CreateDynamicObject(19291, -2246.93530, 310.33643, 37.39449,   0.00000, 0.00000, 0.00000); // mirksinti þalia
    //4
    Sviesaforai[11][SfMirksintiZalia] = CreateDynamicObject(19291, -2256.89111, 330.47516, 37.43370,   0.00000, 0.00000, 0.00000); // mirksinti þalia
    //
    Sviesaforai[8][SfRedOn] = true;
    Sviesaforai[10][SfRedOn] = false;
    Sviesaforai[9][SfRedOn] = true;
    Sviesaforai[11][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[8][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfRaudona]);
        Sviesaforai[8][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfRaudona]);
        Sviesaforai[9][SfRaudona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfZalia]);
        Sviesaforai[10][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfZalia]);
        Sviesaforai[11][SfZalia] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSFA2", 4000, false);
    return 1;
}
forward SviesaforaiSwitchTPSFA2();
public SviesaforaiSwitchTPSFA2()
{


    // 1 sviesaforas
    Sviesaforai[8][SfGeltona] = CreateDynamicObject(19294, -2241.82642, 325.27634, 37.96467,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[9][SfGeltona] = CreateDynamicObject(19294, -2262.12817, 315.44882, 37.96567,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[10][SfGeltona] = CreateDynamicObject(19294, -2246.95996, 310.33646, 37.97198,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[11][SfGeltona] = CreateDynamicObject(19294, -2256.87988, 330.47513, 37.95327,   0.00000, 0.00000, 0.00000); // geltona

    Sviesaforai[8][SfRedOn] = false;
    Sviesaforai[10][SfRedOn] = false;
    Sviesaforai[9][SfRedOn] = false;
    Sviesaforai[11][SfRedOn] = false;

    if(IsValidDynamicObject(Sviesaforai[8][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfMirksintiRaud]);
        Sviesaforai[8][SfMirksintiRaud] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfMirksintiRaud]);
        Sviesaforai[9][SfMirksintiRaud] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfMirksintiZalia]);
        Sviesaforai[10][SfMirksintiZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfMirksintiZalia]);
        Sviesaforai[11][SfMirksintiZalia] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSFA3", 2000, false);
    return 1;
}
forward SviesaforaiSwitchTPSFA3();
public SviesaforaiSwitchTPSFA3()
{
    // 1 sviesaforas
    Sviesaforai[8][SfZalia] = CreateDynamicObject(19283, -2241.82642, 325.28812, 37.41904,   0.00000, 0.00000, 0.00000); // þalia
    //3 SVIESAFORAS
    Sviesaforai[9][SfZalia] = CreateDynamicObject(19283, -2262.12817, 315.44577, 37.42699,   0.00000, 0.00000, 0.00000); // þalia
    //2
    Sviesaforai[10][SfRaudona] = CreateDynamicObject(19282, -2246.63672, 310.33646, 38.50923,   0.00000, 0.00000, 0.00000); // raudona
    //4
    Sviesaforai[11][SfRaudona] = CreateDynamicObject(19282, -2257.20239, 330.47513, 38.52636,   0.00000, 0.00000, 0.00000); // raudona
    //
    Sviesaforai[8][SfRedOn] = false;
    Sviesaforai[10][SfRedOn] = true;
    Sviesaforai[9][SfRedOn] = false;
    Sviesaforai[11][SfRedOn] = true;
    if(IsValidDynamicObject(Sviesaforai[8][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfGeltona]);
        Sviesaforai[8][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfGeltona]);
        Sviesaforai[9][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfGeltona]);
        Sviesaforai[10][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfGeltona]);
        Sviesaforai[11][SfGeltona] = -1;
    }

    SetTimer("SviesaforaiSwitchTPSFA4", 12000, false);
    return 1;
}
forward SviesaforaiSwitchTPSFA4();
public SviesaforaiSwitchTPSFA4()
{
    // 1 sviesaforas
    Sviesaforai[8][SfMirksintiZalia] = CreateDynamicObject(19291, -2241.82642, 325.28812, 37.41904,   0.00000, 0.00000, 0.00000); // þalia
    //3 SVIESAFORAS
    Sviesaforai[9][SfMirksintiZalia] = CreateDynamicObject(19291, -2262.12817, 315.44577, 37.42699,   0.00000, 0.00000, 0.00000); // þalia
    //2
    Sviesaforai[10][SfMirksintiRaud] = CreateDynamicObject(19290, -2246.63672, 310.33646, 38.50923,   0.00000, 0.00000, 0.00000); // raudona
    //4
    Sviesaforai[11][SfMirksintiRaud] = CreateDynamicObject(19290, -2257.20239, 330.47513, 38.52636,   0.00000, 0.00000, 0.00000); // raudona
    Sviesaforai[8][SfRedOn] = false;
    Sviesaforai[10][SfRedOn] = true;
    Sviesaforai[9][SfRedOn] = false;
    Sviesaforai[11][SfRedOn] = true;

    if(IsValidDynamicObject(Sviesaforai[8][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfZalia]);
        Sviesaforai[8][SfZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfZalia]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfZalia]);
        Sviesaforai[9][SfZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfRaudona]);
        Sviesaforai[10][SfRaudona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfRaudona]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfRaudona]);
        Sviesaforai[11][SfRaudona] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSFA5", 4000, false);
    return 1;
}
forward SviesaforaiSwitchTPSFA5();
public SviesaforaiSwitchTPSFA5()
{

    // 1 sviesaforas
    Sviesaforai[8][SfGeltona] = CreateDynamicObject(19294, -2241.82642, 325.27634, 37.96467,   0.00000, 0.00000, 0.00000); // geltona
    //3 SVIESAFORAS
    Sviesaforai[9][SfGeltona] = CreateDynamicObject(19294, -2262.12817, 315.44882, 37.96567,   0.00000, 0.00000, 0.00000); // geltona
    //2
    Sviesaforai[10][SfGeltona] = CreateDynamicObject(19294, -2246.95996, 310.33646, 37.97198,   0.00000, 0.00000, 0.00000); // geltona
    //4
    Sviesaforai[11][SfGeltona] = CreateDynamicObject(19294, -2256.87988, 330.47513, 37.95327,   0.00000, 0.00000, 0.00000); // geltona
    Sviesaforai[8][SfRedOn] = false;
    Sviesaforai[10][SfRedOn] = false;
    Sviesaforai[9][SfRedOn] = false;
    Sviesaforai[11][SfRedOn] = false;
    if(IsValidDynamicObject(Sviesaforai[8][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfMirksintiZalia]);
        Sviesaforai[8][SfMirksintiZalia] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfMirksintiZalia]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfMirksintiZalia]);
        Sviesaforai[9][SfMirksintiZalia] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfMirksintiRaud]);
        Sviesaforai[10][SfMirksintiRaud] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfMirksintiRaud]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfMirksintiRaud]);
        Sviesaforai[11][SfMirksintiRaud] = -1;
    }
    SetTimer("SviesaforaiSwitchTPSFA6", 2000, false);
    return 1;
}
forward SviesaforaiSwitchTPSFA6();
public SviesaforaiSwitchTPSFA6()
{
    // 1 sviesaforas
    Sviesaforai[8][SfRaudona] = CreateDynamicObject(19282, -2241.82642, 325.60565, 38.49331,   0.00000, 0.00000, 0.00000); // raudona
    //3 SVIESAFORAS
    Sviesaforai[9][SfRaudona] = CreateDynamicObject(19282, -2262.12817, 315.12778, 38.53607,   0.00000, 0.00000, 0.00000); // raudona
    //2
    Sviesaforai[10][SfZalia] = CreateDynamicObject(19283, -2246.93530, 310.33643, 37.39449,   0.00000, 0.00000, 0.00000); // þalia
    //4
    Sviesaforai[11][SfZalia] = CreateDynamicObject(19283, -2256.89111, 330.47516, 37.43370,   0.00000, 0.00000, 0.00000); // þalia

    Sviesaforai[8][SfRedOn] = true;
    Sviesaforai[10][SfRedOn] = false;
    Sviesaforai[9][SfRedOn] = true;
    Sviesaforai[11][SfRedOn] = false;
    if(IsValidDynamicObject(Sviesaforai[8][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[8][SfGeltona]);
        Sviesaforai[8][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[9][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[9][SfGeltona]);
        Sviesaforai[9][SfGeltona] = -1;
    }

    if(IsValidDynamicObject(Sviesaforai[10][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[10][SfGeltona]);
        Sviesaforai[10][SfGeltona] = -1;
    }
    if(IsValidDynamicObject(Sviesaforai[11][SfGeltona]))
    {
        DestroyDynamicObject(Sviesaforai[11][SfGeltona]);
        Sviesaforai[11][SfGeltona] = -1;
    }

    SetTimer("SviesaforaiSwitchTPSFA1", 12000, false);
    return 1;
}

forward OnLoadPavaduotojai();
public OnLoadPavaduotojai()
{
    new Rows = cache_get_row_count();
    if(Rows > 0)
    {
        for(new row = 0;row < Rows;row ++)
        {
            new TmpCData_JobID = cache_get_row_int(row, 0);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToInvite] = cache_get_row_int(row, 1);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToKickFromJob] = cache_get_row_int(row, 2);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToWrite] = cache_get_row_int(row, 3);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToWarn] = cache_get_row_int(row, 4);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToGiveBonuses] = cache_get_row_int(row, 5);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToLockGarage] = cache_get_row_int(row, 6);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToAdministrateFund] = cache_get_row_int(row, 7);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToSetARank] = cache_get_row_int(row, 8);
            PavaduotojaiNustatymai[TmpCData_JobID][PavRightToAdministrateRanks] = cache_get_row_int(row, 9);
            PavaduotojaiNustatymai[TmpCData_JobID][PavIsLoaded] = true;
        }
    }
    else
    {
        print("\n ERROR COULD LOAD Pavaduotojai BECAUSE TABLE WAS EMPTY");
    }
    return 1;
}
stock SavePavaduotojai()
{
    for(new i = 0;i <= DARBU_SKAICIUS;i++)
    {
        if(PavaduotojaiNustatymai[i][PavIsLoaded] == true)
        {
            new QueryString[400];

            new QueryString1[256];
            format(QueryString1, 400, "UPDATE `pavaduotojunustatymai` SET `RightToInvite`= '%d',`RightToKickFromJob`='%d',`RightToWrite`='%d',`RightToWarn`='%d'", PavaduotojaiNustatymai[i][PavRightToInvite],PavaduotojaiNustatymai[i][PavRightToKickFromJob],PavaduotojaiNustatymai[i][PavRightToWrite],PavaduotojaiNustatymai[i][PavRightToWarn]);
            new QueryString2[256];
            format(QueryString2, 400, ",`RightToGiveBonuses`='%d',`RightToLockGarage`='%d',`RightToAdministrateFund`='%d',`RightToSetARank`='%d',`RightToAdministrateRanks`='%d' WHERE `JobID` = '%d' LIMIT 1;", PavaduotojaiNustatymai[i][PavRightToGiveBonuses],PavaduotojaiNustatymai[i][PavRightToLockGarage],PavaduotojaiNustatymai[i][PavRightToAdministrateFund],PavaduotojaiNustatymai[i][PavRightToSetARank],PavaduotojaiNustatymai[i][PavRightToAdministrateRanks],i);
            mysql_format(connectionHandle, QueryString, 400, "%s %s", QueryString1,QueryString2);
            mysql_function_query(connectionHandle, QueryString, false, "", "");
        }
    }
    return 1;
}
CMD:dpavaduotojas(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0)
    {
        if(PavaduotojaiNustatymai[PlayerDB[playerid][Direktorius]][PavIsLoaded] == true)
        {
            ShowPlayerDialog(playerid, 151, DIALOG_STYLE_LIST, "{AFAFAF}Pavaduotojo valdymas", "Direktoriaus pavaduotojo skirimas\nPavaduotojo privilegijos", "Rinktis", "Atðaukti");
        }
        else
        {
            ErrorMsg(playerid,"• Dar nëra uþkrauti pavaduotojo nustatymai.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams.");
    }
    return 1;
}
forward OnLoadPavaduotojoSkirimoForma(playerid);
public OnLoadPavaduotojoSkirimoForma(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 152, DIALOG_STYLE_INPUT, "{AFAFAF}Pavaduotojo skyrimo forma", "Ðiuo metu neturite pavaduotojo,taèiau galite paskirti þaidëjà,kuris eitu jûsø pavaduotojo pareigas.\nÁraðykite þaidëjo vardà kurá norite paskirti eiti jûsø pavaduotojo pareigas:", "skirti", "Atgal");
    }
    else
    {
        new string[256];
        new PavaduotojoVardas[24];
        cache_get_row(0, 0, PavaduotojoVardas);
        format(string, 256, "Jûsø dabartinis pavaduotojas yra: %s ,taèiau galite paskirti kità þaidëjà eiti jo pareigas.\n", PavaduotojoVardas);
        strcat(string, "Áraðykite þaidëjo vardà kurá norite paskirti eiti jûsø naujojo pavaduotojo pareigas arba áraðykite 'Nusalinti' norëdami nuðalinti esamà pavaduotojà.");
        ShowPlayerDialog(playerid, 152, DIALOG_STYLE_INPUT, "{AFAFAF}Pavaduotojo skyrimo forma", string, "Skirti", "Atgal");
    }
    return 1;
}
stock GetDistanceBTWTwoPoints( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
    return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) );
}
CMD:tpd(playerid,params[])
{
    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        ErrorMsg(playerid,"• Jûs esate suriðtas arba surakintas, todël ðios komandos naudoti negalite.");
        return 1;
    }
    if(PlayerDB[playerid][LaukiuVaistu] == true)
	{
		ErrorMsg(playerid,"• Ðiuo momentu negalite teleportuotis.");
 		return 1;
	}
    if(PlayerDB[playerid][adminlvl] > 0 || PlayerDB[playerid][VIP] == 1)
    {
        if((PlayerDB[playerid][BEGA] == 1 || PlayerDB[playerid][JailTime] > 0 ))
        {
            ErrorMsg(playerid,"Jûsø ieðko policija,todël negalite teleportuotis.");
            return 1;
        }
        new PlayerInterior = GetPlayerInterior(playerid);
        if((PlayerInterior >= 1 && PlayerInterior < 6) || PlayerInterior == 15 || PlayerInterior == 10 || PlayerInterior == 8 || PlayerInterior == 9 )
    	{
	        new PlayerVW = GetPlayerVirtualWorld(playerid);
	        if(PlayerVW >= 3)
        	{
            	if(HouseInfo[PlayerVW-3][HouseID] >= 0)
            	{
        			HouseInfo[PlayerVW-3][kieknamie]--;
            	}
        	}
    	}
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		{
  			new VehicleID = GetPlayerVehicleID(playerid);
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 443) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
    		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 453) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 472) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 484) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 476) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
	    	if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 593) return ErrorMsg(playerid,"• Su ðiuo transportu teleportuotis negalima.");
 		}
        if(PlayerDB[playerid][Job] > 0)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= 1000)
            {
                new bool:PlayerIsDriver,PlayerVehicleID;
                PlayerVehicleID = GetPlayerVehicleID(playerid);
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerVehicleID > 0)
                {
                    PlayerIsDriver = true;
                    if(IsPlayerInDynamicArea(playerid, KMAArea, 1) == 1)
                    {
                        ErrorMsg(playerid,"• Jûs esate konfiskuotø maðinø aikðtelëje,todël teleportuotis su maðina negalite.");
                        return 1;
                    }
                    if(GetVehicleModel(PlayerVehicleID) == 498 && VehicleDB[PlayerVehicleID][DARBOMASINA] == true && IsJobFromMafia(VehicleDB[PlayerVehicleID][DARBOID]))
                    {
                        ErrorMsg(playerid,"• Su ðia tr. priemonë teleportacijos yra negalimos.");
                        return 1;
                    }
                }
                new Float:X,Float:Y,Float:Z,PlayerVW,PlayerI;
                GetPlayerPos(playerid, X, Y, Z);
                PlayerVW = GetPlayerVirtualWorld(playerid);
                PlayerI = GetPlayerInterior(playerid);
                new bool:TeleportacijaIvyko;
                switch(PlayerDB[playerid][Job])
                {
                    case 1:
                    {
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 523:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1590.0323,707.9711,-5.6675,274.2881);

                                }
                                case 597:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1589.8722,708.0420,-5.4701,271.1061);

                                }
                                case 599:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1589.5646,708.1373,-5.0491,269.9573);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -1589.5646,708.1373,-5.0491,269.9573);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1619.9482,681.6000,7.1875,285.3488);

                        }
                    }
                    case 2:
                    {
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 487:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2635.3936,599.5703,66.2698,221.0786);

                                }
                                case 416:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2567.9023,606.5317,14.6055,178.1273);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -2568.0769,606.8120,14.5881,181.6683);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2589.8296,642.7056,14.4531,266.9809);

                        }
                    }
                    case 3:
                    {
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 438:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1632.7310,1280.2089,7.1969,43.0936);

                                }
                                case 418:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1632.1541,1280.5725,7.2805,42.4489);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -1632.6890,1280.1786,6.8923,44.5834);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1607.1202,1274.0115,7.1875,73.5041);

                        }
                    }
                    case 4:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2566.4172,526.5934,14.3997,2.1328);
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2570.5439,500.0313,14.6739,190.1611);

                        }
                    }
                    case 5:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -1747.5255,-124.0985,3.4337,179.8400);
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1757.4744,-123.9103,3.5547,265.6696);

                        }
                    }
                    case 6:
                    {
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 541:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2327.5737,-16.5459,-8.0690,180.5611);

                                }
                                case 490:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2328.6143,-16.6855,-7.5658,179.6416);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -2330.4583,-15.8915,-7.9484,179.0719);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2315.9404,-39.6262,35.9559,86.8962);

                        }
                    }
                    case 7:
                    {
                        if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1))
                        {
                            if(LuccheseGangZoneU == true)
                            {
                                ErrorMsg(playerid,"• Jûsø mafijos bazë yra uþimta,todël negalite naudotis ðia komanda.");
                                return 1;
                            }
                        }
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 405:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-690.9642,983.0379,12.4288,180.7666);

                                }
                                case 498:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-689.2269,983.3319,12.6201,179.9314);

                                }
                                case 508:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-689.5376,982.2718,12.9290,181.2352);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -689.2269,983.3319,12.6201,179.9314);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-691.2509,947.3157,13.9838,178.8620);

                        }
                    }
                    case 8:
                    {
                        if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1))
                        {
                            if(GenoveseGangZoneU == true)
                            {
                                ErrorMsg(playerid,"• Jûsø mafijos bazë yra uþimta,todël negalite naudotis ðia komanda.");
                                return 1;
                            }
                        }
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 445:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1082.8589,-1247.4489,129.1769,180.7946);

                                }
                                case 498:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1083.3081,-1246.3501,129.3707,179.6898);

                                }
                                case 508:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-1083.0365,-1247.3656,129.6768,180.8826);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -1083.3081,-1246.3501,129.3707,179.6898);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1086.3717,-1280.2572,130.7798,185.1053);

                        }
                    }
                    case 9:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2129.3213,-137.2297,35.0778,359.0542);
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2119.6787,-126.9791,35.3203,269.8278);

                        }
                    }
                    case 10:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2172.6304,-92.1894,35.1385,178.5039);
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2182.6514,-108.2348,35.3699,269.7386);

                        }
                    }
                    case 11:
                    {
                        if(PlayerIsDriver)
                        {
                            switch(GetVehicleModel(PlayerVehicleID))
                            {
                                case 522:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.3826,-42.7829,24.2826,181.9976);

                                }
                                case 411:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.7134,-43.7090,24.4371,181.2463);

                                }
                                case 560:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.7134,-43.7090,24.4371,181.2463);

                                }
                                case 426:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.7134,-43.7090,24.4371,181.2463);

                                }
                                case 451:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.7134,-43.7090,24.4371,181.2463);

                                }
                                case 415:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID,-2063.7134,-43.7090,24.4371,181.2463);

                                }
                                default:
                                {
                                    TeleportacijaIvyko = true;
                                    SetPlayerVirtualWorld(playerid, 0);
                                    SetPlayerInterior(playerid, 0);
                                    SetVehiclePosExt(PlayerVehicleID, -2063.2527,-42.7843,24.6488,181.1131);

                                }
                            }
                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2073.9380,-58.0899,24.7100,82.2156);

                        }
                    }
                    case 12:
                    {
                        if(PlayerIsDriver)
                        {
                            if(IsVehicleAircraft(GetVehicleModel(PlayerVehicleID)))
                            {
                                ErrorMsg(playerid,"• Teleportacija su skraidanèia tr. priemone yra negalima.");
                            }
                            else
                            {
                                TeleportacijaIvyko = true;
                                SetPlayerVirtualWorld(playerid, 0);
                                SetPlayerInterior(playerid, 0);
                                SetVehiclePosExt(PlayerVehicleID, -1838.5007,147.8440,15.1172,77.3887);
                            }

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2073.9380,-58.0899,24.7100,82.2156);

                        }
                    }
                    case 13:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2188.5935,999.4212,80.1315,1.1785);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2193.7441,1014.4546,80.0078,159.6236);

                        }
                    }
                    case 14:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2033.9219,60.0386,28.3906,106.0102);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2193.7441,1014.4546,80.0078,159.6236);

                        }
                    }
                    case 15:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -1985.6104,947.2391,45.1705,92.0032);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1978.4670,951.9957,45.4453,274.0130);

                        }
                    }
                    case 16:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -1236.9580,133.7505,14.2407,315.1472);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1259.0200,162.3737,14.1484,90);

                        }
                    }
                    case 17:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -1225.6024,31.4235,14.0778,135.4657);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1237.6812,42.6279,14.1361,44.5435);

                        }
                    }
                    case 18:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -1720.4763,1018.2343,17.3859,88.7505);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-1757.4415,961.6885,24.8828,321.8409);

                        }
                    }
                    case 19:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2312.6951,-158.1809,35.2670,179.3111);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2326.9705,-166.4226,35.5547,353.5968);

                        }
                    }
                    case 20:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, -2336.7307,984.5807,50.4224,99.0931);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,-2350.8057,992.3181,50.7029,357.6848);

                        }
                    }
                    case 21:
                    {
                        if(PlayerIsDriver)
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetVehiclePosExt(PlayerVehicleID, 272.3980,1369.6963,11.6046,359.1662);

                        }
                        else
                        {
                            TeleportacijaIvyko = true;
                            SetPlayerVirtualWorld(playerid, 0);
                            SetPlayerInterior(playerid, 0);
                            SetPlayerPosExt(playerid,145.7956,1450.0441,11.6618,181.8347);

                        }
                    }
                }
                if(TeleportacijaIvyko == true)
                {
                    new LabelText[100];
                    format(LabelText, 100, "%s Nusiteleportavo su komanda /tpd á savo darbo bazæ", Vardas(playerid));
                    CreateTemporarilyLabel(LabelText,ORANGE, X,Y,Z, 15.0,PlayerVW,PlayerI, 0 ,10);
                    PlayerDB[playerid][MoneyInPocket]-=1000;
                    SendClientMessage(playerid, ZALIA, "• Teleportacija kainavo 1 000€.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Komandos naudojimo kaina: 1 000 €.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Jûs esate bedarbis,todël negalite naudotis ðia komanda.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• VIP komanda, nori ja naudotis? Tapk VIP nariu ðiandien, plaèiau /vipinfo.");
    }
    return 1;
}
stock SetVehiclePosExt(vehicleid,Float:X,Float:Y,Float:Z,Float:R)
{
    SetVehiclePos(vehicleid, X, Y, Z);
    SetVehicleZAngle(vehicleid, R);
}
CMD:xprivate(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid," Ájungti/Iðjungti privatumo reþimà pasirinktam þaidëjui: /xprivate [V_P/ID]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][PrivateMode] == false)
                {
                    PlayerDB[id][PrivateMode] = true;
                    SendClientMessage(playerid, -1, "• Privatumo reþimas pasirinktam þaidëjui ájungtas.");
                }
                else
                {
                    PlayerDB[id][PrivateMode] = false;
                    SendClientMessage(playerid, -1, "• Privatumo reþimas pasirinktam þaidëjui iðjungtas.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
        return 1;
    }
    return 0;
}
CMD:zinutes(playerid,params[])
{
    if(PlayerDB[playerid][PhoneState] == 0)
    {
        ErrorMsg(playerid,"• Pirmiausia ájunkite savo telefonà /ijungti.");
        return 1;
    }
    else
    {
        new QueryString[200];
        mysql_format(connectionHandle, QueryString, 200, "SELECT `SenderName`, FROM_UNIXTIME(`SendingTime`) AS `GavimoLaikasData`, `Zinute` FROM `smszinutes` WHERE `ReceiverName` = '%e' ORDER BY `ID` DESC LIMIT 10;", Vardas(playerid));
        mysql_function_query(connectionHandle, QueryString, true, "OnSelectSMSZinutes", "d", playerid);
    }
    return 1;
}
forward OnSelectSMSZinutes(playerid);
public OnSelectSMSZinutes(playerid)
{
    new rows = cache_get_row_count();
    if(rows > 0)
    {
        new SenderName[24];
        new GavimoLaikasData[20];
        new Zinute[144];
        new info[2048];
        for(new i = 0;i<rows;i++)
        {
            cache_get_row(i, 0, SenderName);
            cache_get_row(i, 1, GavimoLaikasData);
            cache_get_row(i, 2, Zinute);
            new string[256];
            if(i == 0)
            {
                format(string, 256, "[%s] [%s] [%s]", GavimoLaikasData,SenderName,Zinute);
            }
            else
            {

                format(string, 256, "\n[%s] [%s] [%s]", GavimoLaikasData,SenderName,Zinute);
            }
            strcat(info, string);
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Gautos þinutës", info, "Gerai", "");
    }
    else
    {
        ErrorMsg(playerid,"• Nëra gautø þinuèiø.");
    }
    return 1;
}
stock IsVehicleShip(model)
{
    new r = 0;
    switch(model)
    {
        case 430,446,452..454,472..473,484,493,595:
        {
            r = 1;
        }
    }
    return r;
}
CMD:refresh(playerid,params[])
{
    Streamer_Update(playerid);
    SendClientMessage(playerid, ZALIA, "• Atnaujinta, dabar turëtumete pradëti matyti objektus.");
    return 1;
}
CMD:seifas(playerid,params[])
{
    switch(PlayerDB[playerid][Direktorius] || PlayerDB[playerid][Pavaduotojas])
    {
        case 1,6,9,11:
        {
            new info[144];
            format(info, 144, "Ðiuo metu teisësauga yra konfiskavusi: \n%i g. kanapiø \n%i mg. heroino\n%i mg. kokaino.", KonfiskuotosKanapes,KonfiskuotasHeroinas,KonfiskuotasKokainas);
            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Konfiskuotos narkotinës medþiagos", info, "Gerai","");
        }
        default:
        {
            ErrorMsg(playerid,"• Ði komanda tik teisësaugos direktoriams.");
        }
    }
    return 1;
}
CMD:patruliuoju(playerid,params[])
{
    if(IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        switch(PlayerDB[playerid][Patrulis])
        {
            case true:
            {
                PlayerDB[playerid][Patrulis] = false;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(i != playerid)
                    {
                        if(PlayerDB[i][WantedLevel] > 0)
                        {
                            SetPlayerMarkerForPlayer(playerid, i,GetPlayerColor(i));
                        }
                    }
                }
                SendClientMessage(playerid, ZALIA, "• Patrulio reþimas iðjungtas,þemëlapyje nebematysite nusikalteliu.");
            }
            case false:
            {
                PlayerDB[playerid][Patrulis] = true;
                for(new i = 0;i<= GetPlayerPoolSize();i++)
                {
                    if(i != playerid)
                    {
                        if(PlayerDB[i][WantedLevel] > 0)
                        {
                            SetPlayerMarkerForPlayer(playerid, i,( GetPlayerColor(i) | MELYNA));
                        }
                    }
                }
                SendClientMessage(playerid, ZALIA, "• Patrulio reþimas ájungtas,þemëlapyje matysite nusikaltelius roþine spalva.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik teisësaugai.");
    }
    return 1;
}

CMD:top(playerid,params[])
{
    new info[700];
    strcat(info, "{FFFF00}»{FFFFFF} Pagal patirtá\n{FFFF00}»{FFFFFF} Pagal darbø patirtá\n{FFFF00}»{FFFFFF} Pagal praleistà laikà ðiandien\n{FFFF00}»{FFFFFF} Pagal praleistà laikà iðviso\n{FFFF00}»{FFFFFF} Pagal bendrà patirtá teisësaugoje\n{FFFF00}»{FFFFFF} Pagal bendrà patirtá mafijose\n{FFFF00}»{FFFFFF} Pagal uþdarbá ðiandien\n{FFFF00}»{FFFFFF} Pagal uþdarbá iðviso\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal parduotas uogas ðiandien\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal parduotas uogas iðviso\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal iðsprestus matematinius uþdavinius ðiandien\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal iðsprestus matematinius uþdavinius iðviso\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal laimëtas kartingø lenktynes iðviso\n");
    strcat(info, "{FFFF00}» {FFFFFF}Pagal laimëtas kartingø lenktynes ðiandien");


    ShowPlayerDialog(playerid, 156, DIALOG_STYLE_LIST,"{AFAFAF}TOP 10", info, "Rinktis", "Atðaukti");
    return 1;
}

forward OnPlayerRequestTopByXP(playerid);
public OnPlayerRequestTopByXP(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai turintys daugiausiai patirties taðkø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}turi {FFFF00}%s{FFFFFF} patirties taðkø\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerXP = GetPlayerScore(playerid);
        new GapOfXP = cache_get_row_int(9, 1) - PlayerXP +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal patirties taðkus jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerXP = GetPlayerScore(playerid);
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerXP + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal patirties taðkus jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.",PlayerInTopPlace - 1, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal bendrà patirtá", info, "Gerai", "");
    return 1;
}

forward OnPlayerRequestTopByLawXP(playerid);
public OnPlayerRequestTopByLawXP(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai turintys daugiausiai patirties taðkø teisësaugoje: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}turi {FFFF00}%s{FFFFFF} patirties taðkø\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerXP = (PlayerDB[playerid][Job1XP] + PlayerDB[playerid][Job9XP] );
        new GapOfXP = cache_get_row_int(9, 1) - PlayerXP +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal patirties taðkus teisësaugoje jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerXP = (PlayerDB[playerid][Job1XP]+ PlayerDB[playerid][Job9XP] );
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerXP + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal patirties taðkus teisësaugoje jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.",PlayerInTopPlace - 1, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal bendrà patirtá teisësaugoje", info, "Gerai", "");
    return 1;
}

forward OnPlayerRequestTopByMafXP(playerid);
public OnPlayerRequestTopByMafXP(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai turintys daugiausiai patirties taðkø mafijose: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}turi {FFFF00}%s{FFFFFF} patirties taðkø\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerXP = (PlayerDB[playerid][Job7XP]+ PlayerDB[playerid][Job8XP]);
        new GapOfXP = cache_get_row_int(9, 1) - PlayerXP +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal patirties taðkus mafijose jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerXP = (PlayerDB[playerid][Job7XP]+ PlayerDB[playerid][Job8XP]);
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerXP + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal patirties taðkus mafijose jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.",PlayerInTopPlace - 1, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal bendrà patirtá mafijose", info, "Gerai", "");
    return 1;
}
forward OnPlayerRequestTopByPlayedToday(playerid);
public OnPlayerRequestTopByPlayedToday(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai ðiandien þaidæ ilgiausiai: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}praþaidæs {FFFF00}%s{FFFFFF} minuèiø.\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][SiandienZaista];
        new GapOfXP = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal ðiandien praþaistà laikà jums reikia praþaisti dar{FFFF00} %s {FFFFFF}minuèiø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][SiandienZaista];
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal ðiandien praþaistà laikà jums reikia praþaisti dar{FFFF00} %s {FFFFFF}minuèiø.",PlayerInTopPlace - 1, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal ðiandien þaistà laikà", info, "Gerai", "");
    return 1;
}

forward OnPlayerRequestTopByPlayed(playerid);
public OnPlayerRequestTopByPlayed(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjø top'as pagal serveryje praleistà laikà ið viso: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}praþaidæs {FFFF00}%s{FFFFFF} minuèiø.\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][ZaistaTotal];
        new GapOfXP = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal serveryje praleistà laikà ið viso jums reikia praþaisti dar {FFFF00}%s{FFFFFF} minuèiø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][ZaistaTotal];
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal serveryje praleistà laikà ið viso jums reikia praþaisti dar {FFFF00}%s{FFFFFF} minuèiø.",PlayerInTopPlace - 1, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø top'as pagal serveryje praleistà laikà ið viso", info, "Gerai", "");
    return 1;
}


forward OnPlayerRequestTopByWXP(playerid,DarboXP);
public OnPlayerRequestTopByWXP(playerid,DarboXP)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai turintys daugiausiai patirties taðkø pasirinktame darbe: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}turi {FFFF00}%s{FFFFFF} patirties taðkø\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i;
        }
    }
    if(PlayerInTop == false)
    {
        new GapOfXP = cache_get_row_int(9, 1) - DarboXP +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal patirties taðkus pasirinktame darbe jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.", AddSpaces(GapOfXP));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 0)
        {
            new GapOfXP = cache_get_row_int(PlayerInTopPlace-1, 1) - DarboXP + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal patirties taðkus pasirinktame darbe jums trûksta {FFFF00}%s{FFFFFF} patirties taðkø.",PlayerInTopPlace, AddSpaces(GapOfXP));
            strcat(info, string);
        }
    }
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal patirtá pasirinktame darbe", info, "Gerai", "");
    return 1;
}
CMD:bausmes(playerid,params[])
{
    new info[1400];
    strcat(info,"Keiksmai, – Mute 800s*\n");
    strcat(info,"Chato terðimas (spam‘as, flood'as) – Mute 800s*\n");
    strcat(info,"Pastovus /sms raðymas – Mute 800s*\n");
    strcat(info,"Raðymas á /admin ne pagal paskirtá – Mute 1200s\n");
    strcat(info,"Raðymas per /v ne pagal paskirtá – Mute 1200s\n");
    strcat(info,"Raðymas per /d ne pagal paskirtá - Mute 1200s\n");
    strcat(info,"Raðymas per /s ne pagal paskirtá - Mute 1200s\n");
    strcat(info,"Atrankos trukdymas – Jail 1800s\n");
    strcat(info,"Event‘o trukdymas – Jail 1800s\n");
    strcat(info,"Neaktyvus þaidime, kai tai trukdo kitiems – Kick\n");
    strcat(info,"Netinkamas þaidëjo slapyvardis, kai turi iki 2‘500 XP – Laikinas ban 24val. (baninti su prieþastimi Vardas_Pavarde arba V_P)\n");
    strcat(info,"Ðaudymas nuo motociklo – Ban 2 valandoms\n");
    strcat(info,"Atsijungimas (relog), kai tai trukdo þaidimui – Ban 12 valandoms\n");
    strcat(info,"Naudojimasis bug‘ais – Ban visam laikui\n");
    strcat(info,"Cheat‘ø naudojimas – Ban visam laikui\n");
    strcat(info,"Reklama – Ban visam laikui\n");
    strcat(info, "* Nutildymas ðiais atvëjais turi bûti atliktas per 2min. nuo nusiþengimo.\n");
    strcat(info,"Þaidëjø, pinigø, kreditø, valiutos pirkimas/pardavimas/keitimas – Ban visam laikui\n");
    strcat(info,"Botø ar kitokiø dalykø naudojimas siekiant apeiti AFK sistemà - Ban visam laikui\n");
    strcat(info,"Tyèinis ESC naudojimas, kai tai trukdo þaidimui (klanø, mafijø karai) - Ban 3 valandoms\n");
    strcat(info,"Uþ pakartotiná nusiþengimà, kurio bausmë yra ban valandoms, galima dëti neterminuotà banà");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bausmës", info, "Gerai", "");
    return 1;
}
CMD:komandos(playerid,params[])
{
    new info[2660];
    strcat(info,"{FFFFFF}» {21B6A8}/admin {FFFFFF}- Þinutë administratoriams, visi esami administratoriai.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/informacija {FFFFFF}- serverio pagalbos lentelë.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/mvaldymas {FFFFFF}- Nuosavos tr.priemonës valdymas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/gps {FFFFFF}- Surasit su GPS ko jums reikia.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/darbai {FFFFFF}- Visø esamø darbø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/mapp {FFFFFF}- Surasti þaidëjà per GPS.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/kreditai {FFFFFF}- Visos serverio paslaugos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/mgv {FFFFFF}- Maisto ir gërimø valdymas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/ui {FFFFFF}- Uogø inventorius.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/darbokomandos {FFFFFF}- Visos darbo komandos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/ispejimai {FFFFFF}- Áspëjmø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/kauliukas {FFFFFF}- Norint þaisti kauliukà su kitais.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/direktoriai {FFFFFF}- Esamø serverio direktoriø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/pavaduotojai {FFFFFF}- Esamø serverio pavaduotojø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/priziuretojai {FFFFFF}- Esamø serverio priþiûrëtojø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/kviesti {FFFFFF}- Iðkviesti norimà tarnyba.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/paliktidarba {FFFFFF}- Paliksite darbà.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/r {FFFFFF}- Darbo racija.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/dkomandos {FFFFFF}- Visos direktoriaus komandos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/pkomandos {FFFFFF}- Visos pavaduotojaus komandos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/pasiekimai {FFFFFF}- Visi þaidëjo pasiekimai.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/info {FFFFFF}- Informacija apie save.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/xp {FFFFFF}- Darbo patirtis.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/bendradarbiai {FFFFFF}- Jûsø darbo bendradarbiø sàraðas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/vartoti {FFFFFF}- Vartoti jau turimus narkotikus.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/vipinfo {FFFFFF}- Visa informacija apie VIP statusà.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/akomandos {FFFFFF}- Visos administratoriaus komandos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/veiksmai {FFFFFF}- Visos naudojamos animacijos.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/dzinute {FFFFFF}- Palikta direktoriaus þinutë visiems darbuotojams.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/autopilotas {FFFFFF}- Ájunksite autopilotà automobilyje.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/vip {FFFFFF}- Þinutë VIP nariams.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/radijas {FFFFFF}- Ájunksite radijà savo automobilyje.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/namas {FFFFFF}- Visø namø informacija.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/telefonas {FFFFFF}- Telefonø informacija.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/slepti {FFFFFF}- Leidþia iðjungti kai kuriuos textdrawus.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/kartingas {FFFFFF}- Kartingø bilieto galiojimo laikas.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/kartingai {FFFFFF}- Siûlyti lenktiniauti kartingais.");
    strcat(info,"\n{FFFFFF}» {21B6A8}/saugumas {FFFFFF}- Paskyros saugumo nustatymai.");

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjo naudojamos komandos", info, "Gerai","");
    return 1;
}
CMD:informacija(playerid,params[])
{
	new DialogString[2256];
	//strcat(DialogString, "{DB881A}Sveiki atvykæ á iRoad.LT SA:MP serverá\n{DB881A}Serveryje bandoma atkartoti tikrà gyvenimà, todël bûtina laikytis KET bei kitø taisykliø apie kurias suþinosite vëliau");
	//strcat(DialogString, "\n{DB881A}Serveryje jûs atstovausite vienà gyventojà, kuris atvyko traukiniu á San Fierro miestà.\n{DB881A}Ðiek tiek informacijos apie serverá galite gauti uþlipus ant informacijos „Pickup“,kuriuos rasite traukiniø stotyje");
	strcat(DialogString, "{FFFFFF}Sveiki atvykæ á samp serverá {21ff00}iRoad.LT! \n\n{43c92e}» {FFFFFF}Aèiû, jog pasirinkote mus. Èia pamatysite svarbiausià informacijà, kuria padës jums þaidime.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Pirma, jums reikia apsiprasti serveryje. Administracija siûlo pradëti darba {ad2dfc}Oro ir Vandens kurjeriu{FFFFFF}, nes ten galima puikiai pasipelnyti naujokams.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Visø darbø sàraðà galite rasti paraðæ komandà - {62A5C4}/darbai.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Serveryje lengviau þaisti bûdamas privilegijuotu þaidëju, visas paslaugas galite matyti paraðæ - {62A5C4}/kreditai.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Jeigu þaidëte kitame SA:MP serveryje - siûlome emigruoti. Tokiu bûdu gausite ðiektiek patirties, pinigø ir trejø dienø {ad2dfc}VIP narystæ.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Serveryje vyksta daþni administracijos rengiami {ad2dfc}Eventai{FFFFFF}, per kuriuos galite laimëti nuo pinigø iki admin narystes. Tad, siekite projekto naujienas {ad2dfc}forume.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Prireikus pagalbos, jums visada padës mûsø maloni administracija. Pagalbos galite praðyti paraðæ {62A5C4}/admin [Tekstas]{FFFFFF} bei VIP nariams {62A5C4}/vip [Tekstas].\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Be to, ðiø þaidëjø vardai yra paþymeti serveryje ávairiomis {ad2dfc}s{FFFF00}p{43c92e}a{FF0000}l{FFFF00}v{33ccff}o{FFFF00}m{ad2dfc}i{FFFF00}s. {FFFFFF}Administratoriai - {43c92e}þalia{FFFFFF}, VIP nariai - {FFFF00}geltona{FFFFFF}, Pagr. Administratoriai - {FF0000}raudona.\n");
	strcat(DialogString, "{43c92e}» {FFFFFF}Taip pat iðkylus klausimams, galite raðyti á bendrà projekto skype - {B2FF00}iRoad.LTpagalba.\n");
	strcat(DialogString, " \n");
	strcat(DialogString, "{FF0000}\tSVARBU\n");
	strcat(DialogString, "{FFFFFF}\t\t• Projekto Skype - {26e4b2}iRoad.LTpagalba.\n");
	strcat(DialogString, "{FFFFFF}\t\t• Forumo adresas - {26e4b2}http://iroad.lt.\n");
	strcat(DialogString, "{FFFFFF}\t\t• TeamSpeak adresas - {26e4b2}ts.iroad.lt.\n");
	strcat(DialogString, "{FFFFFF}\t\t• Serverio pagrindiniai administratoriai {FF0000}Robertss_Rossen {FFFFFF}ir {FF0000}Darius_Vision.\n");
	strcat(DialogString, " \n");
	strcat(DialogString, "{FFFFFF}Serveryje bûtina laikytis taisykliø (/taisykles), nesilaikant jø, bus taikomos bausmes (/bausmes).\n");
	strcat(DialogString, "{FFFFFF}Ðià lentelë galite visada perþiûrëti paraðæ - {62A5C4}/informacija.\n");
	strcat(DialogString, "{FFFFFF}Serverio komandas galite rasti paraðæ - {62A5C4}/komandos.\n");
	strcat(DialogString, "{FFFFFF}Daugiau informacijos galite gauti uþlipæs ant {62A5C4}„Pickup“{FFFFFF}, kuriuos rasite traukiniø stotyje.\n");
	strcat(DialogString, " \n");
	strcat(DialogString, "{FFFFFF}\t\t{B2FF00}• • • {FFFFFF}Linkime gerai praleisti laikà su draugais! {B2FF00}• • •");

	ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Svarbi informacija", DialogString, "Uþdaryti","");
	return 1;
}
CMD:pakrautitr(playerid,params[])
{
	new strf[256];
    new str[125];
  	new VehicleID = GetPlayerVehicleID(playerid);
    if(PlayerDB[playerid][Job] != 21) return ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ErrorMsg(playerid,"• Privalote bûti vairuotojo vietoje.");
    if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 443) return ErrorMsg(playerid,"• Privalote bûti trale „Packer“.");
    if(VehicleDB[VehicleID][PakrautaMasina] > -1) return ErrorMsg(playerid,"• Á tralà telpa tik viena tr. priemonë.");

	if(IsPlayerInRangeOfPoint(playerid, 4, 1664.4243,729.1079,10.8203))
	{

		if(PlayerDB[playerid][Rangas] >= FURISTAISettings[Tr_Krovimas])
		{
			format(str, sizeof(str), "{62A5C4}• {FFFFFF}Pasirinkite tr. priemoniø rûðá\n");
			strcat(strf, str);
			format(str, sizeof(str), " \n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Pigios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Vidutinës klasës maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Prabangios maðinos\n"); strcat(strf, str);
			format(str, sizeof(str), "\t{62A5C4}• {FFFFFF}Motociklai\n"); strcat(strf, str);

			ShowPlayerDialog(playerid, 298, DIALOG_STYLE_LIST, "{AFAFAF}Tr. priemoniø pasikrovimas", strf, "Pasirinkti", "Uþdaryti");
		}
		else
		{
	    	ErrorMsg(playerid, "• Jûsø rangas neleidþia krautis tr. priemones.");
		}
		ErrorMsg(playerid, "• Turite bûti transporto priemoniø sandëlyje.");
	}
    return 1;
}
CMD:iskrautitr(playerid,params[])
{
   	new query[400];
   	new Years,Months,Days,Hours,Minutes;
	getdate(Years, Months, Days);
	gettime(Hours, Minutes);
  	new VehicleID = GetPlayerVehicleID(playerid);
    if(PlayerDB[playerid][Job] != 21) return ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return ErrorMsg(playerid,"• Privalote bûti vairuotojo vietoje.");
    if(VehicleDB[VehicleID][DARBOMASINA] != true && GetVehicleModel(VehicleID) != 443) return ErrorMsg(playerid,"• Privalote bûti trale „Packer“.");
    if(VehicleDB[VehicleID][PakrautaMasina] == -1) return ErrorMsg(playerid, "• Jûs nieko nepasikrovæ.");
    if(PlayerDB[playerid][Rangas] < FURISTAISettings[Tr_Krovimas]) return ErrorMsg(playerid, "• Jûsø rangas neleidþia iðkrauti tr. priemones.");

	if(VehicleDB[VehicleID][PakrautaMasina] == 479)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2500;
      	PlayerDB[playerid][UzdarbisSiandien]+=2500;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'500 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Regina“ á pigiø maðinø salonà.");
      	SalesVehiclesInStock[479-400]+=1;

        mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Regina“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 489)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2700;
      	PlayerDB[playerid][UzdarbisSiandien]+=2700;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'700 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Rancher“ á pigiø maðinø salonà.");
      	SalesVehiclesInStock[489-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Rancher“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 419)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2800;
      	PlayerDB[playerid][UzdarbisSiandien]+=2800;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'800 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Esperanto“ á pigiø maðinø salonà.");
      	SalesVehiclesInStock[419-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Esperanto“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 491)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2900;
      	PlayerDB[playerid][UzdarbisSiandien]+=2900;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'900 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Virgo“ á pigiø maðinø salonà.");
      	SalesVehiclesInStock[491-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Virgo“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 534)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2900;
      	PlayerDB[playerid][UzdarbisSiandien]+=2900;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'900 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Remington“ á pigiø maðinø salonà.");
        SalesVehiclesInStock[534-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Remington“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 533)
	{
		SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=2900;
      	PlayerDB[playerid][UzdarbisSiandien]+=2900;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 2'900 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Feltzer“ á pigiø maðinø salonà.");
        SalesVehiclesInStock[533-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Feltzer“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 567)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3000;
      	PlayerDB[playerid][UzdarbisSiandien]+=3000;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'000 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Savanna“ á pigiø maðinø salonà.");
        SalesVehiclesInStock[567-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Savanna“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 558)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3100;
      	PlayerDB[playerid][UzdarbisSiandien]+=3100;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'100 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Uranus“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[558-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Uranus“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 587)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3200;
      	PlayerDB[playerid][UzdarbisSiandien]+=3200;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'200 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Euros“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[587-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Euros“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 602)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3300;
      	PlayerDB[playerid][UzdarbisSiandien]+=3300;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'300 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Alpha“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[602-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Alpha“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 477)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3400;
      	PlayerDB[playerid][UzdarbisSiandien]+=3400;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'400 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „ZR-350“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[477-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „ZR-350“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 562)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3500;
      	PlayerDB[playerid][UzdarbisSiandien]+=3500;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'500 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Elegy“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[562-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Elegy“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 559)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3500;
      	PlayerDB[playerid][UzdarbisSiandien]+=3500;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'500 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Jester“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[559-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Jester“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 560)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3600;
      	PlayerDB[playerid][UzdarbisSiandien]+=3600;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'600 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Sultan“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[560-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Sultan“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 506)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3700;
      	PlayerDB[playerid][UzdarbisSiandien]+=3700;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'700 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Super-GT“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[506-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Super-GT“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 480)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3800;
      	PlayerDB[playerid][UzdarbisSiandien]+=3800;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'800 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Comet“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[480-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Comet“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 589)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=3900;
      	PlayerDB[playerid][UzdarbisSiandien]+=3900;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 3'900 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Club“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[589-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Club“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
    if(VehicleDB[VehicleID][PakrautaMasina] == 405)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4000;
      	PlayerDB[playerid][UzdarbisSiandien]+=4000;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'000 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Sentinel“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[405-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Sentinel“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 402)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4100;
      	PlayerDB[playerid][UzdarbisSiandien]+=4100;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'100 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Buffalo“ á vidutinës klasës maðinø salonà.");
        SalesVehiclesInStock[402-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Buffalo“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 579)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4200;
      	PlayerDB[playerid][UzdarbisSiandien]+=4200;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'200 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Huntley“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[579-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Huntley“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 429)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4400;
      	PlayerDB[playerid][UzdarbisSiandien]+=4400;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'400 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Banshee“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[429-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Banshee“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 421)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4600;
      	PlayerDB[playerid][UzdarbisSiandien]+=4600;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'600 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Washington“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[421-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Washington“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
 	if(VehicleDB[VehicleID][PakrautaMasina] == 415)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=4800;
      	PlayerDB[playerid][UzdarbisSiandien]+=4800;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 4'800 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Cheetah“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[415-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Cheetah“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 603)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=5000;
      	PlayerDB[playerid][UzdarbisSiandien]+=5000;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 5'000 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Phoenix“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[603-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Phoenix“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 541)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=5200;
      	PlayerDB[playerid][UzdarbisSiandien]+=5200;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 5'200 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Bullet“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[541-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Bullet“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 451)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=5400;
      	PlayerDB[playerid][UzdarbisSiandien]+=5400;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 5'400 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Turismo“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[451-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Turismo“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	if(VehicleDB[VehicleID][PakrautaMasina] == 411)
	{
     	SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
       	PlayerDB[playerid][Uzdarbis]+=6000;
      	PlayerDB[playerid][UzdarbisSiandien]+=6000;
      	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 6'000 € á uþdarbá.");
      	cmd_r(playerid,"Pristaèiau tr. priemonæ „Infernus“ á prabangiø maðinø salonà.");
        SalesVehiclesInStock[411-400]+=1;

      	mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë tr. priemonæ „Infernus“');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
		mysql_function_query(connectionHandle,query,false,"SendQuery","");
	}
	VehicleDB[VehicleID][PakrautaMasina] = -1;
	DarboInformacija[21][DarboFondas]+=3000 + random(998);
	PlayerDB[playerid][NuveztiKroviniai]+=1;
	DestroyObject(VehicleDB[VehicleID][VehicleDezesObjectID]);
 	VehicleDB[VehicleID][VehicleDezesObjectID] = -1;
	for(new i=400; i<612; i++)
	{
		new LabelText[700];
  		format(LabelText, 700, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
  		vNames[i - 400],AddPoints(aKaina[i - 400]),AddPoints(floatround(aKaina[i - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[i - 400],AddPoints(VehicleBagazines[i - 400]),DegaluSanaudos[i - 400],MaxGreitis[i - 400]);
  		UpdateDynamic3DTextLabelText(SalesVehiclesLabels[i-400], 0xe76518FF, LabelText);
	}
	SaveVehiclesInStocks();
	RemovePlayerMapIcon(playerid, 97);//Targeto ICON
	DisablePlayerCheckpoint(playerid);
    return 1;
}
CMD:krautivaistus(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4, 1576.7886,1762.9585,10.7022))
        {
            if(PlayerDB[playerid][Rangas] >= FURISTAISettings[Vaistu_Krovimas])
			{
	            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	            {
	                new VehicleID = GetPlayerVehicleID(playerid);
	                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
	                {
	                    new TrailerID = GetVehicleTrailer(VehicleID);
	                    if(TrailerID == 0)
	                    {
	                        ErrorMsg(playerid,"• Privalote turëti prikabintà priekabà.");
	                    }
	                    else
	                    {
	                        if(GetVehicleModel(TrailerID) == 435)
	                        {
	                            if(FURISTAISettings[F435Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
	                            {
	                            	if(Gamyklos[trvaistai] < 15) return ErrorMsg(playerid,"• Gamykloje nepakankamai vaistinëliø.");
	                                if(VehicleDB[TrailerID][PakrautasSmelis] == true)
	                                {
	                                    ErrorMsg(playerid,"• Priekaba jau pilna vaistinëliø.");
	                                }
	                                else
	                                {
	                                    PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
	                                   	PlayerDB[playerid][Kraunasi] = true;
	                                   	SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis vaistinëles...");
	                                }
	                            }
	                            else
	                            {
	                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti vaistinëliø perveþimais.");
	                            }
	                        }
	                        else
	                        {
	                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti vaistinëlës.");
	                        }
	                    }
	                }
	                else
	                {
	                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
	                }
	            }
	            else
	            {
	                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
	            }
			}
			else
			{
				ErrorMsg(playerid,"• Jûsø rangas neleidþia krautis vaistus.");
			}
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti vaistinëliø pasikrovimo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
CMD:iskrautivaistus(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4, -2649.2520,698.4496,27.9229))
        {
        	if(PlayerDB[playerid][Rangas] >= FURISTAISettings[Vaistu_Krovimas])
			{
	            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	            {
	                new VehicleID = GetPlayerVehicleID(playerid);
	                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
	                {
	                    new TrailerID = GetVehicleTrailer(VehicleID);
	                    if(TrailerID == 0)
	                    {
	                        ErrorMsg(playerid,"• Privalote turëti prikabintà priekabà.");
	                    }
	                    else
	                    {
	                        if(GetVehicleModel(TrailerID) == 435)
	                        {
	                            if(FURISTAISettings[F435Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
	                            {
	                                if(VehicleDB[TrailerID][PakrautasSmelis] == true)
	                                {
	                                    VehicleDB[TrailerID][PakrautasSmelis] = false;
	                                    SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
	                                    DarboInformacija[21][DarboFondas]+=3000 + random(998);
	                                    PlayerDB[playerid][Uzdarbis]+=700;
	                                    PlayerDB[playerid][UzdarbisSiandien]+=700;
	                                    SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote 700 € á uþdarbá.");
	                                    RemovePlayerMapIcon(playerid, 97);//Targeto ICON
	                                    DisablePlayerCheckpoint(playerid);
	                                    cmd_r(playerid,"Pristaèiau vaistus á medicinos centrà.");
	                                    PlayerDB[playerid][NuveztiKroviniai]+=1;
	                                    HPSettings[vaistai]+=50;
	                                    SaveHospitalSettings();
	                                    new query[400];
	                                    new Years,Months,Days,Hours,Minutes;
	          					 		getdate(Years, Months, Days);
				            			gettime(Hours, Minutes);
	                                    mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë vaistinëles.');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
	            						mysql_function_query(connectionHandle,query,false,"SendQuery","");

	                                }
	                                else
	                                {
	                                    ErrorMsg(playerid,"• Priekaboje vaistinëliø nëra.");
	                                }
	                            }
	                            else
	                            {
	                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint veþti vaistus.");
	                            }
	                        }
	                        else
	                        {
	                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti vaistus.");
	                        }
	                    }
	                }
	                else
	                {
	                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
	                }
	            }
	            else
	            {
	                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
	            }
	        }
	        else
			{
				ErrorMsg(playerid,"• Jûsø rangas neleidþia iðkrauti vaistus.");
			}
		}
        else
        {
            ErrorMsg(playerid,"• Turite bûti vaistø iðkrovimo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
CMD:krautidetales(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
    	if(PlayerDB[playerid][Rangas] >= FURISTAISettings[Detaliu_Krovimas]) //zrabic v settings i paminiac na detaliukrovimas
		{
  			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
     		{
       			new VehicleID = GetPlayerVehicleID(playerid);
          		if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
            	{
             		new TrailerID = GetVehicleTrailer(VehicleID);
               		if(TrailerID == 0) return ErrorMsg(playerid,"• Privalote turëti prikabintà priekabà.");
                 	{
               			if(GetVehicleModel(TrailerID) == 435)
                     	{
                 			if(FURISTAISettings[F435Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
                        	{
                				if(VehicleDB[TrailerID][PakrautosDetales] == true)
                    			{
                     				//if(IsPlayerInRangeOfPoint(playerid, 4, -1692.0790,-87.7760,3.5686))
                     				if(PlayerDB[playerid][Job] == 21)
                       				{
                           				VehicleDB[TrailerID][PakrautosDetales] = false;
                               			SendClientMessage(playerid, ZALIA2, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
                                  		DarboInformacija[21][DarboFondas]+=5500 + random(998);
                                  		PlayerDB[playerid][Uzdarbis]+=700; //poresac
                                    	PlayerDB[playerid][UzdarbisSiandien]+=700; //povtoris
                                    	SendClientMessage(playerid, ZALIA2, "• Uþ krovinio pristatymà gavote x eurø á uþdarbá.");
	                                    RemovePlayerMapIcon(playerid, 97);//Targeto ICON
	                                    DisablePlayerCheckpoint(playerid);
	                                    cmd_r(playerid,"• Pristaèiau detales skirtas mechanikams.");
	                                    PlayerDB[playerid][NuveztiKroviniai]+=1;
	                                    //HPSettings[vaistai]+=50;
	                                    //SaveHospitalSettings();
	                                    new query[400];
	                                    new Years,Months,Days,Hours,Minutes;
          					 			getdate(Years, Months, Days);
			            				gettime(Hours, Minutes);
                   						mysql_format(connectionHandle, query, 400, "INSERT INTO `kroviniustatistika` (`ID`, `KasPasikrove`, `KaPasikrove`) VALUES (NULL, '%e', '%d-%02d-%02d %02d:%02d Iðkrovë detales.');", Vardas(playerid),Years,Months,Days,Hours,Minutes);
            							mysql_function_query(connectionHandle,query,false,"SendQuery","");
									}
									else
									{
					    				ErrorMsg(playerid,"• Turite bûti iðkrovimo vietoje.");
									}
         						}
               					else
                    			{
                    				if(Gamyklos[detales] > 15) //pakeisti
                       				{
	                                	//if(IsPlayerInRangeOfPoint(playerid, 4, -1755.1108,-54.6416,3.5489))
	                                	if(PlayerDB[playerid][Job] == 21)
 								 		{
		                                    PlayerDB[playerid][KrovimoLaikas] = gettime() + (50 + random(50));
		                                   	PlayerDB[playerid][KraunasiDetales] = true;
		                                   	SendClientMessage(playerid, 0x90C695FF, "• Pradëjote krautis detales...");
           								}
           								else
           								{
											ErrorMsg(playerid,"• Turite bûti detaliø pasikrovimo zonoje.");
           								}
   									}
	                                else
									{
										ErrorMsg(playerid,"• Gamykloje nepakankamai detaliø.");
									}
								}
         				   	}
                 			else
             				{
             					ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti detaliø perveþimais.");
            			    }
  					    }
           				else
				   		{
         					ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti detales.");
              			}
      	          	}
    		 	}
     		 	else
    		 	{
      	 			ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
   		 	 	}
      	  	}
       	  	else
       	  	{
 		 		ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
      		}
        }
        else
	 	{
   			ErrorMsg(playerid,"• Jûsø rangas neleidþia krautis detales.");
      	}
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda skirta tik fûristams.");
    }
    return 1;
}
CMD:krautielektronika(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInDynamicArea(playerid, ElektronikosPasikrovimoArea, 1))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new VehicleID = GetPlayerVehicleID(playerid);
                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
                {
                    new TrailerID = GetVehicleTrailer(VehicleID);
                    if(TrailerID == 0)
                    {
                        ErrorMsg(playerid,"• Privalote turëti prikabintà priekabà.");
                    }
                    else
                    {
                        if(GetVehicleModel(TrailerID) == 591)
                        {
                            if(FURISTAISettings[F591Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
                            {
                                if(VehicleDB[TrailerID][PakrautaElektronika] == true)
                                {
                                    ErrorMsg(playerid,"• Priekaba jau pilna elektronikos prekiø.");
                                }
                                else
                                {

                                    cmd_r(playerid,"Pasikroviau elektronikos prekiø,kurias turiu pristatyti á San-Fierro mieste esanèià elektronikos parduotuvæ.");
                                    VehicleDB[TrailerID][PakrautaElektronika] = true;
                                    SetPlayerCheckpoint(playerid, -2185.9336,359.0144,35.2287, 3);
                                    SetPlayerMapIcon(playerid, 97, -2185.9336,359.0144,35.2287, 41, -1, MAPICON_GLOBAL);
                                    SendClientMessage(playerid, ZALIA, "• Elektronika sëkmingai pakrauta.");
                                    SendClientMessage(playerid, GELTONA, "• Jûsø uþduotis yra nuveþti ðià elektronikà á SF mieste esanèià elektronikos parduotuvæ, ji yra paþimëta raudonu taðku þemëlapyje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti elektronikos perveþimais.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti elektronikai.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti elektronikos pasikrovimo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
CMD:iskrautielektronika(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInDynamicArea(playerid, ElektronikosIskrovimoArea, 1))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new VehicleID = GetPlayerVehicleID(playerid);
                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
                {
                    new TrailerID = GetVehicleTrailer(VehicleID);
                    if(TrailerID == 0)
                    {
                        ErrorMsg(playerid,"• Privalote turëti prikabintà priekabà.");
                    }
                    else
                    {
                        if(GetVehicleModel(TrailerID) == 591)
                        {
                            if(FURISTAISettings[F591Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
                            {
                                if(VehicleDB[TrailerID][PakrautaElektronika] == true)
                                {
                                    VehicleDB[TrailerID][PakrautaElektronika] = false;
                                    SendClientMessage(playerid, ZALIA, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
                                    DarboInformacija[21][DarboFondas]+=3100 + random(998);
                                    PlayerDB[playerid][Uzdarbis]+=720;
                                    PlayerDB[playerid][UzdarbisSiandien]+=720;
                                    SendClientMessage(playerid, ZALIA, "• Uþ krovinio pristatymà gavote 720 € á uþdarbá.");
                                    RemovePlayerMapIcon(playerid, 97);//Targeto ICON
                                    DisablePlayerCheckpoint(playerid);
                                    cmd_r(playerid,"Pristaèiau elektronikos kroviná.");
                                    PlayerDB[playerid][NuveztiKroviniai]+=1;

                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Priekaboje elektronikos nëra.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti elektronikos perveþimais.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti elektronikai.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti elektronikos iðkrovimo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
//


CMD:pildytidegalus(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInDynamicArea(playerid, DegaluPripildymoArea, 1))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new VehicleID = GetPlayerVehicleID(playerid);
                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
                {
                    new TrailerID = GetVehicleTrailer(VehicleID);
                    if(TrailerID == 0)
                    {
                        ErrorMsg(playerid,"• Privalote turëti prikabintà cisternà.");
                    }
                    else
                    {
                        if(GetVehicleModel(TrailerID) == 584)
                        {
                            if(FURISTAISettings[F584Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
                            {
                                if(VehicleDB[TrailerID][PripildytaDegalu] == true)
                                {
                                    ErrorMsg(playerid,"• Cisterna jau pilna.");
                                }
                                else
                                {

                                    cmd_r(playerid,"Pripildþiau degalø cisternà,kurià turiu pristatyti á „Orlen“ degalinæ San-Fierro mieste.");
                                    VehicleDB[TrailerID][PripildytaDegalu] = true;
                                    SetPlayerCheckpoint(playerid, -1711.0665,389.3123,7.1797, 3);
                                    SetPlayerMapIcon(playerid, 97, -1711.0665,389.3123,7.1797, 41, -1, MAPICON_GLOBAL);
                                    SendClientMessage(playerid, ZALIA, "• Cisterna paruoðta transportavimui.");
                                    SendClientMessage(playerid, GELTONA, "• Jûsø uþduotis yra nuveþti ðià cisternà á SF mieste esanèià „Orlen“ degalinæ, ji yra paþimëta raudonu taðku þemëlapyje.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti degalø transportavimu.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti degalams.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti degalø pildymo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
CMD:pristatytidegalus(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 21)
    {
        if(IsPlayerInDynamicArea(playerid, DegaluPildymoArea, 1))
        {
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new VehicleID = GetPlayerVehicleID(playerid);
                if(VehicleDB[VehicleID][DARBOMASINA] == true && GetVehicleModel(VehicleID) == 515)
                {
                    new TrailerID = GetVehicleTrailer(VehicleID);
                    if(TrailerID == 0)
                    {
                        ErrorMsg(playerid,"• Privalote turëti prikabintà cisternà.");
                    }
                    else
                    {
                        if(GetVehicleModel(TrailerID) == 584)
                        {
                            if(FURISTAISettings[F584Vehicle_RANGAS] <= PlayerDB[playerid][Rangas])
                            {
                                if(VehicleDB[TrailerID][PripildytaDegalu] == true)
                                {
                                    VehicleDB[TrailerID][PripildytaDegalu] = false;
                                    SendClientMessage(playerid, ZALIA, "• Krovinys sëkmingai pristatytas ir iðkrautas.");
                                    DarboInformacija[21][DarboFondas]+=3130 + random(998);
                                    PlayerDB[playerid][Uzdarbis]+=730;
                                    PlayerDB[playerid][UzdarbisSiandien]+=730;
                                    SendClientMessage(playerid, ZALIA, "• Uþ krovinio pristatymà gavote 730 € á uþdarbá.");
                                    RemovePlayerMapIcon(playerid, 97);//Targeto ICON
                                    DisablePlayerCheckpoint(playerid);
                                    cmd_r(playerid,"Pristaèiau degalus á „Orlen“ degalinæ esanèià San-Fierro mieste.");
                                    PlayerDB[playerid][NuveztiKroviniai]+=1;

                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Cisternoje degalø nëra.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Jûsø rangas yra per maþas norint uþsiimti degalø transportavimu.");
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Ði priekaba yra netinkama transportuoti degalams.");
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Privalote bûti sunkveþimyje.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti degalø pildymo zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik fûristams.");
    }
    return 1;
}
CMD:ppica(playerid,params[])
{
    new Float:X,Float:Y,Float:Z;
    for(new i = 0;i <= GetVehiclePoolSize();i++)
    {
        if(VehicleDB[i][DARBOMASINA] == true && VehicleDB[i][DARBOID] == 19)
        {
            GetVehiclePos(i, X, Y, Z);
            if(IsPlayerInRangeOfPoint(playerid, 3, X, Y, Z))
            {
                new bool:PlayerHasBeenFound = false;
                new PlayerIDNumber = 0;
                for(new player = 0;player <= GetPlayerPoolSize(); player++)
                {
                    if(IsPlayerInVehicle(player, i))
                    {
                        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                        {
                            PlayerHasBeenFound = true;
                            PlayerIDNumber = player;
                            break;
                        }
                    }
                }
                if(PlayerHasBeenFound == true)
                {
                    if(PlayerDB[playerid][MoneyInPocket] >= 10)
                    {
                        SendClientMessage(playerid, GELTONA, "Nusipirkai Mini-Pica uþ 10€");
                        PlayerDB[playerid][MoneyInPocket]-=10;
                        PlayerDB[PlayerIDNumber][Uzdarbis]+=3;
                        PlayerDB[PlayerIDNumber][UzdarbisSiandien]+=3;
                        new string[144];
                        format(string, 144, "• %s ið jûsø nusipirko mini picà uþ 10€, jûs gavote 3€ uþ ðá pardavimà á algà.", Vardas(playerid));
                        SendClientMessage(PlayerIDNumber, ZALIA, string);
                        ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1,0,1,1,0,0);

                        return 1;
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Mini picos po 10 €.");
                        return 1;
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Prie jûsø nëra picø iðveþiotojo.");
                    return 1;
                }
            }
        }
    }

    ErrorMsg(playerid,"• Prie jûsø turi bûti picø iðveþiotojas.");

    return 1;
}
forward NuomosMokejimas(vehicleid,playerid);
public NuomosMokejimas(vehicleid,playerid)
{
    if(IsPlayerInVehicle(playerid, vehicleid))
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(PlayerDB[playerid][MoneyInPocket] >= VehicleDB[vehicleid][VehicleRentingCost])
            {
                PlayerDB[playerid][MoneyInPocket]-=VehicleDB[vehicleid][VehicleRentingCost];
                SetTimerEx("NuomosMokejimas", 59000, false, "id", vehicleid,playerid);
            }
            else
            {
                ErrorMsg(playerid,"• Maðinos nuomai jums neuþtenka pinigø.");
                RemovePlayerFromVehicle(playerid);
            }
        }
    }
    return 1;
}
CMD:uzimtizona(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] == 7 || PlayerDB[playerid][Pavaduotojas] == 7)
    {
        // LUCHESSE DIREKTORIUS GROBTU GENOVESE
        if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1)  && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            if(GenoveseGangZoneU == false)
            {
                new Darbuotojai = 0;
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(PlayerDB[i][Job] == 8 && IsPlayerInDynamicArea(i, GenoveseGangZoneArea, 1) && PlayerDB[i][AfkState] == false  && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
                    {
                        ErrorMsg(playerid,"• Ðioje zonoje vis dar yra ginti pasiruoðæs þaidëjas.");
                        return 1;
                    }
                    if(PlayerDB[i][Job] == 8 && PlayerDB[i][AfkState] == false)
                    {
                        Darbuotojai++;
                    }
                }
                if(Darbuotojai < 3)
                {
                    ErrorMsg(playerid,"• Prieðø mafija turi turëti maþiausiai 3 aktyvius mafijos narius.");
                    return 1;
                }
                GenoveseGangZoneU = true;
                GangZoneFlashForAll(GenoveseGangZone, 0xff0000AA);
                cmd_r(playerid,"• Genovezë uþimta!!!");
                SendClientMessage(playerid, ZALIA, "• Sëkmingai uþëmete zonà.");
                for(new i2 = 0;i2 <=GetPlayerPoolSize();i2++)
                {
                    if(PlayerDB[i2][Job] == 8)
                    {
                        ErrorMsg(i2,"• Jûsø mafijos zonà buvo katik uþimta Lucchese mafijos!");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði zona jau yra uþimta.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti Genovese Mafijos zonoje.");
        }
    }
    else if(PlayerDB[playerid][Direktorius] == 8 || PlayerDB[playerid][Pavaduotojas] == 8)
    {
        // GENOVESE DIREKTORIUS GROBTU Lucchese
        if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            if(LuccheseGangZoneU == false)
            {
                new Darbuotojai = 0;
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(PlayerDB[i][Job] == 7 && IsPlayerInDynamicArea(i, LuccheseGangZoneArea, 1) && PlayerDB[i][AfkState] == false && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
                    {
                        ErrorMsg(playerid,"• Ðioje zonoje vis dar yra ginti pasiruoðæs þaidëjas.");
                        return 1;
                    }

                    if(PlayerDB[i][Job] == 7 && PlayerDB[i][AfkState] == false)
                    {
                        Darbuotojai++;
                    }
                }
                if(Darbuotojai < 3)
                {
                    ErrorMsg(playerid,"• Prieðø mafija turi turëti maþiausiai 3 aktyvius mafijos narius.");
                    return 1;
                }
                LuccheseGangZoneU = true;
                GangZoneFlashForAll(LuccheseGangZone, 0xff0000AA);
                cmd_r(playerid,"• Lucchese uþimta!!!");
                SendClientMessage(playerid, ZALIA, "• Sëkmingai uþëmete zonà.");
                for(new i2 = 0;i2 <=GetPlayerPoolSize();i2++)
                {
                    if(PlayerDB[i2][Job] == 7)
                    {
                        ErrorMsg(i2,"• Jûsø mafijos zonà buvo katik uþimta Genovese mafijos!");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði zona jau yra uþimta.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti Lucchese Mafijos zonoje.");
        }

    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijø vadeivoms ir jø padejëjams.");
    }
    return 1;
}
CMD:apleistizona(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] == 7 || PlayerDB[playerid][Pavaduotojas] == 7)
    {
        if(IsPlayerInDynamicArea(playerid, GenoveseGangZoneArea, 1)   && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            if(GenoveseGangZoneU == true)
            {
                SendClientMessage(playerid, ZALIA, "• Zonà sëkmingai apleidote.");
                GenoveseGangZoneU = false;
                GangZoneStopFlashForAll(GenoveseGangZone);
                cmd_r(playerid,"• Genovezës zonà apleidþiama !!!");
                for(new i2 = 0;i2 <=GetPlayerPoolSize();i2++)
                {
                    if(PlayerDB[i2][Job] == 8)
                    {
                        SendClientMessage(i2,ZALIA,"• Jûsø mafijos zonà buvo apleista lucchese mafijos.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði zona nëra uþimta.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti Genovese Mafijos zonoje.");
        }
    }
    else if(PlayerDB[playerid][Direktorius] == 8 || PlayerDB[playerid][Pavaduotojas] == 8)
    {
        if(IsPlayerInDynamicArea(playerid, LuccheseGangZoneArea, 1)   && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            if(LuccheseGangZoneU == true)
            {
                SendClientMessage(playerid, ZALIA, "• Zonà sëkmingai apleidote.");
                LuccheseGangZoneU = false;
                GangZoneStopFlashForAll(LuccheseGangZone);
                cmd_r(playerid,"• Lucchese zonà apleidþiama !!!");
                for(new i2 = 0;i2 <=GetPlayerPoolSize();i2++)
                {
                    if(PlayerDB[i2][Job] == 7)
                    {
                        SendClientMessage(i2,ZALIA,"• Jûsø mafijos zonà buvo apleista genovese mafijos.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Ði nëra uþimta.");
            }
        }
        else
        {
            ErrorMsg(playerid,"• Turite bûti Lucchese Mafijos zonoje.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijø vadeivoms ir jø padejëjams.");
    }
    return 1;
}
stock SetPlayerHealthEx(playerid,Float:Health)
{
    PlayerDB[playerid][PlayerHealthACStop] = true;
    PlayerDB[playerid][PlayerHealthAC] = Health;
    SetPlayerHealth(playerid, Health);
    PlayerDB[playerid][PlayerHealthACStop] = false;
}
stock SetPlayerArmourEx(playerid,Float:Armour)
{
    PlayerDB[playerid][PlayerArmourACStop] = true;
    PlayerDB[playerid][PlayerArmourAC] = Armour;
    SetPlayerArmour(playerid, Armour);
    PlayerDB[playerid][PlayerArmourACStop] = false;
}
forward OnPlayerHealthChange(playerid,Float:CurrentHealth);
public OnPlayerHealthChange(playerid,Float:CurrentHealth)
{
    if(PlayerDB[playerid][PlayerHealthAC] < CurrentHealth)
    {
        SetPlayerHealthEx(playerid,PlayerDB[playerid][PlayerHealthAC]);
    }
    else
    {
        PlayerDB[playerid][PlayerHealthAC] = CurrentHealth;
    }
    return 1;
}

forward OnPlayerArmourChange(playerid,Float:CurrentArmour);
public OnPlayerArmourChange(playerid,Float:CurrentArmour)
{
    if(PlayerDB[playerid][PlayerArmourAC] < CurrentArmour)
    {
        SetPlayerArmourEx(playerid,PlayerDB[playerid][PlayerArmourAC]);
    }
    else
    {
        PlayerDB[playerid][PlayerArmourAC] = CurrentArmour;
    }
    return 1;
}
//if(PlayerDB[playerid][Job] == 21)
    //{
        //ShowPlayerDialog(playerid, 163, DIALOG_STYLE_LIST, "{AFAFAF}Navigacija", "{AD5BFF}» {FFFFFF}Svarbios vietos.\n{AD5BFF}» {FFFFFF}Darbai su pakvietimu.\n{AD5BFF}» {FFFFFF}Darbai be pakvietimo.\n{AD5BFF}» {FFFFFF}Ávarios kitos vietos.\n{AD5BFF}» {FFFFFF}Fûristø pasikrovimai.\n       \n{AD5BFF}» {FFFFFF}Pirmo verslo vieta\n{AD5BFF}» {FFFFFF}Antro verslo vieta\n{AD5BFF}» {FFFFFF}Nutraukti GPS rodomà vietà.", "Rinktis", "Atðaukti");
    //}
    //else
    //{
CMD:gps(playerid,params[])
{
	ShowPlayerDialog(playerid, 163, DIALOG_STYLE_LIST, "{AFAFAF}Navigacija", "{AD5BFF}» {FFFFFF}Svarbios vietos.\n{AD5BFF}» {FFFFFF}Darbai su pakvietimu.\n{AD5BFF}» {FFFFFF}Darbai be pakvietimo.\n{AD5BFF}» {FFFFFF}Ávarios kitos vietos.\n      \n{AD5BFF}» {FFFFFF}Pirmo verslo vieta\n{AD5BFF}» {FFFFFF}Antro verslo vieta\n{AD5BFF}» {FFFFFF}Nutraukti GPS rodomà vietà.", "Rinktis", "Atðaukti");
	//}
    return 1;
}
CMD:kurbudeti(playerid,params[])
{
	if(PlayerDB[playerid][Job] != 4) return ErrorMsg(playerid, "• Komanda skirta tik taksistams.");
	new string[128], Float:Atstumas, Float:Atstumas1, Float:Atstumas2;
	new info[600];
	Atstumas = GetPlayerDistanceFromPoint(playerid, -2742.3623,378.8387,4.3672);
	Atstumas1 = GetPlayerDistanceFromPoint(playerid, -1989.6338,168.8923,27.5391);
	Atstumas2 = GetPlayerDistanceFromPoint(playerid, -1599.4982,721.2233,10.8774);
	strcat(info, "{AD5BFF}» {FFFFFF}Iðrinkite marðrutà:\n");
	strcat(info, " \n");
	format(string, 128, "\t{AD5BFF}» {FFFFFF}Budëjimo vietos prie iRoad banko \tAtstumas: {AD5BFF}%0.2f KM.\n", Atstumas / 1000);
 	strcat(info, string);
 	format(string, 128, "\t{AD5BFF}» {FFFFFF}Budëjimo vietos traukiniø stotyje\tAtstumas: {AD5BFF}%0.2f KM.\n", Atstumas1 / 1000);
 	strcat(info, string);
 	format(string, 128, "\t{AD5BFF}» {FFFFFF}Budëjimo vietos prie policijos   \tAtstumas: {AD5BFF}%0.2f KM.\n", Atstumas2 / 1000);
 	strcat(info, string);
 	strcat(info, " \n");
 	strcat(info, "{AD5BFF}» {FFFFFF}Atðaukti rodomà vietà.\n");
 	ShowPlayerDialog(playerid, 306, DIALOG_STYLE_LIST, "Budëjimo vietos", info, "Pasirinkti", "Uþdaryti");
	return 1;
}
CMD:emigravimas(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        new Name[24];
        if(sscanf(params, "s[24]", Name))
        {
            UsageMessage(playerid,"Emigruoti pasirinktà þaidëjà /emigravimas [Tikslus V_P].");
        }
        else
        {
            if(IsValidNickName(Name))
            {
                new String[128];
                mysql_format(connectionHandle, String, 128, "SELECT `Emigruotas`,`VIP`,`VIPLaikoPabaiga`,`id` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Name);
                mysql_function_query(connectionHandle, String, true, "OnPlayerRToEmigrateSomeone", "ds", playerid,Name);
            }
            else
            {
                ErrorMsg(playerid,"• Netinkamas V_P.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda vyr. administracijai.");
    }
    return 1;
}
forward OnPlayerRToEmigrateSomeone(playerid);
public OnPlayerRToEmigrateSomeone(playerid)
{
    if(cache_get_row_count() == 1)
    {
        if(cache_get_row_int(0, 0) == 1)
        {
            ErrorMsg(playerid,"• Þaidëjas yra emigruotas.");
        }
        else
        {
            new id = -1;
            new tID = cache_get_row_int(0, 3);
            for(new i = 0;i<=GetPlayerPoolSize();i++)
            {
                if(PlayerDB[i][Loaded] == 1)
                {
                    if(PlayerDB[i][SQLID] == tID)
                    {
                        id = i;
                        break;
                    }
                }
            }
            if(id >= 0)
            {
                PlayerDB[id][Emigruotas] = 1;
                if(PlayerDB[id][VIP] == 0)
                {
                    PlayerDB[id][VIPLaikoPabaiga] = gettime() + 86400*3;
                    PlayerDB[id][VIP] = 1;
                    PlayerDB[id][RestrictedUseOfV] = gettime() + 86400*3;
                    PlayerDB[id][MoneyInPocket]+= 5000;
                    PlusPlayerScore(id,3000);
                }
                else
                {
                    PlayerDB[id][VIPLaikoPabaiga]+=86400*3;
                    PlayerDB[id][MoneyInPocket]+= 5000;
                    PlusPlayerScore(id,3000);
                }
                new string[128];
                format(string, 128, "• Jûs buvote emigruotas administratoriaus {FFFFFF}%s{5BC236}, uþ atliktà emigracija gavote:", Vardas(playerid));
                SendClientMessage(id, 0x5BC236FF, string);
                SendClientMessage(id, 0xFFFFFFFF, " 5.000€, 3.000XP ir 3 dienø nemokamà VIP statusà.");
            }
            else
            {
                //`Emigruotas`,`VIP`,`VIPLaikoPabaiga`
                if(cache_get_row_int(0, 1) == 1)
                {
                    new TimeItEnds = cache_get_row_int(0, 2) + 86400*3;

                    new QueryString[256];
                    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `Emigruotas` = '1',`MoneyInPocket` = `MoneyInPocket` + 5000,`XP` = `XP` + 3000 ,`VIP` = '1', `VIPLaikoPabaiga` = '%i' WHERE `id` = '%i' LIMIT 1;", TimeItEnds,tID);
                    mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                }
                else
                {
                    new TimeItEnds = gettime() + 86400*3;

                    new QueryString[256];
                    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `Emigruotas` = '1',`MoneyInPocket` = `MoneyInPocket` + 5000,`XP` = `XP` + 3000 ,`VIP` = '1', `VIPLaikoPabaiga` = '%i',`RestrictedUseOfV` = '%i' WHERE `id` = '%e' LIMIT 1;", TimeItEnds,TimeItEnds,tID);
                    mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                }
            }
            SendClientMessage(playerid, ZALIA, "• Þaidëjas sëkmingai emigruotas.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
    }
    return 1;
}



forward OnLoadPlayerPasiekimai(playerid);
public OnLoadPlayerPasiekimai(playerid)
{
    if(cache_get_row_count() == 0)
    {
        new SQLstring[86];
        mysql_format(connectionHandle, SQLstring, 86, "INSERT INTO `pasiekimai`(`Name`) VALUES ('%e');", Vardas(playerid));
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");

        PlayerDB[playerid][Pasiekimas1] = 0;
        PlayerDB[playerid][Pasiekimas2] = 0;
        PlayerDB[playerid][Pasiekimas3] = 0;
        PlayerDB[playerid][Pasiekimas4] = 0;
        PlayerDB[playerid][Pasiekimas5] = 0;
        PlayerDB[playerid][Pasiekimas6] = 0;
        PlayerDB[playerid][Pasiekimas7] = 0;
        PlayerDB[playerid][Pasiekimas8] = 0;
        PlayerDB[playerid][Pasiekimas9] = 0;
        PlayerDB[playerid][Pasiekimas10] = 0;
        PlayerDB[playerid][Pasiekimas11] = 0;
        PlayerDB[playerid][Pasiekimas12] = 0;
        PlayerDB[playerid][Pasiekimas13] = 0;
        PlayerDB[playerid][Pasiekimas14] = 0;
        PlayerDB[playerid][Pasiekimas15] = 0;
        PlayerDB[playerid][Pasiekimas16] = 0;
        PlayerDB[playerid][Pasiekimas17] = 0;
        PlayerDB[playerid][Pasiekimas18] = 0;
        PlayerDB[playerid][Pasiekimas19] = 0;
        PlayerDB[playerid][Pasiekimas20] = 0;
        PlayerDB[playerid][Pasiekimas21] = 0;
        PlayerDB[playerid][Pasiekimas22] = 0;
        PlayerDB[playerid][Pasiekimas23] = 0;
        PlayerDB[playerid][Pasiekimas24] = 0;
        PlayerDB[playerid][Pasiekimas25] = 0;
        PlayerDB[playerid][Pasiekimas26] = 0;
        PlayerDB[playerid][Pasiekimas27] = 0;
        PlayerDB[playerid][Pasiekimas28] = 0;
        PlayerDB[playerid][Pasiekimas29] = 0;
        PlayerDB[playerid][Pasiekimas30] = 0;
        PlayerDB[playerid][Pasiekimas31] = 0;
        PlayerDB[playerid][Pasiekimas32] = 0;
        PlayerDB[playerid][Pasiekimas33] = 0;
        PlayerDB[playerid][Pasiekimas34] = 0;
        PlayerDB[playerid][Pasiekimas35] = 0;
        PlayerDB[playerid][Pasiekimas36] = 0;
        PlayerDB[playerid][Pasiekimas37] = 0;
        PlayerDB[playerid][Pasiekimas38] = 0;
        PlayerDB[playerid][Pasiekimas39] = 0;
        PlayerDB[playerid][Pasiekimas40] = 0;
        PlayerDB[playerid][Pasiekimas41] = 0;
        PlayerDB[playerid][Pasiekimas42] = 0;
        PlayerDB[playerid][PasiekimaiLoaded] = true;
    }
    else
    {
        PlayerDB[playerid][Pasiekimas1] = cache_get_row_int(0,1);
        PlayerDB[playerid][Pasiekimas2] = cache_get_row_int(0,2);
        PlayerDB[playerid][Pasiekimas3] = cache_get_row_int(0,3);
        PlayerDB[playerid][Pasiekimas4] = cache_get_row_int(0,4);
        PlayerDB[playerid][Pasiekimas5] = cache_get_row_int(0,5);
        PlayerDB[playerid][Pasiekimas6] = cache_get_row_int(0,6);
        PlayerDB[playerid][Pasiekimas7] = cache_get_row_int(0,7);
        PlayerDB[playerid][Pasiekimas8] = cache_get_row_int(0,8);
        PlayerDB[playerid][Pasiekimas9] = cache_get_row_int(0,9);
        PlayerDB[playerid][Pasiekimas10] = cache_get_row_int(0,10);
        PlayerDB[playerid][Pasiekimas11] = cache_get_row_int(0,11);
        PlayerDB[playerid][Pasiekimas12] = cache_get_row_int(0,12);
        PlayerDB[playerid][Pasiekimas13] = cache_get_row_int(0,13);
        PlayerDB[playerid][Pasiekimas14] = cache_get_row_int(0,14);
        PlayerDB[playerid][Pasiekimas15] = cache_get_row_int(0,15);
        PlayerDB[playerid][Pasiekimas16] = cache_get_row_int(0,16);
        PlayerDB[playerid][Pasiekimas17] = cache_get_row_int(0,17);
        PlayerDB[playerid][Pasiekimas18] = cache_get_row_int(0,18);
        PlayerDB[playerid][Pasiekimas19] = cache_get_row_int(0,19);
        PlayerDB[playerid][Pasiekimas20] = cache_get_row_int(0,20);
        PlayerDB[playerid][Pasiekimas21] = cache_get_row_int(0,21);
        PlayerDB[playerid][Pasiekimas22] = cache_get_row_int(0,22);
        PlayerDB[playerid][Pasiekimas23] = cache_get_row_int(0,23);
        PlayerDB[playerid][Pasiekimas24] = cache_get_row_int(0,24);
        PlayerDB[playerid][Pasiekimas25] = cache_get_row_int(0,25);
        PlayerDB[playerid][Pasiekimas26] = cache_get_row_int(0,26);
        PlayerDB[playerid][Pasiekimas27] = cache_get_row_int(0,27);
        PlayerDB[playerid][Pasiekimas28] = cache_get_row_int(0,28);
        PlayerDB[playerid][Pasiekimas29] = cache_get_row_int(0,29);
        PlayerDB[playerid][Pasiekimas30] = cache_get_row_int(0,30);
        PlayerDB[playerid][Pasiekimas31] = cache_get_row_int(0,31);
        PlayerDB[playerid][Pasiekimas32] = cache_get_row_int(0,32);
        PlayerDB[playerid][Pasiekimas33] = cache_get_row_int(0,33);
        PlayerDB[playerid][Pasiekimas34] = cache_get_row_int(0,34);
        PlayerDB[playerid][Pasiekimas35] = cache_get_row_int(0,35);
        PlayerDB[playerid][Pasiekimas36] = cache_get_row_int(0,36);
        PlayerDB[playerid][Pasiekimas37] = cache_get_row_int(0,37);
        PlayerDB[playerid][Pasiekimas38] = cache_get_row_int(0,38);
        PlayerDB[playerid][Pasiekimas39] = cache_get_row_int(0,39);
        PlayerDB[playerid][Pasiekimas40] = cache_get_row_int(0,40);
        PlayerDB[playerid][Pasiekimas41] = cache_get_row_int(0,41);
        PlayerDB[playerid][Pasiekimas42] = cache_get_row_int(0,42);
        PlayerDB[playerid][PasiekimaiLoaded] = true;

    }
    return 1;
}


CMD:pasiekimai(playerid,params[])
{
    new IvykdytiPasiekimai = 0;
    new PasiekimuSkaicius = 41;
    new info[2048];

    if(PlayerDB[playerid][Pasiekimas1] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðsilaikyk maðinos teises.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðsilaikyk maðinos teises.\n");
    }
    if(PlayerDB[playerid][Pasiekimas2] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðsilaikyk vilkiko teises.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðsilaikyk vilkiko teises.\n");
    }
    if(PlayerDB[playerid][Pasiekimas3] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðsilaikyk motociklo teises.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðsilaikyk motociklo teises.\n");
    }
    if(PlayerDB[playerid][Pasiekimas4] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðsilaikyk piloto teises.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðsilaikyk piloto teises.\n");
    }
    if(PlayerDB[playerid][Pasiekimas5] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Praþaisk serveryje 2 valandas iðviso.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Praþaisk serveryje 2 valandas iðviso.\n");
    }
    if(PlayerDB[playerid][Pasiekimas6] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Praþaisk serveryje 7 valandas iðviso.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Praþaisk serveryje 7 valandas iðviso.\n");
    }
    if(PlayerDB[playerid][Pasiekimas7] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Praþaisk serveryje 7 dienas iðviso.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Praþaisk serveryje 7 dienas iðviso.\n");
    }
    if(PlayerDB[playerid][Pasiekimas8] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nuþudyk policininkà.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nuþudyk policininkà.\n");
    }
    if(PlayerDB[playerid][Pasiekimas9] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nuvyk á savivaldybæ.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nuvyk á savivaldybæ.\n");
    }
    if(PlayerDB[playerid][Pasiekimas10] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nuvyk á San-Andreas bankà.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nuvyk á San-Andreas bankà.\n");
    }
    if(PlayerDB[playerid][Pasiekimas11] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Atsidaryk banko sàskaita.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Atsidaryk banko sàskaita.\n");
    }
    if(PlayerDB[playerid][Pasiekimas12] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Surinkti 20.000XP..\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Surinkti 20.000XP.\n");
    }
    if(PlayerDB[playerid][Pasiekimas13] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Surinkti 50.000XP..\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Surinkti 50.000XP..\n");
    }
    if(PlayerDB[playerid][Pasiekimas14] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Surinkti 100.000XP.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Surinkti 100.000XP.\n");
    }
    if(PlayerDB[playerid][Pasiekimas15] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Tapti pavaduotojumi.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Tapti pavaduotojumi.\n");
    }
    if(PlayerDB[playerid][Pasiekimas16] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Tapti direktoriumi.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Tapti direktoriumi.\n");
    }
    if(PlayerDB[playerid][Pasiekimas17] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Tapti VIP nariu.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Tapti VIP nariu.\n");
    }
    if(PlayerDB[playerid][Pasiekimas18] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Tapti administratoriumi.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Tapti administratoriumi.\n");
    }
    if(PlayerDB[playerid][Pasiekimas19] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nusipirkti namà.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nusipirkti namà\n");
    }
    if(PlayerDB[playerid][Pasiekimas20] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Uþsidirbti ið verslo 50.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Uþsidirbti ið verslo 50.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas21] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Uþsidirbti ið verslo 150.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Uþsidirbti ið verslo 150.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas22] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nusipirkti pirmàjà transporto priemonæ\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nusipirkti pirmàjà transporto priemonæ.\n");
    }
    if(PlayerDB[playerid][Pasiekimas23] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Nusipirkti antràjà transporto priemonæ.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Nusipirkti antràjà transporto priemonæ.\n");
    }
    if(PlayerDB[playerid][Pasiekimas24] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Turëti rankose 1.000.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Turëti rankose 1.000.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas25] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Turëti rankose 5.000.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Turëti rankose 5.000.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas26] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Uþdirbti algoje 100.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Uþdirbti algoje 100.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas27] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Uþdirbti algoje 200.000€.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Uþdirbti algoje 200.000€.\n");
    }
    if(PlayerDB[playerid][Pasiekimas28] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti spec.bûrio Aro darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti spec.bûrio Aro darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas40] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti Taksi darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti Taksi darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas29] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti lucchese mafijos sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti lucchese mafijos sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas30] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti genovese mafijos sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti genovese mafijos sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas31] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti fûristø darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti fûristø darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas32] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti mechaniko darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti mechaniko darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas33] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti policininko darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti policininko darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas34] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti medikø darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti medikø darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas35] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Iðdirbti radistø darbo sutartá.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Iðdirbti radistø darbo sutartá.\n");
    }
    if(PlayerDB[playerid][Pasiekimas36] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Ásidarbinti á picø iðveþiotojus.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Ásidarbinti á picø iðveþiotojus.\n");
    }
    if(PlayerDB[playerid][Pasiekimas38] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Ásidarbinti á valytojus.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Ásidarbinti á valytojus.\n");
    }
    if(PlayerDB[playerid][Pasiekimas39] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Ásidarbinti á autobusø vairuotojus.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Ásidarbinti á autobusø vairuotojus.\n");
    }
    if(PlayerDB[playerid][Pasiekimas41] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Ásidarbinti á ugniagesius.\n");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Ásidarbinti á ugniagesius.\n");
    }
    if(IvykdytiPasiekimai == 41)
    {
        PlayerCompletedPasiekimas(playerid,42);
        return 1;
    }
    if(PlayerDB[playerid][Pasiekimas42] == 1)
    {
        IvykdytiPasiekimai+=1;
        strcat(info, "{008900}•• {FFFFFF}Ávygdyk visus pasiekimus.");
    }
    else
    {
        strcat(info, "{f20707}•• {FFFFFF}Ávygdyk visus pasiekimus.");
    }
    new Title[25];
    format(Title, 25, "{AFAFAF}Ávykdyta: %i/%i", IvykdytiPasiekimai,PasiekimuSkaicius);
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_LIST, Title, info, "Iðeiti", "");
    return 1;
}


stock PlayerCompletedPasiekimas(playerid,PasiekimoID)
{
    SendClientMessage(playerid, -1, "");
    switch(PasiekimoID)
    {

        case 1:
        {
            PlayerDB[playerid][Pasiekimas1] = 1;
            PlayerDB[playerid][MoneyInPocket] +=200;
            PlusPlayerScore(playerid,20);
            ShowAchievement(playerid,"Automobilio teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „masinos teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 200 € ir 20 XP.");
        }
        case 2:
        {
            PlayerDB[playerid][Pasiekimas2] = 1;
            PlayerDB[playerid][MoneyInPocket] +=300;
            PlusPlayerScore(playerid,30);
            ShowAchievement(playerid,"Vilkiko teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „vilkiko teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 300 € ir 30 XP.");
        }
        case 3:
        {
            PlayerDB[playerid][Pasiekimas3] = 1;
            PlayerDB[playerid][MoneyInPocket] +=100;
            PlusPlayerScore(playerid,10);
            ShowAchievement(playerid,"Motociklo teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „motociklo teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 100 € ir 10 XP.");
        }
        case 4:
        {
            PlayerDB[playerid][Pasiekimas4] = 1;
            PlayerDB[playerid][MoneyInPocket] +=400;
            PlusPlayerScore(playerid,40);
            ShowAchievement(playerid,"Piloto teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „piloto teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 400 € ir 40 XP.");
        }
        case 5:
        {
            PlayerDB[playerid][Pasiekimas5] = 1;
            PlayerDB[playerid][MoneyInPocket] +=500;
            PlusPlayerScore(playerid,50);
            ShowAchievement(playerid,"2 valandos");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „2 valandas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 500 € ir 50 XP.");
        }
        case 6:
        {
            PlayerDB[playerid][Pasiekimas6] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,100);
            ShowAchievement(playerid,"7 valandos");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „7 valandas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 100 XP.");
        }
        case 7:
        {
            PlayerDB[playerid][Pasiekimas7] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,150);
            ShowAchievement(playerid,"7 dienas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „7 dienas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 150 XP.");
        }
        case 8:
        {
            PlayerDB[playerid][Pasiekimas8] = 1;
            PlayerDB[playerid][MoneyInPocket] +=500;
            PlusPlayerScore(playerid,50);
            ShowAchievement(playerid,"Zmogzudyste");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „nuþudyk policininkà“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 500 € ir 50 XP.");
        }
        case 9:
        {
            PlayerDB[playerid][Pasiekimas9] = 1;
            PlayerDB[playerid][MoneyInPocket] +=250;
            PlusPlayerScore(playerid,25);
            ShowAchievement(playerid,"Savivaldybe");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Savivaldybë“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 250 € ir 25 XP.");
        }
        case 10:
        {
            PlayerDB[playerid][Pasiekimas10] = 1;
            PlayerDB[playerid][MoneyInPocket] +=500;
            PlusPlayerScore(playerid,75);
            ShowAchievement(playerid,"Bankas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Nuvyk á Bankà“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 500 € ir 75 XP.");
        }
        case 11:
        {
            PlayerDB[playerid][Pasiekimas11] = 1;
            PlayerDB[playerid][MoneyInPocket] +=250;
            PlusPlayerScore(playerid,50);
            ShowAchievement(playerid,"Banko Saskaita");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Banko sàskaita“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 250 € ir 50 XP.");
        }
        case 12:
        {
            PlayerDB[playerid][Pasiekimas12] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"20.000 XP");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Surinkti 20.000 XP“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 200 XP.");
        }
        case 13:
        {
            PlayerDB[playerid][Pasiekimas13] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,300);
            ShowAchievement(playerid,"50.000 XP");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Surinkti 50.000 XP“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 300 XP.");
        }
        case 14:
        {
            PlayerDB[playerid][Pasiekimas14] = 1;
            PlayerDB[playerid][MoneyInPocket] +=10000;
            PlayerDB[playerid][Credits]+=20;
            PlusPlayerScore(playerid,1000);
            ShowAchievement(playerid,"100.000 XP");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Surinkti 100.000 XP“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 10000 €, 1000 XP ir 20 kreditø.");
        }
        case 15:
        {
            PlayerDB[playerid][Pasiekimas15] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,100);
            ShowAchievement(playerid,"Pavaduotojas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti pavaduotojumi“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 100 XP.");
        }
        case 16:
        {
            PlayerDB[playerid][Pasiekimas16] = 1;
            PlayerDB[playerid][MoneyInPocket] +=7000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Direktorius");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti direktoriumi“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 7000 € ir 500 XP.");
        }

        case 17:
        {
            PlayerDB[playerid][Pasiekimas17] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlayerDB[playerid][Credits]+=10;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"VIP");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti VIP“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 €, 200 XP ir 10 kreditø.");
        }
        case 18:
        {
            PlayerDB[playerid][Pasiekimas18] = 1;
            PlayerDB[playerid][MoneyInPocket] +=10000;
            PlayerDB[playerid][Credits]+=20;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"ADMIN");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti Administratoriumi“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 10000 €, 500 XP ir 20 kreditø.");
        }
        case 19:
        {
            PlayerDB[playerid][Pasiekimas19] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,250);
            ShowAchievement(playerid,"Plotas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Nusipirkti namà“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 250 XP.");
        }
        case 20:
        {
            PlayerDB[playerid][Pasiekimas20] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2500;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"Versle 50.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ið verslo uþdirbti 50.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2500 € ir 200 XP.");
        }
        case 21:
        {
            PlayerDB[playerid][Pasiekimas21] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,400);
            ShowAchievement(playerid,"Versle 150.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ið verslo uþdirbti 150.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 400 XP.");
        }


        case 22:
        {
            PlayerDB[playerid][Pasiekimas22] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"1-asis automobilis");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „1-asis automobilis“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 200 XP.");
        }
        case 23:
        {
            PlayerDB[playerid][Pasiekimas23] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"2-asis automobilis");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „2-asis automobilis“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 200 XP.");
        }
        case 24:
        {
            PlayerDB[playerid][Pasiekimas24] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,300);
            ShowAchievement(playerid,"Rankose 1.000.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „turëti rankose 1mln“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 300 XP.");
        }
        case 25:
        {
            PlayerDB[playerid][Pasiekimas25] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Rankose 5.000.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „turëti rankose 5mln“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        //

        case 26:
        {
            PlayerDB[playerid][Pasiekimas26] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,100);
            ShowAchievement(playerid,"Algoje 100.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Uþdirbti 100.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 100 XP.");
        }
        case 27:
        {
            PlayerDB[playerid][Pasiekimas27] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"Algoje 200.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Uþdirbti 200.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 200 XP.");
        }
        case 28:
        {
            PlayerDB[playerid][Pasiekimas28] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"ARAS");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Aras“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 29:
        {
            PlayerDB[playerid][Pasiekimas29] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Lucchese");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Lucchese“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 30:
        {
            PlayerDB[playerid][Pasiekimas30] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Genovese");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Genovese“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 31:
        {
            PlayerDB[playerid][Pasiekimas31] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Fûristas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Fûristu“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 32:
        {
            PlayerDB[playerid][Pasiekimas32] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Mechanikas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Mechaniku“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 33:
        {
            PlayerDB[playerid][Pasiekimas33] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Policininkas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Policininku“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 34:
        {
            PlayerDB[playerid][Pasiekimas34] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Medikas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Mediku“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 35:
        {
            PlayerDB[playerid][Pasiekimas35] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Radistas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Radistu“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 36:
        {
            PlayerDB[playerid][Pasiekimas36] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2500;
            PlusPlayerScore(playerid,250);
            ShowAchievement(playerid,"Picos..");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ásidarbinti á picø iðveþiotojus“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2500 € ir 250 XP.");
        }
        case 38:
        {
            PlayerDB[playerid][Pasiekimas38] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2500;
            PlusPlayerScore(playerid,250);
            ShowAchievement(playerid,"Valytojas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ásidarbinti á valytojus“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2500 € ir 250 XP.");
        }
        case 39:
        {
            PlayerDB[playerid][Pasiekimas39] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2500;
            PlusPlayerScore(playerid,250);
            ShowAchievement(playerid,"Autobusai");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ásidarbinti á autobusø vairuotojus.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2500 € ir 250 XP.");
        }
        case 40:
        {
            PlayerDB[playerid][Pasiekimas40] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Taksi");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Iðdirbti visà laikà pagal sutarti Taksistu“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
        case 41:
        {
            PlayerDB[playerid][Pasiekimas41] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2500;
            PlusPlayerScore(playerid,250);
            ShowAchievement(playerid,"Ugniagesys");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Ásidarbinti á ugniagesius“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2500 € ir 250 XP.");
        }
        case 42:
        {
            PlayerDB[playerid][Pasiekimas42] = 1;
            PlayerDB[playerid][Credits] +=100;
            PlayerDB[playerid][MoneyInPocket] +=10000;
            PlusPlayerScore(playerid,1000);
            ShowAchievement(playerid,"Visi pasiekimai");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Pasiekimø vykdytojas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 100 kreditø, 10.000 € ir 1.000 XP.");
        }
    }
    SendClientMessage(playerid, -1, "");
}

stock SavePasiekimai(playerid)
{
    new Query[128];
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `1`='%i',`2`='%i',`3`='%i',`4`='%i',`5`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas1],PlayerDB[playerid][Pasiekimas2],PlayerDB[playerid][Pasiekimas3],PlayerDB[playerid][Pasiekimas4],PlayerDB[playerid][Pasiekimas5],Vardas(playerid));

    mysql_function_query(connectionHandle, Query, false, "", "");
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `6`='%i',`7`='%i',`8`='%i',`9`='%i',`10`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas6],PlayerDB[playerid][Pasiekimas7],PlayerDB[playerid][Pasiekimas8],PlayerDB[playerid][Pasiekimas9],PlayerDB[playerid][Pasiekimas10],Vardas(playerid));

    mysql_function_query(connectionHandle, Query, false, "", "");
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `11`='%i',`12`='%i',`13`='%i',`14`='%i',`15`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas11],PlayerDB[playerid][Pasiekimas12],PlayerDB[playerid][Pasiekimas13],PlayerDB[playerid][Pasiekimas14],PlayerDB[playerid][Pasiekimas15],Vardas(playerid));

    mysql_function_query(connectionHandle, Query, false, "", "");
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `16`='%i',`17`='%i',`18`='%i',`19`='%i',`20`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas16],PlayerDB[playerid][Pasiekimas17],PlayerDB[playerid][Pasiekimas18],PlayerDB[playerid][Pasiekimas19],PlayerDB[playerid][Pasiekimas20],Vardas(playerid));
    mysql_function_query(connectionHandle, Query, false, "", "");

    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `21`='%i',`22`='%i',`23`='%i',`24`='%i',`25`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas21],PlayerDB[playerid][Pasiekimas22],PlayerDB[playerid][Pasiekimas23],PlayerDB[playerid][Pasiekimas24],PlayerDB[playerid][Pasiekimas25],Vardas(playerid));

    mysql_function_query(connectionHandle, Query, false, "", "");
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `26`='%i',`27`='%i',`28`='%i',`29`='%i',`30`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas26],PlayerDB[playerid][Pasiekimas27],PlayerDB[playerid][Pasiekimas28],PlayerDB[playerid][Pasiekimas29],PlayerDB[playerid][Pasiekimas30],Vardas(playerid));
    mysql_function_query(connectionHandle, Query, false, "", "");


    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `31`='%i',`32`='%i',`33`='%i',`34`='%i',`35`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas31],PlayerDB[playerid][Pasiekimas32],PlayerDB[playerid][Pasiekimas33],PlayerDB[playerid][Pasiekimas34],PlayerDB[playerid][Pasiekimas35],Vardas(playerid));

    mysql_function_query(connectionHandle, Query, false, "", "");
    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `36`='%i',`37`='%i',`38`='%i',`39`='%i',`40`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas36],PlayerDB[playerid][Pasiekimas37],PlayerDB[playerid][Pasiekimas38],PlayerDB[playerid][Pasiekimas39],PlayerDB[playerid][Pasiekimas40],Vardas(playerid));
    mysql_function_query(connectionHandle, Query, false, "", "");

    mysql_format(connectionHandle, Query, 128, "UPDATE `pasiekimai` SET `41`='%i',`42`='%i' WHERE `Name` = '%e';",
        PlayerDB[playerid][Pasiekimas41],PlayerDB[playerid][Pasiekimas42],Vardas(playerid));
    mysql_function_query(connectionHandle, Query, false, "", "");

}
//VEIKSMAMS
stock IsAblePedAnimation(playerid)
{
    if(PlayerDB[playerid][Surakintas] == true || PlayerDB[playerid][Suristas] == true)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
stock showKuponas(playerid)
{
	ShowPlayerDialog(playerid, 303, DIALOG_STYLE_INPUT, "Laimingasis kuponas", "{7FEB4D}Áraðykite kupono kodà:", "Toliau", "Uþdaryti");
	return true;
}
stock checkKodas(playerid, _kod[])
{
    new SQLstring[86];
	mysql_format(connectionHandle, SQLstring, 86, "SELECT * FROM `luckytickets` WHERE `token` = '%s' LIMIT 1;", _kod);
	mysql_function_query(connectionHandle,SQLstring,true,"OnKuponLoad","d",playerid);
	return true;
}
CMD:pakelt(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:girtas(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:arrest(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:juoktis(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:sprest(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
    case 1:
    {
        ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 1, -1, 1);
        PlayerDB[playerid][VykdoVeiksma] = true;
    }
    case 2:
    {
        ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
        PlayerDB[playerid][VykdoVeiksma] = true;
    }
    case 3:
    {
        ApplyAnimation(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
        PlayerDB[playerid][VykdoVeiksma] = true;

    }
    case 4:
    {
        ApplyAnimation(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
        PlayerDB[playerid][VykdoVeiksma] = true;
    }
    default: UsageMessage(playerid,"• Naudojimas: /sprest [1-4]");
    }
    return 1;
}
CMD:sedet(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1: {
            ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2: {
            ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3: {
            ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4: {
            ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 5: {
            ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /sedet [1-5]");
    }
    return 1;
}
CMD:sleptis(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:mot(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /mot [1-3]");
    }
    return 1;
}
CMD:trenkt(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;

    return 1;
}
CMD:sokt(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            SetPlayerSpecialAction(playerid, 5);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            SetPlayerSpecialAction(playerid, 6);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            SetPlayerSpecialAction(playerid, 7);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            SetPlayerSpecialAction(playerid, 8);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /sokt [1-4]");
    }
    return 1;
}
CMD:miegot(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:suzeistas(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:verkt(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:dj(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            ApplyAnimation(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /dj [1-4]");
    }
    return 1;
}
CMD:nobreath(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /nobreath [1-3]");
    }
    return 1;
}
CMD:sokiai(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 5:
        {
            ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 6:
        {
            ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 7:
        {
            ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 8:
        {
            ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 9:
        {
            ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 10:
        {
            ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /sokiai [1-10]");
    }
    return 1;
}
CMD:mirti(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            ApplyAnimation(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 5:
        {
            ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /mirti [1-5]");
    }
    return 1;
}
CMD:muzikuot(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /muzikuot [1-3]");
    }
    return 1;
}
CMD:sisiot(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    SetPlayerSpecialAction(playerid, 68);
    PlayerDB[playerid][VykdoVeiksma] = true;
    return 1;
}
CMD:spank(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            ApplyAnimation(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default: UsageMessage(playerid,"Naudojimas: /spank [1-4]");
    }
    return 1;
}
CMD:sunbathe(playerid, params[])
{
    if(!IsAblePedAnimation(playerid)) return 1;
    switch(strval(params))
    {
        case 1:
        {
            ApplyAnimation(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 2:
        {
            ApplyAnimation(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 3:
        {
            ApplyAnimation(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 4:
        {
            ApplyAnimation(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 5:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 6:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 7:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 8:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 9:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 10:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 11:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 12:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 13:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 14:
        {
            ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 15:
        {
            ApplyAnimation(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 16:
        {
            ApplyAnimation(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 17:
        {
            ApplyAnimation(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        case 18:
        {
            ApplyAnimation(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
            PlayerDB[playerid][VykdoVeiksma] = true;
        }
        default:
        {
            UsageMessage(playerid,"Naudojimas: /sunbathe [1-18]");
        }
    }
    return 1;
}
CMD:baikti(playerid,params[])
{
    if(IsAblePedAnimation(playerid))
    {
        if(PlayerDB[playerid][VykdoVeiksma] == true)
        {
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            ClearAnimations(playerid, 1);
        }
        else
        {
            ErrorMsg(playerid,"• Jûs ne atliekate jokio veiksmo.");
        }
    }
    return 1;
}
CMD:veiksmai(playerid,params[])
{
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Veiksmai", "/pakelt,/girtas,/arrest,/juoktis,/sprest [1-4],/sedet [1-5],/sleptis,/mot [1-3],/trenkt,/sokt [1-4],/miegot,\n/suzeistas,/verkt,/dj [1-4],/nobreath [1-3],/sokiai [1-10],/mirti [1-5],/muzikuot [1-3],/sisiot,\n/spank [1-4],/sunbathe [1-18],\n/baikti - baikti visus veiksmus", "Gerai", "");
    return 1;
}
stock CreateWeedEventItem(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new WeedObjectNumber = WeedObjectsCreated;
    WeedObject[WeedObjectNumber][WeedObjectModel] = modelid;
    WeedObject[WeedObjectNumber][WeedObjectX] = x;
    WeedObject[WeedObjectNumber][WeedObjectY] = y;
    WeedObject[WeedObjectNumber][WeedObjectZ] = z;
    WeedObject[WeedObjectNumber][WeedObjectRX] = rx;
    WeedObject[WeedObjectNumber][WeedObjectRY] = ry;
    WeedObject[WeedObjectNumber][WeedObjectRZ] = rz;
    WeedObject[WeedObjectNumber][WeedObjectHarvested] = true;
    WeedObjectsCreated+=1;
    return 1;
}
stock StartWeedEvent()
{
    //Pradedame Þolës eventà
    for(new i = 0;i < WeedObjectsCreated;i++)
    {
        WeedObject[i][WeedObjectID] = CreateDynamicObject(WeedObject[i][WeedObjectModel], WeedObject[i][WeedObjectX], WeedObject[i][WeedObjectY], WeedObject[i][WeedObjectZ], WeedObject[i][WeedObjectRX], WeedObject[i][WeedObjectRY], WeedObject[i][WeedObjectRZ], 0, 0);
        WeedObject[i][WeedObjectHarvested] = false;
    }
    WeedEventTimeLeft = WEED_EVENT_TIME_GIVEN;
    WeedEventInProgress = true;
    SendClientMessageToAll(0xbc0362FF, "[EVENT'as] PRASIDËJO ÞOLËS ROVIMO LAIKAS. Tam turite 20 minuèiø!");
    SendClientMessageToAll(0xbc0362FF, "[INFORMACIJA] Þolës rovimo vietà galite rasti /gps >> Ávairios kitos vietos >> þolës rovimo vieta.");

}

stock EndWeedEvent()
{
    WeedEventInProgress = false;
    WeedEventTimeLeft = 0;
    //EVENTAS BAIGESI
    for(new i = 0;i < WeedObjectsCreated;i++)
    {
        if(WeedObject[i][WeedObjectHarvested] == false)
        {
            DestroyDynamicObject(WeedObject[i][WeedObjectID]);
            WeedObject[i][WeedObjectHarvested] = true;
        }
    }
    new laikas,Hour;
    gettime(Hour);

    if(Hour == 16 && Hour < 20)
    {
        laikas = 20;
    }
    else
    {
        laikas = 16;
    }
    new string[128];
    format(string, 128, "[EVENT'as] Þolës rovimo laikas baigësi, laukite kito rovimo laiko. Kitas laikas : %ivalanda 0 minuèiø.", laikas);
    SendClientMessageToAll(0xbc0362FF, string);
}
forward OnPlayerRequestBuyClothes(playerid,skinID);
public OnPlayerRequestBuyClothes(playerid,skinID)
{
    if(cache_get_row_count() == 0)
    {
        new string[128];
        PlayerDB[playerid][Credits]-=50;
        mysql_format(connectionHandle, string, 128, "INSERT INTO `clothesforcredits` (`PlayerName`, `SkinID`) VALUES ('%e', '%i');", Vardas(playerid),skinID);
        mysql_function_query(connectionHandle, string, false, "", "");

        SendClientMessage(playerid, 0x00BA12FF, "•{FFFFFF} Jûs uþsisakëte paslaugà „Iðvaizdos pirkimas“.");
        format(string, sizeof(string), "•{FFFFFF} Ásigyjote iðvaizdà kurios ID yra %d. Persirengti galite su komanda /persirengti.", skinID);
        SendClientMessage(playerid, 0x00BA12FF, string);

        ShowPlayerCreditsMeniu(playerid);
    }
    else
    {
        ErrorMsg(playerid,"• Ðá skinà jau turite.");
        ShowPlayerBuySkinDialog(playerid);
    }
    return 1;
}
stock ShowPlayerCreditsMeniu(playerid)
{
    new info[2600];
    new Caption[128];
    format(Caption, sizeof(Caption), "{FFFFFF}Ðiuo metu turite {FFC200}%d {FFFFFF}kreditai(-us).", PlayerDB[playerid][Credits]);

    strcat(info,"Paslauga\tGaliojimo laikas/kiekis\tKaina kreditais\n");
    strcat(info,"{5BC236}Informacija:\n");
    strcat(info, "         \n");
    strcat(info,"{FFC200}• {FFFFFF}Atsiimti kreditus\n");
    strcat(info,"{FFC200}• {FFFFFF}Informacija apie kreditus\n");
    strcat(info,"{FFC200}• {FFFFFF}Jûsø uþsakytos paslaugos\n");
    strcat(info,"{FFC200}• {FFFFFF}Kreditø pirkimas ið Lietuvos\n");
    strcat(info,"{FFC200}• {FFFFFF}Kreditø pirkimas ið uþsienio\n");
    strcat(info, "         \n");
    strcat(info,"{5BC236}Paslaugos:\n        \n");
    strcat(info,"{FFC200}• {FFFFFF}Serverio pinigai \t 100.000€ \t {FFC200}100 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Patirties taðkai \t 10.000XP \t {FFC200}100 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Antro verslo slotas \t Visam laikui \t {FFC200}1000 {FFFFFF}kreditø\n");
    strcat(info, "         \n");
    strcat(info,"{5BC236}Limituotos paslaugos:\n        \n");
    strcat(info,"{FFC200}• {FFFFFF}VIP statusas \t 30 dienø \t {FFC200}100 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}ADMIN statusas I lygio \t 30 dienø \t {FFC200}440 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}ADMIN statusas II lygio \t 30 dienø \t {FFC200}770 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}ADMIN statusas III lygio \t 30 dienø \t {FFC200}1000 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Papildomas uþdarbis \t 100€/min/30 dienø \t {FFC200}200 {FFFFFF}kreditø\n");
    strcat(info, "         \n");
    strcat(info,"{5BC236}Nelimituotos paslaugos:\n");
    strcat(info, "         \n");
    strcat(info,"{FFC200}• {FFFFFF}DARBO áspëjmo paðalinimas \t Visam laikui \t {FFC200}20 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}VIP áspëjmo paðalinimas \t Visam laikui \t {FFC200}30 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}ADMIN áspëjmo paðalinimas \t Visam laikui \t {FFC200}50 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Gaudomumo lygio paðalinimas \t Visam laikui \t {FFC200}2star = 1 {FFFFFF}kreditas\n");
    strcat(info,"{FFC200}• {FFFFFF}Kalëjimo laiko paðalinimas \t Visam laikui \t {FFC200}1min = 1 {FFFFFF}kreditas\n");
    strcat(info,"{FFC200}• {FFFFFF}Nutildymo laiko paðalinimas \t Visam laikui \t {FFC200}1min = 1 {FFFFFF}kreditas\n");
    strcat(info,"{FFC200}• {FFFFFF}Darbo sutarties paðalinimas \t Visam laikui \t {FFC200}100 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Pirmos tr.priemonës vardiniai numeriai \t Visam laikui \t {FFC200}50 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Antros tr.priemonës vardiniai numeriai \t Visam laikui \t {FFC200}50 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Automobilio teisës \t Visam laikui \t {FFC200}20 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Motociklo teisës \t Visam laikui \t {FFC200}20 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Sunkveþimio teisës \t Visam laikui \t {FFC200}20 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Piloto teisës \t Visam laikui \t {FFC200}20 {FFFFFF}kreditø\n");
    strcat(info,"{FFC200}• {FFFFFF}Iðvaizdos pirkimas \t Visam laikui \t {FFC200}50 {FFFFFF}kreditø");

    ShowPlayerDialog(playerid, 269, DIALOG_STYLE_TABLIST_HEADERS, Caption, info, "Rinktis", "Atðaukti");
}
stock ShowPlayerBuySkinDialog(playerid)
{
    ShowPlayerDialog(playerid, 179, DIALOG_STYLE_INPUT, "{AFAFAF}Iðvaizdos pirkimas", "Norëdami ásigyti jûsø pasirinktà iðvaizdà, jûs turite ávesti jos ID á þemiau esantá laukelá ir spausti „Pirkti“,\nnorëdami atsisakyti pirkimo spauskite mygtukà „Atðaukti“.", "Pirkti", "Atðaukti");
    return 1;
}
stock BuyNamePlate1(playerid)
{
    new title[128],info[1024];
    strcat(info, "{26e4b2}Pirmos maðinos vardiniai numeriai\n");
    strcat(info, "\t{FFFFFF}» Jûs pasirinkote {26e4b2}- Pirmos maðinos vardiniai numeriai\n");
    strcat(info, "\t{FFFFFF}» Dþiaugsites savo   {26e4b2} norimais numeriais\n");
    strcat(info, "\t{FFFFFF}» Mëgausites  {26e4b2} turimu vardu.\n\n\n");
    strcat(info, "\t{FF0000}» Atlikus ðá pirkimà kreditai gràþinami  - NEBUS.\n");
    strcat(info, "\t{FFFFFF}» Ar tikrai norite nusipirkti pirmos maðinos vardinius numerius uþ  {26e4b2}-  100 Kreditø?\n\n\n");
    strcat(info, "\t{FFFFFF}» ÁVESKITE NORIMUS MAÐINOS NUMERIUS\n");
    format(title,128,"Pirmos maðinos vardiniai numeriai"); // pirmos numeriai
    ShowPlayerDialog(playerid, 182, DIALOG_STYLE_INPUT, title, info, "Pirkti", "Atgal");
    return 1;
}
stock BuyNamePlate2(playerid)
{
    new title[128],info[1024];
    strcat(info, "{26e4b2}Antros maðinos vardiniai numeriai\n");
    strcat(info, "\t{FFFFFF}» Jûs pasirinkote {26e4b2}- Antros maðinos vardiniai numeriai\n");
    strcat(info, "\t{FFFFFF}» Dþiaugsites savo   {26e4b2} norimais numeriais\n");
    strcat(info, "\t{FFFFFF}» Mëgausites  {26e4b2} turimu vardu.\n\n\n");
    strcat(info, "\t{FF0000}» Atlikus ðá pirkimà kreditai gràþinami  - NEBUS.\n");
    strcat(info, "\t{FFFFFF}» Ar tikrai norite nusipirkti antros maðinos vardinius numerius uþ  {26e4b2}-  100 Kreditø?\n\n\n");
    strcat(info, "\t{FFFFFF}» ÁVESKITE NORIMUS MAÐINOS NUMERIUS\n");
    format(title,128,"Antros maðinos vardiniai numeriai"); // antros numeriai
    ShowPlayerDialog(playerid, 183, DIALOG_STYLE_INPUT, title, info, "Pirkti", "Atgal");
    return 1;
}
stock IsPlayerInWarZone(playerid)
{
    new Value = 0;
    for(new i = 0;i<KARO_ZONU_SKAICIUS;i++)
    {
        if(IsPlayerInDynamicArea(playerid, KaroZonos[i], 1))
        {
            Value = 1;
            break;
        }
    }
    return Value;
}
stock IsPlayerInSafeZone(playerid)
{
    new Value = 0;
    for(new i = 0;i<SAUGIU_ZONU_SKAICIUS;i++)
    {
        if(IsPlayerInDynamicArea(playerid, SaugiosZonos[i], 1))
        {
            Value = 1;
            break;
        }
    }
    return Value;
}
CMD:duotiaispejima(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new id,reason[100];
        if(sscanf(params, "us[100]", id,reason))
        {
            UsageMessage(playerid,"• Duoti vienà administratoriaus ispëjimà nusiþengusiam administratoriui: /duotiaispejima [V_P/ID] [Prieþastis]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(playerid == id)
                {
                    ErrorMsg(playerid,"• Savæs ispëti ðiais áspëjimais negalite.");
                }
                else if(strlen(reason) < 3)
                {
                    ErrorMsg(playerid,"• Jûsø nurodyta prieþastis yra per trumpa.");
                }
                else
                {
                    if(PlayerDB[id][adminlvl] > 0)
                    {
                        if(PlayerDB[id][adminlvl] == 5)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra aukðtesnio lygio administratorius nei jûs.");
                        }
                        else
                        {
                            SendClientMessage(playerid, ZALIA, "• Administratorius áspëtas.");
                            PlayerDB[id][AdminWarnings]+=1;
                            new QueryString[300];
                            new years,month,day;
                            getdate(years, month, day);
                            mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Admin áspëjimas uþ: %s(%d-%d-%.0d)(%s)');", Vardas(id),reason,years,month,day,Vardas(playerid));
                            mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                            SendClientMessage(playerid, -1, "");
                            SendClientMessage(id, -1, "• Gavote administratoriaus áspëjimà. Detaliau galite suþinoti /priezastys.");
                            SendClientMessage(playerid, -1, "");
                            if(PlayerDB[id][AdminWarnings] == 3)
                            {
                                PlayerDB[id][adminlvl] = 0;
                                PlayerDB[id][AdminLaikoPabaiga] = 0;
                                PlayerDB[id][AdminWarnings] = 0;
                                mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Praradote administratoriaus statusà,nes surinkote 3 áspëjimus (%d-%d-%.0d)(SISTEMA)');", Vardas(id),reason,years,month,day);
                                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                            }
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas nëra administratorius.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}

CMD:duotiaispejimaoff(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nick[24],reason[100];
        if(sscanf(params, "s[24]s[100]", nick,reason))
        {
            UsageMessage(playerid,"• Duoti admin ispëjimà atsijungusiam: /duotiaispejimaoff [Tikslus V_P] [Prieþastis]");
        }
        else
        {
            if(IsValidNickName(nick))
            {
                if(strlen(reason) > 2)
                {
                    new QueryString[128];
                    mysql_format(connectionHandle, QueryString, 128, "SELECT `AdminWarnings`,`adminlvl` FROM `players` WHERE `Name` = '%e' LIMIT 1;", nick);
                    mysql_function_query(connectionHandle, QueryString, true, "OnWarnOfflineAdmin", "dss", playerid,nick,reason);
                }
                else
                {
                    ErrorMsg(playerid,"• Blogai nurodyta prieþastis.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas vatotojo vardas.");
            }
        }
    }
    return 1;
}
forward OnWarnOfflineAdmin(playerid,Nick,reason);
public OnWarnOfflineAdmin(playerid,Nick,reason)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
    }
    else
    {
        new Warns = cache_get_row_int(0, 0);
        new AdminoLygis = cache_get_row_int(0, 1);
        if(AdminoLygis == 0)
        {
            ErrorMsg(playerid,"• Þaidëjas nëra administratorius.");
        }
        else if(AdminoLygis == 5)
        {
            ErrorMsg(playerid,"• Ðio administratoriaus áspëti negalite.");
        }
        else
        {
            new years,month,day;
            getdate(years, month, day);
            Warns+=1;
            new QueryString[300];
            mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Admin áspëjimas uþ: %s(%d-%d-%.0d)(%s)');", Nick,reason,years,month,day,Vardas(playerid));
            mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            if(Warns == 3)
            {
                mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Praradote administratoriaus statusà,nes surinkote 3 áspëjimus (%d-%d-%.0d)(SISTEMA)');", Nick,reason,years,month,day);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                mysql_format(connectionHandle, QueryString, 300, "UPDATE `players` SET `adminlvl` = '0',`AdminWarnings` = '0',`AdminLaikoPabaiga` = '0' WHERE `Name` = '%e' LIMIT 1;", Nick);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            }
            else
            {
                mysql_format(connectionHandle, QueryString, 300, "UPDATE `players` SET `AdminWarnings` = '%i' WHERE `Name` = '%e' LIMIT 1;", Warns,Nick);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            }
            SendClientMessage(playerid, ZALIA, "• Áspëjimas buvo sëkmingai skirtas.");
        }
    }
    return 1;
}


//
CMD:duotivispejima(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new id,reason[100];
        if(sscanf(params, "us[100]", id,reason))
        {
            UsageMessage(playerid,"• Duoti vienà VIP ispëjimà nusiþengusiam VIP nariui: /duotivispejima [V_P/ID] [Prieþastis]");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(playerid == id)
                {
                    ErrorMsg(playerid,"• Savæs ispëti ðiais áspëjimais negalite.");
                }
                else if(strlen(reason) < 3)
                {
                    ErrorMsg(playerid,"• Jûsø nurodyta prieþastis yra per trumpa.");
                }
                else
                {
                    if(PlayerDB[id][VIP] == 1)
                    {
                        SendClientMessage(playerid, ZALIA, "• VIP narys áspëtas.");
                        PlayerDB[id][VIPWarnings]+=1;
                        new QueryString[300];
                        new years,month,day;
                        getdate(years, month, day);
                        mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'VIP áspëjimas uþ: %s(%d-%d-%.0d)(%s)');", Vardas(id),reason,years,month,day,Vardas(playerid));
                        mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                        SendClientMessage(playerid, -1, "");
                        SendClientMessage(id, -1, "• Gavote VIP áspëjimà. Detaliau galite suþinoti /priezastys.");
                        SendClientMessage(playerid, -1, "");
                        if(PlayerDB[id][VIPWarnings] == 3)
                        {
                            PlayerDB[id][VIP] = 0;
                            PlayerDB[id][VIPLaikoPabaiga] = 0;
                            PlayerDB[id][VIPWarnings] = 0;
                            mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Praradote VIP statusà,nes surinkote 3 áspëjimus (%d-%d-%.0d)(SISTEMA)');", Vardas(id),reason,years,month,day);
                            mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas nëra VIP narys.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}

CMD:duotivispejimaoff(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nick[24],reason[100];
        if(sscanf(params, "s[24]s[100]", nick,reason))
        {
            UsageMessage(playerid,"• Duoti VIP ispëjimà atsijungusiam: /duotivispejimaoff [Tikslus V_P] [Prieþastis]");
        }
        else
        {
            if(IsValidNickName(nick))
            {
                if(strlen(reason) > 2)
                {
                    new QueryString[128];
                    mysql_format(connectionHandle, QueryString, 128, "SELECT `VIPWarnings`,`VIP` FROM `players` WHERE `Name` = '%e' LIMIT 1;", nick);
                    mysql_function_query(connectionHandle, QueryString, true, "OnWarnOfflineVIP", "dss", playerid,nick,reason);
                }
                else
                {
                    ErrorMsg(playerid,"• Blogai nurodyta prieþastis.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas vatotojo vardas.");
            }
        }
    }
    return 1;
}
forward OnWarnOfflineVIP(playerid,Nick,reason);
public OnWarnOfflineVIP(playerid,Nick,reason)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
    }
    else
    {
        new Warns = cache_get_row_int(0, 0);
        if(cache_get_row_int(0, 1) == 0)
        {
            ErrorMsg(playerid,"• Þaidëjas nëra VIP narys.");
        }
        else
        {
            new years,month,day;
            getdate(years, month, day);
            Warns+=1;
            new QueryString[300];
            mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'VIP áspëjimas uþ: %s(%d-%d-%.0d)(%s)');", Nick,reason,years,month,day,Vardas(playerid));
            mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            if(Warns == 3)
            {
                mysql_format(connectionHandle, QueryString, 300, "INSERT INTO `priezastys` (`ID`, `Name`, `Priezastis`) VALUES (NULL, '%e', 'Praradote VIP statusà,nes surinkote 3 áspëjimus (%d-%d-%.0d)(SISTEMA)');", Nick,reason,years,month,day);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
                mysql_format(connectionHandle, QueryString, 300, "UPDATE `players` SET `VIP` = '0',`VIPWarnings` = '0',`VIPLaikoPabaiga` = '0' WHERE `Name` = '%e' LIMIT 1;", Nick);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            }
            else
            {
                mysql_format(connectionHandle, QueryString, 300, "UPDATE `players` SET `VIPWarnings` = '%i' WHERE `Name` = '%e' LIMIT 1;", Warns,Nick);
                mysql_function_query(connectionHandle,QueryString,false,"SendQuery","");
            }
            SendClientMessage(playerid, ZALIA, "• Áspëjimas buvo sëkmingai skirtas.");
        }
    }
    return 1;
}
//
CMD:naispejima(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Nuimti Admin ispëjimà: /naispejima [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][adminlvl] > 0)
                {
                    if(PlayerDB[id][AdminWarnings] > 0)
                    {
                        PlayerDB[id][AdminWarnings]-=1;
                        SendClientMessage(playerid, ZALIA, "• Sëkmingai nuëmete vienà administratoriaus áspëjimà.");
                        SendClientMessage(id, ZALIA, "• Privilegijas turinèiø þaidëjø priþiûrëtojas katik atemë ið jûsø vienà Admin ispëjimà.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Administratorius neturi áspëjimø.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis þaidëjas nëra administratorius.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}

CMD:naispejimaoff(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nick[24];
        if(sscanf(params, "s[24]", nick))
        {
            UsageMessage(playerid,"• Nuimti vienà ADMIN ispëjimà atsijungusiam: /naispejimaoff [Tikslus V_P]");
        }
        else
        {
            if(IsValidNickName(nick))
            {
                new QueryString[144];
                mysql_format(connectionHandle, QueryString, 144, "UPDATE `players` SET `AdminWarnings` = `AdminWarnings` - 1 WHERE `adminlvl` > 0 AND `AdminWarnings` > 0 AND `Name` = '%e' LIMIT 1;", nick);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, ZALIA, "• Jei ðis þaidëjas yra administratorius turintis bent vienà áspëjimà,vienas áspëjimas bus nuimtas.");
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas vatotojo vardas.");
            }
        }
    }
    return 1;
}

//
CMD:nvispejima(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Nuimti VIP ispëjimà: /nvispejima [V_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][VIP] == 1)
                {
                    if(PlayerDB[id][VIPWarnings] > 0)
                    {
                        PlayerDB[id][VIPWarnings]-=1;
                        SendClientMessage(playerid, ZALIA, "• Sëkmingai nuëmete vienà VIP áspëjimà.");
                        SendClientMessage(id, ZALIA, "• Privilegijas turinèiø þaidëjø priþiûrëtojas katik atemë ið jûsø vienà VIP ispëjimà.");
                    }
                    else
                    {
                        ErrorMsg(playerid,"• VIP narys neturi áspëjimø.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Ðis þaidëjas nëra VIP narys.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}

CMD:nvispejimaoff(playerid,params[])
{
    if(PlayerDB[playerid][PrivPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new nick[24];
        if(sscanf(params, "s[24]", nick))
        {
            UsageMessage(playerid,"• Nuimti vienà VIP ispëjimà atsijungusiam: /nvispejimaoff [Tikslus V_P]");
        }
        else
        {
            if(IsValidNickName(nick))
            {
                new QueryString[200];
                mysql_format(connectionHandle, QueryString, 200, "UPDATE `players` SET `VIPWarnings` = `VIPWarnings` - 1 WHERE `VIP` = 1 AND `VIPWarnings` > 0 AND `VIPLaikoPabaiga` > %i  AND `Name` = '%e' LIMIT 1;", gettime(),nick);
                mysql_function_query(connectionHandle, QueryString, false, "", "");
                SendClientMessage(playerid, ZALIA, "• Jei ðis þaidëjas yra VIP narys turintis bent vienà áspëjimà,vienas áspëjimas bus nuimtas.");
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas vatotojo vardas.");
            }
        }
    }
    return 1;
}

CMD:info(playerid,params[])
{
    new info[2560];
    new str[180];
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Patirtis (XP): {FFFF00}%s \n",AddPoints(GetPlayerScore(playerid)));
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Registracijos data: {FFFF00}%s \n",PlayerDB[playerid][DayOfRegistration]);
    strcat(info, str);
    if(PlayerDB[playerid][Sex] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lytis: {FFFF00}Vyras \n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lytis: {FFFF00}Moteris \n");
    }
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Alkis: {FFFF00}%0.1f%% \n",PlayerDB[playerid][Hunger]);
    strcat(info, str);
    new Float:Health,Float:Armour;
    GetPlayerHealth(playerid, Health);
    GetPlayerArmour(playerid, Armour);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Gyvybës: {FFFF00}%01.2f \n",Health);
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Ðarvai: {FFFF00}%01.2f \n",Armour);
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pinigai banke: {FFFF00}%s €\n",AddPoints(PlayerDB[playerid][MoneyInBank]));
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pinigai kiðenëje: {FFFF00}%s €\n",AddPoints(PlayerDB[playerid][MoneyInPocket]));
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Kreditai: {FFFF00}%d \n",PlayerDB[playerid][Credits]);
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Gaudomumo lygis: {FFFF00}%d \n",PlayerDB[playerid][WantedLevel]);
    strcat(info, str);
    new MH,MM,MS;
    MS = PlayerDB[playerid][MutedPlayer];
    while(MS >= 60)
    {
        MM++;
        MS-=60;
    }
    while(MM >= 60)
    {
        MH++;
        MM-=60;
    }
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Uþtildytas: {FFFF00}%d valandas(-ø) %d minute(-èiø) %d sekundæ(-es) \n",MH,MM,MS);
    strcat(info, str);

    MS = PlayerDB[playerid][JailTime];
    MM = 0;
    MH = 0;
    while(MS >= 60)
    {
        MM++;
        MS-=60;
    }
    while(MM >= 60)
    {
        MH++;
        MM-=60;
    }
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Kalëjime: {FFFF00}%d valandas(-ø) %d minute(-èiø) %d sekundæ(-es) \n\n",MH,MM,MS);
    strcat(info, str);
    if(PlayerDB[playerid][WeaponsLicense] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Ginklø liceznija: {FFFF00}Turi \n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Ginklø liceznija: {FFFF00}Neturi \n");
    }
    strcat(info, str);
    if(PlayerDB[playerid][AutoLicense] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Automobilio teisës: {FFFF00}Turi\n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Automobilio teisës: {FFFF00}Neturi\n");
    }
    strcat(info, str);
    if(PlayerDB[playerid][MotoLicense] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Motociklo teisës: {FFFF00}Turi\n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Motociklo teisës: {FFFF00}Neturi\n");
    }
    strcat(info, str);
    if(PlayerDB[playerid][SunkvLicense] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Sunkveþimio teisës: {FFFF00}Turi\n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Sunkveþimio teisës: {FFFF00}Neturi\n");
    }
    strcat(info, str);
    if(PlayerDB[playerid][PilotoLicense] == 1)
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Piloto teisës: {FFFF00}Turi\n");
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}Piloto teisës: {FFFF00}Neturi\n");
    }
    strcat(info, str);

    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos balai: {FFFF00}%d {FFFFFF}| Praradau teisës kartø: {FFFF00}%d \n\n",PlayerDB[playerid][MatuokliuBalai],PlayerDB[playerid][LostDLicenses]);
    strcat(info, str);
    new DarboPavadinimas[35];
    switch(PlayerDB[playerid][Job])
    {
        case 0:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Bedarbis");
        }
        case 1:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Policininkas");
        }
        case 2:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Medikas");
        }
        case 4:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Taksistas");
        }
        case 5:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Mechanikas");
        }
        case 7:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Lucchese Mafija");
        }
        case 8:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Genovese Mafija");
        }
        case 9:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "„Aras“");
        }
        case 10:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Radijos laidø vedëjas");
        }
        case 11:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "S**");
        }
        case 13:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Autobuso vairuotojas");
        }
        case 14:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Gaisrininkas");
        }
        case 15:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Gatviø valytojas");
        }
        case 16:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Oro ir Vandens kurjeris");
        }
        case 19:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "„Burger Shot“ maisto iðveþiotojas");
        }
        case 21:
        {
            format(DarboPavadinimas, sizeof(DarboPavadinimas), "Tolimûjø reisø vairuotojas");
        }
    }
    new Years, Month, Day, Hour, Minute, Second;
    if(PlayerDB[playerid][DarboSutartiesPabaiga] >= gettime())
    {
        TimestampToDate(PlayerDB[playerid][DarboSutartiesPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
        format(str, sizeof(str), "{FFFF00}» %s(-ë) nuo {FFFF00}%s{FFFFFF} | Sutartis iki: {FFFF00}%d-%02d-%02d %02d:%02d \n",DarboPavadinimas,PlayerDB[playerid][DarboPradziosData],Years, Month, Day, Hour, Minute);
        strcat(info, str);
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» %s(-ë) nuo {FFFF00}%s{FFFFFF} | Sutartis: {FFFF00}Negalioja \n",DarboPavadinimas,PlayerDB[playerid][DarboPradziosData]);
        strcat(info, str);
        switch(PlayerDB[playerid][Job])
        {

            case 4:
            {
                if(PlayerDB[playerid][Pasiekimas40] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,40);
                }
            }
            case 9:
            {
                if(PlayerDB[playerid][Pasiekimas28] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,28);
                }
            }
            case 7:
            {
                if(PlayerDB[playerid][Pasiekimas29] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,29);
                }
            }
            case 8:
            {
                if(PlayerDB[playerid][Pasiekimas30] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,30);
                }
            }
            case 21:
            {
                if(PlayerDB[playerid][Pasiekimas31] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,31);
                }
            }
            case 5:
            {
                if(PlayerDB[playerid][Pasiekimas32] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,32);
                }
            }
            case 1:
            {
                if(PlayerDB[playerid][Pasiekimas33] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,33);
                }
            }
            case 2:
            {
                if(PlayerDB[playerid][Pasiekimas34] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,34);
                }
            }
            case 10:
            {
                if(PlayerDB[playerid][Pasiekimas35] == 0)
                {
                    PlayerCompletedPasiekimas(playerid,35);
                }
            }
        }

    }
    if((PlayerDB[playerid][Job] >= 1 && PlayerDB[playerid][Job] < 12 ) || PlayerDB[playerid][Job] == 21)
    {
        switch(PlayerDB[playerid][Rangas])
        {
            case 1:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango1Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 2:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango2Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 3:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango3Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 4:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango4Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 5:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango5Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 6:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango6Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 7:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango7Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
            case 8:
            {
                format(str, sizeof(str), "{FFFF00}» {FFFFFF}Rangas: {FFFF00}„%s“{FFFFFF} | Áspëjimai: {FFFF00}%i/3 \n", DarboInformacija[PlayerDB[playerid][Job]][Rango8Pavadinimas],PlayerDB[playerid][JobWarnings]);
            }
        }
        strcat(info, str);
    }
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pradirbote ðiandien: {FFFF00}%dmin.{FFFFFF} | Iðviso: {FFFF00}%dmin.\n",PlayerDB[playerid][TimeWorkedWithCarToday],PlayerDB[playerid][TimeWorkedWithCarTotal]);
    strcat(info, str);
    switch(PlayerDB[playerid][Job])
    {
        case 1:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos: {FFFF00}%d{FFFFFF} | Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[playerid][BaudosTotal],PlayerDB[playerid][AtvykimaiTotal]);
            strcat(info, str);
        }
        case 2:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pagydymai: {FFFF00}%d{FFFFFF} | Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[playerid][PagydimaiTotal],PlayerDB[playerid][AtvykimaiTotal]);
            strcat(info, str);
        }
        case 3,5,7,8,10,16..19:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Iðkvietimai: {FFFF00}%d\n\n",PlayerDB[playerid][AtvykimaiTotal]);
            strcat(info, str);
        }
        case 6,9,11:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Baudos: {FFFF00}%d\n\n",PlayerDB[playerid][BaudosTotal]);
            strcat(info, str);
        }
        case 21:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Kroviniai: {FFFF00}%d\n\n",PlayerDB[playerid][NuveztiKroviniai]);
            strcat(info, str);
        }
    }
    switch(PlayerDB[playerid][Direktorius])
    {
        case 0:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Nëra\n");
            strcat(info, str);
        }
        case 1:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Policijos departamento{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 2:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Medikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 3:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Taksi{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 5:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Mechanikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 7:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Lyderis: {FFFF00}Lucchese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 8:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}lyderis: {FFFF00}Genovese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 9:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}„Aro“{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 10:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Radistø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 11:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}S**{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
        case 21:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Direktorius: {FFFF00}Tolimûjø reisø vairuotojø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecameDir],PlayerDB[playerid][DirWarnings]);
            strcat(info, str);
        }
    }

    switch(PlayerDB[playerid][Pavaduotojas])
    {
        case 0:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Nëra\n");
            strcat(info, str);
        }
        case 1:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Policijos departamento{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 2:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Medikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 3:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Taksi{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 5:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Mechanikø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 7:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Lucchese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 8:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Genovese{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 9:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}„Aro“{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 10:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Radistø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 11:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}S**{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
        case 21:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Pavaduotojas: {FFFF00}Tolimûjø reisø vairuotojø{FFFFFF} | Pareiguose nuo: {FFFF00}%s{FFFFFF} | Áspëjimai: {FFFF00}%d/3\n",PlayerDB[playerid][DatePlayerBecamePav],PlayerDB[playerid][PavWarnings]);
            strcat(info, str);
        }
    }

    switch(PlayerDB[playerid][adminlvl])
    {
        case 0:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}Nëra\n");
        }
        case 1:
        {
            TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}I lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[playerid][AdminWarnings]);
            strcat(info, str);
        }
        case 2:
        {
            TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}II lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[playerid][AdminWarnings]);
            strcat(info, str);
        }
        case 3:
        {
            TimestampToDate(PlayerDB[playerid][AdminLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}III lygio{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n",Years, Month, Day, Hour, Minute,PlayerDB[playerid][AdminWarnings]);
            strcat(info, str);
        }
        case 4:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}IV lygio{FFFFFF} | Galioja neribotà laikà\n");
            strcat(info, str);
        }
        case 5:
        {
            format(str, sizeof(str), "{FFFF00}» {FFFFFF}Administratorius: {FFFF00}V lygio{FFFFFF} | Galioja neribotà laikà\n");
            strcat(info, str);
        }
    }
    if(PlayerDB[playerid][VIP] == 1)
    {

        TimestampToDate(PlayerDB[playerid][VIPLaikoPabaiga], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}VIP statusas: {FFFF00}Yra{FFFFFF} | Galioja iki: {FFFF00}%d-%02d-%02d %02d:%02d{FFFFFF} | Áspëjimai: {FFFF00}%i/3\n\n",Years, Month, Day, Hour, Minute,PlayerDB[playerid][VIPWarnings]);
    }
    else
    {
        format(str, sizeof(str), "{FFFF00}» {FFFFFF}VIP statusas: {FFFF00}Nëra\n\n");
    }
    strcat(info, str);
    format(str, sizeof(str), "{FFFF00}» {FFFFFF}Ðiandien praþaidæs serveryje: {FFFF00}%imin{FFFFFF} | Iðviso: {FFFF00}%dmin. \n",PlayerDB[playerid][SiandienZaista],PlayerDB[playerid][ZaistaTotal]);
    strcat(info, str);
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Profilio informacija", info, "Gerai","");
    return 1;
}
stock LoadGaragesSystem()
{
    //PRIE LIGONINES 22 GARAZAI
    new ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2590.0485840,629.3068850,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);
    GarazaiInfo[0][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2593.0715330,648.0211790,28.6287990,0.0000000,0.0000000,-90.3599930);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);
    GarazaiInfo[1][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2582.7832030,629.4827880,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);
    GarazaiInfo[2][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2585.9133300,647.9733280,28.6287990,0.0000000,0.0000000,-90.3600010);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);
    GarazaiInfo[3][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2575.6323240,629.3845210,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[4][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2578.7419430,648.1124880,28.6287990,0.0000000,0.0000000,-90.3600010);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[5][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2568.3952640,629.5546260,28.6287990,0.0000000,0.0000000,-90.0599980);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[6][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2571.6169430,648.2680660,28.6287990,0.0000000,0.0000000,-89.6999970);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[7][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2561.1833500,629.5324710,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[8][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2592.8500980,668.5521240,28.6287990,0.0000000,0.0000000,88.7400130);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[9][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2585.7270510,668.4771730,28.6287990,0.0000000,0.0000000,90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[10][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2564.4279790,648.2697750,28.6287990,0.0000000,0.0000000,-90.3600010);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[11][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2578.5649410,668.3936770,28.6287990,0.0000000,0.0000000,90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[12][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2571.4084470,668.2252810,28.6287990,0.0000000,0.0000000,90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[13][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2588.0593260,682.5584110,28.6287990,0.0000000,0.0000000,90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[14][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2580.8542480,682.5814210,28.6287990,0.0000000,0.0000000,90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[15][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2573.6787110,682.2932130,28.6287990,0.0000000,0.0000000,83.3399810);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[16][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2566.7756350,680.4566040,28.6287990,0.0000000,0.0000000,66.2399830);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[17][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2560.5339360,676.9780270,28.6287990,0.0000000,0.0000000,54.9599910);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[18][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2557.1845700,648.2015990,28.6287990,0.0000000,0.0000000,-90.3600010);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[19][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2553.9609380,629.4276120,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[20][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2546.9943850,629.3493040,28.6287990,0.0000000,0.0000000,-90.0000000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[21][GarazoVartai] = ObjektasTmp;
    //PRIE VM NETOLI PRIE BURGERSHOT GARAZAI 10
    ObjektasTmp = CreateDynamicObject(17951,-2297.426,-84.755,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[22][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2297.382,-91.930,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[23][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2297.369,-98.711,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[24][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2297.368,-105.458,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[25][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2297.315,-112.234,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[26][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2278.395,-84.839,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[27][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2278.417,-92.028,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[28][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2278.410,-98.766,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[29][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2278.359,-105.577,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);

    GarazaiInfo[30][GarazoVartai] = ObjektasTmp;
    ObjektasTmp = CreateDynamicObject(17951,-2278.307,-112.306,36.154,0.000,0.000,0.000);
    SetDynamicObjectMaterial(ObjektasTmp, 0, 12980, "sw_block10", "sw_woodslats2", 0);
    GarazaiInfo[31][GarazoVartai] = ObjektasTmp;

    new QueryString[256];
    mysql_format(connectionHandle, QueryString, 256, "UPDATE `garazai` SET `Nupirktas` = '0',`Savininkas` = 'Nera',`IkiKadaPirktas` = '0' WHERE `Nupirktas` = 1 AND `IkiKadaPirktas` < '%i';", gettime());
    mysql_function_query(connectionHandle, QueryString, false, "", "");
    mysql_function_query(connectionHandle, "SELECT `Nupirktas`,`Savininkas`,`IkiKadaPirktas` FROM `garazai`;", true, "OnLoadGarages", "");
}

forward OnLoadGarages();
public OnLoadGarages()
{
    for(new i = 0;i<cache_get_row_count();i++)
    {
        GarazaiInfo[i][GarazasNupirktas] = cache_get_row_int(i, 0);
        GetDynamicObjectPos(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ]);
        GetDynamicObjectRot(GarazaiInfo[i][GarazoVartai], GarazaiInfo[i][GCordsRX], GarazaiInfo[i][GCordsRY],GarazaiInfo[i][GCordsRZ]);
        if(GarazaiInfo[i][GarazasNupirktas] == 1)
        {
            new str[24];
            cache_get_row(i, 1, str);
            format(GarazaiInfo[i][GarazoSavininkas], 24, "%s", str);
            GarazaiInfo[i][GarazasNupirktasIki] = cache_get_row_int(i, 2);
            new string[256];
            format(string, 256, "Garaþas uþ kreditus (100 kreditø/30dienø)\nGaraþo numeris: {66ff66}%i\n{99cc33}Ðis garaþas yra iðnuomotas\nÐiuo metu garaþas priklauso {66ff66}%s", i,GarazaiInfo[i][GarazoSavininkas]);
            GarazaiInfo[i][GarazoLabel] = CreateDynamic3DTextLabel(string, 0x99cc33FF, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
        }
        else
        {
            new string[128];
            format(string, 128, "Garaþas uþ kreditus (100 kreditø/30dienø)\nGaraþo numeris: {66ff66}%i\n{99cc33}Ðis garaþas yra laisvas", i);
            GarazaiInfo[i][GarazoLabel] = CreateDynamic3DTextLabel(string, 0x99cc33FF, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
        }
    }
    return 1;
}

stock CheckGarages()
{
    for(new i = 0;i<GARAZU_SKAICIUS;i++)
    {
        if(GarazaiInfo[i][GarazasNupirktas] == 1)
        {
            if(GarazaiInfo[i][GarazasNupirktasIki] <= gettime())
            {
                new id;
                sscanf(GarazaiInfo[i][GarazoSavininkas], "u", id);
                if(IsPlayerConnected(id))
                {
                    SendClientMessage(id, -1, "");
                    SendClientMessage(id, GELTONA, "• Jûsø garaþo nuomos laikas baigësi.");
                    SendClientMessage(id, -1, "");
                }
                GarazaiInfo[i][GarazasNupirktas] = 0;
                GarazaiInfo[i][GarazasNupirktasIki] = 0;
                DestroyDynamic3DTextLabel(GarazaiInfo[i][GarazoLabel]);
                new string[128];
                format(string, 128, "Garaþas uþ kreditus (100 kreditø/30dienø)\nGaraþo numeris: {66ff66}%i\n{99cc33}Ðis garaþas yra laisvas", i);
                GarazaiInfo[i][GarazoLabel] = CreateDynamic3DTextLabel(string, 0x99cc33FF, GarazaiInfo[i][GCordsX], GarazaiInfo[i][GCordsY],GarazaiInfo[i][GCordsZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,0, 0);
            }
        }
    }
    return 1;
}
stock GarazuNuoma1Display(playerid)
{
    new info[400];
    for(new i = 0;i<22;i++)
    {
        if(i == 21)
        {
            if(GarazaiInfo[i][GarazasNupirktas] == 1)
            {
                new string[14];
                format(string, 14, "{FF0000}%i", i);
                strcat(info, string);
            }
            else
            {
                new string[14];
                format(string, 14, "{00FF00}%i", i);
                strcat(info, string);
            }
        }
        else
        {
            if(GarazaiInfo[i][GarazasNupirktas] == 1)
            {
                new string[14];
                format(string, 14, "{FF0000}%i\n", i);
                strcat(info, string);
            }
            else
            {
                new string[14];
                format(string, 14, "{00FF00}%i\n", i);
                strcat(info, string);
            }
        }
    }
    ShowPlayerDialog(playerid, 189, DIALOG_STYLE_LIST, "{AFAFAF}Serverio garaþai", info, "Rinktis","Atðaukti");
}
stock GarazuNuoma2Display(playerid)
{
    new info[400];
    for(new i = 22;i<32;i++)
    {
        if(i == 31)
        {
            if(GarazaiInfo[i][GarazasNupirktas] == 1)
            {
                new string[14];
                format(string, 14, "{FF0000}%i", i);
                strcat(info, string);
            }
            else
            {
                new string[14];
                format(string, 14, "{00FF00}%i", i);
                strcat(info, string);
            }
        }
        else
        {
            if(GarazaiInfo[i][GarazasNupirktas] == 1)
            {
                new string[14];
                format(string, 14, "{FF0000}%i\n", i);
                strcat(info, string);
            }
            else
            {
                new string[14];
                format(string, 14, "{00FF00}%i\n", i);
                strcat(info, string);
            }
        }
    }
    ShowPlayerDialog(playerid, 191, DIALOG_STYLE_LIST, "{AFAFAF}Serverio garaþai", info, "Rinktis","Atðaukti");
}
CMD:respawnall(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        for(new vehicleid = 0;vehicleid<=GetVehiclePoolSize();vehicleid++)
        {
            if(VehicleDB[vehicleid][VehicleForRent] == true || VehicleDB[vehicleid][VMMasina] == 1 || VehicleDB[vehicleid][TURGUS] == 1)
            {
                new bool:found = false;
                foreach(new i : Player)
                {
                    if(IsPlayerInVehicle(i, vehicleid))
                    {
                        found = true;
                        break;
                    }
                }
                if(IsTrailerAttachedToVehicle(vehicleid))
                {
                    new model = GetVehicleModel(vehicleid);
                    if(model == 435 || model == 450 || model == 584 || model == 591)
                    {
                        found = true;
                    }
                }
                if(found == false)
                {
                    if(VehicleDB[vehicleid][SuSvitureliais] == true)
                    {
                        VehicleDB[vehicleid][SuSvitureliais] = false;
                        DestroyObject(VehicleDB[vehicleid][SvitureliuObjektas]);
                        VehicleDB[vehicleid][SvitureliuObjektas]-=1;
                    }
                    VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                    SetVehicleToRespawn(vehicleid);
                }
            }
        }
        for(new JobIDToWorkWith = 1; JobIDToWorkWith <= 21;JobIDToWorkWith++)
        {
            if(JobIDToWorkWith == 21)
            {
                for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
                {
                    if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
                    {
                        new model = GetVehicleModel(vehicleid);
                        if(model == 435 || model == 450 || model == 584 || model == 591)
                        {
                           continue;
                        }
                        else
                        {
                            new bool:found = false;
                            foreach(new i : Player)
                            {
                                if(IsPlayerInVehicle(i, vehicleid))
                                {
                                    found = true;
                                    break;
                                }
                            }
                            if(found == false)
                            {
                                if(IsTrailerAttachedToVehicle(vehicleid))
                                {
                                    SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
                                }
                                VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                                SetVehicleToRespawn(vehicleid);
                            }
                        }
                    }
                }
                for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
                {
                    if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
                    {
                        new model = GetVehicleModel(vehicleid);
                        if(model == 435 || model == 450 || model == 584 || model == 591)
                        {
                            new bool:found = false;
                            for(new i = 0;i<=GetVehiclePoolSize();i++)
                            {
                                if(GetVehicleTrailer(i) == vehicleid)
                                {
                                    found = true;
                                }
                            }
                            if(found == false)
                            {
                                SetVehicleToRespawn(vehicleid);
                            }
                        }
                    }
                }

            }
            else
            {
                for(new vehicleid = 0;vehicleid <=GetVehiclePoolSize();vehicleid++)
                {
                    if(VehicleDB[vehicleid][DARBOID] == JobIDToWorkWith)
                    {
                        new bool:found = false;
                        foreach(new i : Player)
                        {
                            if(IsPlayerInVehicle(i, vehicleid))
                            {
                                found = true;
                                break;
                            }
                        }
                        if(found == false)
                        {
                            if(VehicleDB[vehicleid][SuSvitureliais] == true)
                            {
                                VehicleDB[vehicleid][SuSvitureliais] = false;
                                DestroyObject(VehicleDB[vehicleid][SvitureliuObjektas]);
                                VehicleDB[vehicleid][SvitureliuObjektas]-=1;
                            }
                            VehicleDB[vehicleid][Bendzinas] = DegaluTalpa[GetVehicleModel(vehicleid)-400];
                            SetVehicleToRespawn(vehicleid);
                        }
                    }
                }
            }
        }

        SendClientMessage(playerid, ZALIA, "Sëkmingai atstatëte visas nenaudojamas darbines maðinas.");
        new string[128];
        format(string, 128, "Serverio savininkas [{ff0000}%s(%i){cbecab}] praneða:",Vardas(playerid),playerid);
        SendClientMessageToAll(0xcbecabFF, string);
        SendClientMessageToAll(0xFF0000FF, "Atstaèiau visas nenaudojamas transporto priemonæs !");
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik serverio vyr.administratoriams.");
    }
    return 1;
}
CMD:darbografikas(playerid,params[])
{
	if(PlayerDB[playerid][Job] > 0)
	{
	    new info[2000];
	 	new string[300];
		switch(PlayerDB[playerid][Job])
		{
			case 1:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[1][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[1][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[1][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[1][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[1][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[1][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[1][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 2:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[2][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[2][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[2][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[2][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[2][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[2][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[2][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 4:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[4][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[4][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[4][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[4][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[4][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[4][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[4][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 5:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[5][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[5][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[5][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[5][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[5][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[5][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[5][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 9:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[9][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[9][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[9][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[9][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[9][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[9][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[9][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 10:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[10][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[10][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[10][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[10][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[10][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[10][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[10][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 11:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[11][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[11][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[11][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[11][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[11][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[11][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[11][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
   			case 21:
			{
			    format(string, 200, "Pirmadienis:\t\t%s\n", DarboInformacija[21][Pirmadienis]);
				strcat(info,string);
				format(string, 200, "Antradienis:\t\t%s\n", DarboInformacija[21][Antradienis]);
				strcat(info,string);
				format(string, 200, "Treciadienis:\t\t%s\n", DarboInformacija[21][Treciadienis]);
				strcat(info,string);
				format(string, 200, "Ketvirtadienis:\t\t%s\n", DarboInformacija[21][Ketvirtadienis]);
				strcat(info,string);
				format(string, 200, "Penktadienis:\t\t%s\n", DarboInformacija[21][Penktadienis]);
				strcat(info,string);
				format(string, 200, "Sestadienis:\t\t%s\n", DarboInformacija[21][Sestadienis]);
				strcat(info,string);
				format(string, 200, "Sekmadienis:\t\t%s\n\n", DarboInformacija[21][Sekmadienis]);
				strcat(info,string);
				strcat(info,"{E3F77E}» Darbo laikà gali redaguoti tik direktorius.\n");
				strcat(info,"{E3F77E}» Jeigu yra nustatytas netinkamas darbo laikas, praðome praneðti direktoriø priþiûrëtojui.");
				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{21ff00}Jûsø firmos darbo grafikas:", info, "Supratau", "");
			}
			default:
			{
				ErrorMsg(playerid,"• Neturite darbo laiko.");
			}
		}
	}
	return 1;
}
CMD:valdytipriziuretojus(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        mysql_function_query(connectionHandle,"SELECT `Name`,`DirektoriuPriziuretojas`,`UnBanPriziuretojas`,`PrivPriziuretojas`,`LyderiuPriziuretojas` FROM `players` WHERE `DirektoriuPriziuretojas` = 1 OR `UnBanPriziuretojas` = 1 OR `PrivPriziuretojas` = 1 OR `LyderiuPriziuretojas` = 1;",true,"OnValdytiPriziuretojus","d",playerid);
    }
    else
    {
        ErrorMsg(playerid,"Ði komanda tik serverio vyr.administratoriams.");
    }
    return 1;
}
forward OnValdytiPriziuretojus(playerid);
public OnValdytiPriziuretojus(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new DPName[24];
        new UBName[24];
        new PrivName[24];
        new MafName[24];
        new bool:PrizFound[5];
        new info[256];
        for(new i = 0;i<cache_get_row_count();i++)
        {
            if(cache_get_row_int(i, 1) == 1)
            {
                PrizFound[0] = true;
                cache_get_row(i, 0, DPName);
            }
            else if(cache_get_row_int(i, 2) == 1)
            {
                PrizFound[1] = true;
                cache_get_row(i, 0, UBName);
            }
            else if(cache_get_row_int(i, 4) == 1)
            {
                PrizFound[3] = true;
                cache_get_row(i, 0, PrivName);
            }
            else if(cache_get_row_int(i, 5) == 1)
            {
                PrizFound[4] = true;
                cache_get_row(i, 0, MafName);
            }
        }
        new str[84];
        if(PrizFound[0] == true)
        {
            format(str, 84, "Direktoriø priþiûrëtojas - %s\n", DPName);
            strcat(info, str);
        }
        else
        {
            format(str, 84, "Direktoriø priþiûrëtojas - Nëra\n");
            strcat(info, str);
        }
        if(PrizFound[1] == true)
        {
            format(str, 84, "UnBan priþiûrëtojas - %s\n", UBName);
            strcat(info, str);
        }
        else
        {
            format(str, 84, "UnBan priþiûrëtojas - Nëra\n");
            strcat(info, str);
        }
        if(PrizFound[2] == true)
        {
            format(str, 84, "Privilegijas turinèiø þaidëjø priþiûrëtojas - %s\n", PrivName);
            strcat(info, str);
        }
        else
        {
            format(str, 84, "Privilegijas turinèiø þaidëjø priþiûrëtojas - Nëra\n");
            strcat(info, str);
        }
        if(PrizFound[3] == true)
        {
            format(str, 84, "Lyderiø priþiûrëtojas - %s\n", PrivName);
            strcat(info, str);
        }
        else
        {
            format(str, 84, "Lyderiø priþiûrëtojas - Nëra\n");
            strcat(info, str);
        }
        ShowPlayerDialog(playerid, 205, DIALOG_STYLE_LIST,  "{AFAFAF}Priþiûrëtojø valdymas", info, "Rinktis", "Atðaukti");
    }
    else
    {
        ShowPlayerDialog(playerid, 205, DIALOG_STYLE_LIST, "{AFAFAF}Priþiûrëtojø valdymas", "Direktoriø priþiûrëtojas - Nëra\nUnban priþiûrëtojas - nëra\nPrivilegijuotø þaidëjø priþiûrëtojas - Nëra\nLyderiø priþiûrëtojas - Nëra", "Rinktis", "Atðaukti");
    }

    return 1;
}
forward OnValdytiPriziuretojus1(playerid);
forward OnValdytiPriziuretojus2(playerid);
forward OnValdytiPriziuretojus3(playerid);
forward OnValdytiPriziuretojus4(playerid);
forward OnValdytiPriziuretojus5(playerid);

public OnValdytiPriziuretojus1(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 206, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Direktoriø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
    }
    else
    {
        ShowPlayerDialog(playerid, 207, DIALOG_STYLE_MSGBOX, "{AFAFAF}Priþiûrëtojo nuðalinimas", "Ar norite nuðalinti dabartiná Direktoriø priþiûrëtojà?", "Taip", "Ne");
    }
    return 1;
}
public OnValdytiPriziuretojus2(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 208, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà UnBan priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
    }
    else
    {
        ShowPlayerDialog(playerid, 209, DIALOG_STYLE_MSGBOX, "{AFAFAF}Priþiûrëtojo nuðalinimas", "Ar norite nuðalinti dabartiná UnBan priþiûrëtojà?", "Taip", "Ne");
    }
    return 1;
}
public OnValdytiPriziuretojus4(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 212, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Privilegijuotø þaidëjø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
    }
    else
    {
        ShowPlayerDialog(playerid, 213, DIALOG_STYLE_MSGBOX, "{AFAFAF}Priþiûrëtojo nuðalinimas", "Ar norite nuðalinti dabartiná Privilegijuotø þaidëjø priþiûrëtojà?", "Taip", "Ne");
    }
    return 1;
}
public OnValdytiPriziuretojus5(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ShowPlayerDialog(playerid, 218, DIALOG_STYLE_INPUT, "{AFAFAF}Priþiûrëtojo skyrimas", "Ar norite paskirti naujà Privilegijuotø þaidëjø priþiûrëtojà?\nJei norite tai padaryti,áraðykite pilnà þaidëjo V_P ir ðis þaidëjas taps priþiûrëtoju.", "Skirti", "Atgal");
    }
    else
    {
        ShowPlayerDialog(playerid, 219, DIALOG_STYLE_MSGBOX, "{AFAFAF}Priþiûrëtojo nuðalinimas", "Ar norite nuðalinti dabartiná Privilegijuotø þaidëjø priþiûrëtojà?", "Taip", "Ne");
    }
    return 1;
}
CMD:darbai(playerid,params[])
{
    new info[1900];
    strcat(info,"{CBECAB}Ðiuo metu serveryje egzistuojantys darbai su pakvietimu:\n\n");
    strcat(info,"\t{CBECAB}1. {80D62D}Policijos {CBECAB}pareigûnas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}2. Spec. bûrio „{80D62D}Aras{CBECAB}“ darbuotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}3. {80D62D}Taksistas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}4. {80D62D}Tolimûjø reisø {CBECAB}vairuotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}5. {80D62D}Autoserviso {CBECAB}darbuotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}6. {80D62D}Medicinos {CBECAB}darbuotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}7. {80D62D}Radijos {CBECAB}darbuotojas {80D62D} 0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}8. „{80D62D}Genovese{CBECAB}“ mafijozas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}9. „{80D62D}Lucchese{CBECAB}“ mafijozas {80D62D}0 {CBECAB}XP.\n\n");
    strcat(info,"{CBECAB}Ðiuo metu serveryje egzistuojantys darbai be pakvietimo:\n\n");
    strcat(info,"\t{CBECAB}1. {80D62D}Maisto {CBECAB}iðveþiotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}2. {80D62D}Valytojas 0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}3. {80D62D}Autobusø {CBECAB}vairuotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}4. {80D62D}Gaisrininkas 0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}5. „{80D62D}Burger Shot{CBECAB}“ uþkandinës iðveþiotojas {80D62D}0 {CBECAB}XP.\n");
    strcat(info,"\t{CBECAB}6. „{80D62D}Oro ir Vandens{CBECAB}“ kurjeris {80D62D}0 {CBECAB}XP.\n");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Darbai", info, "Gerai", "");
    return 1;
}
CMD:darbas(playerid,params[])
{
    cmd_darbai(playerid,"");
    return 1;
}
stock ReStreamVehicle(vehicleid)
{
    new VehicleWorld = GetVehicleVirtualWorld(vehicleid);
    new Float:Cords[3];
    GetVehiclePos(vehicleid, Cords[0], Cords[1], Cords[2]);
    SetVehicleVirtualWorld(vehicleid, 232);
    SetTimerEx("SetVehicleVirtualWorldID", 1000, false, "iifff", vehicleid,VehicleWorld,Cords[0], Cords[1], Cords[2]);

}
forward SetVehicleVirtualWorldID(vehicleid,vw,Float:CordX,Float:CordY,Float:CordZ);
public SetVehicleVirtualWorldID(vehicleid,vw,Float:CordX,Float:CordY,Float:CordZ)
{
    SetVehicleVirtualWorld(vehicleid,vw);
    SetVehiclePos(vehicleid, CordX,CordY,CordZ);
    return 1;
}
CMD:garazas(playerid,params[])
{
    new Found = 0;
    for(new g = 0;g<32;g++)
    {
        if(GarazaiInfo[g][GarazasNupirktas] == 1)
        {
            if(strcmp(GarazaiInfo[g][GarazoSavininkas], Vardas(playerid), true) == 0)
            {
                Found = 1;
                new QueryString[128];
                mysql_format(connectionHandle, QueryString, 128, "SELECT FROM_UNIXTIME(`IkiKadaPirktas`) AS `Data` FROM `garazai` WHERE `ID` = '%i' LIMIT 1;", g+1);
                mysql_function_query(connectionHandle,QueryString,true,"CheckGarageExpirationDate","dd",playerid,g);
                break;
            }
        }
    }
    if(Found == 0)
    {
        ErrorMsg(playerid,"• Jûs neturite garaþo.");
    }
    return 1;
}
forward CheckGarageExpirationDate(playerid,garageID);
public CheckGarageExpirationDate(playerid,garageID)
{
    new GaliojimoPabaigosData[24];
    cache_get_row(0, 0, GaliojimoPabaigosData);
    new info[256];
    format(info,256,"{FFFF00}» {FFFFFF}Jûsø nuomojamo garaþo numeris: {FFFF00}%i.\n{FFFF00}» {FFFFFF}Jûsø garaþo galiojimo laikas iki: {FFFF00}%s.",garageID,GaliojimoPabaigosData);
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Garaþo informacija", info, "Gerai","");
}
CMD:bomboslaikas(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]) || IsJobFromLaw(PlayerDB[playerid][Job]))
    {
        if(BankExplodesAt > 0)
        {
            new string[128];
            new Min,Sek;
            Sek = BankExplodesAt-gettime();
            while(Sek >= 60)
            {
                Min+=1;
                Sek-=60;
            }
            format(string, 128, "• Bomba sprogs uþ %d min. %0d sek.", Min,Sek);
            SendClientMessage(playerid, RAUDONA, string);
        }
        else
        {
            ErrorMsg(playerid,"• Nëra padëtos bombos.");
        }

    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijoms ir teisësaugai.");
    }
    return 1;
}
///


CMD:bendradarbiai(playerid,params[])
{
    if(PlayerDB[playerid][Job] > 0)
    {
        switch(PlayerDB[playerid][Job])
        {
            case 1:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 2:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;

                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Pagydimai: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job2XP],PlayerDB[i][PagydimaiTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Pagydimai: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job2XP],PlayerDB[i][PagydimaiTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Pagydimai: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job2XP],PlayerDB[i][PagydimaiTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Pagydimai: %i | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job2XP],PlayerDB[i][PagydimaiTotal],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 4:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job4XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job4XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job4XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job4XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 5:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job5XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job5XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job5XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job5XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 9:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job9XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job9XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job9XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job9XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }

            case 7:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job7XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job7XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job7XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job7XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 8:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job8XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job8XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job8XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job8XP],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 10:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job10XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job10XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job10XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Iðkvietimai: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job10XP],PlayerDB[i][AtvykimaiTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 11:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Baudos: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job1XP],PlayerDB[i][BaudosTotal],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }
            case 21:
            {
                new Count = 0;
                new info[3048];
                for(new i = 0;i<=GetPlayerPoolSize();i++)
                {
                    if(!IsPlayerConnected(i))
                    {
                        continue;
                    }
                    if(PlayerDB[i][Loaded] == 1)
                    {
                        if(PlayerDB[i][Job] == PlayerDB[playerid][Job])
                        {
                            Count+=1;
                            new bool:AFK,bool:Dirba;
                            AFK = PlayerDB[i][AfkState];
                            new RangoPavadinimoStr[32];
                            switch(PlayerDB[i][Rangas])
                            {
                                case 1:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango1Pavadinimas]);
                                }
                                case 2:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango2Pavadinimas]);
                                }
                                case 3:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango3Pavadinimas]);
                                }
                                case 4:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango4Pavadinimas]);
                                }
                                case 5:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango5Pavadinimas]);
                                }
                                case 6:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango6Pavadinimas]);
                                }
                                case 7:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango7Pavadinimas]);
                                }
                                case 8:
                                {
                                    format(RangoPavadinimoStr, 32, "%s", DarboInformacija[PlayerDB[i][Job]][Rango8Pavadinimas]);
                                }
                            }
                            if(IsPlayerInAnyVehicle(i))
                            {
                                new vehicleid = GetPlayerVehicleID(i);
                                if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
                                {
                                    Dirba = true;
                                }
                            }
                            new string[200];
                            switch(AFK)
                            {
                                case true:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Nuveþta kroviniø: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job21XP],PlayerDB[i][NuveztiKroviniai],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Nuveþta kroviniø: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | AFK | \n", Count,Vardas(i),PlayerDB[i][Job21XP],PlayerDB[i][NuveztiKroviniai],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                                case false:
                                {
                                    switch(Dirba)
                                    {
                                        case true:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Nuveþta kroviniø: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | DIRBA |\n", Count,Vardas(i),PlayerDB[i][Job21XP],PlayerDB[i][NuveztiKroviniai],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                        case false:
                                        {
                                            format(string, 200, "%i. %s | Darbo patirtis: %iXP | Nuveþta kroviniø: %i |Rangas: „%s“ (%i) | Ðiandien praþaidë: %imin | Ðiandien pradirbo: %imin | \n", Count,Vardas(i),PlayerDB[i][Job21XP],PlayerDB[i][NuveztiKroviniai],RangoPavadinimoStr,PlayerDB[i][Rangas],PlayerDB[i][SiandienZaista],PlayerDB[i][TimeWorkedWithCarToday]);
                                        }
                                    }
                                }
                            }
                            strcat(info,string);
                        }
                    }
                }
                if(Count > 0)
                {
                    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Bendradarbiai", info, "Gerai","");
                }
                else
                {
                    ErrorMsg(playerid,"• Neturite prisijungusiø bendradarbiø.");
                }
            }

        }
    }
    else
    {
        ErrorMsg(playerid,"• Jûs esate bedarbis.");
    }
    return 1;
}
CMD:taisykles(playerid,params[])
{
    ShowPlayerDialog(playerid, 216, DIALOG_STYLE_LIST, "{AFAFAF}Serverio taisyklës", "Þaidimo serveryje taisyklës\nPapildomos taisyklës VIP nariams\nPapildomos taisyklës Administratoriams", "Rinktis", "Atðaukti");
    return 1;
}

CMD:ulyderi(playerid,params[])
{
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new TargetID,JobID;
        if(sscanf(params, "ui", TargetID,JobID))
        {
            UsageMessage(playerid,"• Uþdëti direktoriaus statusà: /ulyderi [V_P/ID] [1 / 2].");
        }
        else
        {
            if(IsPlayerConnected(TargetID))
            {
                if(PlayerDB[TargetID][Direktorius] > 0 && (PlayerDB[TargetID][Direktorius] != 7 && PlayerDB[TargetID][Direktorius] != 8))
                {
                    ErrorMsg(playerid,"• Pasirinktas þaidëjas yra kaþkoks direktorius.");
                    return 1;
                }
                switch(JobID)
                {
                    case 1:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 7)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios mafijos lyderis.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 7;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas Lucchese mafijos krikðtatëviu.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Lucchese mafijos krikðtatëviu.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 2:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 8)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip yra ðios mafijos lyderis.");
                        }
                        else
                        {
                            new string[128];
                            PlayerDB[TargetID][Direktorius] = 8;
                            SendClientMessage(TargetID, ZALIA, " Jûs buvote paskirtas Genovese mafijos krikðtatëviu.");
                            format(string, 128, "Þaidëjas %s sëkmingai buvo paskirtas Genovese mafijos krikðtatëviu.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                            new Year,Month,Day;
                            getdate(Year, Month, Day);
                            mysql_format(connectionHandle, string, 128, "UPDATE `players` SET `DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;", Year,Month,Day,Vardas(TargetID));
                            mysql_function_query( connectionHandle, string, false, "", "");
                        }
                    }
                    case 0:
                    {
                        if(PlayerDB[TargetID][Direktorius] == 0)
                        {
                            ErrorMsg(playerid,"Þaidëjas jau ir taip nëra lyderis.");
                        }
                        else
                        {
                            new string[144];
                            PlayerDB[TargetID][Direktorius] = 0;
                            SendClientMessage(TargetID, RAUDONA, "Jûs buvote nuðalintas nuo lyderio pareigø.");
                            SendClientMessage(TargetID, GELTONA, "Dëkojame uþ darbà,jeigu galvojate,kad buvote nuðalintas be prieþasties,praðome praneðti serverio vyr.administratoriams.");
                            format(string, 144, "Þaidëjas %s sëkmingai buvo nuðalintas nuo lyderio pareigø.",Vardas(TargetID));
                            SendClientMessage(playerid, ZALIA, string);
                        }
                    }
                    default:
                    {
                        ErrorMsg(playerid,"• Blogai nurodytas mafijos ID. Lucchese - 1;Genovese - 2 ; Nuimti - 0;");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:ulyderioff(playerid,params[])
{
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Target[24],DarboNumber;
        if(sscanf(params, "ds[24]", DarboNumber,Target))
        {
            UsageMessage(playerid,"• Uþdëti direktoriaus statusà atsijungusiam þaidëjui: /udirektoriuoff [Darbo ID] [V_P].");
        }
        else
        {
            if(IsValidNickName(Target))
            {
                if(DarboNumber == 1)
                {
                    new QueryString[180];
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    mysql_format(connectionHandle, QueryString, 180, "UPDATE `players` SET `Direktorius` = '7',`DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;",Year,Month,Day,Target);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, ZALIA, "• Jei teisingai nurodëte þaidëjo vardà lyderio statusas bus pakeistas.");
                }
                else if(DarboNumber == 2)
                {
                    new QueryString[180];
                    new Year,Month,Day;
                    getdate(Year, Month, Day);
                    mysql_format(connectionHandle, QueryString, 180, "UPDATE `players` SET `Direktorius` = '8',`DatePlayerBecameDir` = '%04d-%02d-%02d' WHERE `Name` = '%e' LIMIT 1;",Year,Month,Day,Target);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, ZALIA, "• Jei teisingai nurodëte þaidëjo vardà lyderio statusas bus pakeistas.");
                }
                else if(DarboNumber == 0)
                {
                    new QueryString[180];
                    mysql_format(connectionHandle, QueryString, 180, "UPDATE `players` SET `Direktorius` = '0' WHERE `Name` = '%e' LIMIT 1;",Target);
                    mysql_function_query(connectionHandle, QueryString, false, "", "");
                    SendClientMessage(playerid, ZALIA, "• Jei teisingai nurodëte þaidëjo vardà lyderio statusas bus nuimtas.");
                }
                else
                {
                    ErrorMsg(playerid,"• Blogas mafijos numeris: Lucchese 1, Genovese 2. Nuimti - 0;");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas V_P");
            }
        }
        return 1;
    }
    else
    {
        return 0;
    }
}
CMD:mr(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]) || PlayerDB[playerid][LyderiuPriziuretojas] == 1)
    {
        if(PlayerDB[playerid][MutedPlayer] > 0)
        {
            new string[144];
            format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
            SendClientMessage(playerid, RAUDONA, string);
            return 1;
        }
        if(isnull(params))
        {
            UsageMessage(playerid,"Mafijø bendra racija: /mr [Tekstas].");
        }
        else
        {
            if(MafijuBendraRacijaOff == true)
            {
                ErrorMsg(playerid,"• Lyderiø priþiûrëtojas yra iðjungæs bendràjà mafijø racijà.");
                return 1;
            }
            new string[144];
            switch(PlayerDB[playerid][Job])
            {
                case 7:
                {
                    format(string, 144, "[Mafijø bendra racija] Lucchese narys {FFC50D}%s(%i): ", Vardas(playerid),playerid);
                }
                case 8:
                {
                    format(string, 144, "[Mafijø bendra racija] Genovese narys {FFC50D}%s(%i): ", Vardas(playerid),playerid);
                }
                default:
                {
                    format(string, 144, "[Mafijø bendra racija] Lyderiø priþiûrëtojas {FFC50D}%s(%i): ", Vardas(playerid),playerid);
                }
            }
            strcat(string, params);
            for(new i = 0;i<= GetPlayerPoolSize();i++)
            {
                if(IsJobFromMafia(PlayerDB[i][Job]) || PlayerDB[i][LyderiuPriziuretojas] == 1)
                {
                    SendClientMessage(i, 0xFFFF01FF, string);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijoms.");
    }
    return 1;
}
CMD:ijungtimr(playerid,params[])
{
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        if(MafijuBendraRacijaOff == true)
        {
            MafijuBendraRacijaOff = false;
            SendClientMessage(playerid, ZALIA, "• Sëkmingai ájungëte /mr.");
            for(new i = 0;i<= GetPlayerPoolSize();i++)
            {
                if(IsJobFromMafia(PlayerDB[i][Job]) || PlayerDB[i][LyderiuPriziuretojas] == 1)
                {
                    SendClientMessage(i, 0xFFFF01FF, "[Mafijø bendra racija] Sistema: Lyderiø priþiûrëtojas ájungë bendràjà mafijø racijà.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Racija jau ir taip ájungta.");
        }
        return 1;
    }
    return 0;
}
CMD:isjungtimr(playerid,params[])
{
    if(PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        if(MafijuBendraRacijaOff == false)
        {
            MafijuBendraRacijaOff = true;
            SendClientMessage(playerid, ZALIA, "• Sëkmingai iðjungëte /mr.");
            for(new i = 0;i<= GetPlayerPoolSize();i++)
            {
                if(IsJobFromMafia(PlayerDB[i][Job]) || PlayerDB[i][LyderiuPriziuretojas] == 1)
                {
                    SendClientMessage(i, 0xFFFF01FF, "[Mafijø bendra racija] Sistema: Lyderiø priþiûrëtojas iðjungë bendràjà mafijø racijà.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Racija jau ir taip iðjungta.");
        }
        return 1;
    }
    return 0;
}
CMD:sistorija(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Direktorius]) || IsJobFromMafia(PlayerDB[playerid][Pavaduotojas]))
    {
        new QueryString[128];
        mysql_format(connectionHandle, QueryString, 128, "SELECT `Irasas` FROM `sandelioistorija` WHERE `DarboID` = %i OR `DarboID` = %i ORDER BY `ID` DESC LIMIT 30;", PlayerDB[playerid][Direktorius],PlayerDB[playerid][Pavaduotojas]);
        mysql_function_query( connectionHandle, QueryString, true, "LoadSandelioIstorija", "d", playerid);
    }
    else
    {
        ErrorMsg(playerid,"• Tik mafijø direktoriams ir jø pavaduotojams.");
    }
    return 1;
}
forward LoadSandelioIstorija(playerid);
public LoadSandelioIstorija(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Nëra kà parodyti, istorijos þurnalas tusèias.");
    }
    else
    {
        new info[2500];
        for(new row = 0;row<cache_get_row_count();row++)
        {
            if(row > 0)
            {
                strcat(info, "\n");
            }
            new string[128];
            new Irasas[128];
            cache_get_row(row, 0, Irasas);
            format(string, 128, "%i. %s", row+1,Irasas);
            strcat(info, string);
        }
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Sandelio þurnalas", info, "Gerai", "");
    }
    return 1;
}
CMD:atsiimti(playerid,params[])
{
    new QueryString[128];
    mysql_format(connectionHandle, QueryString, 128, "SELECT `ID`,`Kiekis` FROM `atsiimtikreditus` WHERE `Nick` = '%e';", Vardas(playerid));
    mysql_function_query( connectionHandle, QueryString, true, "KredituAtsiimimas", "d", playerid);
    return 1;
}
forward KredituAtsiimimas(playerid);
public KredituAtsiimimas(playerid)
{
    if(cache_get_row_count() == 0)
    {
        ErrorMsg(playerid,"• Nëra kà atsiimti.");
    }
    else
    {
        new KredituSkaicius = 0;
        for(new row = 0;row<cache_get_row_count();row++)
        {
            new QueryString[64];
            mysql_format(connectionHandle, QueryString, 64, "DELETE FROM `atsiimtikreditus` WHERE `ID` = '%i';", cache_get_row_int(row, 0));
            mysql_function_query( connectionHandle, QueryString, false, "", "");
            KredituSkaicius+= cache_get_row_int(row, 1);
        }
        PlayerDB[playerid][Credits]+=KredituSkaicius;
        new string[64];
        format(string, 64, "• Sëkmingai atsiëmete %s kreditø(-us).", AddPoints(KredituSkaicius));
        SendClientMessage(playerid, GELTONA, string);
    }
    return 1;
}
CMD:mapp(playerid,params[])
{
    new id;
    if(sscanf(params, "u", id))
    {
        UsageMessage(playerid,"Þaidëjo ieðkojimas: /mapp [V_P/ID].");
    }
    else
    {
        if(IsPlayerConnected(id))
        {
            if(GetPlayerInterior(playerid) == GetPlayerInterior(id) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && PlayerDB[id][PlayerSpectatesOther] == false)
            {
                new Float:Cords[3];
                GetPlayerPos(id, Cords[0], Cords[1], Cords[2]);
                new message[144],Float:Atstumas;
                Atstumas = GetPlayerDistanceFromPoint(playerid, Cords[0],Cords[1],Cords[2]);
                SetPlayerCheckpoint(playerid, Cords[0], Cords[1], Cords[2], 2.5);
                SetPlayerMapIcon(playerid, 97, Cords[0],Cords[1],Cords[2], 0, 0xFF0000FF, MAPICON_GLOBAL);

                format(message, 128, "• {FFFFFF}Þaidëjas {AD5BFF}%s {FFFFFF}yra {AD5BFF}%0.2f KM {FFFFFF}nuo jûsø, jis paþymëtas þemëlapyje.", Vardas(id),Atstumas / 1000);
                SendClientMessage(playerid, 0xAD5BFFFF, message);
            }
            else
            {
                ErrorMsg(playerid,"• Þaidëjo vietos nustatyti negalime. Tikriausiai vienas ið jûsø esate pastate arba name.");
            }
        }
    }
    return 1;
}
CMD:hack(playerid,params[])
{
    new id,reason[128];
    if(sscanf(params, "us[128]", id,reason))
    {
        UsageMessage(playerid,"• Praneðti apie sukèiaujantá þaidëjà: /hack [V_P/ID] [Prieþastis].");
    }
    else
    {
        if(IsPlayerConnected(id))
        {
            if(strlen(reason) >= 3)
            {
                if(strlen(reason) > 40)
                {
                    new string[128];
                    format(string, 128, "%s(%i) praneðë apie galimà sukèiø %s(%i): %.40s", Vardas(playerid),playerid,Vardas(id),id,reason);
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][adminlvl] > 0 || i == playerid)
                        {
                            SendClientMessage(i, -1, string);
                            SendClientMessage(i, -1, reason[40]);
                        }
                    }
                }
                else
                {
                    new string[128];
                    format(string, 128, "%s(%i) praneðë apie galimà sukèiø %s(%i): %s", Vardas(playerid),playerid,Vardas(id),id,reason);
                    foreach(new i : Player)
                    {
                        if(PlayerDB[i][adminlvl] > 0 || i == playerid)
                        {
                            SendClientMessage(i, -1, string);
                        }
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Prieþastis yra per trumpa.");
            }
        }
    }
    return 1;
}
CMD:isjungtiserveri(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        SendRconCommand("password Servkvlqld");
        SendRconCommand("hostname Serveris yra iðjungiamas arba perkraunamas,praðome palaukti.");

        for(new i = 0;i<=GetPlayerPoolSize();i++)
        {
            SendClientMessage(i, RAUDONA, "• Serveris iðjungiamas praðome sugryþti veliau.");
            Kick(i);
        }
        SetTimer("TurnServerOff", 30000, false);
    }
    return 1;
}
forward TurnServerOff();
public TurnServerOff()
{
    SaveJobsFunds();
    SaveVehiclesInStocks();
    SavePavaduotojai();
    foreach(new i : Player)
    {
        if(PlayerDB[i][Loaded] == 1)
        {
            if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
            {
                SetVehicleVelocity(GetPlayerVehicleID(i), 0, 0, 0);
            }
            SavePlayerData(i);
            if(PlayerDB[i][GasStationTimerRunsOrl] == true)
            {
                KillTimer(PlayerDB[i][GasStationTimerOrl]);
                PlayerDB[i][GasStationTimerRunsOrl] = false;
            }
            if(PlayerDB[i][PlayedMinuteTimer] > 0)
            {
                KillTimer(PlayerDB[i][PlayedMinuteTimer]);
                PlayerDB[i][PlayedMinuteTimer] = -1;
            }
            if(PlayerDB[i][PlacedKliutis1] == true)
            {
                DestroyDynamicObject(PlayerDB[i][Kliutis1Object]);
                DestroyDynamic3DTextLabel(PlayerDB[i][Kliutis1ObjectLabel]);
                PlayerDB[i][PlacedKliutis1] = false;
            }
            if(PlayerDB[i][PlacedKliutis2] == true)
            {
                DestroyDynamicObject(PlayerDB[i][Kliutis2Object]);
                DestroyDynamic3DTextLabel(PlayerDB[i][Kliutis2ObjectLabel]);
                PlayerDB[i][PlacedKliutis2] = false;
            }
            if(PlayerDB[i][OwnedVehicle1] > 0)
            {
                SaveOwnedVehicle(PlayerDB[i][OwnedVehicle1]);
                DestroyVehicle(PlayerDB[i][OwnedVehicle1]);
            }
            if(PlayerDB[i][OwnedVehicle2] > 0)
            {
                SaveOwnedVehicle(PlayerDB[i][OwnedVehicle2]);
                DestroyVehicle(PlayerDB[i][OwnedVehicle2]);
            }
        }
    }
    mysql_close(connectionHandle);
    SendRconCommand("exit");
    return 1;
}
stock SetPlayerSkinEx(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    if(PlayerDB[playerid][Surakintas] == false && PlayerDB[playerid][Suristas] == false)
    {
        TogglePlayerControllable(playerid, true);
    }
    return 1;
}
CMD:atsisakyti(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0)
    {
        ShowPlayerDialog(playerid, 221, DIALOG_STYLE_MSGBOX, "{AFAFAF}", "Ar tikrai norite atsisakyti direktoriaus posto?\n{FF0000}Po pasirinkimo savo veiksmø negalësite atðaukti.", "Taip","Ne");
    }
    else if(PlayerDB[playerid][Pavaduotojas] > 0)
    {
        ShowPlayerDialog(playerid, 222, DIALOG_STYLE_MSGBOX, "{AFAFAF}", "Ar tikrai norite atsisakyti pavaduotojo posto?\n{FF0000}Po pasirinkimo savo veiksmø negalësite atðaukti.", "Taip","Ne");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik direktoriams ir pavaduotojams.");
    }
    return 1;
}
CMD:prisijungimai(playerid,params[])
{
    new QueryString[145];
    mysql_format(connectionHandle, QueryString, 145, "SELECT `IP`,FROM_UNIXTIME(`Data`) AS `Date` FROM `prisijungimai` WHERE `Vardas` = '%e' ORDER BY `Data` DESC LIMIT 5;", Vardas(playerid));
    mysql_function_query( connectionHandle, QueryString, true, "OnPlayerRequestLogginList", "d", playerid);
    return 1;
}
forward OnPlayerRequestLogginList(playerid);
public OnPlayerRequestLogginList(playerid)
{
    new info[800];
    new str[90];
    format(str, 90, "Paskutiniai 5 prisijungimai á %s vartotojà:\n\n", Vardas(playerid));
    strcat(info,str);
    for(new i = 0;i<cache_get_row_count();i++)
    {
        new IP[16];
        new Date[25];
        cache_get_row(i, 0, IP);
        cache_get_row(i, 1, Date);
        format(str, 90, "%i. %s buvo prisijungiama ið: %s IP adreso.\n",i+1, Date,IP);
        strcat(info, str);
    }
    strcat(info,"\nManote jog prie jûsø vartotojo Vardas_Pavardë prisijungë ne jûs? Susisiekite su pagr.administracija þaidime arba forume !");
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Paskutiniai 5 prisijungimai", info, "Gerai","");
}
CMD:dchat(playerid,params[])
{
    if(PlayerDB[playerid][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
    {
		if(PlayerDB[playerid][MutedPlayer] > 0)
		{
	        new string[144];
	        format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti, kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
	        SendClientMessage(playerid, RAUDONA, string);
	        return 1;
    	}
        if(isnull(params))
        {
            UsageMessage(playerid,"• Direktoriø bei pavaduotojø slaptas susiraðinëjimas: /dchat [Tekstas].");
        }
        else
        {
            new string[128];
            switch(PlayerDB[playerid][Direktorius])
            {
                case 1:
                {
                    format(string, 128, "[Valdþios pokalbis] Policijos dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 2:
                {
                    format(string, 128, "[Valdþios pokalbis] Medikø dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 4:
                {
                    format(string, 128, "[Valdþios pokalbis] Taksi dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 5:
                {
                    format(string, 128, "[Valdþios pokalbis] Mechanikø dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 7:
                {
                    format(string, 128, "[Valdþios pokalbis] Lucchese vadas %s(%i): ",Vardas(playerid),playerid);
                }
                case 8:
                {
                    format(string, 128, "[Valdþios pokalbis] Genovese vadas %s(%i): ",Vardas(playerid),playerid);
                }
                case 9:
                {
                    format(string, 128, "[Valdþios pokalbis] Spec. bûrio „Aras“ dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 10:
                {
                    format(string, 128, "[Valdþios pokalbis] Radistø dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 11:
                {
                    format(string, 128, "[Valdþios pokalbis] S** dir. %s(%i): ",Vardas(playerid),playerid);
                }
                case 21:
                {
                    format(string, 128, "[Valdþios pokalbis] Fûristø dir. %s(%i): ",Vardas(playerid),playerid);
                }
            }
            switch(PlayerDB[playerid][Pavaduotojas])
            {
                case 1:
                {
                    format(string, 128, "[Valdþios pokalbis] Policijos pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 2:
                {
                    format(string, 128, "[Valdþios pokalbis] Medikø pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 4:
                {
                    format(string, 128, "[Valdþios pokalbis] Taksi pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 5:
                {
                    format(string, 128, "[Valdþios pokalbis] Mechanikø pavaduotojas. %s(%i): ",Vardas(playerid),playerid);
                }
                case 7:
                {
                    format(string, 128, "[Valdþios pokalbis] Lucchese padejëjas %s(%i): ",Vardas(playerid),playerid);
                }
                case 8:
                {
                    format(string, 128, "[Valdþios pokalbis] Genovese padejëjas %s(%i): ",Vardas(playerid),playerid);
                }
                case 9:
                {
                    format(string, 128, "[Valdþios pokalbis] Spec. bûrio „Aras“ pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 10:
                {
                    format(string, 128, "[Valdþios pokalbis] Radistø pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 11:
                {
                    format(string, 128, "[Valdþios pokalbis] S** pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 21:
                {
                    format(string, 128, "[Valdþios pokalbis] Fûristø pav. %s(%i): ",Vardas(playerid),playerid);
                }
            }
            strcat(string, params, 128);
            for(new i = 0;i<=GetPlayerPoolSize();i++)
            {
                if(PlayerDB[i][Direktorius] > 0 || PlayerDB[playerid][Pavaduotojas] > 0)
                {
                    SendClientMessage(i, 0xadc359FF, string);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Tokios komandos nëra. Visos komandos: /komandos");
    }
    return 1;
}
/*CMD:pchat(playerid,params[])
{
    if(PlayerDB[playerid][Pavaduotojas] > 0)
    {
        if(isnull(params))
        {
            UsageMessage(playerid,"• Pavaduotojø slaptas susiraðinëjimas: /pchat [Þinutë].");
        }
        else
        {
            new string[128];
            switch(PlayerDB[playerid][Pavaduotojas])
            {
                case 1:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Policijos pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 2:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Medikø pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 4:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Taxi pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 5:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Mechanikø pavaduotojas. %s(%i): ",Vardas(playerid),playerid);
                }
                case 7:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Lucchese padejëjas %s(%i): ",Vardas(playerid),playerid);
                }
                case 8:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Genovese padejëjas %s(%i): ",Vardas(playerid),playerid);
                }
                case 9:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Spec. bûrio „Aras“ pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 10:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Radistø pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 11:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] S** pav. %s(%i): ",Vardas(playerid),playerid);
                }
                case 21:
                {
                    format(string, 128, "[Pavaduotojø pokalbis] Fûristø pav. %s(%i): ",Vardas(playerid),playerid);
                }
            }
            strcat(string, params, 128);
            for(new i = 0;i<=GetPlayerPoolSize();i++)
            {
                if(PlayerDB[i][Pavaduotojas] > 0)
                {
                    SendClientMessage(i, 0xadc359FF, string);
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik pavaduotojams.");
    }
    return 1;
}*/
stock ShowPlayerLuccheseGunDialog(playerid)
{
    new DialogInformation[2048];
    new string[100];
    format(string, 100, "{FFFFFF}Ginklo modelis: ShotGun | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoShotgun]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: Desert Eagle | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoDeagle]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: AK-47 | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoAK47]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: Sniper Rifle | Amunicijos kiekis: %d kulkø.", LuccheseMafiaSettings[LuccheseAmmoSniper]);
    strcat(DialogInformation, string);
    strcat(DialogInformation, "\nGyvybës ir ðarvai");
    ShowPlayerDialog(playerid, 110, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø saugykla", DialogInformation, "Rinktis", "Atðaukti");
    SetPVarInt(playerid, "HadDialogLastly", gettime());
    return 1;
}
stock ShowPlayerGenoveseGunDialog(playerid)
{
    new DialogInformation[2048];
    new string[100];
    format(string, 100, "{FFFFFF}Ginklo modelis: ShotGun | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoShotgun]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: Desert Eagle | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoDeagle]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: AK-47 | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoAK47]);
    strcat(DialogInformation, string);
    format(string, 100, "\n{FFFFFF}Ginklo modelis: Sniper Rifle | Amunicijos kiekis: %d kulkø.", GenoveseMafiaSettings[GenoveseAmmoSniper]);
    strcat(DialogInformation, string);
    strcat(DialogInformation, "\nGyvybës ir ðarvai");
    ShowPlayerDialog(playerid, 115, DIALOG_STYLE_LIST, "{AFAFAF}Ginklø saugykla", DialogInformation, "Rinktis", "Atðaukti");
    SetPVarInt(playerid, "HadDialogLastly", gettime());
    return 1;
}
stock ShowPlayerSpeedo(playerid)
{
    new str[54];
    new vehicleid = GetPlayerVehicleID(playerid);
    new Modelis = GetVehicleModel(vehicleid);
    if(VehicleDB[vehicleid][FuelType] == 0)
    {
        format(str, sizeof str, "Benzinas: %0.2fl/%dl", VehicleDB[vehicleid][Bendzinas],DegaluTalpa[Modelis-400]);
        PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], str);
        PlayerTextDrawTextSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 424+(VehicleDB[vehicleid][Bendzinas]* 207.5 / DegaluTalpa[Modelis-400]), 0);
    }
    else
    {
        format(str, sizeof str, "Dujos: %0.2fl/%dl", VehicleDB[vehicleid][Dujos],DegaluTalpa[Modelis-400]);
        PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], str);
        PlayerTextDrawTextSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 424+(VehicleDB[vehicleid][Dujos] * 207.5 / DegaluTalpa[Modelis-400]), 0);
    }
    PlayerTextDrawShow(playerid, SpeedoPlayerTD [ playerid ] [ 1 ]);
    for(new TDz; TDz < 6; TDz++)
    {
        TextDrawShowForPlayer(playerid, SpeedoTD[TDz]);
    }
    for(new TDz; TDz < 4; TDz++)
    {
        PlayerTextDrawShow(playerid, SpeedoPlayerTD[playerid][TDz]);
    }
    SpeedoTimer [ playerid ] = SetTimerEx("UpdateSpeedo", 100,true, "i", playerid);
}

stock HidePlayerSpeedo(playerid)
{
    for(new TDz; TDz < 6; TDz++)
    {
        TextDrawHideForPlayer(playerid, SpeedoTD[TDz]);
    }
    for(new TDz; TDz < 4; TDz++)
    {
        PlayerTextDrawHide(playerid, SpeedoPlayerTD[playerid][TDz]);
    }
    KillTimer(SpeedoTimer [ playerid ]);
}

stock ConvertRida(vehicleid)
{
    new
        Float:sx,
        Float:sy,
        Float:sz
    ;
    VehicleDB[vehicleid][Rida] += floatsqroot(((sx*sx)+(sy*sy))+(sz*sz))*216.666667;
    return 1;
}

public UpdateSpeedo(playerid)
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
    {
        HidePlayerSpeedo(playerid);
        return 1;
    }
    new vid = GetPlayerVehicleID(playerid);
    if(vid <= 0)
    {
        return 1;
    }
    new Modelis = GetVehicleModel(vid);
    if(Modelis == 0)
    {
        return 1;
    }
    new str [ 175 ],Float:vHP;
    new Greitis = GetVehicleSpeed(vid);
    if(Greitis >= 90)
    {
        format(str, sizeof str, "~r~%03d", GetVehicleSpeed(vid));
    }
    else
    {
        format(str, sizeof str, "%03d", GetVehicleSpeed(vid));
    }
    PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 3 ], str);
    ConvertRida(vid);
    GetVehicleHealth(vid, vHP);
    new RadijasStr[24];
    switch(VehicleDB[vid][RadijasStotis])
    {
        case 0:
        {
            format(RadijasStr, 24, "~r~isjungtas");
        }
        case 1:
        {
            format(RadijasStr, 24, "~g~Radio Centras");
        }
        case 2:
        {
            format(RadijasStr, 24, "~g~M-1");
        }
        case 3:
        {
            format(RadijasStr, 24, "~g~PWR");
        }
        case 4:
        {
            format(RadijasStr, 24, "~g~ZIP FM");
        }
        case 5:
        {
            format(RadijasStr, 24, "~g~Radio Skonto");
        }
        case 6:
        {
            format(RadijasStr, 24, "~g~Radio Uuno");
        }
        case 7:
        {
            format(RadijasStr, 24, "~g~Radio ZET");
        }
    }
    if(vHP > 500)
    {
        if(VehicleDB[vid][VRibotuvas] == 1)
        {
            format(str, sizeof str, "~w~pavadinimas: ~p~%s~n~~w~bukle: ~g~%.1f%%~n~~w~Autopilotas: ~g~ijungtas~n~~w~Radijas: %s~n~~w~Rida: ~p~%.1fKM", vNames[Modelis-400], vHP/10,RadijasStr, VehicleDB[vid][Rida]);
        }
        else
        {
            format(str, sizeof str, "~w~pavadinimas: ~p~%s~n~~w~bukle: ~g~%.1f%%~n~~w~Autopilotas: ~r~isjungtas~n~~w~Radijas: %s~n~~w~Rida: ~p~%.1fKM", vNames[Modelis-400], vHP/10,RadijasStr, VehicleDB[vid][Rida]);
        }
    }
    else
    {
        if(VehicleDB[vid][VRibotuvas] == 1)
        {
            format(str, sizeof str, "~w~pavadinimas: ~p~%s~n~~w~bukle: ~r~%.1f%%~n~~w~Autopilotas: ~g~ijungtas~n~~w~Radijas: %s~n~~w~Rida: ~p~%.1fKM", vNames[Modelis-400], vHP/10,RadijasStr, VehicleDB[vid][Rida]);
        }
        else
        {
            format(str, sizeof str, "~w~pavadinimas: ~p~%s~n~~w~bukle: ~r~%.1f%%~n~~w~Autopilotas: ~r~isjungtas~n~~w~Radijas: %s~n~~w~Rida: ~p~%.1fKM", vNames[Modelis-400], vHP/10,RadijasStr, VehicleDB[vid][Rida]);
        }
    }
    PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 0 ], str);
    if(VehicleDB[vid][FuelType] == 0)
    {
        format(str, sizeof str, "Benzinas: %0.2fl/%dl", VehicleDB[vid][Bendzinas],DegaluTalpa[Modelis-400]);
        PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], str);
        PlayerTextDrawTextSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 424+VehicleDB[vid][Bendzinas]*2.59375 * 80 / DegaluTalpa[Modelis-400] , 0);
    }
    else
    {
        format(str, sizeof str, "Dujos: %0.2fl/%dl", VehicleDB[vid][Dujos],DegaluTalpa[Modelis-400]);
        PlayerTextDrawSetString(playerid, SpeedoPlayerTD [ playerid ] [ 2 ], str);
        PlayerTextDrawTextSize(playerid, SpeedoPlayerTD [ playerid ] [ 1 ], 424+VehicleDB[vid][Dujos]*2.59375 * 80 / DegaluTalpa[Modelis-400], 0);
    }
    PlayerTextDrawShow(playerid, SpeedoPlayerTD [ playerid ] [ 1 ]);
    return 1;
}
CMD:radistams(playerid,params[])
{
    if(isnull(params))
    {
        UsageMessage(playerid,"Raðyti radistams: /radistams [ Tekstas ] ");
    }
    else
    {
        new string[128];
        format(string, 128, "Þaidëjas %s(%i) raðo radistams: %s", Vardas(playerid),playerid,params);
        for(new i = 0;i<=GetPlayerPoolSize();i++)
        {
            if(PlayerDB[i][Job] == 10 || i == playerid)
            {
                SendClientMessage(i, GELTONA, string);
            }
        }
    }
    return 1;
}
CMD:kviesti(playerid,params[])
{
    new info[800];
    new PolicininkaiOnline,MedikaiOnline,TaksistaiOnline,MechanikaiOnline,MafijozaiOnline,RadistaiOnline,PicerininkaiOnline;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerDB[i][Job] > 0)
            {
                switch(PlayerDB[i][Job])
                {
                	case 1:
               		{
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										PolicininkaiOnline++;
		                            }
		                        }
		                    }
		                }
          			}
                    case 2:
                    {
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										MedikaiOnline++;
		                            }
		                        }
		                    }
		                }
          			}
                    case 4:
                    {
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										TaksistaiOnline++;
		                            }
		                        }
		                    }
		                }
          			}
                    case 5:
                   	{
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										MechanikaiOnline++;
		                            }
		                        }
		                    }
		                }
          			}
                    case 7..8:
                    {
                        MafijozaiOnline++;
                    }
                    case 10:
                    {
                  		new bool:AFK,bool:Dirba;
	                  	AFK = PlayerDB[i][AfkState];
	                  	if(IsPlayerInAnyVehicle(i))
       					{
				            new vehicleid = GetPlayerVehicleID(i);
				            if(VehicleDB[vehicleid][DARBOMASINA] == true && VehicleDB[vehicleid][DARBOID] == PlayerDB[i][Job])
            				{
            					Dirba = true;
      						}
            			}
	              		switch(AFK)
	                	{
	                		case false:
	                  		{
	                    		switch(Dirba)
	                      		{
	                        		case true:
	                          		{
										RadistaiOnline++;
		                            }
		                        }
		                    }
		                }
          			}
                    case 19:
                    {
                        PicerininkaiOnline++;
                    }
                }
            }
        }
    }
    new string[90];
    if(CheckIsPlayerCallingT(playerid,0) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}policijos{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti policijà (dirba: {47AB3F}%i{FFFFFF}).\n",PolicininkaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,1)  > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}medikø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti medikus (dirba: {47AB3F}%i{FFFFFF}).\n",MedikaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,2) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}taksistø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti taksistus (dirba: {47AB3F}%i{FFFFFF}).\n",TaksistaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,3) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}mechanikø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti mechanikus (dirba: {47AB3F}%i{FFFFFF}).\n",MechanikaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,4) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}radistø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti radistus (dirba: {47AB3F}%i{FFFFFF}).\n",RadistaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,5) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}mafijø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti mafijas (online: {47AB3F}%i{FFFFFF}).\n",MafijozaiOnline);
        strcat(info, string);
    }
    if(CheckIsPlayerCallingT(playerid,6) > -1)
    {
        strcat(info,"{47AB3F}•{ffffff} Atðaukti {47AB3F}picerininkø{ffffff} iðkvietimà.\n");
    }
    else
    {
        format(string,90,"{47AB3F}• {FFFFFF}Kviesti picerininkus (online: {47AB3F}%i{FFFFFF}).\n",PicerininkaiOnline);
        strcat(info, string);
    }
    ShowPlayerDialog(playerid, 225, DIALOG_STYLE_LIST, "{AFAFAF}Kviesti pasirinktà tarnybà", info, "Rinktis", "Atðaukti");
    return 1;
}
CMD:kviecia(playerid,params[])
{
    if(PlayerDB[playerid][Job] > 0)
    {
        new id;
        switch(PlayerDB[playerid][Job])
        {
            case 1:
            {
                id = 0;
            }
            case 2:
            {
                id = 1;
            }
            case 4:
            {
                id = 2;
            }
            case 5:
            {
                id = 3;
            }
            case 10:
            {
                id = 4;
            }
            case 18:
            {
                id = 7;
            }
            case 19:
            {
                id = 6;
            }
            default:
            {
                id = -1;
            }
        }
        if(id == -1)
        {
            ErrorMsg(playerid,"• Jûs ne dirbate tarnyboje.");
        }
        else
        {
            new info[3000];
            new string[156];

            new count = 1;
            for(new i = 0;i < MAX_PLAYERS*9;i++)
            {
                if(Iskvietimas[i][Iskviesta] == true)
                {
                    if(Iskvietimas[i][TarnybosNumeris] == id)
                    {
                        if(IsPlayerConnected(Iskvietimas[i][KvieciantisID]) == 1 && strcmp(Iskvietimas[i][KvieciantisVP], Vardas(Iskvietimas[i][KvieciantisID]), true) == 0)
                        {
                            new mins,seconds;
                            seconds = gettime() - Iskvietimas[i][IskvietimoLaikas];
                            while(seconds >= 60)
                            {
                                mins++;
                                seconds-=60;
                            }
                            switch(Iskvietimas[i][IskvietimasPriimtas])
                            {
                                case true:
                                {
                                    format(string, 156, "{ffffff}%i. {47AB3F}%s{ffffff} (Laukia laiko: {47AB3F}%02dmin. %02dsek.{ffffff}) (Vaþiuoja {47AB3F}%s{ffffff})\n", count,Iskvietimas[i][KvieciantisVP],mins,seconds,Vardas(Iskvietimas[i][VaziuojantisID]));
                                    strcat(info, string);
                                }
                                case false:
                                {
                                    format(string, 156, "{ffffff}%i. {47AB3F}%s{ffffff} (Laukia laiko: {47AB3F}%02dmin. %02dsek.{ffffff}) ({47AB3F}Iðkvietimas nepriimtas{ffffff})\n", count,Iskvietimas[i][KvieciantisVP],mins,seconds);
                                    strcat(info, string);
                                }
                            }
                            count++;
                        }
                        else
                        {
                            DeleteIskvietimas(i);
                        }
                    }
                }
            }
            if(count == 1)
            {
                SendClientMessage(playerid, RAUDONA, "• Jûsø tarnybos niekas nekvieèia.");
            }
            else
            {
                ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Iðkvietimai", info, "Gerai", "");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik þaidëjams dirbantiems tarnybose.");
    }
    return 1;
}

stock CreateIskvietimas(playerid,TNumeris)
{
    for(new i = 0;i<MAX_PLAYERS*9;i++)
    {
        if(Iskvietimas[i][Iskviesta] == false)
        {
            Iskvietimas[i][Iskviesta] = true;
            Iskvietimas[i][TarnybosNumeris] = TNumeris;
            Iskvietimas[i][KvieciantisID] = playerid;
            format(Iskvietimas[i][KvieciantisVP], 24, "%s", Vardas(playerid));
            Iskvietimas[i][IskvietimasPriimtas] = false;
            Iskvietimas[i][VaziuojantisID] = -1;
            Iskvietimas[i][IskvietimoLaikas] = gettime();
            break;
        }
    }
}
CMD:vaziuoju(playerid,params[])
{
    if(PlayerDB[playerid][Job] > 0)
    {
        new id;
        switch(PlayerDB[playerid][Job])
        {
            case 1:
            {
                id = 0;
            }
            case 2:
            {
                id = 1;
            }
            case 4:
            {
                id = 2;
            }
            case 5:
            {
                id = 3;
            }
            case 7..8:
            {
                id = 5;
            }
            case 10:
            {
                id = 4;
            }
            case 18:
            {
                id = 7;
            }
            case 19:
            {
                id = 6;
            }
            default:
            {
                id = -1;
            }
        }
        if(id == -1)
        {
            ErrorMsg(playerid,"• Jûs ne dirbate tarnyboje.");
        }
        else
        {
            new tid;
            if(sscanf(params, "u", tid))
            {
                UsageMessage(playerid,"• Priimti iðkvietimà: /vaziuoju [V_P/ID].");
            }
            else
            {
                if(IsPlayerConnected(tid))
                {
                    if(tid == playerid)
                    {
                        ErrorMsg(playerid,"• Ðios komandos naudoti negalite pasirinkdami save.");
                        return 1;
                    }
                    new INumeris = CheckIsPlayerCallingT(tid,id);
                    if(INumeris >= 0)
                    {
                        if(Iskvietimas[INumeris][IskvietimasPriimtas] == true)
                        {
                            ErrorMsg(playerid,"• Ðis iðkvietimas jau priimtas.");
                        }
                        else
                        {
                            Iskvietimas[INumeris][IskvietimasPriimtas] = true;
                            Iskvietimas[INumeris][VaziuojantisID] = playerid;

                            CreateSekimoTD(playerid);
                            new string[128];
                            format(string, 128, "[IÐKVIETIMAS]:{ffca16} Iðkvietimas priimtas firmos darbuotojo {f99c00}%s{ffca16},", Vardas(playerid));
                            SendClientMessage(tid, 0xf99c00FF, string);
                            SendClientMessage(tid, 0xffca16FF, "iðkviestos tarnybos darbuotojas jau vyksta pas jus !");
                            PlayerDB[playerid][SekimoTaikinys] = tid;
                            PlayerDB[playerid][SekimoBusena] = true;
                            format(string, 128, "[racija] %s: priëmiau þaidëjo %s(%i) iðkvietimà ir vykstu á iðkvietimo vietà.", Vardas(playerid),Vardas(tid),tid);
                            switch(id)
                            {
                                case 0:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 1)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 1:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 2)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 2:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 4)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 3:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 5)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 5:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 7 || PlayerDB[i][Job] == 8)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 4:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 10)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 7:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 18)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                                case 6:
                                {
                                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                                    {
                                        if(PlayerDB[i][Job] == 19)
                                        {
                                            SendClientMessage(i, 0x0099CCFF, string);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Jûsø tarnybos ðis þaidëjas nekvieèia.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik þaidëjams dirbantiems tarnybose.");
    }
    return 1;
}
stock CheckIsPlayerCallingT(playerid,TNumeris)
{
    new returnas = -1;
    for(new i = 0;i<MAX_PLAYERS*9;i++)
    {
        if(Iskvietimas[i][Iskviesta] == true && Iskvietimas[i][TarnybosNumeris] == TNumeris)
        {
            if(Iskvietimas[i][KvieciantisID] == playerid)
            {
                returnas = i;
                break;
            }
        }
    }
    return returnas;
}
stock DeleteIskvietimas(i)
{
    Iskvietimas[i][Iskviesta] = false;
    Iskvietimas[i][TarnybosNumeris] = -1;
    Iskvietimas[i][KvieciantisID] = -1;
    Iskvietimas[i][IskvietimasPriimtas] = false;
    Iskvietimas[i][VaziuojantisID] = -1;
    Iskvietimas[i][IskvietimoLaikas] = 0;
    return 1;
}
CMD:pavaduotojai(playerid,params[])
{
    mysql_function_query(connectionHandle,"SELECT `Name`,`Pavaduotojas`,`DatePlayerBecamePav`,`SiandienZaista` FROM `players` WHERE `Pavaduotojas` > 0;",true,"OnPlayerRequestListOfPavs","d",playerid);
    return 1;
}
forward OnPlayerRequestListOfPavs(playerid);
public OnPlayerRequestListOfPavs(playerid)
{
    new info[2500] = "Visi pavaduotojai (prisijungæ ir atsijungæ):\n\n";
    if(cache_get_row_count() > 0)
    {
        new int = 1;
        for(new row = 0;row<cache_get_row_count();row++)
        {
            new Nickas[24],PavID,id,Date[12];
            new TimePlayed = cache_get_row_int(row, 3);
            cache_get_row(row, 0, Nickas);
            cache_get_row(row, 2, Date);
            PavID = cache_get_row_int(row, 1);
            if(!sscanf(Nickas, "u", id))
            {
                if(IsPlayerConnected(id))
                {
                    switch(PavID)
                    {
                        case 1:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Policijos pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 2:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Medikø pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 4:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}TAXI firmos pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 5:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Mechanikø firmos pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 7:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Lucchese“ mafijos vado padejëjas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 8:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Genovese“ mafijos vado padejëjas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 9:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Spec. bûrio „Aras“ pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 10:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Radistø pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 11:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}S** pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                        case 21:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Fûristø pavaduotojas(-a) {FFFFFF}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}",Vardas(id),PlayerDB[id][SiandienZaista],Date);
                            strcat(info, string);
                            if(PlayerDB[id][AfkState] == true)
                            {
                                strcat(info, ", {FF0000}AFK\n");
                            }
                            else
                            {
                                strcat(info, ". \n");
                            }
                        }
                    }
                }
                else
                {
                    switch(PavID)
                    {
                        case 1:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Policijos pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 2:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Medikø pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 4:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}TAXI firmos pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 5:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Mechanikø firmos pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 7:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Lucchese“ mafijos vado padejëjas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 8:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}„Genovese“ mafijos vado padejëjas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 9:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Spec. bûrio „Aras“ pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 10:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Radistø pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 11:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}S** pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                        case 21:
                        {
                            new string[256];
                            format(string, 256, "{FFFFFF}• {47AB3F}Fûristø pavaduotojas(-a) {FF0000}%s{47AB3F}, ðiandien serveryje praþaidë: {FFFFFF}%d {47AB3F}min, pareiguose nuo {FFFFFF}%s{47AB3F}.\n",Nickas,TimePlayed,Date);
                            strcat(info, string);
                        }
                    }
                }
            }
            int++;
        }
    }
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Pavaduotojai", info, "Gerai", "");
    return 1;
}

CMD:keistislaptazodi(playerid,params[])
{
    new VeritifyCode[8];
    new OldPassword[36];
    new NewPassword[36];
    if(sscanf(params, "s[8] s[36] s[36] ", VeritifyCode,OldPassword,NewPassword))
    {
        UsageMessage(playerid,"• Pakeisti prisijungimo slaptaþodá: /keistislaptazodi [Patvirtinimo kodas] [Senas slaptaþodis] [Naujas slaptaþodis].");
    }
    else
    {
        if(strlen(VeritifyCode) != 7)
        {
            ErrorMsg(playerid,"• Neteisingas paskiros patvirtinimo kodas.");
        }
        else if(strlen(OldPassword) < 4)
        {
            ErrorMsg(playerid,"• Neteisingas senas slaptaþodis.");
        }
        else if(strlen(NewPassword) < 4)
        {
            ErrorMsg(playerid,"• Naujas slaptaþodis yra per trumpas.");
        }
        else
        {
            new QueryString[170];
            mysql_format(connectionHandle, QueryString, 170, "SELECT NULL FROM `players` WHERE `VeritifyCode` = '%e' AND `Password` = '%e' AND `Name` = '%e' LIMIT 1;", VeritifyCode,OldPassword,Vardas(playerid));
            mysql_function_query( connectionHandle, QueryString, true, "OnKeistiSlaptazodi", "ds", playerid,NewPassword);
        }
    }
    return 1;
}
forward OnKeistiSlaptazodi(playerid,NewPassword[]);
public OnKeistiSlaptazodi(playerid,NewPassword[])
{
    if(cache_get_row_count() == 1)
    {
        new QueryString[128];
        mysql_format(connectionHandle, QueryString, 128, "UPDATE `players` SET `Password` = '%e' WHERE `Name` = '%e' LIMIT 1;", NewPassword,Vardas(playerid));
        mysql_function_query( connectionHandle, QueryString, false, "", "");
        format(QueryString, 128, "Sëkmingai pakeitëte savo paskyros slaptaþodá,\nnaujas slaptaþodis: „%s“.", NewPassword);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Pavyko", QueryString, "Gerai", "");
    }
    else
    {
        ErrorMsg(playerid,"• Slaptaþodis negalëjo bûti pakeistas,blogai nurodytas prisijungimo slaptaþodis arba patvirtinimo kodas.");
    }
    return 1;
}
CMD:siulytigun(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]) == 1 || PlayerDB[playerid][adminlvl] > 3)
    {
        new id,BulletCost,Bullets;
        if(sscanf(params, "u d d", id,BulletCost,Bullets))
        {
            UsageMessage(playerid,"Siûlyti ásigyti ginklà: /siulytigun (Vardas_Pavardë), (Kulkos kaina), (Kulkø kiekis).");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Sau siûlyti negalite.");
                    return 1;
                }
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 12, Cords[0], Cords[1], Cords[2]) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(id) || GetPlayerInterior(playerid) != GetPlayerInterior(id))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(PlayerDB[id][WeaponsOfferCanGetAt] > gettime())
                {
                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali gauti pasiûlymo ásigyti ginklams,praðome palaukti keleta akimirkø ir banyti vël.");
                    return 1;
                }
                if(Bullets > 0)
                {
                    if(BulletCost >= 1 && BulletCost <= 1000)
                    {
                        new WeaponID = GetPlayerWeapon(playerid);
                        if(!(WeaponID >= 1 && WeaponID < 47))
                        {
                            ErrorMsg(playerid,"• Turite turëti rankoje ginklà kurá norite parduoti.");
                            return 1;
                        }
                        new Slot = GetWeaponSlot(WeaponID);

                        if(PlayerWeaponAmmo[playerid][Slot] < Bullets)
                        {
                            ErrorMsg(playerid,"• Tiek kulkø neturite.");
                        }
                        else
                        {
                            if(GetPlayerDialogID(id) == -1)
                            {
                                new string[128];
                                new WeaponName[30];
                                GetWeaponName(WeaponID, WeaponName, 30);
                                format(string, 128,  "Pasiûlëte þaidëjui %s pirkti %s su %i kulka(-omis), uþ %i €.", Vardas(id),WeaponName,Bullets,BulletCost*Bullets);
                                SendClientMessage(playerid, 0x33cc33AA, string);// Mafijozui
                                new info[400];
                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][WeaponsOfferSCode], 6, "%s", SCode);
                                PlayerDB[id][WeaponsOfferGiverID] = playerid;
                                PlayerDB[id][WeaponsOfferWeaponID] = WeaponID;
                                PlayerDB[id][WeaponsOfferAmmo] = Bullets;
                                PlayerDB[id][WeaponsOfferSum] = BulletCost*Bullets;
                                PlayerDB[id][ReceivedWeaponsOffer] = true;
                                format(info, sizeof(info), "{FFFFFF}Mafijozas {33cc33}%s {ffffff}Jums siûlo pirkti ginklà.\n\n\t{FFFFFF}• Ginklas: {33cc33}%s{FFFFFF}.\n\t{FFFFFF}• Kulkø skaièius: {33cc33}%i{FFFFFF} kulkø.\n\t• Kaina uþ kulkà: {33cc33}%d{ffffff} €.\n\nIðviso mokëti: {33cc33}%d €.\n\n\t{ffffff}Norëdamas nusipirkti ðá ginklà á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti 'Atðaukti'. ",Vardas(playerid),WeaponName,Bullets,BulletCost,BulletCost*Bullets,SCode);
                                ShowPlayerDialog(id, 226, DIALOG_STYLE_INPUT, "{AFAFAF}Ginklø pirkimas", info, "Pirkti", "Atðaukti");
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali priimti sprendimø, praðome palaukti ir bandykite siûlyti dar kartà vëliau.");
                            }
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Vienos kulkos kaina turi bûti intervale nuo 1 iki 1000€.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Maþiausiai galima parduoti 1 kulkà.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijø nariams.");
    }
    return 1;
}

//

CMD:siulytinark(playerid,params[])
{
    if(IsJobFromMafia(PlayerDB[playerid][Job]) == 1 || PlayerDB[playerid][adminlvl] > 3)
    {
        new id,DrugName[9],CostForOne,Amount;
        if(sscanf(params, "u s[9] d d", id,DrugName,CostForOne,Amount))
        {
            UsageMessage(playerid,"Siûlyti ásigyti narkotikø: /siulytinark (Vardas_Pavardë), (Zole/Kokainas/Heroinas), (Vieneto kaina), (Kiekis).");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Sau siûlyti negalite.");
                    return 1;
                }
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 12, Cords[0], Cords[1], Cords[2]) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(id) || GetPlayerInterior(playerid) != GetPlayerInterior(id))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(PlayerDB[id][DrugsOfferCanGetAt] > gettime())
                {
                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali gauti pasiûlymo ásigyti narkotikams,praðome palaukti keleta akimirkø ir banyti vël.");
                    return 1;
                }

                if(GetPlayerDialogID(id) != -1)
                {
                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali priimti naujø sprendimø, praðome palaukti ir bandykite siûlyti dar kartà vëliau.");
                    return 1;
                }
                if(Amount > 0)
                {
                    if(CostForOne >= 1 && CostForOne <= 1000)
                    {
                        if(strcmp(DrugName, "Zole", true) == 0)
                        {
                            if(PlayerDB[playerid][Kanapes] < Amount)
                            {
                                ErrorMsg(playerid,"• Jûs neturite pakankamai þolës ðiam pasiûlymui.");
                            }
                            else
                            {
                                new info[420];
                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][DrugsOfferSCode], 6, "%s", SCode);
                                PlayerDB[id][DrugsOfferGiverID] = playerid;
                                PlayerDB[id][DrugsOfferDrugID] = 1;
                                PlayerDB[id][DrugsOfferAmount] = Amount;
                                PlayerDB[id][DrugsOfferSum] = CostForOne*Amount;
                                PlayerDB[id][ReceivedDrugsOffer] = true;
                                format(info, sizeof(info), "{FFFFFF}Mafijozas {33cc33}%s {ffffff}Jums siûlo pirkti narkotikus.\n\n\t{FFFFFF}• Narkotikas: {33CC33}Þolë{FFFFFF}.\n\t{FFFFFF}• Narkotikø skaièius: {33cc33}%i g.\n\t{FFFFFF}• Kaina uþ vnt: {33cc33}%i{FFFFFF} €\n\nIðviso mokëti: {33cc33}%d €.\n\n\t{ffffff}Norëdamas nusipirkti ðá narkotikà á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'. ",Vardas(playerid),Amount,CostForOne,CostForOne * Amount,SCode);
                                ShowPlayerDialog(id, 227, DIALOG_STYLE_INPUT, "{AFAFAF}Narkotikø pirkimas", info, "Pirkti", "Atðaukti");
                                format(info, sizeof(info),"Pasiûlëte þaidëjui %s pirkti %ig þolës, uþ %s €.",Vardas(id),Amount,AddPoints(Amount * CostForOne)); // Mafijozui
                                SendClientMessage(playerid, 0x33cc33AA, info);
                            }
                        }
                        else if(strcmp(DrugName, "Kokainas", true) == 0)
                        {
                            if(PlayerDB[playerid][Kokainas] < Amount)
                            {
                                ErrorMsg(playerid,"• Jûs neturite pakankamai þolës ðiam pasiûlymui.");
                            }
                            else
                            {
                                new info[420];
                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][DrugsOfferSCode], 6, "%s", SCode);
                                PlayerDB[id][DrugsOfferGiverID] = playerid;
                                PlayerDB[id][DrugsOfferDrugID] = 2;
                                PlayerDB[id][DrugsOfferAmount] = Amount;
                                PlayerDB[id][DrugsOfferSum] = CostForOne*Amount;
                                PlayerDB[id][ReceivedDrugsOffer] = true;
                                format(info, sizeof(info), "{FFFFFF}Mafijozas {33cc33}%s {ffffff}Jums siûlo pirkti narkotikus.\n\n\t{FFFFFF}• Narkotikas: {33CC33}Kokainas{FFFFFF}.\n\t{FFFFFF}• Narkotikø skaièius: {33cc33}%i mg.\n\t{FFFFFF}• Kaina uþ vnt: {33cc33}%i{FFFFFF} €\n\nIðviso mokëti: {33cc33}%d €.\n\n\t{ffffff}Norëdamas nusipirkti ðá narkotikà á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'. ",Vardas(playerid),Amount,CostForOne,CostForOne * Amount,SCode);
                                ShowPlayerDialog(id, 227, DIALOG_STYLE_INPUT, "{AFAFAF}Narkotikø pirkimas", info, "Pirkti", "Atðaukti");
                                format(info, sizeof(info),"Pasiûlëte þaidëjui %s pirkti %img kokaino, uþ %s €.",Vardas(id),Amount,AddPoints(Amount * CostForOne)); // Mafijozui
                                SendClientMessage(playerid, 0x33cc33AA, info);
                            }
                        }
                        else if(strcmp(DrugName, "Heroinas", true) == 0)
                        {
                            if(PlayerDB[playerid][Heroinas] < Amount)
                            {
                                ErrorMsg(playerid,"• Jûs neturite pakankamai þolës ðiam pasiûlymui.");
                            }
                            else
                            {
                                new info[420];
                                new SCode[5];
                                randomString(SCode,5);
                                format(PlayerDB[id][DrugsOfferSCode], 6, "%s", SCode);
                                PlayerDB[id][DrugsOfferGiverID] = playerid;
                                PlayerDB[id][DrugsOfferDrugID] = 3;
                                PlayerDB[id][DrugsOfferAmount] = Amount;
                                PlayerDB[id][DrugsOfferSum] = CostForOne*Amount;
                                PlayerDB[id][ReceivedDrugsOffer] = true;
                                format(info, sizeof(info), "{FFFFFF}Mafijozas {33cc33}%s {ffffff}Jums siûlo pirkti narkotikus.\n\n\t{FFFFFF}• Narkotikas: {33CC33}Heroinas{FFFFFF}.\n\t{FFFFFF}• Narkotikø skaièius: {33cc33}%i mg.\n\t{FFFFFF}• Kaina uþ vnt: {33cc33}%i{FFFFFF} €\n\nIðviso mokëti: {33cc33}%d €.\n\n\t{ffffff}Norëdamas nusipirkti ðá narkotikà á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'. ",Vardas(playerid),Amount,CostForOne,CostForOne * Amount,SCode);
                                ShowPlayerDialog(id, 227, DIALOG_STYLE_INPUT, "{AFAFAF}Narkotikø pirkimas", info, "Pirkti", "Atðaukti");
                                format(info, sizeof(info),"Pasiûlëte þaidëjui %s pirkti %img heroino, uþ %s €.",Vardas(id),Amount,AddPoints(Amount * CostForOne)); // Mafijozui
                                SendClientMessage(playerid, 0x33cc33AA, info);
                            }
                        }
                        else
                        {
                            ErrorMsg(playerid,"• Neteisingai nurodytas narkotiko pavadinimas. Galimi narkotikai yra: Zole,Kokainas,Heroinas.");
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Vieno vieneto kaina turi bûti intervale nuo 1 iki 1000€.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Maþiausiai galima parduoti 1 narkotiko vienetà.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik mafijø nariams.");
    }
    return 1;
}

//
CMD:sarvai(playerid,params[])
{
    if(PlayerDB[playerid][Job] == 2)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"Siûlyti ásigyti ðarvus: /sarvai (Vardas_Pavardë).");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0],Cords[1],Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 12, Cords[0], Cords[1], Cords[2]) == 0)
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(id) || GetPlayerInterior(playerid) != GetPlayerInterior(id))
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli nuo jûsø.");
                    return 1;
                }
                if(GetPlayerDialogID(id) == -1)
                {
                    if(PlayerDB[id][ArmourOfferCanGetAt] > gettime())
                    {
                        ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali gauti pasiûlymo ásigyti ðarvams,praðome palaukti keleta akimirkø ir banyti vël.");
                        return 1;
                    }
                    new Float:Armour;
                    GetPlayerArmour(id, Armour);
                    if(Armour == 100)
                    {
                        ErrorMsg(playerid,"• Þaidëjas turi ðarvus, kuriø taisyti nereikia.");
                        return 1;
                    }
                    new info[320];
                    new SCode[5];
                    randomString(SCode,5);
                    format(PlayerDB[id][ArmourOfferSCode], 6, "%s", SCode);
                    PlayerDB[id][ArmourOfferGiverID] = playerid;
                    PlayerDB[id][ArmourOfferSum] = HPSettings[HPArmourCost];
                    PlayerDB[id][ReceivedArmourOffer] = true;
                    format(info, sizeof(info), "{FFFFFF}Medikas {33cc33}%s {ffffff}Jums siûlo pirkti ðarvus.\n\n\t{FFFFFF}• Ðarvai: {33CC33}100 proc{FFFFFF}.\n\t{FFFFFF}• Kaina : {33cc33}%i{FFFFFF} €\n\n\t{ffffff}Norëdamas nusipirkti ðarvus á laukelá áraðykite: {33cc33}%s{ffffff}, norëdamas atðaukti pasirinkimas 'Atðaukti'. ",Vardas(playerid),PlayerDB[id][ArmourOfferSum],SCode);
                    ShowPlayerDialog(id, 228, DIALOG_STYLE_INPUT, "{AFAFAF}Ðarvø pirkimas", info, "Pirkti", "Atðaukti");
                    format(info, sizeof(info),"Pasiûlëte þaidëjui %s pirkti ðarvus, uþ %d €.",Vardas(id),PlayerDB[id][ArmourOfferSum]); // Medikui
                    SendClientMessage(playerid, 0x33cc33AA, info);
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas ðiuo metu negali priimti sprendimø, praðome palaukti ir bandykite siûlyti dar kartà vëliau.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik medikams.");
    }
    return 1;
}
CMD:ddispejima(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Nick[24];
        new Reason[100];
        if(sscanf(params, "s[24] s[100]", Nick,Reason))
        {
            UsageMessage(playerid,"• NAUDOJIMAS • /ddispejima [Vardas_Pavardë] [prieþastis].");
        }
        else
        {
            if(IsValidNickName(Nick))
            {
                if(strlen(Reason) > 3)
                {
                    new QueryString[108];
                    mysql_format(connectionHandle, QueryString, 256, "SELECT `Name`,`Direktorius`,`DirWarnings` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle, QueryString, true, "OnWarnDirector","dss",playerid,Nick,Reason);
                }
                else
                {
                    ErrorMsg(playerid,"• Jûsø nurodyta prieþastis yra per trumpa.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas þaidëjo V_P, praðome nurodyti tikslø ir pilnà V_P.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda skirta priþiûrëtojams.");
    }
    return 1;
}
forward OnWarnDirector(playerid,Nick[],Reason[]);
public OnWarnDirector(playerid,Nick[],Reason[])
{
    if(cache_get_row_count() == 1)
    {
        new ResultDir = cache_get_row_int(0, 1);
        if(ResultDir > 0)
        {
            new ResultWarns = cache_get_row_int(0, 2);
            ResultWarns+=1;
            new string[128];
            new id;
            sscanf(Nick, "u", id);
            new bool:PlayerConnected = false;
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][Loaded] == 1 && PlayerDB[id][Direktorius] > 0)
                {
                    PlayerConnected = true;
                    PlayerDB[id][DirWarnings]+=1;
                }
            }
            new QueryString[256];
            mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `priezastys` (`Name`, `Priezastis`) VALUES ('%e','Jums buvo skirtas dir. ispëjimas prþ: „%e“');", Nick,Reason);
            mysql_function_query(connectionHandle,QueryString,false,"","");
            switch(ResultWarns)
            {
                case 1:
                {
                    format(string, 128, "• %s{33AA33} skyrëte direktoriaus áspëjimà, jau turi {00FF00}1 áspëjimà{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë dir. áspëjimà, jau turi {00FF00}1 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `DirWarnings` = '1' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                }
                case 2:
                {
                    format(string, 128, "• %s{33AA33} skyrëte direktoriaus áspëjimà, jau turi {00FF00}2 áspëjimus{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë dir. áspëjimà, jau turi {00FF00}2 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `DirWarnings` = '2' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                }
                case 3:
                {
                    format(string, 128, "• %s{33AA33} skyrëte direktoriaus áspëjimà, jau turi {00FF00}3 áspëjimus{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    SendClientMessage(playerid, RAUDONA, "• Direktoriaus statusà þaidëjas prarado.");
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë dir. áspëjimà, jau turi {00FF00}3 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `DirWarnings` = '0',`Direktorius` = '0' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                    if(PlayerConnected == true)
                    {
                        PlayerDB[id][Direktorius] = 0;
                        SendClientMessage(id, RAUDONA, "Jûs buvote nuðalintas nuo direktoriaus pareigø.");
                        SendClientMessage(id, GELTONA, "Dëkojame uþ darbà,jeigu galvojate,kad buvote nuðalintas be prieþasties,praðome praneðti serverio vyr.administratoriams.");
                        PlayerDB[id][DirWarnings] = 0;
                        SavePlayerData(id);
                        mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `priezastys` (`Name`, `Priezastis`) VALUES ('%e','Jûs buvote nuðalintas nuo direktoriaus pareigø,nes surinkote 3 isp.');", Nick);
                        mysql_function_query(connectionHandle,QueryString,false,"","");
                    }
                }
            }

        }
        else
        {
            ErrorMsg(playerid,"• Þaidëjas nëra direktorius.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Blogai nurodytas þaidëjo V_P, praðome nurodyti tikslø ir pilnà V_P.");
    }
    return 1;
}


//

CMD:dpispejima(playerid,params[])
{
    if(PlayerDB[playerid][DirektoriuPriziuretojas] == 1 || PlayerDB[playerid][LyderiuPriziuretojas] == 1 || PlayerDB[playerid][adminlvl] >= 4)
    {
        new Nick[24];
        new Reason[100];
        if(sscanf(params, "s[24] s[100]", Nick,Reason))
        {
            UsageMessage(playerid,"• NAUDOJIMAS • /dpispejima [Vardas_Pavardë] [prieþastis].");
        }
        else
        {
            if(IsValidNickName(Nick))
            {
                if(strlen(Reason) > 3)
                {
                    new QueryString[108];
                    mysql_format(connectionHandle, QueryString, 256, "SELECT `Name`,`Pavaduotojas`,`PavWarnings` FROM `players` WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle, QueryString, true, "OnWarnPav","dss",playerid,Nick,Reason);
                }
                else
                {
                    ErrorMsg(playerid,"• Jûsø nurodyta prieþastis yra per trumpa.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Blogai nurodytas þaidëjo V_P, praðome nurodyti tikslø ir pilnà V_P.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda skirta priþiûrëtojams.");
    }
    return 1;
}
forward OnWarnPav(playerid,Nick[],Reason[]);
public OnWarnPav(playerid,Nick[],Reason[])
{
    if(cache_get_row_count() == 1)
    {
        new ResultDir = cache_get_row_int(0, 1);
        if(ResultDir > 0)
        {
            new ResultWarns = cache_get_row_int(0, 2);
            ResultWarns+=1;
            new string[128];
            new id;
            sscanf(Nick, "u", id);
            new bool:PlayerConnected = false;
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][Loaded] == 1 && PlayerDB[id][Pavaduotojas] > 0)
                {
                    PlayerConnected = true;
                    PlayerDB[id][PavWarnings]+=1;
                }
            }
            new QueryString[256];
            mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `priezastys` (`Name`, `Priezastis`) VALUES ('%e','Jums buvo skirtas pav. ispëjimas prþ: „%e“');", Nick,Reason);
            mysql_function_query(connectionHandle,QueryString,false,"","");
            switch(ResultWarns)
            {
                case 1:
                {
                    format(string, 128, "• %s{33AA33} skyrëte pavaduotojo áspëjimà, jau turi {00FF00}1 áspëjimà{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë pav. áspëjimà, jau turi {00FF00}1 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `PavWarnings` = '1' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                }
                case 2:
                {
                    format(string, 128, "• %s{33AA33} skyrëte pavaduotojo áspëjimà, jau turi {00FF00}2 áspëjimus{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë pav. áspëjimà, jau turi {00FF00}2 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `PavWarnings` = '2' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                }
                case 3:
                {
                    format(string, 128, "• %s{33AA33} skyrëte pavaduotojo áspëjimà, jau turi {00FF00}3 áspëjimus{33aa33} prþ: {33aa33}%s", Nick,Reason);
                    SendClientMessage(playerid, 0x00FF00FF, string);
                    SendClientMessage(playerid, RAUDONA, "• Pavaduotojo statusà þaidëjas prarado.");
                    if(PlayerConnected == true)
                    {
                        format(string, 128, "• %s{33AA33} jums skyrë pav. áspëjimà, jau turi {00FF00}3 áspëjimà{33aa33} prþ: {33aa33}%s", Vardas(playerid),Reason);
                        SendClientMessage(id, 0x00FF00FF, string);
                    }
                    mysql_format(connectionHandle, QueryString, 256, "UPDATE `players` SET `PavWarnings` = '0',`Pavaduotojas` = '0' WHERE `Name` = '%e' LIMIT 1;", Nick);
                    mysql_function_query(connectionHandle,QueryString,false,"","");
                    if(PlayerConnected == true)
                    {
                        PlayerDB[id][Pavaduotojas] = 0;
                        SendClientMessage(id, RAUDONA, "Jûs buvote nuðalintas nuo pavaduotojo pareigø.");
                        SendClientMessage(id, GELTONA, "Dëkojame uþ darbà,jeigu galvojate,kad buvote nuðalintas be prieþasties,praðome praneðti serverio vyr.administratoriams.");
                        PlayerDB[id][PavWarnings] = 0;
                        SavePlayerData(id);
                        mysql_format(connectionHandle, QueryString, 256, "INSERT INTO `priezastys` (`Name`, `Priezastis`) VALUES ('%e','Jûs buvote nuðalintas nuo pavaduotojo pareigø,nes surinkote 3 isp.');", Nick);
                        mysql_function_query(connectionHandle,QueryString,false,"","");
                    }
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Þaidëjas nëra pavaduotojas.");
        }
    }
    else
    {
        ErrorMsg(playerid,"• Blogai nurodytas þaidëjo V_P, praðome nurodyti tikslø ir pilnà V_P.");
    }
    return 1;
}
forward UpdateHunger(playerid);
public UpdateHunger(playerid)
{
    PlayerTextDrawShow(playerid, Alkis[playerid][0]);
    PlayerTextDrawShow(playerid, Alkis[playerid][1]);
    PlayerTextDrawShow(playerid, Alkis[playerid][2]);
    PlayerTextDrawShow(playerid, Alkis[playerid][3]);
    PlayerTextDrawShow(playerid, Alkis[playerid][4]);
    new Float:x = 497.000000 + (PlayerDB[playerid][Hunger] * 1.075);
    PlayerTextDrawTextSize(playerid, Alkis[playerid][2], x, 138.500000);
    if(PlayerDB[playerid][Hunger] < 90)
    {
        PlayerTextDrawBoxColor(playerid,Alkis[playerid][2], -238809089);
    }
    else
    {
        PlayerTextDrawBoxColor(playerid,Alkis[playerid][2], -299752705);
    }
}
CMD:mgv(playerid,params[])
{
    new QueryString[256];
    mysql_format(connectionHandle, QueryString, 256, "SELECT `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID` FROM `foodinventor` WHERE `PlayerSQLID` = '%i' LIMIT 20;", PlayerDB[playerid][SQLID]);
    mysql_function_query(connectionHandle,QueryString,true,"OnOpenFoodInventor","d",playerid);
    return 1;
}
forward OnOpenFoodInventor(playerid);
public OnOpenFoodInventor(playerid)
{
    new rows = cache_get_row_count();

    if(rows == 0)
    {
        ErrorMsg(playerid,"• Neturite maisto inventoriuje.");
        return 1;
    }

    new info[3046];
    strcat(info, "Pavadinimas\tAlkio atstatymas\tLiko laiko iki sugedimo");
    new string[100];
    new FoodName[50];
    new Mins;
    for(new row = 0;row<rows;row++)
    {
        Mins = 0;
        cache_get_row(row, 0, FoodName);
        new Float:NutritionValue = cache_get_row_float(row, 1);
        new TimeItsFresh = cache_get_row_int(row, 2) - gettime();
        if(TimeItsFresh > 0)
        {
            while(TimeItsFresh >= 60)
            {
                TimeItsFresh-=60;
                Mins++;
            }
        }
        if(TimeItsFresh < 0)
        {
            TimeItsFresh = 0;
        }
        if(TimeItsFresh == 0 && Mins == 0)
        {
            format(string, 100, "\n%s\t%0.1f %%\t{FF0000}%dmin %02d sek.", FoodName,NutritionValue,Mins,TimeItsFresh);
        }
        else
        {
            format(string, 100, "\n%s\t%0.1f %%\t{00FF00}%dmin %02d sek.", FoodName,NutritionValue,Mins,TimeItsFresh);
        }
        strcat(info, string);
        MGVMeniuItemsIDS[playerid][row] = cache_get_row_int(row, 3);

    }
    ShowPlayerDialog(playerid, 229, DIALOG_STYLE_TABLIST_HEADERS, "{AFAFAF}Maisto ir gërimø valdymas",info,"Pasirinkti", "Atðaukti");
    return 1;
}
forward OnSelectFoodAction(playerid,listitem);
public OnSelectFoodAction(playerid,listitem)
{
    if(cache_get_row_count() == 1)
    {
        switch(listitem)
        {
            case 0:
            {
                if(cache_get_row_int(0, 2) >= gettime())
                {
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    new Float:NewHunger = PlayerDB[playerid][Hunger] - cache_get_row_float(0, 1);
                    if(NewHunger < 0)
                    {
                        NewHunger = 0;
                    }
                    PlayerDB[playerid][Hunger] = NewHunger;
                    new string[128];
                    mysql_format(connectionHandle, string, 128, "DELETE FROM `foodinventor` WHERE `ItemID` = '%i' LIMIT 1;", PlayerDB[playerid][SelectedMGVItem]);
                    mysql_function_query(connectionHandle,string,false,"","");
                    new Name[40];
                    cache_get_row(0, 0, Name);
                    format(string, 128, " • Suvartojote %s.", Name);
                    SendClientMessage(playerid, PILKA, string);
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                }
                else
                {
                    new bool:GonnaPuke = false;
                    if(PlayerDB[playerid][Hunger] == 0)
                    {
                        GonnaPuke = true;
                    }
                    new Float:NewHunger = PlayerDB[playerid][Hunger] + 10 + random(40);
                    if(NewHunger > 100)
                    {
                        NewHunger = 100;
                    }
                    PlayerDB[playerid][Hunger] = NewHunger;
                    new string[128];
                    mysql_format(connectionHandle, string, 128, "DELETE FROM `foodinventor` WHERE `ItemID` = '%i' LIMIT 1;", PlayerDB[playerid][SelectedMGVItem]);
                    mysql_function_query(connectionHandle,string,false,"","");
                    SendClientMessage(playerid, RAUDONA, "• Suvartojote suðvinkusá produktà.");
                    if(GonnaPuke == true)
                    {
                        SendClientMessage(playerid, RAUDONA, "• Jûsø skrandis neatlaikë, todël apsivëmete.");
                        PlayerPlaySound(playerid,1157,0.0,0.0,0.0);
                        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P" , 4.1, 1, 1, 1, 0, 2000, 1);
                        PlayerDB[playerid][Hunger] = random(31) + 10;
                        return 1;
                    }
                }
            }
            case 1:
            {
                new string[128];
                mysql_format(connectionHandle, string, 128, "DELETE FROM `foodinventor` WHERE `ItemID` = '%i' LIMIT 1;", PlayerDB[playerid][SelectedMGVItem]);
                mysql_function_query(connectionHandle,string,false,"","");
                new Name[40];
                cache_get_row(0, 0, Name);
                format(string, 128, " • Iðmetëte ið inventoriaus %s.", Name);
                SendClientMessage(playerid, PILKA, string);
            }
        }
    }
    cmd_mgv(playerid,"");
    return 1;
}
forward OnBuyFoodToInventorBS(playerid);
public OnBuyFoodToInventorBS(playerid)
{
    new Limit = 10;
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        Limit = 20;
    }
    else if(PlayerDB[playerid][VIP] == 1)
    {
        Limit = 15;
    }
    if(cache_get_row_count() >= Limit )
    {
        ErrorMsg(playerid,"• Jûsø inventorius yra pilnas. Inventoriø perþiûrëti galite su komanda /mgv.");
        return 1;
    }
    new QueryString[220];
    new FoodName[80];
    new Float:NutritionWorth;
    switch(PlayerDB[playerid][SelectedFoodItem])
    {
        case 0:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Tamsios duonos sumuðtiná{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Tamsios duonos sumuðtinis");
            NutritionWorth = 20;
        }
        case 1:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 4)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 4;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Mësainá su sûriu{FFFFFF} uþ {E3F77E}4€");
            format(FoodName,sizeof(FoodName),"Mesainis su sûriu");
            NutritionWorth = 15;
        }
        case 2:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Mësainá{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Mesainis");
            NutritionWorth = 12;
        }
        case 3:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Mësainá su ðonine{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Mesainis su ðonine");
            NutritionWorth = 15;
        }
        case 4:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 6)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 6;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Sumuðtiná su viðtiena{FFFFFF} uþ {E3F77E}6€");
            format(FoodName,sizeof(FoodName),"Sumuðtinis su viðtiena");
            NutritionWorth = 20;
        }
        case 5:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 5)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 5;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Sumuðtiná su þuvimi{FFFFFF} uþ {E3F77E}5€");
            format(FoodName,sizeof(FoodName),"Sumuðtinis su þuvimi");
            NutritionWorth = 15;
        }
        case 6:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 14)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 14;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}„BurgerShot“ mësainá{FFFFFF} uþ {E3F77E}14€");
            format(FoodName,sizeof(FoodName),"„BurgerShot“ mësainis");
            NutritionWorth = 25;
        }
        case 7:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Coca-Cola");
            NutritionWorth = 3.5;
        }
        case 8:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Arbatà{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Arbata");
            NutritionWorth = 2;
        }
        case 9:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Kavà{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Kava");
            NutritionWorth = 4;
        }
        case 10:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Obuoliø sultis{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Obuoliø sultys");
            NutritionWorth = 2.5;
        }
    }
    if(NutritionWorth > 0)
    {
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'%e',%f,%i,NULL);",PlayerDB[playerid][SQLID],FoodName,NutritionWorth,gettime()+(86400*2));
        mysql_function_query(connectionHandle, QueryString, false, "","");
    }
    return 1;
}

forward OnBuyFoodToInventorXO(playerid);
public OnBuyFoodToInventorXO(playerid)
{
    new Limit = 10;
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        Limit = 20;
    }
    else if(PlayerDB[playerid][VIP] == 1)
    {
        Limit = 15;
    }
    if(cache_get_row_count() >= Limit )
    {
        ErrorMsg(playerid,"• Jûsø inventorius yra pilnas. Inventoriø perþiûrëti galite su komanda /mgv.");
        return 1;
    }
    new QueryString[220];
    new FoodName[80];
    new Float:NutritionWorth;
    switch(PlayerDB[playerid][SelectedFoodItem])
    {
        case 0:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Kebabà su kiauliena{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Kebabas su kiauliena");
            NutritionWorth = 35;
        }
        case 1:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Submarinà su kumpiu{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Submarinas su kumpiu");
            NutritionWorth = 15;
        }
        case 2:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 5)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 5;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Submarinà su viðtiena{FFFFFF} uþ {E3F77E}5€");
            format(FoodName,sizeof(FoodName),"Submarinas su viðtiena");
            NutritionWorth = 12;
        }
        case 3:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 6)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 6;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Sumuðtiná „Panini“{FFFFFF} uþ {E3F77E}6€");
            format(FoodName,sizeof(FoodName),"Sumuðtinis „Panini“");
            NutritionWorth = 10.5;
        }
        case 4:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 5)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 5;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Submarinà su kiauliena ir agurkais{FFFFFF} uþ {E3F77E}5€");
            format(FoodName,sizeof(FoodName),"Submarinas su kiauliena ir agurkais");
            NutritionWorth = 12.5;
        }
        case 5:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 4)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 4;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Kavà{FFFFFF} uþ {E3F77E}4€");
            format(FoodName,sizeof(FoodName),"Kava");
            NutritionWorth = 4;
        }
        case 6:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Fantos{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Fanta");
            NutritionWorth = 3.5;
        }
    }
    if(NutritionWorth > 0)
    {
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'%e',%f,%i,NULL);",PlayerDB[playerid][SQLID],FoodName,NutritionWorth,gettime()+(86400*2));
        mysql_function_query(connectionHandle, QueryString, false, "","");
    }
    return 1;
}


forward OnBuyFoodToInventorCl(playerid);
public OnBuyFoodToInventorCl(playerid)
{
    new Limit = 10;
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        Limit = 20;
    }
    else if(PlayerDB[playerid][VIP] == 1)
    {
        Limit = 15;
    }
    if(cache_get_row_count() >= Limit )
    {
        ErrorMsg(playerid,"• Jûsø inventorius yra pilnas. Inventoriø perþiûrëti galite su komanda /mgv.");
        return 1;
    }
    new QueryString[220];
    new FoodName[80];
    new Float:NutritionWorth;
    switch(PlayerDB[playerid][SelectedFoodItem])
    {
        case 0:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 8)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 8;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Mësainá su suriu{FFFFFF} uþ {E3F77E}8€");
            format(FoodName,sizeof(FoodName),"Mësainis su suriu");
            NutritionWorth = 10;
        }
        case 1:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 13)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 13;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}„CluckinBell“ mësainá{FFFFFF} uþ {E3F77E}13€");
            format(FoodName,sizeof(FoodName),"„CluckinBell“ mësainis");
            NutritionWorth = 15;
        }
        case 2:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 10)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 10;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Havajø picà{FFFFFF} uþ {E3F77E}10€");
            format(FoodName,sizeof(FoodName),"Havajø pica");
            NutritionWorth = 25;
        }
        case 3:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 14)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 14;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Submarinà su kumpiu{FFFFFF} uþ {E3F77E}14€");
            format(FoodName,sizeof(FoodName),"Submarinas su kumpiu");
            NutritionWorth = 14;
        }
        case 4:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Kavos{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Kava");
            NutritionWorth = 4;
        }
        case 5:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 5)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 5;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}5€");
            format(FoodName,sizeof(FoodName),"Coca-Cola");
            NutritionWorth = 3.5;
        }
    }
    if(NutritionWorth > 0)
    {
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'%e',%f,%i,NULL);",PlayerDB[playerid][SQLID],FoodName,NutritionWorth,gettime()+(86400*2));
        mysql_function_query(connectionHandle, QueryString, false, "","");
    }
    return 1;
}
//

forward OnBuyFoodToInventorW(playerid);
public OnBuyFoodToInventorW(playerid)
{
    new Limit = 10;
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        Limit = 20;
    }
    else if(PlayerDB[playerid][VIP] == 1)
    {
        Limit = 15;
    }
    if(cache_get_row_count() >= Limit )
    {
        ErrorMsg(playerid,"• Jûsø inventorius yra pilnas. Inventoriø perþiûrëti galite su komanda /mgv.");
        return 1;
    }
    new QueryString[220];
    new FoodName[80];
    new Float:NutritionWorth;
    switch(PlayerDB[playerid][SelectedFoodItem])
    {
        case 0:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 8)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 8;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Studentø picà{FFFFFF} uþ {E3F77E}8€");
            format(FoodName,sizeof(FoodName),"Studentø pica");
            NutritionWorth = 15;
        }
        case 1:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 9)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 9;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Vezuvijaus picà{FFFFFF} uþ {E3F77E}9€");
            format(FoodName,sizeof(FoodName),"Vezuvijaus pica");
            NutritionWorth = 20;
        }
        case 2:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 10)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 10;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Havajø picà{FFFFFF} uþ {E3F77E}10€");
            format(FoodName,sizeof(FoodName),"Havajø pica");
            NutritionWorth = 25;
        }
        case 3:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 9)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 9;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Karpio picà{FFFFFF} uþ {E3F77E}9€");
            format(FoodName,sizeof(FoodName),"Karpio pica");
            NutritionWorth = 20;
        }
        case 4:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 12)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 12;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Salami picà{FFFFFF} uþ {E3F77E}12€");
            format(FoodName,sizeof(FoodName),"Salami pica");
            NutritionWorth = 23;
        }
        case 5:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 3)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 3;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Kavos{FFFFFF} uþ {E3F77E}3€");
            format(FoodName,sizeof(FoodName),"Kava");
            NutritionWorth = 4;
        }
        case 6:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 4)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 4;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Sulèiø{FFFFFF} uþ {E3F77E}4€");
            format(FoodName,sizeof(FoodName),"Sultys");
            NutritionWorth = 2.5;
        }
        case 7:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                return 1;
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;
            }
            SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}2€");
            format(FoodName,sizeof(FoodName),"Coca-Cola");
            NutritionWorth = 3.5;
        }
    }
    if(NutritionWorth > 0)
    {
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'%e',%f,%i,NULL);",PlayerDB[playerid][SQLID],FoodName,NutritionWorth,gettime()+(86400*2));
        mysql_function_query(connectionHandle, QueryString, false, "","");
    }
    return 1;
}


forward OnPlayerBoughtNewCar(playerid);
public OnPlayerBoughtNewCar(playerid)
{
    if(PlayerDB[playerid][FirstOwnedVehicleID] == -1)
    {
        PlayerDB[playerid][FirstOwnedVehicleID] = cache_insert_id();
        new SQLstring[145];
        mysql_format(connectionHandle, SQLstring, 145, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][FirstOwnedVehicleID]);
        mysql_function_query(connectionHandle,SQLstring,true,"OnLoadFirstOwnedVehicle","d",playerid);
    }
    else
    {
        PlayerDB[playerid][SecondOwnedVehicleID] = cache_insert_id();
        new SQLstring[145];
        mysql_format(connectionHandle, SQLstring, 145, "SELECT * FROM `nuosavostrpriemones` WHERE `ID` = '%i' LIMIT 1;",PlayerDB[playerid][SecondOwnedVehicleID]);
        mysql_function_query(connectionHandle,SQLstring,true,"OnLoadSecondOwnedVehicle","d",playerid);
    }
    return 1;
}
forward OnLoadFirstOwnedVehicle(playerid);
public OnLoadFirstOwnedVehicle(playerid)
{
    if(cache_get_row_count() == 0)
    {
        PlayerDB[playerid][FirstOwnedVehicleID] = -1;
        PlayerDB[playerid][OwnedVehicle1] = -1;
    }
    else
    {
        new ServerBasedVehicleID,ID,Savininkas[24],Modelis,Float:tRida,Numeriai[8],RegistruotiNumeriai,Float:X,Float:Y,Float:Z,Float:Rotation;
        ID = cache_get_row_int(0, 0);
        cache_get_row(0, 1, Savininkas);
        Modelis = cache_get_row_int(0, 2);
        VehicleBySlotInfo[playerid][0][ModelBySlot] = Modelis;
        VehicleBySlotInfo[playerid][0][BrokenBySlot] = cache_get_row_int(0, 15);

        VehicleBySlotInfo[playerid][0][RidaBySlot] = cache_get_row_float(0, 3);
        VehicleBySlotInfo[playerid][0][BrokenTimesBySlot] = cache_get_row_int(0, 17);
        VehicleBySlotInfo[playerid][0][DujuIrangaBySlot] = cache_get_row_int(0, 18);
        new tmptext0[144];

        cache_get_row(0, 52, tmptext0);
        format(VehicleBySlotInfo[playerid][0][DateOfBuyingBySlot], 12, "%s", tmptext0);
        cache_get_row(0, 4, Numeriai);
		format(VehicleBySlotInfo[playerid][0][VehicleNumbersBySlot], 8, "%s", Numeriai);
        if(cache_get_row_int(0, 34) == 1)
        {
            VehicleBySlotInfo[playerid][0][PardavinejamaBySlot] = 1;
        }
        else
        {
            VehicleBySlotInfo[playerid][0][PardavinejamaBySlot] = 0;
        }
        if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 0)
        {
            tRida = cache_get_row_float(0, 3);
			//PlayerDB[playerid][OwnedVehicle1] = ServerBasedVehicleID;
			//cache_get_row(0, 4, Numeriai);
            //format(VehicleDB[ServerBasedVehicleID][VehicleNumbers], 8, "%s", Numeriai);
            RegistruotiNumeriai = cache_get_row_int(0, 5);
            X = cache_get_row_float(0, 6);
            Y = cache_get_row_float(0, 7);
            Z = cache_get_row_float(0, 8);
            Rotation = cache_get_row_float(0, 9);
            ServerBasedVehicleID = CreateVehicle(Modelis, X, Y, Z, Rotation, 0, 0, -1);
            VehicleDB[ServerBasedVehicleID][VehicleColor1] = cache_get_row_int(0, 10);
            VehicleDB[ServerBasedVehicleID][VehicleColor2] = cache_get_row_int(0, 11);
            ChangeVehicleColor(ServerBasedVehicleID, VehicleDB[ServerBasedVehicleID][VehicleColor1], VehicleDB[ServerBasedVehicleID][VehicleColor2]);
            VehicleDB[ServerBasedVehicleID][FuelType] = cache_get_row_int(0, 12);
            VehicleDB[ServerBasedVehicleID][Bendzinas] = cache_get_row_float(0, 13);
            VehicleDB[ServerBasedVehicleID][Dujos] = cache_get_row_float(0, 14);
            VehicleDB[ServerBasedVehicleID][Rida] = tRida;
            PlayerDB[playerid][OwnedVehicle1] = ServerBasedVehicleID;
            VehicleDB[ServerBasedVehicleID][VehicleDatabaseID] = ID;
            VehicleDB[ServerBasedVehicleID][VehicleNumReg] = RegistruotiNumeriai;
            format(VehicleDB[ServerBasedVehicleID][VehicleNumbers], 8, "%s", Numeriai);
            VehicleDB[ServerBasedVehicleID][VehicleWithOwner] = true;
            VehicleDB[ServerBasedVehicleID][VehicleOwnerID] = playerid;
            if(VehicleDB[ServerBasedVehicleID][VehicleNumReg] == 1)
            {
                SetVehicleNumberPlate(ServerBasedVehicleID, Numeriai);
            }
            VehicleDB[ServerBasedVehicleID][VehicleDauztumas] = cache_get_row_int(0, 17);
            VehicleDB[ServerBasedVehicleID][DujuIranga] = cache_get_row_int(0, 18);
            VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponModel] = cache_get_row_int(0, 19);
            VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponBullets] = cache_get_row_int(0, 20);
            VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponModel] = cache_get_row_int(0, 21);
            VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponBullets] = cache_get_row_int(0, 22);
            VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponModel] = cache_get_row_int(0, 23);
            VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponBullets] = cache_get_row_int(0, 24);
            VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponModel] = cache_get_row_int(0, 25);
            VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponBullets] = cache_get_row_int(0, 26);
            VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponModel] = cache_get_row_int(0, 27);
            VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponBullets] = cache_get_row_int(0, 28);
            VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponModel] = cache_get_row_int(0, 29);
            VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponBullets] = cache_get_row_int(0, 30);
            VehicleDB[ServerBasedVehicleID][DrugsSlot1] = cache_get_row_int(0, 31);
            VehicleDB[ServerBasedVehicleID][DrugsSlot2] = cache_get_row_int(0, 32);
            VehicleDB[ServerBasedVehicleID][DrugsSlot3] = cache_get_row_int(0, 33);
            if(cache_get_row_int(0, 34) == 1)
            {
                VehicleDB[ServerBasedVehicleID][Pardavinejama] = true;
            }
            else
            {
                VehicleDB[ServerBasedVehicleID][Pardavinejama] = false;
            }
            VehicleDB[ServerBasedVehicleID][PardavimoKaina] = cache_get_row_int(0, 35);

            for(new i = 0;i<13;i++)
            {
                new tmpComponentID = cache_get_row_int(0, 36+i);
                if(IsValidComponentForVehicleModel(Modelis,tmpComponentID) == 1)
                {
                    AddVehicleComponent(ServerBasedVehicleID, tmpComponentID);
                }
            }
            ChangeVehiclePaintjob(ServerBasedVehicleID, cache_get_row_int(0, 50));
            if(cache_get_row_int(0, 51) == 1)
            {
                VehicleDB[ServerBasedVehicleID][VehicleLocked] = 1;
            }
            else
            {
                VehicleDB[ServerBasedVehicleID][VehicleLocked] = 0;
            }
            if(VehicleDB[ServerBasedVehicleID][Pardavinejama] == true)
            {
                if(IsValidDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]))
                {
                    DestroyDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]);
                }
                new string[500];
                if(VehicleDB[ServerBasedVehicleID][PardavimoKaina] == 0)
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[ServerBasedVehicleID][Rida]);
                }
                else
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[ServerBasedVehicleID][PardavimoKaina]),VehicleDB[ServerBasedVehicleID][Rida]);
                }
                VehicleDB[ServerBasedVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, X,Y,Z, 15, INVALID_PLAYER_ID, ServerBasedVehicleID, 0);
            }
        }
    }
    return 1;
}


forward OnLoadSecondOwnedVehicle(playerid);
public OnLoadSecondOwnedVehicle(playerid)
{

    if(cache_get_row_count() == 0)
    {
        PlayerDB[playerid][SecondOwnedVehicleID] = -1;
        PlayerDB[playerid][OwnedVehicle2] = -1;
    }
    else
    {
        new ServerBasedVehicleID,ID,Savininkas[24],Modelis,Float:tRida,Numeriai[8],RegistruotiNumeriai,Float:X,Float:Y,Float:Z,Float:Rotation;
        ID = cache_get_row_int(0, 0);
        cache_get_row(0, 1, Savininkas);
        Modelis = cache_get_row_int(0, 2);
        VehicleBySlotInfo[playerid][1][ModelBySlot] = Modelis;
        VehicleBySlotInfo[playerid][1][BrokenBySlot] = cache_get_row_int(0, 15);

        VehicleBySlotInfo[playerid][1][RidaBySlot] = cache_get_row_float(0, 3);
        VehicleBySlotInfo[playerid][1][BrokenTimesBySlot] = cache_get_row_int(0, 17);
        VehicleBySlotInfo[playerid][1][DujuIrangaBySlot] = cache_get_row_int(0, 18);
        new tmptext0[144];

        cache_get_row(0, 52, tmptext0);
        format(VehicleBySlotInfo[playerid][1][DateOfBuyingBySlot], 12, "%s", tmptext0);

        cache_get_row(0, 4, Numeriai);
        format(VehicleBySlotInfo[playerid][1][VehicleNumbersBySlot], 8, "%s", Numeriai);

        if(cache_get_row_int(0, 34) == 1)
        {
            VehicleBySlotInfo[playerid][1][PardavinejamaBySlot] = 1;
        }
        else
        {
            VehicleBySlotInfo[playerid][1][PardavinejamaBySlot] = 0;
        }
        if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 0)
        {
            tRida = cache_get_row_float(0, 3);
            RegistruotiNumeriai = cache_get_row_int(0, 5);
            X = cache_get_row_float(0, 6);
            Y = cache_get_row_float(0, 7);
            Z = cache_get_row_float(0, 8);
            Rotation = cache_get_row_float(0, 9);
            ServerBasedVehicleID = CreateVehicle(Modelis, X, Y, Z, Rotation, 0, 0, -1);
            VehicleDB[ServerBasedVehicleID][VehicleColor1] = cache_get_row_int(0, 10);
            VehicleDB[ServerBasedVehicleID][VehicleColor2] = cache_get_row_int(0, 11);
            ChangeVehicleColor(ServerBasedVehicleID, VehicleDB[ServerBasedVehicleID][VehicleColor1], VehicleDB[ServerBasedVehicleID][VehicleColor2]);
            VehicleDB[ServerBasedVehicleID][FuelType] = cache_get_row_int(0, 12);
            VehicleDB[ServerBasedVehicleID][Bendzinas] = cache_get_row_float(0, 13);
            VehicleDB[ServerBasedVehicleID][Dujos] = cache_get_row_float(0, 14);
            VehicleDB[ServerBasedVehicleID][Rida] = tRida;
            PlayerDB[playerid][OwnedVehicle2] = ServerBasedVehicleID;
            VehicleDB[ServerBasedVehicleID][VehicleDatabaseID] = ID;
            VehicleDB[ServerBasedVehicleID][VehicleNumReg] = RegistruotiNumeriai;
            format(VehicleDB[ServerBasedVehicleID][VehicleNumbers], 8, "%s", Numeriai);
            VehicleDB[ServerBasedVehicleID][VehicleWithOwner] = true;
            VehicleDB[ServerBasedVehicleID][VehicleOwnerID] = playerid;
            if(VehicleDB[ServerBasedVehicleID][VehicleNumReg] == 1)
            {
                SetVehicleNumberPlate(ServerBasedVehicleID, Numeriai);
            }
            VehicleDB[ServerBasedVehicleID][VehicleDauztumas] = cache_get_row_int(0, 17);
            VehicleDB[ServerBasedVehicleID][DujuIranga] = cache_get_row_int(0, 18);
            VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponModel] = cache_get_row_int(0, 19);
            VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponBullets] = cache_get_row_int(0, 20);
            VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponModel] = cache_get_row_int(0, 21);
            VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponBullets] = cache_get_row_int(0, 22);
            VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponModel] = cache_get_row_int(0, 23);
            VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponBullets] = cache_get_row_int(0, 24);
            VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponModel] = cache_get_row_int(0, 25);
            VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponBullets] = cache_get_row_int(0, 26);
            VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponModel] = cache_get_row_int(0, 27);
            VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponBullets] = cache_get_row_int(0, 28);
            VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponModel] = cache_get_row_int(0, 29);
            VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponBullets] = cache_get_row_int(0, 30);
            VehicleDB[ServerBasedVehicleID][DrugsSlot1] = cache_get_row_int(0, 31);
            VehicleDB[ServerBasedVehicleID][DrugsSlot2] = cache_get_row_int(0, 32);
            VehicleDB[ServerBasedVehicleID][DrugsSlot3] = cache_get_row_int(0, 33);
            if(cache_get_row_int(0, 34) == 1)
            {
                VehicleDB[ServerBasedVehicleID][Pardavinejama] = true;
            }
            else
            {
                VehicleDB[ServerBasedVehicleID][Pardavinejama] = false;
            }
            VehicleDB[ServerBasedVehicleID][PardavimoKaina] = cache_get_row_int(0, 35);

            for(new i = 0;i<13;i++)
            {
                new tmpComponentID = cache_get_row_int(0, 36+i);
                if(IsValidComponentForVehicleModel(Modelis,tmpComponentID) == 1)
                {
                    AddVehicleComponent(ServerBasedVehicleID, tmpComponentID);
                }
            }
            ChangeVehiclePaintjob(ServerBasedVehicleID, cache_get_row_int(0, 50));
            if(cache_get_row_int(0, 51) == 1)
            {
                VehicleDB[ServerBasedVehicleID][VehicleLocked] = 1;
            }
            else
            {
                VehicleDB[ServerBasedVehicleID][VehicleLocked] = 0;
            }
            if(VehicleDB[ServerBasedVehicleID][Pardavinejama] == true)
            {
                if(IsValidDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]))
                {
                    DestroyDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]);
                }
                new string[500];
                if(VehicleDB[ServerBasedVehicleID][PardavimoKaina] == 0)
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[ServerBasedVehicleID][Rida]);
                }
                else
                {
                    format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[ServerBasedVehicleID][PardavimoKaina]),VehicleDB[ServerBasedVehicleID][Rida]);
                }
                VehicleDB[ServerBasedVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, X,Y,Z, 15, INVALID_PLAYER_ID, ServerBasedVehicleID, 0);
            }
        }
    }
    return 1;
}

CMD:mvaldymas(playerid,params[])
{
    if(PlayerDB[playerid][FirstOwnedVehicleID] == -1 && PlayerDB[playerid][SecondOwnedVehicleID] == -1)
    {
        ErrorMsg(playerid,"• Neturite nuosavos tr. priemonës.");
        return 1;
    }
    new strf[2048];
    new str[125];
    if(PlayerDB[playerid][FirstOwnedVehicleID] >= 0)
    {
        format(str, sizeof(str), "{62A5C4}• {FFFFFF}Pirmasis transportas: {62A5C4}%s \n",vNames[VehicleBySlotInfo[playerid][0][ModelBySlot] - 400]);
        strcat(strf, str);
        format(str, sizeof(str), " \n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}1. {FFFFFF}Surasti automobilá þemelapyje\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}2. {FFFFFF}Iðmesti þmonës ið tr.priemones \n"); strcat(strf, str);
        if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
        {
            format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Atrakinti automobilá \n"); strcat(strf, str);
        }
        else
        {
            if(VehicleDB[PlayerDB[playerid][OwnedVehicle1]][VehicleLocked] == 1)
            {
                format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Atrakinti automobilá \n"); strcat(strf, str);
            }
            else
            {
                format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Uþrakinti automobilá \n"); strcat(strf, str);
            }
        }
        format(str, sizeof(str), "\t{62A5C4}4. {FFFFFF}Parduoti automobilá serveriui (Tam tikroje zonoje)\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}5. {FFFFFF}Parduoti automobilá þaidëjui\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}6. {FFFFFF}Automobilio bagaþinës valdymas\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}7. {FFFFFF}Automobilio atstatymas (uþ %i€)\n",floatround(aKaina[VehicleBySlotInfo[playerid][0][ModelBySlot] - 400] * 0.07, floatround_ceil)); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}8. {FFFFFF}Automobilio informacija\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}9. {FFFFFF}Pasikeisti kuro tipà\n"); strcat(strf, str);
        if(VehicleBySlotInfo[playerid][0][BrokenBySlot] == 1)
        {
            if(VehicleBySlotInfo[playerid][0][PardavinejamaBySlot] == 1)
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas [{FF0000}IÐJUNGTI{FFFFFF}] \n");
            }
            else
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas \n");
            }
        }
        else
        {
            if(VehicleDB[PlayerDB[playerid][OwnedVehicle1]][Pardavinejama] == true)
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas [{FF0000}IÐJUNGTI{FFFFFF}] \n");
            }
            else
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas \n");
            }
        }
        format(str, sizeof(str), " \n"); strcat(strf, str);
    }
    else
    {
        format(str, sizeof(str), "{62A5C4}• {FFFFFF}Neturite pirmos tr.priemonës.\n"); strcat(strf, str);
        format(str, sizeof(str), " \n"); strcat(strf, str);
    }
    if(PlayerDB[playerid][SecondOwnedVehicleID] >= 0)
    {
        format(str, sizeof(str), "{62A5C4}• {FFFFFF}Antrasis transportas {62A5C4}%s \n",vNames[VehicleBySlotInfo[playerid][1][ModelBySlot] - 400]); strcat(strf, str);
        format(str, sizeof(str), " \n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}1. {FFFFFF}Surasti automobilá þemelapyje\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}2. {FFFFFF}Iðmesti þmonës ið tr.priemones \n"); strcat(strf, str);
        if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
        {
            format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Atrakinti automobilá \n"); strcat(strf, str);
        }
        else
        {
            if(VehicleDB[PlayerDB[playerid][OwnedVehicle2]][VehicleLocked] == 1)
            {
                format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Atrakinti automobilá \n"); strcat(strf, str);
            }
            else
            {
                format(str, sizeof(str), "\t{62A5C4}3. {FFFFFF}Uþrakinti automobilá \n"); strcat(strf, str);
            }
        }
        format(str, sizeof(str), "\t{62A5C4}4. {FFFFFF}Parduoti automobilá serveriui (Tam tikroje zonoje)\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}5. {FFFFFF}Parduoti automobilá þaidëjui\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}6. {FFFFFF}Automobilio bagaþinës valdymas\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}7. {FFFFFF}Automobilio atstatymas (uþ %i€)\n",floatround(aKaina[VehicleBySlotInfo[playerid][1][ModelBySlot] - 400] * 0.07, floatround_ceil)); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}8. {FFFFFF}Automobilio informacija\n"); strcat(strf, str);
        format(str, sizeof(str), "\t{62A5C4}9. {FFFFFF}Pasikeisti kuro tipà\n"); strcat(strf, str);
        if(VehicleBySlotInfo[playerid][1][BrokenBySlot] == 1)
        {
            if(VehicleBySlotInfo[playerid][1][PardavinejamaBySlot] == 1)
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas [{FF0000}IÐJUNGTI{FFFFFF}] \n");
            }
            else
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas \n");
            }
        }
        else
        {
            if(VehicleDB[PlayerDB[playerid][OwnedVehicle2]][Pardavinejama] == true)
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas [{FF0000}IÐJUNGTI{FFFFFF}] \n");
            }
            else
            {
                strcat(strf, "\t{62A5C4}10. {FFFFFF}Maðinos pardavinëjimas \n");
            }
        }
    }
    else
    {
        format(str, sizeof(str), "{62A5C4}• {FFFFFF}Neturite antrosios tr.priemonës.\n"); strcat(strf, str);
        format(str, sizeof(str), " \n"); strcat(strf, str);
    }
    ShowPlayerDialog(playerid, 239, DIALOG_STYLE_LIST, "{AFAFAF}Maðinø valdymas", strf, "Rinktis", "Atðaukti");
    return 1;
}


forward OnRepairFirstCar(playerid);
public OnRepairFirstCar(playerid)
{
    new ServerBasedVehicleID,ID,Savininkas[24],Modelis,Float:tRida,Numeriai[7],RegistruotiNumeriai,Float:X,Float:Y,Float:Z,Float:Rotation;
    ID = cache_get_row_int(0, 0);
    cache_get_row(0, 1, Savininkas);
    Modelis = cache_get_row_int(0, 2);
    VehicleBySlotInfo[playerid][0][ModelBySlot] = Modelis;
    VehicleBySlotInfo[playerid][0][BrokenBySlot] = 0;

    tRida = cache_get_row_float(0, 3);
    cache_get_row(0, 4, Numeriai);
    RegistruotiNumeriai = cache_get_row_int(0, 5);

    switch(random(4))
    {
        case 0:
        {
            X = -2682.8950;
            Y = -22.7127;
            Z = 4.4606;
            Rotation = 179.6862;
        }
        case 1:
        {
            X = -2676.3982;
            Y = -54.4863;
            Z = 4.4531;
            Rotation = 359.2741;
        }
        case 2:
        {
            X = -2676.2302;
            Y = -22.7434;
            Z = 4.4565;
            Rotation = 357.9728;
        }
        case 3:
        {
            X = -2660.5435;
            Y = -55.6402;
            Z = 4.4505;
            Rotation = 182.5757;
        }
    }

    Rotation = cache_get_row_float(0, 9);
    ServerBasedVehicleID = CreateVehicle(Modelis, X, Y, Z, Rotation, 0, 0, -1);
    VehicleDB[ServerBasedVehicleID][VehicleColor1] = cache_get_row_int(0, 10);
    VehicleDB[ServerBasedVehicleID][VehicleColor2] = cache_get_row_int(0, 11);
    ChangeVehicleColor(ServerBasedVehicleID, VehicleDB[ServerBasedVehicleID][VehicleColor1], VehicleDB[ServerBasedVehicleID][VehicleColor2]);
    VehicleDB[ServerBasedVehicleID][FuelType] = cache_get_row_int(0, 12);
    VehicleDB[ServerBasedVehicleID][Bendzinas] = cache_get_row_float(0, 13);
    VehicleDB[ServerBasedVehicleID][Dujos] = cache_get_row_float(0, 14);
    VehicleDB[ServerBasedVehicleID][Rida] = tRida;
    PlayerDB[playerid][OwnedVehicle1] = ServerBasedVehicleID;
    VehicleDB[ServerBasedVehicleID][VehicleDatabaseID] = ID;
    VehicleDB[ServerBasedVehicleID][VehicleNumReg] = RegistruotiNumeriai;
    format(VehicleDB[ServerBasedVehicleID][VehicleNumbers], 8, "%s", Numeriai);
    VehicleDB[ServerBasedVehicleID][VehicleWithOwner] = true;
    VehicleDB[ServerBasedVehicleID][VehicleOwnerID] = playerid;
    if(VehicleDB[ServerBasedVehicleID][VehicleNumReg] == 1)
    {
        SetVehicleNumberPlate(ServerBasedVehicleID, Numeriai);
    }
    VehicleDB[ServerBasedVehicleID][VehicleDauztumas] = cache_get_row_int(0, 17);
    VehicleDB[ServerBasedVehicleID][DujuIranga] = cache_get_row_int(0, 18);
    VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponModel] = cache_get_row_int(0, 19);
    VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponBullets] = cache_get_row_int(0, 20);
    VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponModel] = cache_get_row_int(0, 21);
    VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponBullets] = cache_get_row_int(0, 22);
    VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponModel] = cache_get_row_int(0, 23);
    VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponBullets] = cache_get_row_int(0, 24);
    VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponModel] = cache_get_row_int(0, 25);
    VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponBullets] = cache_get_row_int(0, 26);
    VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponModel] = cache_get_row_int(0, 27);
    VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponBullets] = cache_get_row_int(0, 28);
    VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponModel] = cache_get_row_int(0, 29);
    VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponBullets] = cache_get_row_int(0, 30);
    VehicleDB[ServerBasedVehicleID][DrugsSlot1] = cache_get_row_int(0, 31);
    VehicleDB[ServerBasedVehicleID][DrugsSlot2] = cache_get_row_int(0, 32);
    VehicleDB[ServerBasedVehicleID][DrugsSlot3] = cache_get_row_int(0, 33);
    if(cache_get_row_int(0, 34) == 1)
    {
        VehicleDB[ServerBasedVehicleID][Pardavinejama] = true;
    }
    else
    {
        VehicleDB[ServerBasedVehicleID][Pardavinejama] = false;
    }
    VehicleDB[ServerBasedVehicleID][PardavimoKaina] = cache_get_row_int(0, 35);
    new tmptext0[144];


    for(new i = 0;i<14;i++)
    {
        new tmpComponentID = cache_get_row_int(0, 37+i);
        if(IsValidComponentForVehicleModel(Modelis,tmpComponentID) == 1)
        {
            AddVehicleComponent(ServerBasedVehicleID, tmpComponentID);
        }
    }
    ChangeVehiclePaintjob(ServerBasedVehicleID, cache_get_row_int(0, 51));
    if(cache_get_row_int(0, 52) == 1)
    {
        VehicleDB[ServerBasedVehicleID][VehicleLocked] = 1;
    }
    else
    {
        VehicleDB[ServerBasedVehicleID][VehicleLocked] = 0;
    }
    if(VehicleDB[ServerBasedVehicleID][Pardavinejama] == true)
    {
        if(IsValidDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]))
        {
            DestroyDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]);
        }
        new string[500];
        if(VehicleDB[ServerBasedVehicleID][PardavimoKaina] == 0)
        {
            format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[ServerBasedVehicleID][Rida]);
        }
        else
        {
            format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[ServerBasedVehicleID][PardavimoKaina]),VehicleDB[ServerBasedVehicleID][Rida]);
        }
        VehicleDB[ServerBasedVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, X,Y,Z, 15, INVALID_PLAYER_ID, ServerBasedVehicleID, 0);
    }

    format(tmptext0, 128, "• {FFFFFF}Jûsø automobilis {62A5C4}%s {FFFFFF}buvo suremontuotas uþ {62A5C4}%i €.", vNames[Modelis-400],floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil));
    SendClientMessage(playerid, ZALIA, tmptext0);
    return 1;
}


forward OnRepairSecondCar(playerid);
public OnRepairSecondCar(playerid)
{
    new ServerBasedVehicleID,ID,Savininkas[24],Modelis,Float:tRida,Numeriai[7],RegistruotiNumeriai,Float:X,Float:Y,Float:Z,Float:Rotation;
    ID = cache_get_row_int(0, 0);
    cache_get_row(0, 1, Savininkas);
    Modelis = cache_get_row_int(0, 2);
    VehicleBySlotInfo[playerid][1][ModelBySlot] = Modelis;
    VehicleBySlotInfo[playerid][1][BrokenBySlot] = 0;

    tRida = cache_get_row_float(0, 3);
    cache_get_row(0, 4, Numeriai);
    RegistruotiNumeriai = cache_get_row_int(0, 5);
    switch(random(4))
    {
        case 0:
        {
            X = -2682.8950;
            Y = -22.7127;
            Z = 4.4606;
            Rotation = 179.6862;
        }
        case 1:
        {
            X = -2676.3982;
            Y = -54.4863;
            Z = 4.4531;
            Rotation = 359.2741;
        }
        case 2:
        {
            X = -2676.2302;
            Y = -22.7434;
            Z = 4.4565;
            Rotation = 357.9728;
        }
        case 3:
        {
            X = -2660.5435;
            Y = -55.6402;
            Z = 4.4505;
            Rotation = 182.5757;
        }
    }
    Rotation = cache_get_row_float(0, 9);
    ServerBasedVehicleID = CreateVehicle(Modelis, X, Y, Z, Rotation, 0, 0, -1);
    VehicleDB[ServerBasedVehicleID][VehicleColor1] = cache_get_row_int(0, 10);
    VehicleDB[ServerBasedVehicleID][VehicleColor2] = cache_get_row_int(0, 11);
    ChangeVehicleColor(ServerBasedVehicleID, VehicleDB[ServerBasedVehicleID][VehicleColor1], VehicleDB[ServerBasedVehicleID][VehicleColor2]);
    VehicleDB[ServerBasedVehicleID][FuelType] = cache_get_row_int(0, 12);
    VehicleDB[ServerBasedVehicleID][Bendzinas] = cache_get_row_float(0, 13);
    VehicleDB[ServerBasedVehicleID][Dujos] = cache_get_row_float(0, 14);
    VehicleDB[ServerBasedVehicleID][Rida] = tRida;
    PlayerDB[playerid][OwnedVehicle2] = ServerBasedVehicleID;
    VehicleDB[ServerBasedVehicleID][VehicleDatabaseID] = ID;
    VehicleDB[ServerBasedVehicleID][VehicleNumReg] = RegistruotiNumeriai;
    format(VehicleDB[ServerBasedVehicleID][VehicleNumbers], 8, "%s", Numeriai);
    VehicleDB[ServerBasedVehicleID][VehicleWithOwner] = true;
    VehicleDB[ServerBasedVehicleID][VehicleOwnerID] = playerid;
    if(VehicleDB[ServerBasedVehicleID][VehicleNumReg] == 1)
    {
        SetVehicleNumberPlate(ServerBasedVehicleID, Numeriai);
    }
    VehicleDB[ServerBasedVehicleID][VehicleDauztumas] = cache_get_row_int(0, 17);
    VehicleDB[ServerBasedVehicleID][DujuIranga] = cache_get_row_int(0, 18);
    VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponModel] = cache_get_row_int(0, 19);
    VehicleDB[ServerBasedVehicleID][WeaponSlot1WeaponBullets] = cache_get_row_int(0, 20);
    VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponModel] = cache_get_row_int(0, 21);
    VehicleDB[ServerBasedVehicleID][WeaponSlot2WeaponBullets] = cache_get_row_int(0, 22);
    VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponModel] = cache_get_row_int(0, 23);
    VehicleDB[ServerBasedVehicleID][WeaponSlot3WeaponBullets] = cache_get_row_int(0, 24);
    VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponModel] = cache_get_row_int(0, 25);
    VehicleDB[ServerBasedVehicleID][WeaponSlot4WeaponBullets] = cache_get_row_int(0, 26);
    VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponModel] = cache_get_row_int(0, 27);
    VehicleDB[ServerBasedVehicleID][WeaponSlot5WeaponBullets] = cache_get_row_int(0, 28);
    VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponModel] = cache_get_row_int(0, 29);
    VehicleDB[ServerBasedVehicleID][WeaponSlot6WeaponBullets] = cache_get_row_int(0, 30);
    VehicleDB[ServerBasedVehicleID][DrugsSlot1] = cache_get_row_int(0, 31);
    VehicleDB[ServerBasedVehicleID][DrugsSlot2] = cache_get_row_int(0, 32);
    VehicleDB[ServerBasedVehicleID][DrugsSlot3] = cache_get_row_int(0, 33);
    if(cache_get_row_int(0, 34) == 1)
    {
        VehicleDB[ServerBasedVehicleID][Pardavinejama] = true;
    }
    else
    {
        VehicleDB[ServerBasedVehicleID][Pardavinejama] = false;
    }
    VehicleDB[ServerBasedVehicleID][PardavimoKaina] = cache_get_row_int(0, 35);
    new tmptext0[144];


    for(new i = 0;i<14;i++)
    {
        new tmpComponentID = cache_get_row_int(0, 37+i);
        if(IsValidComponentForVehicleModel(Modelis,tmpComponentID) == 1)
        {
            AddVehicleComponent(ServerBasedVehicleID, tmpComponentID);
        }
    }
    ChangeVehiclePaintjob(ServerBasedVehicleID, cache_get_row_int(0, 51));
    if(cache_get_row_int(0, 52) == 1)
    {
        VehicleDB[ServerBasedVehicleID][VehicleLocked] = 1;
    }
    else
    {
        VehicleDB[ServerBasedVehicleID][VehicleLocked] = 0;
    }
    if(VehicleDB[ServerBasedVehicleID][Pardavinejama] == true)
    {
        if(IsValidDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]))
        {
            DestroyDynamic3DTextLabel(VehicleDB[ServerBasedVehicleID][PardavimoLabel]);
        }
        new string[500];
        if(VehicleDB[ServerBasedVehicleID][PardavimoKaina] == 0)
        {
            format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}sutartinæ kainà\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),VehicleDB[ServerBasedVehicleID][Rida]);
        }
        else
        {
            format(string, 500, "{FFFFFF}Transporto priemonës savininkas:{62A5C4} %s\n{FFFFFF}Transporto priemonë parduodama uþ: {62A5C4}%s €\n{FFFFFF}Transporto priemonës rida: {62A5C4}%0.1f KM\n\n{FFFFFF}Daugiau informacijos paspaudus - {62A5C4}ENTER {FFFFFF}arba G {FFFFFF}mygtukà prie tr.priemonës.", Vardas(playerid),AddPoints(VehicleDB[ServerBasedVehicleID][PardavimoKaina]),VehicleDB[ServerBasedVehicleID][Rida]);
        }
        VehicleDB[ServerBasedVehicleID][PardavimoLabel] = CreateDynamic3DTextLabel(string,PILKA, X,Y,Z, 15, INVALID_PLAYER_ID, ServerBasedVehicleID, 0);
    }
    format(tmptext0, 128, "• {FFFFFF}Jûsø automobilis {62A5C4}%s {FFFFFF}buvo suremontuotas uþ {62A5C4}%i €.", vNames[Modelis-400],floatround(aKaina[Modelis - 400] * 0.07, floatround_ceil));
    SendClientMessage(playerid, ZALIA, tmptext0);
    return 1;
}
forward ShowAchievement(playerid,text[]);
public ShowAchievement(playerid,text[])
{
    if(PlayerAchievementTimerRunsTill[playerid] >= gettime())
    {
        KillTimer(PlayerAchievementTimer[playerid]);
        PlayerTextDrawHide(playerid,PlayerAchievementDraw[playerid]);
        PlayerTextDrawDestroy(playerid,PlayerAchievementDraw[playerid]);
    }
    new PlayerText:TmpID = CreatePlayerTextDraw(playerid, 309.000000, 165.733306, text);
    PlayerTextDrawLetterSize(playerid, TmpID, 0.434499, 1.786667);
    PlayerTextDrawAlignment(playerid, TmpID, 2);
    PlayerTextDrawColor(playerid, TmpID, 646140671);
    PlayerTextDrawSetShadow(playerid, TmpID, 0);
    PlayerTextDrawSetOutline(playerid, TmpID, 1);
    PlayerTextDrawBackgroundColor(playerid, TmpID, 100);
    PlayerTextDrawFont(playerid, TmpID, 3);
    PlayerTextDrawSetProportional(playerid, TmpID, 1);
    PlayerTextDrawSetShadow(playerid, TmpID, 0);
    PlayerTextDrawShow(playerid, TmpID);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[0]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[1]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[2]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[3]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[4]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[5]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[6]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[7]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[8]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[9]);
    TextDrawShowForPlayer(playerid, pasiekimu_td_g[10]);

    PlayerTextDrawShow(playerid, TmpID);
    PlayerAchievementDraw[playerid] = TmpID;
    PlayerAchievementTimerRunsTill[playerid] = gettime()+5;
    PlayerAchievementTimer[playerid] = SetTimerEx("HideAchievement", 5000, false, "di", playerid,_:TmpID);
}
forward HideAchievement(playerid,PlayerText:TmpID);
public HideAchievement(playerid,PlayerText:TmpID)
{
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[0]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[1]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[2]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[3]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[4]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[5]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[6]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[7]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[8]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[9]);
    TextDrawHideForPlayer(playerid, pasiekimu_td_g[10]);

    PlayerTextDrawHide(playerid, TmpID);
    PlayerTextDrawDestroy(playerid, TmpID);
}
CMD:padeti(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        new id,text[120];
        if(sscanf(params, "u s[120]", id,text))
        {
            UsageMessage(playerid,"• Padëti þaidëjui: /padeti [Vardas_Pavardë arba jo ID] [atsakymas á pagalbos praðymà].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(id == playerid)
                {
                    ErrorMsg(playerid,"• Sau padëti taip negalite.");
                    return 1;
                }
                if(PlayerDB[id][PlayerNeedAnswer] == true)
                {
                    new string[128];
                    format(string, sizeof(string), "• Administratorius {FFFFFF}%s {89E894}sutiko Jums padëti.",Vardas(playerid));
                    SendClientMessage(id, 0x89E894FF, string);
                    SendClientMessage(id, 0x89E894FF, "• Administratoriaus atsakymas á jûsø uþduota klausimà:");
                    SendClientMessage(id, 0xFFFFFFFF, text);
                    new Pmin,Psec;
                    Psec = gettime() - PlayerDB[id][PlayerAskedHelpAt];
                    while(Psec >= 60)
                    {
                        Pmin+=1;
                        Psec-=60;
                    }
                    format(string, sizeof(string), "• Adminstratorius á jûsø klausimà atsakë per: {FFFFFF}%d min %02d sec.",Pmin,Psec);
                    SendClientMessage(id, 0x89E894FF, string);

                    new string2[128];
                    format(string, sizeof(string), "• Administratorius {FFFFFF}%s {FFFF99}atsakë á þaidëjo {FFFFFF}%s {FFFF99}klausimà.",Vardas(playerid),Vardas(id));
                    format(string2, sizeof(string2), "•• Á klausimà buvo atsakyta per {FFFFFF}%dmin %02dsec.{FFFF99} atsakymas á klausimà:", Pmin,Psec);
                    PlayerDB[playerid][TimesHelped]+=1;
                    for(new p = 0;p<=GetPlayerPoolSize();p++)
                    {
                        if(PlayerDB[p][adminlvl] > 0)
                        {
                            if(p != id)
                            {
                                SendClientMessage(p, 0xFFFF99FF, string);
                                SendClientMessage(p, 0xFFFF99FF, string2);
                                SendClientMessage(p, 0xFFFFFFFF, text);
                            }
                        }
                    }
                    PlayerDB[id][PlayerNeedAnswer] = false;
                    PlayerDB[id][PlayerCanAskAt] = gettime()+15;
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas ne praðo pagalbos.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}


forward OnPlayerRequestTopByUzdarbisS(playerid);
public OnPlayerRequestTopByUzdarbisS(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai ðiandien uþdirbe daugiausiai: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}uþdirbæs {FFFF00}%s{FFFFFF} €.\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][UzdarbisSiandien];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal ðiandien uþdirbtus pinigus jums reikia uþdirbti dar{FFFF00} %s {FFFFFF}€.", AddSpaces(Gap));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][UzdarbisSiandien];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal ðiandien uþdirbtus pinigus jums reikia uþdirbti dar{FFFF00} %s {FFFFFF}€.",PlayerInTopPlace - 1, AddSpaces(Gap));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal ðiandien uþdirbtus pinigus", info, "Gerai", "");
    return 1;
}


//

forward OnPlayerRequestTopByUogosToday(playerid);
public OnPlayerRequestTopByUogosToday(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai ðiandien pardave daugiausiai uogø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}pardavë {FFFF00}%i{FFFFFF} uogø(-as).\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][UogosToday];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal ðiandien parduotas uogas jums reikia parduoti dar{FFFF00} %i {FFFFFF}uogø)-as).", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][UogosToday];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal ðiandien parduotas uogas jums reikia parduoti dar{FFFF00} %i {FFFFFF}uogø)-as).",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal ðiandien parduotas uogas", info, "Gerai", "");
    return 1;
}

//

forward OnPlayerRequestTopByUogosTotal(playerid);
public OnPlayerRequestTopByUogosTotal(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai pardave daugiausiai uogø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}pardavë {FFFF00}%i{FFFFFF} uogø)-as.\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][UogosTotal];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal parduotas uogas jums reikia parduoti dar{FFFF00} %i {FFFFFF}uogø)-as.", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][UogosTotal];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal parduotas uogas jums reikia parduoti dar{FFFF00} %i {FFFFFF}uogø)-as.",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal parduotas uogas", info, "Gerai", "");
    return 1;
}
//


forward OnPlayerRequestTopByMathToday(playerid);
public OnPlayerRequestTopByMathToday(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai ðiandien iðsprendæ daugiausiai uþdaviniø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}iðsprendë {FFFF00}%i{FFFFFF} uþdaviniø(-ius).\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][MathToday];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal ðiandien iðspræstus uþdavinius jums reikia iðspræsti dar{FFFF00} %i {FFFFFF}uþdaviniø.", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][MathToday];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal ðiandien iðspræstus uþdavinius jums reikia iðspræsti dar{FFFF00} %i {FFFFFF}uogø.",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal ðiandien iðspræstus uþdavinius", info, "Gerai", "");
    return 1;
}

//

forward OnPlayerRequestTopByMathTotal(playerid);
public OnPlayerRequestTopByMathTotal(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai iðsprendæ daugiausiai uþdaviniø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}iðsprendë {FFFF00}%i{FFFFFF} uþdaviniø(-ius).\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][MathTotal];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal iðspræstas matematines uþduotis jums reikia dar iðspræsti{FFFF00} %i {FFFFFF}uþdavinius.", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][MathTotal];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal iðspræstas matematines uþduotis jums reikia dar iðspræsti{FFFF00} %i {FFFFFF}uþdavinius.",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal iðspræstus matematinius uþdavinius", info, "Gerai", "");
    return 1;
}



//
forward OnPlayerRequestTopByUzdarbis(playerid);
public OnPlayerRequestTopByUzdarbis(playerid)
{
    new info[2048];
    new string[144];
    info = "{FFFFFF}Þaidëjai uþdirbe daugiausiai: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 144, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}uþdirbæs {FFFF00}%s{FFFFFF} €.\n", i+1,PlayerNickName,AddSpaces(cache_get_row_int(i, 1)));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][Uzdarbis];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 144, "\n{FFFFFF}Patekimui á TOP 10 pagal uþdirbtus pinigus jums reikia uþdirbti dar{FFFF00} %s {FFFFFF}€.", AddSpaces(Gap));
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][Uzdarbis];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 144, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal uþdirbtus pinigus jums reikia uþdirbti dar{FFFF00} %s {FFFFFF}€.",PlayerInTopPlace - 1, AddSpaces(Gap));
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal uþdirbtus pinigus", info, "Gerai", "");
    return 1;
}



forward OnBuyFoodToInventorK(playerid,Item);
public OnBuyFoodToInventorK(playerid,Item)
{
    new Limit = 10;
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        Limit = 20;
    }
    else if(PlayerDB[playerid][VIP] == 1)
    {
        Limit = 15;
    }
    if(cache_get_row_count() >= Limit )
    {
        ErrorMsg(playerid,"• Jûsø inventorius yra pilnas. Inventoriø perþiûrëti galite su komanda /mgv.");
        return 1;
    }
    new QueryString[200];
    switch(Item)
    {
        case 0:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;

                SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}bandelæ su cinamonu{FFFFFF} uþ {E3F77E}2€");

                mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'Bandelë su cinamonu',5,%i,NULL);",PlayerDB[playerid][SQLID],gettime()+(86400*2));
                mysql_function_query(connectionHandle, QueryString, false, "","");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }
        case 1:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;

                SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}traðkuèiø{FFFFFF} uþ {E3F77E}2€");

                mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'Traðkuèiai',7,%i,NULL);",PlayerDB[playerid][SQLID],gettime()+(86400*2));
                mysql_function_query(connectionHandle, QueryString, false, "","");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }
        case 2:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 1)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 1;

                SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}sausainiø{FFFFFF} uþ {E3F77E}1€");

                mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'Sausainiai „Selga“',4,%i,NULL);",PlayerDB[playerid][SQLID],gettime()+(86400*2));
                mysql_function_query(connectionHandle, QueryString, false, "","");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }

        case 3:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;

                SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Coca-Cola{FFFFFF} uþ {E3F77E}2€");

                mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'Coca-Cola',4.5,%i,NULL);",PlayerDB[playerid][SQLID],gettime()+(86400*2));
                mysql_function_query(connectionHandle, QueryString, false, "","");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }
        case 4:
        {
            if(PlayerDB[playerid][MoneyInPocket] < 2)
            {
                ErrorMsg(playerid,"• Jûs turite per maþai pinigø ásigyti ðá produktà.");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
            else
            {
                PlayerDB[playerid][MoneyInPocket]-= 2;

                SendClientMessage(playerid, 0xE3F77EFF, "» {FFFFFF}Nusipirkote {E3F77E}Sprite{FFFFFF} uþ {E3F77E}2€");

                mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `foodinventor`(`PlayerSQLID`, `FoodName`, `NutritionWorth`, `TimeItsFresh`, `ItemID`) VALUES (%i,'Sprite',4.5,%i,NULL);",PlayerDB[playerid][SQLID],gettime()+(86400*2));
                mysql_function_query(connectionHandle, QueryString, false, "","");
                OnPlayerPickUpDynamicPickup(playerid, KioskaiPickup[0]);
            }
        }
    }
    return 1;
}

CMD:vyrpremija(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        if(playersOnline < 10)
        {
            ErrorMsg(playerid,"• Tik nuo 10 þaidëjø.");
            return 1;
        }
        for(new i = 0;i<= GetPlayerPoolSize();i++)
        {
            if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
            {
                PlayerDB[i][MoneyInPocket] += 500;
                PlusPlayerScore(i,50);
            }
        }
        SendClientMessageToAll(0xFFBAD2FF, "• Vyr. Administratoriai visiems prisijungusiams þaidëjams davë {FFFFFF}500 {FFBAD2}€ ir {FFFFFF}50 {FFBAD2}XP !");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik vyr. administracijai.");
    }
    return 1;
}

CMD:healall(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        for(new i = 0;i<= GetPlayerPoolSize();i++)
        {
            if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
            {
                SetPlayerHealthEx(i, 100);
                SetPlayerArmourEx(i,100);
            }
        }
        SendClientMessageToAll(0xFFBAD2FF, "• Vyr. Administratoriai pagydë visus prisijungusius serverio þaidëjus.");
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik vyr. administracijai.");
    }
    return 1;
}
CMD:random(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        if(playersOnline < 10)
        {
            ErrorMsg(playerid,"• Tik nuo 10 þaidëjø.");
            return 1;
        }
        new money,xp,krd;
        if(sscanf(params, "d d d", money,xp,krd))
        {
            UsageMessage(playerid,"• Iðrinkti atsitiktiná þaidëjà kuris gaus prizà: /random [Eurai] [XP] [Kreditai].");
            return 1;
        }
        if(money < 0 || xp < 0 || krd < 0)
        {
            ErrorMsg(playerid,"• Blogi parametrai.");
            return 1;
        }

        new nth = random(GetPlayerPoolSize()+1);
        if(IsPlayerConnected(nth) == 1 && PlayerDB[nth][Loaded] == 1 && PlayerDB[nth][adminlvl] < 4)
        {
            PlayerDB[nth][MoneyInPocket]+=money;
            PlayerDB[nth][Credits]+=krd;
            PlusPlayerScore(nth,xp);
            new string[128];
            format(string,sizeof(string),"[RANDOM]: %s iðrinko atsitiktiná þaidëjà, %s, kuris gavo %i€ %iXP ir %i kreditø.",Vardas(playerid),Vardas(nth),money, xp, krd);
            SendClientMessageToAll(0xCC6666FF, string);
        }
        else
        {
            new bool:Found = false;
            while(Found == false)
            {
                nth = random(GetPlayerPoolSize()+1);
                if(IsPlayerConnected(nth) == 1 && PlayerDB[nth][Loaded] == 1 && PlayerDB[nth][adminlvl] < 4)
                {
                    PlayerDB[nth][MoneyInPocket]+=money;
                    PlayerDB[nth][Credits]+=krd;
                    PlusPlayerScore(nth,xp);
                    new string[128];
                    format(string,sizeof(string),"[RANDOM]: %s iðrinko atsitiktiná þaidëjà, %s, kuris gavo %i€ %iXP ir %i kreditø.",Vardas(playerid),Vardas(nth),money, xp, krd);
                    SendClientMessageToAll(0xCC6666FF, string);
                    Found = true;
                    break;
                }
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik vyr. administratoriams.");
    }
    return 1;
}
stock CreateSekimoTD(playerid)
{
    SekimasTD1[playerid] = CreatePlayerTextDraw(playerid,488.000000, 178.000000, "_");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD1[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD1[playerid], 1);
    PlayerTextDrawLetterSize(playerid,SekimasTD1[playerid], 1.000000, 0.999998);
    PlayerTextDrawColor(playerid,SekimasTD1[playerid], -1);
    PlayerTextDrawSetOutline(playerid,SekimasTD1[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD1[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD1[playerid], 1);
    PlayerTextDrawUseBox(playerid,SekimasTD1[playerid], 1);
    PlayerTextDrawBoxColor(playerid,SekimasTD1[playerid], 303108607);
    PlayerTextDrawTextSize(playerid,SekimasTD1[playerid], 610.000000, 30.000000);
    PlayerTextDrawSetSelectable(playerid,SekimasTD1[playerid], 0);

    SekimasTD2[playerid] = CreatePlayerTextDraw(playerid,614.000000, 242.000000, "_");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD2[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD2[playerid], 1);
    PlayerTextDrawLetterSize(playerid,SekimasTD2[playerid], 0.200000, -6.099987);
    PlayerTextDrawColor(playerid,SekimasTD2[playerid], -1);
    PlayerTextDrawSetOutline(playerid,SekimasTD2[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD2[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD2[playerid], 1);
    PlayerTextDrawUseBox(playerid,SekimasTD2[playerid], 1);
    PlayerTextDrawBoxColor(playerid,SekimasTD2[playerid], 538910719);
    PlayerTextDrawTextSize(playerid,SekimasTD2[playerid], 484.000000, 26.000000);
    PlayerTextDrawSetSelectable(playerid,SekimasTD2[playerid], 0);

    SekimasTD3[playerid] = CreatePlayerTextDraw(playerid,530.000000, 177.000000, "Sekimas");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD3[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD3[playerid], 2);
    PlayerTextDrawLetterSize(playerid,SekimasTD3[playerid], 0.230000, 0.999998);
    PlayerTextDrawColor(playerid,SekimasTD3[playerid], -1806791169);
    PlayerTextDrawSetOutline(playerid,SekimasTD3[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD3[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD3[playerid], 0);
    PlayerTextDrawSetSelectable(playerid,SekimasTD3[playerid], 0);

    SekimasTD4[playerid] = CreatePlayerTextDraw(playerid,490.000000, 192.000000, "VARDAS_PAVARDE (123)");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD4[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD4[playerid], 2);
    PlayerTextDrawLetterSize(playerid,SekimasTD4[playerid], 0.189998, 0.899999);
    PlayerTextDrawColor(playerid,SekimasTD4[playerid], -1806791169);
    PlayerTextDrawSetOutline(playerid,SekimasTD4[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD4[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD4[playerid], 0);
    PlayerTextDrawSetSelectable(playerid,SekimasTD4[playerid], 0);

    SekimasTD5[playerid] = CreatePlayerTextDraw(playerid,490.000000, 202.000000, "- Yra uz 1.23 KM nuo jusu");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD5[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD5[playerid], 2);
    PlayerTextDrawLetterSize(playerid,SekimasTD5[playerid], 0.179998, 1.100000);
    PlayerTextDrawColor(playerid,SekimasTD5[playerid], -1280068609);
    PlayerTextDrawSetOutline(playerid,SekimasTD5[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD5[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD5[playerid], 0);
    PlayerTextDrawSetSelectable(playerid,SekimasTD5[playerid], 0);

    SekimasTD6[playerid] = CreatePlayerTextDraw(playerid,490.000000, 213.000000, "- Artimiausias teleportas:");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD6[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD6[playerid], 2);
    PlayerTextDrawLetterSize(playerid,SekimasTD6[playerid], 0.179998, 1.100000);
    PlayerTextDrawColor(playerid,SekimasTD6[playerid], -1280068609);
    PlayerTextDrawSetOutline(playerid,SekimasTD6[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD6[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD6[playerid], 0);
    PlayerTextDrawSetSelectable(playerid,SekimasTD6[playerid], 0);

    SekimasTD7[playerid] = CreatePlayerTextDraw(playerid,490.000000, 224.000000, "N/A");
    PlayerTextDrawBackgroundColor(playerid,SekimasTD7[playerid], 255);
    PlayerTextDrawFont(playerid,SekimasTD7[playerid], 2);
    PlayerTextDrawLetterSize(playerid,SekimasTD7[playerid], 0.189998, 0.899999);
    PlayerTextDrawColor(playerid,SekimasTD7[playerid], -1806791169);
    PlayerTextDrawSetOutline(playerid,SekimasTD7[playerid], 0);
    PlayerTextDrawSetProportional(playerid,SekimasTD7[playerid], 1);
    PlayerTextDrawSetShadow(playerid,SekimasTD7[playerid], 0);
    PlayerTextDrawSetSelectable(playerid,SekimasTD7[playerid], 0);


    PlayerTextDrawShow(playerid, SekimasTD1[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD2[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD3[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD4[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD5[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD6[playerid]);
    PlayerTextDrawShow(playerid, SekimasTD7[playerid]);
    return 1;
}
stock DestroySekimoTD(playerid)
{
    PlayerTextDrawDestroy(playerid, SekimasTD1[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD2[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD3[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD4[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD5[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD6[playerid]);
    PlayerTextDrawDestroy(playerid, SekimasTD7[playerid]);
    return 1;
}
stock SetupRareCarEvent()
{
    AUEventCarColors[0] = 128 + random(127);
    AUEventCarColors[1] = 128 + random(127);
    AUEventCarsLeft = 6;
    AfterUpdateEventCar = CreateVehicle(475, -1980.7793, 687.3849, 46.2399, -90.0000, AUEventCarColors[0], AUEventCarColors[1], 100);


    ChangeVehicleColor(AfterUpdateEventCar, AUEventCarColors[0], AUEventCarColors[1]);
    format(VehicleDB[AfterUpdateEventCar][LastDriverName],24,"Nëra");
    VehicleDB[AfterUpdateEventCar][VehicleEngineState] = 0;
    VehicleDB[AfterUpdateEventCar][VehicleLights] = 0;
    VehicleDB[AfterUpdateEventCar][VRibotuvas] = 0;
    VehicleDB[AfterUpdateEventCar][VehicleDedicatedForEvent] = 0;


    VehicleDB[AfterUpdateEventCar][VehicleDedicatedForAdmin] = false;
    VehicleDB[AfterUpdateEventCar][TURGUS] = 0;
    VehicleDB[AfterUpdateEventCar][Rida] = 0;
    VehicleDB[AfterUpdateEventCar][Bendzinas] = 0;
    VehicleDB[AfterUpdateEventCar][Dujos] = 0;
    VehicleDB[AfterUpdateEventCar][FuelType] = 0;
    VehicleDB[AfterUpdateEventCar][VMMasina] = 0;
    VehicleDB[AfterUpdateEventCar][DARBOMASINA] = false;
    VehicleDB[AfterUpdateEventCar][DARBOID] = 0;
    VehicleDB[AfterUpdateEventCar][VehicleOwnerID] = -1;
    format(VehicleDB[AfterUpdateEventCar][VehicleNumbers],8,"Nëra");
    VehicleDB[AfterUpdateEventCar][VehicleNumReg] = 0;
    VehicleDB[AfterUpdateEventCar][VehicleDatabaseID] = -1;
    VehicleDB[AfterUpdateEventCar][VehicleWithOwner] = false;
    VehicleDB[AfterUpdateEventCar][VehicleLocked] = 0;
    VehicleDB[AfterUpdateEventCar][VehicleDauztumas] = 0;
    VehicleDB[AfterUpdateEventCar][DujuIranga] = 0;
    VehicleDB[AfterUpdateEventCar][AdminMasina] = false;
    VehicleDB[AfterUpdateEventCar][VIPMasina] = false;
    VehicleDB[AfterUpdateEventCar][PakrautasMaistas] = false;
    VehicleDB[AfterUpdateEventCar][PakrautasSmelis] = false;
    VehicleDB[AfterUpdateEventCar][PakrautosDetales] = false;
    VehicleDB[AfterUpdateEventCar][PakrautaElektronika] = false;
    VehicleDB[AfterUpdateEventCar][PripildytaDegalu] = false;
    VehicleDB[AfterUpdateEventCar][PakrautaMasina] = -1;
    AUEventCarLabel = CreateDynamic3DTextLabel("•• PARDUODAMAS RETAS AUTOMOBILIS ••\n\n{FFFFFF}Automobilio kaina: {ee5555}521 €\n{FFFFFF}Automoblio vienetai: {ee5555}6 vnt\n\n{ee5555}DËMËSIO: {FFFFFF}Ásigyti automobilá galite álipus á ðià transporto priemonæ. Apie nusipirkimà praneð visiems þaidëjams.", 0xee5555FF, -1980.7793, 687.3849, 46.2399, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    print("AUEventCar Started");
    AUEventCarStarted = true;
}
forward AutoCheckPasiekimai(playerid);
public AutoCheckPasiekimai(playerid)
{
    if(IsPlayerConnected(playerid) == 0)
    {
        return 1;
    }
    if(PlayerDB[playerid][Loaded] == 0)
    {
        return 1;
    }
    if(PlayerDB[playerid][Pasiekimas1] == 0)
    {
        if(PlayerDB[playerid][AutoLicense] == 1)
        {
            PlayerDB[playerid][Pasiekimas1] = 1;
            PlayerDB[playerid][MoneyInPocket] +=200;
            PlusPlayerScore(playerid,20);
            ShowAchievement(playerid,"Automobilio teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „masinos teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 200 € ir 20 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas2] == 0)
    {
        if(PlayerDB[playerid][SunkvLicense] == 1)
        {
            PlayerDB[playerid][Pasiekimas2] = 1;
            PlayerDB[playerid][MoneyInPocket] +=300;
            PlusPlayerScore(playerid,30);
            ShowAchievement(playerid,"Vilkiko teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „vilkiko teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 300 € ir 30 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas3] == 0)
    {
        if(PlayerDB[playerid][MotoLicense] == 1)
        {
            PlayerDB[playerid][Pasiekimas3] = 1;
            PlayerDB[playerid][MoneyInPocket] +=100;
            PlusPlayerScore(playerid,10);
            ShowAchievement(playerid,"Motociklo teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „motociklo teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 100 € ir 10 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas4] == 0)
    {
        if(PlayerDB[playerid][PilotoLicense] == 1)
        {
            PlayerDB[playerid][Pasiekimas4] = 1;
            PlayerDB[playerid][MoneyInPocket] +=400;
            PlusPlayerScore(playerid,40);
            ShowAchievement(playerid,"Piloto teises");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „piloto teises“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 400 € ir 40 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas5] == 0)
    {
        if(PlayerDB[playerid][ZaistaTotal] >= 120)
        {
            PlayerDB[playerid][Pasiekimas5] = 1;
            PlayerDB[playerid][MoneyInPocket] +=500;
            PlusPlayerScore(playerid,50);
            ShowAchievement(playerid,"2 valandos");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „2 valandas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 500 € ir 50 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas6] == 0)
    {
        if(PlayerDB[playerid][ZaistaTotal] >= 7*60)
        {
            PlayerDB[playerid][Pasiekimas6] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,100);
            ShowAchievement(playerid,"7 valandos");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „7 valandas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 100 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas7] == 0)
    {
        if(PlayerDB[playerid][ZaistaTotal] >= 7*1440)
        {
            PlayerDB[playerid][Pasiekimas7] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,150);
            ShowAchievement(playerid,"7 dienas");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „7 dienas“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 150 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas11] == 0)
    {
        if(PlayerDB[playerid][TuriBankoSaskaita] == 1)
        {
            PlayerDB[playerid][Pasiekimas11] = 1;
            PlayerDB[playerid][MoneyInPocket] +=250;
            PlusPlayerScore(playerid,50);
            ShowAchievement(playerid,"Banko Saskaita");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Banko sàskaita“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 250 € ir 50 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas12] == 0)
    {
        if(PlayerDB[playerid][MoneyInPocket] >= 20000)
        {
            PlayerDB[playerid][Pasiekimas12] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"Rankose 20.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Turëti rankose 20.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 200 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas13] == 0)
    {
        if(PlayerDB[playerid][MoneyInPocket] >= 50000)
        {
            PlayerDB[playerid][Pasiekimas13] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,300);
            ShowAchievement(playerid,"Rankose 50.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Turëti rankose 50.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 300 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas14] == 0)
    {
        if(PlayerDB[playerid][MoneyInPocket] >= 100000)
        {
            PlayerDB[playerid][Pasiekimas14] = 1;
            PlayerDB[playerid][MoneyInPocket] +=10000;
            PlayerDB[playerid][Credits]+=20;
            PlusPlayerScore(playerid,1000);
            ShowAchievement(playerid,"Rankose 100.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Turëti rankose 100.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 10000 €, 1000 XP ir 20 kreditø.");
        }
    }

    if(PlayerDB[playerid][Pasiekimas24] == 0)
    {
        if(PlayerDB[playerid][MoneyInPocket] >= 1000000)
        {
            PlayerDB[playerid][Pasiekimas24] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,300);
            ShowAchievement(playerid,"Rankose 1.000.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „turëti rankose 1mln“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 300 XP.");
        }
    }

    if(PlayerDB[playerid][Pasiekimas25] == 0)
    {
        if(PlayerDB[playerid][MoneyInPocket] >= 5000000)
        {
            PlayerDB[playerid][Pasiekimas25] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"Rankose 5.000.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „turëti rankose 5mln“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 500 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas17] == 0)
    {
        if(PlayerDB[playerid][VIP] == 1)
        {
            PlayerDB[playerid][Pasiekimas17] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlayerDB[playerid][Credits]+=10;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"VIP");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti VIP“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 €, 200 XP ir 10 kreditø.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas18] == 0)
    {
        if(PlayerDB[playerid][adminlvl] > 0)
        {
            PlayerDB[playerid][Pasiekimas18] = 1;
            PlayerDB[playerid][MoneyInPocket] +=10000;
            PlayerDB[playerid][Credits]+=20;
            PlusPlayerScore(playerid,500);
            ShowAchievement(playerid,"ADMIN");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Tapti Administratoriumi“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 10000 €, 500 XP ir 20 kreditø.");
        }
    }

    if(PlayerDB[playerid][Pasiekimas22] == 0)
    {
        if(PlayerDB[playerid][FirstOwnedVehicleID] > -1)
        {
            PlayerDB[playerid][Pasiekimas22] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"1-asis automobilis");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „1-asis automobilis“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 200 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas23] == 0)
    {
        if(PlayerDB[playerid][SecondOwnedVehicleID] > -1)
        {
            PlayerDB[playerid][Pasiekimas23] = 1;
            PlayerDB[playerid][MoneyInPocket] +=5000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"2-asis automobilis");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „2-asis automobilis“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 5000 € ir 200 XP.");
        }
    }
    //
    if(PlayerDB[playerid][Pasiekimas26] == 0)
    {
        if(PlayerDB[playerid][Uzdarbis] >= 100000)
        {
            PlayerDB[playerid][Pasiekimas26] = 1;
            PlayerDB[playerid][MoneyInPocket] +=1000;
            PlusPlayerScore(playerid,100);
            ShowAchievement(playerid,"Algoje 100.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Uþdirbti 100.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 1000 € ir 100 XP.");
        }
    }
    if(PlayerDB[playerid][Pasiekimas27] == 0)
    {
        if(PlayerDB[playerid][Uzdarbis] >= 200000)
        {
            PlayerDB[playerid][Pasiekimas27] = 1;
            PlayerDB[playerid][MoneyInPocket] +=2000;
            PlusPlayerScore(playerid,200);
            ShowAchievement(playerid,"Algoje 200.000");
            SendClientMessage(playerid, GELTONA, "Ávykdëte naujà pasiekimà „Uþdirbti 200.000€“.");
            SendClientMessage(playerid, GELTONA, "Uþ pasiekimo ávykdymà jûs gavote 2000 € ir 200 XP.");
        }
    }
    return 1;
}

CMD:kauliukas(playerid,params[])
{
    new id,amount;
    if(sscanf(params, "u i", id,amount))
    {
        UsageMessage(playerid,"• Komandos naudojimas: /kauliukas [Vardas_Pavardë] [Suma].");
        return 1;
    }
    else
    {
        if(IsPlayerConnected(id))
        {
            if(id == playerid)
            {
                ErrorMsg(playerid,"• Kauliuko siûlyti sau þaisti negalite.");
                return 1;
            }
            if(PlayerDB[id][Loaded] == 0)
            {
                ErrorMsg(playerid,"• Þaidëjas nëra pilnai prisijungæs.");
            }
            else
            {
                new Float:Cords[3];
                GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                if(IsPlayerInRangeOfPoint(id, 4.0, Cords[0], Cords[1], Cords[2]))
                {
                    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && GetPlayerInterior(playerid) == GetPlayerInterior(id))
                    {
                        if(PlayerDB[id][AfkState] == true)
                        {
                            ErrorMsg(playerid,"• Þaidëjas yra AFK bûsenoje.");
                        }
                        else
                        {
                            if(amount < 10000)
                            {
                                ErrorMsg(playerid,"• Minimali suma yra 10 000 €.");
                            }
                            else
                            {
                                if(PlayerDB[playerid][MoneyInPocket] >= amount)
                                {
                                    new Limit = 0;
                                    if(PlayerDB[playerid][adminlvl] > 0)
                                    {
                                        Limit = 300000;
                                    }
                                    else if(PlayerDB[playerid][VIP] == 1)
                                    {
                                        Limit = 200000;
                                    }
                                    else
                                    {
                                        Limit = 100000;
                                    }
                                    if(Limit < amount)
                                    {
                                        ErrorMsg(playerid,"• Pasiekëte jums taikomà limità ðiam þaidimui.");
                                        return 1;
                                    }
                                    if(PlayerDB[id][RecKauliukaiOffer] == false)
                                    {
                                        new string[128];
                                        format(string, 128, "• Þaidëjas {6EF83C}%s {33AA33}Jums siûlo þaisti kauliukà ið {6EF83C}%s €.",Vardas(playerid),AddPoints(amount));
                                        SendClientMessage(id, 0x33AA33FF, string);
                                        SendClientMessage(id, 0x33AA33FF, "• Norëdamas sutikti þaisti su juo turite paspausti N raidæ, tam turite 30 sekundþiø.");

                                        format(string, 128, "• Pasiûlëte %s þaisti kauliukà ið %s €.",Vardas(id),AddPoints(amount));
                                        SendClientMessage(playerid, 0x33AA33FF, string);

                                        PlayerDB[id][RecKauliukaiOffer] = true;
                                        PlayerDB[id][RecKauliukaiOfferTill] = gettime()+30;
                                        PlayerDB[playerid][SentKauliukaiOfferUntill] = PlayerDB[id][RecKauliukaiOfferTill];
                                        PlayerDB[playerid][SentKauliukaiOffer] = true;
                                        PlayerDB[id][KauliukaiMoney] = amount;
                                        PlayerDB[id][KauliukaiOfferIniciatorID] = PlayerDB[playerid][SQLID];

                                    }
                                    else
                                    {
                                        ErrorMsg(playerid,"• Þaidëjas jau turi gavæs pasiûlymà þaisti kauliukais, praðome palaukti ir bandyti dar kartà.");
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Tiek pinigø neturite.");
                                }
                            }
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                }
            }
        }
        else
        {
            ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
        }
    }
    return 1;
}
CMD:teisesauga(playerid,params[])
{
    new info[2048];
    new On = 0;
    strcat(info, "Ðiuo metu prisijungæ visi teisësaugininkai:\n\n");
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) && PlayerDB[i][Loaded] == 1)
        {
            if(PlayerDB[i][Job] == 1)
            {
                On++;
                new string[128];
                if(PlayerDB[i][AfkState] == true)
                {
                    format(string, sizeof(string), "%i. %s Policija (AFK)\n",On,Vardas(i));
                }
                else
                {
                    format(string, sizeof(string), "%i. %s Policija\n",On,Vardas(i));
                }
                strcat(info, string);
            }
            else if(PlayerDB[i][Job] == 9)
            {
                On++;
                new string[128];
                if(PlayerDB[i][AfkState] == true)
                {
                    format(string, sizeof(string), "%i. %s Aras (AFK)\n",On,Vardas(i));
                }
                else
                {
                    format(string, sizeof(string), "%i. %s Aras\n",On,Vardas(i));
                }
                strcat(info, string);
            }
        }
    }
    if(On == 0)
    {
        strcat(info, "Nëra prisijungusiø teisësaugininkø.");
    }
    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Teisësaugininkai", info, "Gerai", "");
    return 1;
}
CMD:kurtiversla(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] >= 4)
    {
        new VersloPav[42],VersloKaina,VersloPelnasMinimal;
        if(sscanf(params, "i i s[42]", VersloKaina,VersloPelnasMinimal,VersloPav))
        {
            UsageMessage(playerid,"• /kurtiversla [Verslo Kaina] [Verslo minimalus pelnas] [Verslo Pavadinimas]");
            return 1;
        }
        else
        {
            if(strlen(VersloPav) > 4)
            {
                if(VersloPelnasMinimal > 0)
                {
                    if(VersloKaina > 10000)
                    {
                        new QueryString[215];
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(playerid, X, Y, Z);
                        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "INSERT INTO `Verslai` (`ID`, `Pavadinimas`, `X`, `Y`, `Z`, `WorldID`, `InteriorID`,`Kaina`,`Pajamos`) VALUES (NULL,'%e','%f','%f','%f','%i','%i','%i','%i');",VersloPav,X,Y,Z,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),VersloKaina,VersloPelnasMinimal);
                        mysql_function_query(connectionHandle,QueryString,true,"OnInsertNewVerslas","","");
                        SendClientMessage(playerid, -1, "Sukûrëte naujà verslà.");
                    }
                    else
                    {
                        UsageMessage(playerid,"• /kurtiversla [Verslo Kaina] [Verslo minimalus pelnas] [Verslo Pavadinimas]");
                        return 1;
                    }
                }
                else
                {
                    UsageMessage(playerid,"• /kurtiversla [Verslo Kaina] [Verslo minimalus pelnas] [Verslo Pavadinimas]");
                    return 1;
                }
            }
            else
            {
                UsageMessage(playerid,"• /kurtiversla [Verslo Kaina] [Verslo minimalus pelnas] [Verslo Pavadinimas]");
                return 1;
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik vyr. administracijai.");
    }
    return 1;
}


forward OnLoadVerslai();
public OnLoadVerslai()
{
    if(cache_get_row_count() > 0)
    {
        for(new row = 0;row< cache_get_row_count();row++)
        {
            if(VerslaiPoolSize < row)
            {
                VerslaiPoolSize = row;
            }
            VerslaiDB[row][VDB_SQLID] = cache_get_row_int(row, 0);
            new tmpstr[42];
            cache_get_row(row, 1, tmpstr);
            format(VerslaiDB[row][VDB_Pavadinimas], 42, "%s", tmpstr);

            VerslaiDB[row][VDB_X] = cache_get_row_float(row, 2);
            VerslaiDB[row][VDB_Y] = cache_get_row_float(row, 3);
            VerslaiDB[row][VDB_Z] = cache_get_row_float(row, 4);
            VerslaiDB[row][VDB_WorldID] = cache_get_row_int(row, 5);
            VerslaiDB[row][VDB_InteriorID] = cache_get_row_int(row, 6);
            VerslaiDB[row][VDB_Nupirktas] = cache_get_row_int(row, 7);

            cache_get_row(row, 8, tmpstr);
            format(VerslaiDB[row][VDB_SavininkoVardas], 24, "%s", tmpstr);

            VerslaiDB[row][VDB_SavininkoSQLID] = cache_get_row_int(row, 9);
            VerslaiDB[row][VDB_Kaina] = cache_get_row_int(row, 10);
            VerslaiDB[row][VDB_Pajamos] = cache_get_row_int(row, 11);
            VerslaiDB[row][VDB_VersloPelnas] = cache_get_row_int(row, 12);
            VerslaiDB[row][VDB_Lygis] = cache_get_row_int(row, 13);
            VerslaiDB[row][VDB_Parduodamas] = cache_get_row_int(row, 14);
            VerslaiDB[row][VDB_PardavimoKaina] = cache_get_row_int(row, 15);
            VerslaiDB[row][VDB_RinkosKaina] = cache_get_row_int(row, 16);
            VerslaiDB[row][VDB_StopsGivingIncomeAt] = cache_get_row_int(row, 17);
            VerslaiDB[row][VDB_PinigaiUzdirbtiSiandien] = cache_get_row_int(row, 18);

            VerslaiDB[row][VDB_Valdymas] = CreateDynamicPickup(1210, 2, -2024.1086,-92.0590,620.4189, VerslaiDB[row][VDB_SQLID]+9, 7);

            if(VerslaiDB[row][VDB_Nupirktas] == 0)
            {
                new LabelText[400];
                format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}Savivaldybë\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.",VerslaiDB[row][VDB_Pavadinimas],AddPoints(VerslaiDB[row][VDB_Kaina]),VerslaiDB[row][VDB_Pajamos]);
                VerslaiDB[row][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
                VerslaiDB[row][VDB_Pickup] = CreateDynamicPickup(19524 , 2, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
            }
            else
            {
                if(VerslaiDB[row][VDB_Parduodamas] == 0)
                {
                    new LabelText[420];
                    format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[row][VDB_Pavadinimas],VerslaiDB[row][VDB_SavininkoVardas],AddPoints(VerslaiDB[row][VDB_Kaina]),VerslaiDB[row][VDB_Pajamos],VerslaiDB[row][VDB_Lygis]);
                    VerslaiDB[row][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
                    VerslaiDB[row][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
                }
                else
                {
                    new LabelText[800];
                    format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s\n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5\n{FFFFFF}Verslo savininko norima suma uþ verslà: {96A677}%s€",VerslaiDB[row][VDB_Pavadinimas],VerslaiDB[row][VDB_SavininkoVardas],AddPoints(VerslaiDB[row][VDB_RinkosKaina]),VerslaiDB[row][VDB_Pajamos],VerslaiDB[row][VDB_Lygis],AddPoints(VerslaiDB[row][VDB_PardavimoKaina]));
                    strcat(LabelText, "\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.");
                    VerslaiDB[row][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
                    VerslaiDB[row][VDB_Pickup] = CreateDynamicPickup(19523 , 2, VerslaiDB[row][VDB_X],VerslaiDB[row][VDB_Y],VerslaiDB[row][VDB_Z], VerslaiDB[row][VDB_WorldID], VerslaiDB[row][VDB_InteriorID]);
                }
            }
        }
    }
    return 1;
}

stock SetSpawnInfoEx(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo, Interior = -1)
{
    SetPlayerHealthEx(playerid, 100.0);
    SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
    if(Interior > -1)
    {
        SetPlayerInterior(playerid, 1);
    }
}
forward OnInsertNewVerslas();
public OnInsertNewVerslas()
{
    new vid = cache_insert_id();
    new QueryString[60];
    mysql_format(connectionHandle, QueryString, sizeof(QueryString), "SELECT * FROM `Verslai` WHERE `ID` = '%i' LIMIT 1;", vid);
    mysql_function_query(connectionHandle,QueryString,true,"OnLoadSingleVerslas","");
    return 1;
}

forward OnLoadSingleVerslas();
public OnLoadSingleVerslas()
{
    if(cache_get_row_count() > 0)
    {
        new row = 0;
        VerslaiPoolSize+=1;
        new p = VerslaiPoolSize;
        VerslaiDB[p][VDB_SQLID] = cache_get_row_int(row, 0);
        new tmpstr[42];
        cache_get_row(row, 1, tmpstr);
        format(VerslaiDB[p][VDB_Pavadinimas], 42, "%s", tmpstr);

        VerslaiDB[p][VDB_X] = cache_get_row_float(row, 2);
        VerslaiDB[p][VDB_Y] = cache_get_row_float(row, 3);
        VerslaiDB[p][VDB_Z] = cache_get_row_float(row, 4);
        VerslaiDB[p][VDB_WorldID] = cache_get_row_int(row, 5);
        VerslaiDB[p][VDB_InteriorID] = cache_get_row_int(row, 6);
        VerslaiDB[p][VDB_Nupirktas] = cache_get_row_int(row, 7);

        cache_get_row(row, 8, tmpstr);
        format(VerslaiDB[p][VDB_SavininkoVardas], 24, "%s", tmpstr);

        VerslaiDB[p][VDB_SavininkoSQLID] = cache_get_row_int(row, 9);
        VerslaiDB[p][VDB_Kaina] = cache_get_row_int(row, 10);
        VerslaiDB[p][VDB_Pajamos] = cache_get_row_int(row, 11);
        VerslaiDB[p][VDB_VersloPelnas] = cache_get_row_int(row, 12);
        VerslaiDB[p][VDB_Lygis] = cache_get_row_int(row, 13);
        VerslaiDB[p][VDB_Parduodamas] = cache_get_row_int(row, 14);
        VerslaiDB[p][VDB_PardavimoKaina] = cache_get_row_int(row, 15);
        VerslaiDB[p][VDB_RinkosKaina] = cache_get_row_int(row, 16);
        VerslaiDB[p][VDB_StopsGivingIncomeAt] = cache_get_row_int(row, 17);
        printf("Ladujemy single verslai");

        VerslaiDB[p][VDB_PinigaiUzdirbtiSiandien] = cache_get_row_int(row, 18);

        VerslaiDB[p][VDB_Valdymas] = CreateDynamicPickup(1210, 2, -2024.1086,-92.0590,620.4189, VerslaiDB[p][VDB_SQLID]+9, 7);

        if(VerslaiDB[p][VDB_Nupirktas] == 0)
        {
            new LabelText[400];
            format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}Savivaldybë\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.",VerslaiDB[p][VDB_Pavadinimas],AddPoints(VerslaiDB[p][VDB_Kaina]),VerslaiDB[p][VDB_Pajamos]);
            VerslaiDB[p][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
            VerslaiDB[p][VDB_Pickup] = CreateDynamicPickup(19524 , 2, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
        }
        else
        {
            if(VerslaiDB[p][VDB_Parduodamas] == 0)
            {
                new LabelText[420];
                format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5",VerslaiDB[p][VDB_Pavadinimas],VerslaiDB[p][VDB_SavininkoVardas],AddPoints(VerslaiDB[p][VDB_Kaina]),VerslaiDB[p][VDB_Pajamos],VerslaiDB[p][VDB_Lygis]);
                VerslaiDB[p][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
                VerslaiDB[p][VDB_Pickup] = CreateDynamicPickup(19522 , 2, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
            }
            else
            {
                new LabelText[800];
                format(LabelText,sizeof(LabelText),"Verslo pavadinimas: {96A677}%s \n{FFFFFF}Verslo savininkas: {96A677}%s\n{FFFFFF}Verslo kaina: {96A677}%s€\n{FFFFFF}Verslo uþdarbis: {96A677}%i€\n{FFFFFF}Verslo lygis: {96A677}%i/5\n{FFFFFF}Verslo savininko norima suma uþ verslà: {96A677}%s€",VerslaiDB[p][VDB_Pavadinimas],VerslaiDB[p][VDB_SavininkoVardas],AddPoints(VerslaiDB[p][VDB_RinkosKaina]),VerslaiDB[p][VDB_Pajamos],VerslaiDB[p][VDB_Lygis],AddPoints(VerslaiDB[p][VDB_PardavimoKaina]));
                strcat(LabelText, "\n{FFFFFF}Verslà galite nusipirkti uþlipus ant {96A677}verslo {FFFFFF}ikonos.");
                VerslaiDB[p][VDB_Label] = CreateDynamic3DTextLabel(LabelText, 0xFFFFFFFF, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
                VerslaiDB[p][VDB_Pickup] = CreateDynamicPickup(19523 , 2, VerslaiDB[p][VDB_X],VerslaiDB[p][VDB_Y],VerslaiDB[p][VDB_Z], VerslaiDB[p][VDB_WorldID], VerslaiDB[p][VDB_InteriorID]);
            }
        }
    }
    return 1;
}
forward SaveAllOfVerslai();
public SaveAllOfVerslai()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        new QueryString[400];
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `Verslai` SET `Nupirktas`= '%i',`SavininkoVardas`='%s',`SavininkoSQLID`='%i',`Pajamos`='%i',`VersloPelnas`='%i' WHERE `ID` = '%i' LIMIT 1;",VerslaiDB[i][VDB_Nupirktas],VerslaiDB[i][VDB_SavininkoVardas],VerslaiDB[i][VDB_SavininkoSQLID],VerslaiDB[i][VDB_Pajamos],VerslaiDB[i][VDB_VersloPelnas],VerslaiDB[i][VDB_SQLID]);
        mysql_function_query(connectionHandle,QueryString, false, "SendQuery","");
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `Verslai` SET `Lygis`='%i',`Parduodamas`='%i',`PardavimoKaina`='%i',`RinkosKaina`='%i',`StopsGivingIncomeAt`='%i',`PinigaiUzdirbtiSiandien`='%i' WHERE `ID` = '%i' LIMIT 1;",VerslaiDB[i][VDB_Lygis],VerslaiDB[i][VDB_Parduodamas],VerslaiDB[i][VDB_PardavimoKaina],VerslaiDB[i][VDB_RinkosKaina],VerslaiDB[i][VDB_StopsGivingIncomeAt],VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien],VerslaiDB[i][VDB_SQLID]);
        mysql_function_query(connectionHandle,QueryString, false, "SendQuery","");
    }
    return 1;
}
forward SaveHouses();
public SaveHouses()
{
    for(new i = 0;i<=LoadedHouses;i++)
    {
        new QueryString[400];
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `houses` SET `VaistaiNamie`= '%i', `Siuksles`= '%i', `Mokesciai` = '%i', `SviesaIjungta` = '%i', `NarkSlotState` = '%i', `KiekTelpaNarku` = '%i' WHERE `HouseID` = '%i' LIMIT 1;", HouseInfo[i][VaistaiNamie], HouseInfo[i][Siuksles], HouseInfo[i][HouseMokesciai], HouseInfo[i][SviesaIjungta], HouseInfo[i][NarkSlotState],HouseInfo[i][KiekTelpaNarku], HouseInfo[i][HouseID]);
        mysql_function_query(connectionHandle,QueryString, false, "SendQuery","");
    }
    return 1;
}
forward BustoMokesciai(playerid);
public BustoMokesciai(playerid)
{
    for(new house = 0; house < MAX_HOUSES; house++)
	{
		if(strcmp(HouseInfo[house][HouseOwner], Vardas(playerid), false) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
				if(HouseInfo[house][SviesaIjungta] == 1)
				{
	  				HouseInfo[house][HouseMokesciai] +=1;
						//floatround(0.000001 * HouseInfo[house][HouseCost], floatround_ceil);
				}
			}
		}
	}
	return 1;
}
forward MathProblems();
public MathProblems()
{
    new Num1 = random(10) * 200 + random(10) * 50 + random(10) * 10 + random(10);
    new Num2 = random(10) * 200 + random(10) * 50 + random(10) * 10 + random(10);
    new Num3 = random(10) * 200 + random(10) * 50 + random(10) * 10 + random(10);

    MathProblemsBounty = random(10) * 500 + random(10) * 100 + random(10) * 10 + random(10);
    switch(random(14))
    {
        case 0:
        {
            MathProblemsAnswer = floatround(Num1 * Num2 - Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i*%i-%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 1:
        {
            MathProblemsAnswer = floatround(Num1 * Num2 + Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i*%i+%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 2:
        {
            MathProblemsAnswer = floatround(Num1 / Num2 - Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i:%i-%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 3:
        {
            MathProblemsAnswer = floatround(Num1 / Num2 + Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i:%i+%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 4:
        {
            MathProblemsAnswer = floatround(Num1 - Num2 - Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i-%i-%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 5:
        {
            MathProblemsAnswer = floatround(Num1 - Num2 + Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i-%i+%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 6:
        {
            MathProblemsAnswer = floatround(Num1 + Num2 - Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i+%i-%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 7:
        {
            MathProblemsAnswer = floatround(Num1 + Num2 + Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i+%i+%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 8:
        {
            MathProblemsAnswer = floatround(Num1 - Num2 * Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i-%i*%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 9:
        {
            MathProblemsAnswer = floatround(Num1 + Num2 * Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i+%i*%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 10:
        {
            MathProblemsAnswer = floatround(Num1 - Num2 / Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i-%i:%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 11:
        {
            MathProblemsAnswer = floatround(Num1 + Num2 / Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i+%i:%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 12:
        {
            MathProblemsAnswer = floatround(Num1 * Num2 * Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i*%i*%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
        case 13:
        {
            MathProblemsAnswer = floatround(Num1 / Num2 / Num3,floatround_floor);
            new string[128];
            format(string, sizeof(string),"• Pirmas iðsprendæs ðià matematinæ sàlygà „({C2BF1B}%i:%i:%i{DBD965})“ laimës ({C2BF1B}%i EUR{DBD965}).",Num1,Num2,Num3,MathProblemsBounty);
            SendClientMessageToAll(0xDBD965FF, string);
        }
    }
    SendClientMessageToAll(0xDBD965FF, "• Jei atsakymà gavote su liekana, atsakymà suapvalinkite á maþàjà pusæ vienetø tikslumu.");
    SendClientMessageToAll(0xDBD965FF, "• Atsakymui pateikti turite 9 minutes.");
    MathProblemWaiting = true;
    return 1;
}
CMD:suteiktikreditus(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] == 5)
    {
        new id,amount;
        if(sscanf(params, "ud", id,amount))
        {
            UsageMessage(playerid,"• /suteiktikreditus [V_P/ID] [Suma kiek bus pridëta].");
            return 1;
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][Loaded] == 1)
                {
                    if(amount < 0)
                    {
                        amount = amount * -1;
                    }
                    PlayerDB[id][Credits] +=amount;
                    new string[128];
                    format(string, sizeof(string), "• Suteikëte %s(%i) %i kreditus.",Vardas(id),id, amount);
                    SendClientMessage(playerid, ZALIA, string);
                    format(string, sizeof(string), "• Gavote %i kreditus ið administratoriaus %s(%i).", amount,Vardas(playerid),playerid);
                    SendClientMessage(id, ZALIA, string);
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas nëra pilnai uþkrautas.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    return 1;
}


stock SukurtiKruma(idu, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    KiekKrumu ++;

    CreateDynamicObject (idu, x, y, z, rx, ry, rz);

    CreateDynamic3DTextLabel("„San-Fierro uogø rinkimas“\nSkinti uogas galite paspaudæ {FFFFFF} Y {99CCFF}mygtukà", 0x99CCFFFF, x, y, z+1, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    KrumuPos[KiekKrumu - 1][0] = x;
    KrumuPos[KiekKrumu - 1][1] = y;
    KrumuPos[KiekKrumu - 1][2] = z;
}

stock PrieKrumu(playerid)
{
    for(new i = 0; i < KiekKrumu; i ++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, KrumuPos[i][0], KrumuPos[i][1], KrumuPos[i][2]))
        {
            return 1;
        }
    }
    return 0;
}

forward VerslaiPayLVL0();
public VerslaiPayLVL0()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 0 && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
            {
                VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
                VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
            }
        }
    }
}
forward VerslaiPayLVL1();
public VerslaiPayLVL1()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 1 && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
            {
                VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
                VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
            }
        }
    }
}
forward VerslaiPayLVL2();
public VerslaiPayLVL2()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 2 && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
            {
                VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
                VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
            }
        }
    }
}
forward VerslaiPayLVL3();
public VerslaiPayLVL3()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 3 && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
            {
                VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
                VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
            }
        }
    }
}

forward VerslaiPayLVL4();
public VerslaiPayLVL4()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 4  && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
            {
                VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
                VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
            }
        }
    }
}

forward VerslaiPayLVL5();
public VerslaiPayLVL5()
{
    for(new i = 0;i<=VerslaiPoolSize;i++)
    {
        if(VerslaiDB[i][VDB_Lygis] == 5  && VerslaiDB[i][VDB_Nupirktas] == 1)
        {
            if(VerslaiDB[i][VDB_StopsGivingIncomeAt] > gettime())
			{
        		VerslaiDB[i][VDB_VersloPelnas] += VerslaiDB[i][VDB_Pajamos];
        		VerslaiDB[i][VDB_PinigaiUzdirbtiSiandien] += VerslaiDB[i][VDB_Pajamos];
    		}
        }
    }
}
forward VidTrPasipyldimai();
public VidTrPasipyldimai()
{
    SalesVehiclesInStock[550-400]+=1;
    SalesVehiclesInStock[458-400]+=1;
    SalesVehiclesInStock[426-400]+=1;
    SalesVehiclesInStock[561-400]+=1;
    SalesVehiclesInStock[527-400]+=1;
    SalesVehiclesInStock[565-400]+=1;
    SalesVehiclesInStock[500-400]+=1;
    SalesVehiclesInStock[400-400]+=1;
    SalesVehiclesInStock[507-400]+=1;
    SalesVehiclesInStock[496-400]+=1;
    SalesVehiclesInStock[418-400]+=1;
    SalesVehiclesInStock[517-400]+=1;
    SalesVehiclesInStock[445-400]+=1;
    for(new i=400; i<612; i++)
	{
		new LabelText[700];
  		format(LabelText, 700, "%s \nKaina: {FF0000}%s{e76518}€\nAtstatymo kaina: {FF0000}%s {e76518}€\nTurima {00FF00}%d {e76518}vnt.\nBagaþinës talpa: %s vnt. (nark. vienos rûðies)\nKuro rûðis: Benzinas \nKuro sanaudos : {FF0000}%i {e76518}L/100KM\nMaksimalus greitis: {FF0000}%i{e76518}km/h",
  		vNames[i - 400],AddPoints(aKaina[i - 400]),AddPoints(floatround(aKaina[i - 400] * 0.07, floatround_ceil)),SalesVehiclesInStock[i - 400],AddPoints(VehicleBagazines[i - 400]),DegaluSanaudos[i - 400],MaxGreitis[i - 400]);
  		UpdateDynamic3DTextLabelText(SalesVehiclesLabels[i-400], 0xe76518FF, LabelText);
	}
	SaveVehiclesInStocks();
}
forward ViskoGamykla();
public ViskoGamykla()
{
    if(Gamyklos[trvaistai] < 5000)
	{
	    Gamyklos[trvaistai]+=25;
		SaveGamykluLikutis();
  		print("* Vaistu gamykla papildyta.");
	}
	if(Gamyklos[detales] < 5000)
	{
	    Gamyklos[detales]+=25;
		SaveGamykluLikutis();
  		print("* Detales gamykloje  papildytos.");
	}
}
CMD:ui(playerid,params[])
{
    if(PlayerDB[playerid][Krepselis] == 1)
    {
        new info[400];
        new str[70];
        if(PlayerDB[playerid][SuKrepsiuAntRanku] == false)
        {
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Pasiimti krepðelá [Yra %d uogø(-as)]",PlayerDB[playerid][Braskes]+PlayerDB[playerid][Avietes]+PlayerDB[playerid][Bruknes]+PlayerDB[playerid][Zemuoges]+PlayerDB[playerid][Melynes]);
        }
        else
        {
            format(str, sizeof(str), "{99CCFF}• {FFFFFF}Padëti krepðelá");
        }
        strcat(info, str);

        strcat(info, "\n                  \n");

        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Turi {99CCFF}%d {FFFFFF}bruknæs(-iø)\n",PlayerDB[playerid][Bruknes]);
        strcat(info, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Turi {99CCFF}%d {FFFFFF}avieèiø(-es)\n",PlayerDB[playerid][Avietes]);
        strcat(info, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Turi {99CCFF}%d {FFFFFF}braðkes(-iø)\n",PlayerDB[playerid][Braskes]);
        strcat(info, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Turi {99CCFF}%d {FFFFFF}melynes(-iø)\n",PlayerDB[playerid][Melynes]);
        strcat(info, str);
        format(str, sizeof(str), "{99CCFF}• {FFFFFF}Turi {99CCFF}%d {FFFFFF}þemuoges(-iø)",PlayerDB[playerid][Zemuoges]);
        strcat(info, str);
        ShowPlayerDialog(playerid, 262, DIALOG_STYLE_LIST, "{AFAFAF}Uogø inventorius", info, "Rinktis", "Atðaukti");
    }
    else
    {
        ErrorMsg(playerid,"• Jûs neturite krepðelio uogoms rinkti.");
    }
    return 1;
}

CMD:slepti(playerid,params[])
{
    new info[100];
    if(PlayerDB[playerid][RodoAlki] == true)
    {
        strcat(info, "• Iðjungti alkio textdraw.\n");
    }
    else
    {
        strcat(info, "• Ájungti alkio textdraw.\n");
    }
    if(PlayerDB[playerid][RodoItarima] == true)
    {
        strcat(info, "• Iðjungti átarimo textdraw.\n");
    }
    else
    {
        strcat(info, "• Ájungti átarimo textdraw.\n");
    }
    if(PlayerDB[playerid][RodoLaikrodi] == true)
    {
        strcat(info, "• Iðjungti laikrodá.");
    }
    else
    {
        strcat(info, "• Ájungti laikrodá.");
    }
    ShowPlayerDialog(playerid, 263, DIALOG_STYLE_LIST, "{AFAFAF}Nustatymai", info, "Rinktis", "Atðaukti");
    return 1;
}

CMD:az(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        if(PlayerDB[playerid][MutedPlayer] > 0)
        {
            new string[144];
            format(string, 144, "• Ið jûsø buvo atimta teisë ðnekëti,kurià atgausite tik po %i sek.", PlayerDB[playerid][MutedPlayer]);
            SendClientMessage(playerid, RAUDONA, string);
            return 1;
        }
        new id,tekstas[100];
        if(sscanf(params,"us[100]",id,tekstas)) return ErrorMsg(playerid,"Komandos naudojimas:/az [Þaidëjo dalis vardo arba ID] [Tekstas].");
        if(IsPlayerConnected(id))
        {
            if(PlayerDB[id][PrivateMode] == true)
            {
                ErrorMsg(playerid,"• Þaidëjas privatumo reþime.");
                return 1;
            }
            if(id == playerid)
            {
                ErrorMsg(playerid,"• Sau þinutës siûsti negalima.");
                return 1;
            }
            if(PlayerDB[id][Loaded] == 0)
            {
                ErrorMsg(playerid,"• Þaidëjas nëra pilnai prisijungæs.");
                return 1;
            }
            if(strlen(tekstas) == 0)
            {
                ErrorMsg(playerid,"• Þinutës be teksto iðsiøsti negalima.");
                return 1;
            }
            else
            {
                new string[100];
                format(string, sizeof(string), "• Administratorius {FFFFFF}%s {ED0990}atsiuntë jums asmeninæ þinute:",Vardas(playerid));
                SendClientMessage(id, 0xED0990FF, string);
                SendClientMessage(id, 0xFFFFFFFF, tekstas);

                format(string,sizeof(string),"• Nusiuntëte þaidëjui %s(%i) asmeninæ þinutæ.",Vardas(id),id);
                SendClientMessage(playerid, 0xED0990FF, string);
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:azg(playerid,params[])
{
    if(PlayerDB[playerid][adminlvl] > 0)
    {
        new id;
        if(sscanf(params, "u", id))
        {
            UsageMessage(playerid,"• Atimti þaidëjo ginklus: /azg [v_P/ID].");
        }
        else
        {
            if(IsPlayerConnected(id))
            {
                if(PlayerDB[id][Loaded] == 1)
                {
                    ResetPlayerWeaponsEx(id);
                    new string[128];
                    format(string, 128, "• Administratorius %s(%i) atëmë ið jûsø visus ginklus !", Vardas(playerid),playerid);
                    SendClientMessage(id, 0xFF0000FF, string);

                    format(string, sizeof(string), "• Atëmëte ið þaidëjo %s(%i) ginklus.",Vardas(id),id);
                    SendClientMessage(playerid, 0xFF0000FF, string);
                    format(string, sizeof(string), "• Administratorius %s(%i) atëmë ið þaidëjo %s(%i) ginklus.", Vardas(playerid),playerid,Vardas(id),id);
                    for(new i = 0;i<=GetPlayerPoolSize();i++)
                    {
                        if(PlayerDB[i][Loaded] == 1 && PlayerDB[i][adminlvl] > 0)
                        {
                            SendClientMessage(i, 0xFF0000FF, string);
                        }
                    }
                }
                else
                {
                    ErrorMsg(playerid,"• Þaidëjas nëra pilnai uþkrautas.");
                }
            }
            else
            {
                ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Ði komanda tik administratoriams.");
    }
    return 1;
}
CMD:kartingas(playerid,params[])
{
    if(PlayerDB[playerid][KartingaiTicket] > gettime())
    {
        new string[70];
        new Years, Month, Day, Hour, Minute, Second;
        TimestampToDate(PlayerDB[playerid][KartingaiTicket], Years, Month, Day, Hour, Minute, Second, TimeZoneNum, 0);
        format(string, sizeof(string), "{FFFFFF}Bilietas galioja iki: {33AA33}%d-%02d-%02d %02d:%02d", Years,Month,Day,Hour,Minute);
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Kartingai", string, "Gerai", "");
    }
    else
    {
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Kartingai", "{FFFFFF}Bilietas galioja iki: {FF0000}negalioja", "Gerai", "");
    }
    return 1;
}
CMD:kartingai(playerid,params[])
{
    if(PlayerDB[playerid][KartingaiTicket] > gettime())
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if(VehicleDB[GetPlayerVehicleID(playerid)][Kartingas] == true)
            {
                if(PlayerDB[playerid][ZaidziaKartingais] == true)
                {
                    ErrorMsg(playerid,"• Dabar to daryti negalite.");
                    return 1;
                }
                new id,sum,ratai;
                if(sscanf(params, "udd", id,ratai,sum))
                {
                    UsageMessage(playerid,"• Siûlyti varþytis kartingais: /kartingai [V_P/ID] [Ratø skaièius nuo 1 iki 8] [Suma].");
                }
                else
                {
                    if(IsPlayerConnected(id))
                    {
                        if(id == playerid)
                        {
                            ErrorMsg(playerid,"• Siûlyti varþytis sau negalite.");
                            return 1;
                        }
                        if(PlayerDB[id][Loaded] == 0)
                        {
                            ErrorMsg(playerid,"• Þaidëjas nëra pilnai prisijungæs.");
                        }
                        else
                        {
                            new Float:Cords[3];
                            GetPlayerPos(playerid, Cords[0], Cords[1], Cords[2]);
                            if(IsPlayerInRangeOfPoint(id, 12.0, Cords[0], Cords[1], Cords[2]))
                            {
                                if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(id) && GetPlayerInterior(playerid) == GetPlayerInterior(id))
                                {
                                    if(PlayerDB[id][AfkState] == true)
                                    {
                                        ErrorMsg(playerid,"• Þaidëjas yra AFK bûsenoje.");
                                    }
                                    else
                                    {
                                        if(IsPlayerInAnyVehicle(id) && VehicleDB[GetPlayerVehicleID(id)][Kartingas] == true)
                                        {
                                            if(PlayerDB[id][ZaidziaKartingais] == true)
                                            {
                                                ErrorMsg(playerid,"• Þaidëjas jau varþosi.");
                                            }
                                            else
                                            {
                                                if(PlayerDB[id][ReceivedKartsOffer] == true && PlayerDB[id][KartsOfferExpiresAt] > gettime())
                                                {
                                                    ErrorMsg(playerid,"• Þaidëjas jau yra sulaukes pasiûlymo varþytis.");
                                                }
                                                else
                                                {
                                                    if(ratai >= 1 && ratai <= 8)
                                                    {
                                                        if(sum >= 1 && sum <= 1000000)
                                                        {
                                                            if(PlayerDB[playerid][MoneyInPocket] >= sum)
                                                            {
                                                                new string[128];
                                                                format(string, 128, "• Þaidëjas {6EF83C}%s {33AA33}Jums siûlo lenktyniauti su kartingais %d ratà(-us) ið {6EF83C}%s €.",Vardas(playerid),ratai,AddPoints(sum));
                                                                SendClientMessage(id, 0x33AA33FF, string);
                                                                SendClientMessage(id, 0x33AA33FF, "• Norëdamas sutikti lenktyniauti,jûs turite paspausti N raidæ, tam turite 30 sekundþiø.");

                                                                format(string, 128, "• Pasiûlëte %s lenktyniauti su kartingais %d ratà(-us) ið %s €.",Vardas(id),ratai,AddPoints(sum));
                                                                SendClientMessage(playerid, 0x33AA33FF, string);
                                                                PlayerDB[id][ReceivedKartsOffer] = true;
                                                                PlayerDB[id][KartsOfferExpiresAt] = gettime() + 30;
                                                                PlayerDB[id][KartOfferSenderSQLid] = PlayerDB[playerid][SQLID];
                                                                PlayerDB[id][KartsOfferMoney] = sum;
                                                                PlayerDB[id][KartsRatai] = ratai;
                                                            }
                                                            else
                                                            {
                                                                ErrorMsg(playerid,"• Neturite pakankamai pinigø.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ErrorMsg(playerid,"• Suma gali bûti nuo 1 iki 1 000 000 €.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ErrorMsg(playerid,"Ratø skaièius turi bûti nuo 1 iki 8.");
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            ErrorMsg(playerid,"• Þaidëjas turi vairuoti kartingà.");
                                        }
                                    }
                                }
                                else
                                {
                                    ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                                }
                            }
                            else
                            {
                                ErrorMsg(playerid,"• Þaidëjas yra per toli.");
                            }
                        }
                    }
                    else
                    {
                        ErrorMsg(playerid,"• Tokio þaidëjo nëra.");
                    }
                }
            }
            else
            {
                ErrorMsg(playerid,"• Pirmiausia turite bûti kartinge.");
            }
        }
    }
    else
    {
        ErrorMsg(playerid,"• Jûsø leidimas vaþinëtis kartingais baigësi.");
    }
    return 1;
}


/*WriteToLog(logFile[],logText[])
{
    new File:file = fopen(logFile, io_append);
    if(file)
    {
        fwrite(file, logText);
        fclose(file);
    }
}*/
//CreateCartsGame(playerid,pID,PlayerDB[playerid][KartsOfferMoney],PlayerDB[playerid][KartsRatai]);
/*enum CartsGamesInfo
{
    CGI_P1_SQLID,
    CGI_P2_SQLID,
    CGI_Laps,
    CGI_Money,
    bool:CGI_GameInProgress,
    CGI_P1_Points,
    CGI_P2_Points
}
new CartGamesDB[MAX_PLAYERS][CartsGamesInfo];
new CartGamesRunning = 0;
*/

stock CreateCartsGame(FirstPlayer,SecondPlayer,Money,Laps)
{
    CartGamesRunning+=1;
    new gameID = -1;
    for(new i = 0;i< MAX_PLAYERS;i++)
    {
        if(CartGamesDB[i][CGI_GameInProgress] == false)
        {
            gameID = i;
            break;
        }
    }
    CartGamesDB[gameID][CGI_P1_SQLID] = PlayerDB[FirstPlayer][SQLID];
    CartGamesDB[gameID][CGI_P2_SQLID] = PlayerDB[SecondPlayer][SQLID];


    PlayerDB[FirstPlayer][KartsGameID] = gameID;
    PlayerDB[SecondPlayer][KartsGameID] = gameID;

    CartGamesDB[gameID][CGI_Laps] = Laps;
    CartGamesDB[gameID][CGI_Money] = Money;

    CartGamesDB[gameID][CGI_P1_Points] = 0;
    CartGamesDB[gameID][CGI_P2_Points] = 0;


    PlayerDB[FirstPlayer][ZaidziaKartingais] = true;
    PlayerDB[SecondPlayer][ZaidziaKartingais] = true;

    TogglePlayerControllable(FirstPlayer, false);
    TogglePlayerControllable(SecondPlayer, false);

    PlayerDB[FirstPlayer][MoneyInPocket]-=Money;
    PlayerDB[SecondPlayer][MoneyInPocket]-=Money;

    new FirstVehicle = GetPlayerVehicleID(FirstPlayer);
    new SecondVehicle = GetPlayerVehicleID(SecondPlayer);

    CartGamesDB[gameID][CGI_Cart1] = FirstVehicle;
    CartGamesDB[gameID][CGI_Cart2] = SecondVehicle;


    SetVehicleEngineState(FirstVehicle,1);
    SetVehicleEngineState(SecondVehicle,1);

    SetPlayerVirtualWorld(FirstPlayer, gameID+6);
    SetPlayerVirtualWorld(SecondPlayer, gameID+6);
    SetVehicleVirtualWorld(FirstVehicle, gameID+6);
    SetVehicleVirtualWorld(SecondVehicle, gameID+6);
    SetPlayerRaceCheckpoint(FirstPlayer, 0, -1900.6304,-849.9285,31.3072, -1901.2926,-812.2694,31.3072, 3);
    SetPlayerRaceCheckpoint(SecondPlayer, 0, -1900.6304,-849.9285,31.3072, -1901.2926,-812.2694,31.3072, 3);

    PlayerDB[FirstPlayer][RaceCheckPointID] = 166;
    PlayerDB[SecondPlayer][RaceCheckPointID] = 166;

    format(CartGamesDB[gameID][CGI_P1_Name], 24, "%s", Vardas(FirstPlayer));
    format(CartGamesDB[gameID][CGI_P2_Name], 24, "%s", Vardas(SecondPlayer));

    SetVehiclePosExt(FirstVehicle,-1904.7488,-866.0139,31.3172,357.1316);
    SetVehiclePosExt(SecondVehicle,-1901.9397,-866.1545,31.3075,357.1304);
    PutPlayerInVehicle(FirstPlayer, FirstVehicle, 0);
    PutPlayerInVehicle(SecondPlayer, SecondVehicle, 0);

    GameTextForPlayer(FirstPlayer, "~g~ 5", 1500, 5);
    GameTextForPlayer(SecondPlayer, "~g~ 5", 1500, 5);
    SetTimerEx("Count4Carts", 1500, false, "d", gameID);

    SendClientMessage(FirstPlayer, 0x33AA33FF, "• Buvote nukeltas á kità pasaulá, kad niekas netrugdytø jums lenktyniauti.");
    SendClientMessage(SecondPlayer, 0x33AA33FF, "• Buvote nukeltas á kità pasaulá, kad niekas netrugdytø jums lenktyniauti.");
    new string[128];
    format(string, sizeof(string), "• Pradëtas 5 sekundþiø skaièiavimas, jûsø uþduotis pirmam nuvaþiuoti %d ratus ir pasiekti finiða ir laimëti prizà.",Laps);
    SendClientMessage(FirstPlayer, 0x33AA33FF, string);
    SendClientMessage(SecondPlayer, 0x33AA33FF, string);

    CartGamesDB[gameID][CGI_GameInProgress] = true;

    SetTimerEx("CartsGameStatsTimer", 1000, false, "d", gameID);

    return 1;
}
forward Count4Carts(gameID);
public Count4Carts(gameID)
{
    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;
            }
        }
    }
    if(FirstPlayer > -1 && SecondPlayer > -1)
    {
        GameTextForPlayer(FirstPlayer, "~g~ 4", 1500, 5);
        GameTextForPlayer(SecondPlayer, "~g~ 4", 1500, 5);
        SetTimerEx("Count3Carts", 1500, false, "d", gameID);
    }
    else
    {
        if(FirstPlayer >= 0)
        {
            PlayerDB[FirstPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P2_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(FirstPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(FirstPlayer, 0);
            SendClientMessage(FirstPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[FirstPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(FirstPlayer);
        }
        else
        {
            PlayerDB[SecondPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P1_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(SecondPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(SecondPlayer, 0);
            SendClientMessage(SecondPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[SecondPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(SecondPlayer);
        }
    }
}
forward Count3Carts(gameID);
public Count3Carts(gameID)
{
    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;
            }
        }
    }

    if(FirstPlayer > -1 && SecondPlayer > -1)
    {
        GameTextForPlayer(FirstPlayer, "~g~ 3", 1500, 5);
        GameTextForPlayer(SecondPlayer, "~g~ 3", 1500, 5);
        SetTimerEx("Count2Carts", 1500, false, "d", gameID);
    }
    else
    {
        if(FirstPlayer >= 0)
        {
            PlayerDB[FirstPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P2_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(FirstPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(FirstPlayer, 0);
            SendClientMessage(FirstPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[FirstPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(FirstPlayer);
        }
        else
        {
            PlayerDB[SecondPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P1_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(SecondPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(SecondPlayer, 0);
            SendClientMessage(SecondPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[SecondPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(SecondPlayer);
        }
    }
}
forward Count2Carts(gameID);
public Count2Carts(gameID)
{
    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;
            }
        }
    }

    if(FirstPlayer > -1 && SecondPlayer > -1)
    {
        GameTextForPlayer(FirstPlayer, "~g~ 2", 1500, 5);
        GameTextForPlayer(SecondPlayer, "~g~ 2", 1500, 5);
        SetTimerEx("Count1Carts", 1500, false, "d", gameID);
    }
    else
    {
        if(FirstPlayer >= 0)
        {
            PlayerDB[FirstPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P2_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(FirstPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(FirstPlayer, 0);
            SendClientMessage(FirstPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[FirstPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(FirstPlayer);
        }
        else
        {
            PlayerDB[SecondPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P1_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(SecondPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(SecondPlayer, 0);
            SendClientMessage(SecondPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[SecondPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(SecondPlayer);
        }
    }
}

forward Count1Carts(gameID);
public Count1Carts(gameID)
{
    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;
            }
        }
    }

    if(FirstPlayer > -1 && SecondPlayer > -1)
    {
        GameTextForPlayer(FirstPlayer, "~g~ 1", 1500, 5);
        GameTextForPlayer(SecondPlayer, "~g~ 1", 1500, 5);
        SetTimerEx("CountGCarts", 1500, false, "d", gameID);
    }
    else
    {
        if(FirstPlayer >= 0)
        {
            PlayerDB[FirstPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P2_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(FirstPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(FirstPlayer, 0);
            SendClientMessage(FirstPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[FirstPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(FirstPlayer);
        }
        else
        {
            PlayerDB[SecondPlayer][MoneyInPocket]+=CartGamesDB[gameID][CGI_Money];
            new SQLstring[300];
            mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d),`VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;", CartGamesDB[gameID][CGI_Money],-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P1_SQLID]);
            mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
            SetPlayerPosExt(SecondPlayer,-1903.2593,-877.9726,32.0234,354.6720);
            SetPlayerVirtualWorld(SecondPlayer, 0);
            SendClientMessage(SecondPlayer, RAUDONA, "• Lenktynës buvo nutrauktos.");
            DestroyCartsRace(gameID);
            PlayerDB[SecondPlayer][ZaidziaKartingais] = false;
            DisablePlayerRaceCheckpoint(SecondPlayer);
        }
    }
}



forward CountGCarts(gameID);
public CountGCarts(gameID)
{
    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;
            }
        }
    }
    GameTextForPlayer(FirstPlayer, "~r~ STARTAS", 1500, 5);
    GameTextForPlayer(SecondPlayer, "~r~ STARTAS", 1500, 5);
    TogglePlayerControllable(FirstPlayer, true);
    TogglePlayerControllable(SecondPlayer, true);
}

stock DestroyCartsRace(gameID)
{
    SetVehicleToRespawn(CartGamesDB[gameID][CGI_Cart1]);
    SetVehicleToRespawn(CartGamesDB[gameID][CGI_Cart2]);

    SetVehicleVirtualWorld(CartGamesDB[gameID][CGI_Cart1],0);
    SetVehicleVirtualWorld(CartGamesDB[gameID][CGI_Cart2],0);



    new FirstPlayer = -1;
    new SecondPlayer = -1;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
        {
            if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
            {
                FirstPlayer = i;
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][0]);
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][1]);
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][2]);
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][3]);
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][4]);
                PlayerTextDrawDestroy(FirstPlayer, KartsStatsDraw[FirstPlayer][5]);
                CartsGameDrawIsVisible[FirstPlayer] = false;
            }
            else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
            {
                SecondPlayer = i;

                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][0]);
                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][1]);
                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][2]);
                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][3]);
                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][4]);
                PlayerTextDrawDestroy(SecondPlayer, KartsStatsDraw[SecondPlayer][5]);
                CartsGameDrawIsVisible[SecondPlayer] = false;
            }
        }
    }
    if(!IsPlayerConnected(FirstPlayer))
    {
        new SQLstring[300];
        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;",-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P1_SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
    }
    if(!IsPlayerConnected(SecondPlayer))
    {
        new SQLstring[300];
        mysql_format(connectionHandle, SQLstring, sizeof(SQLstring), "UPDATE `players` SET `VirtualWorld` = '0',`Pos_X` = '%f',`Pos_Y` = '%f',`Pos_Z` = '%f' WHERE `id` = '%d' LIMIT 1;",-1903.2593,-877.9726,32.0234,354.6720,CartGamesDB[gameID][CGI_P2_SQLID]);
        mysql_function_query(connectionHandle,SQLstring,false,"SendQuery","");
    }
    CartGamesDB[gameID][CGI_GameInProgress] = false;
    return 1;
}
//

forward CartsGameStatsTimer(gameID);
public CartsGameStatsTimer(gameID)
{
    if(CartGamesDB[gameID][CGI_GameInProgress] == true)
    {
        SetTimerEx("CartsGameStatsTimer", 1000, false, "d", gameID);

        new FirstPlayer = -1;
        new SecondPlayer = -1;
        for(new i = 0;i<=GetPlayerPoolSize();i++)
        {
            if(IsPlayerConnected(i) == 1 && PlayerDB[i][Loaded] == 1)
            {
                if(CartGamesDB[gameID][CGI_P1_SQLID] == PlayerDB[i][SQLID])
                {
                    FirstPlayer = i;
                }
                else if(CartGamesDB[gameID][CGI_P2_SQLID] == PlayerDB[i][SQLID])
                {
                    SecondPlayer = i;
                }
            }
        }
        if(IsPlayerConnected(FirstPlayer) == 1 && PlayerDB[FirstPlayer][Loaded] == 1)
        {
            if(CartsGameDrawIsVisible[FirstPlayer] == true)
            {
                new Text_Laps[24];
                format(Text_Laps, 24, "Ratu skaicius: ~r~%d/%d", floatround(CartGamesDB[gameID][CGI_P1_Points] / 10, floatround_floor) , CartGamesDB[gameID][CGI_Laps]);
                PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][1], Text_Laps);
                new Text_Prize[40];
                format(Text_Prize, 40, "Prizas: ~p~%se", AddPoints(CartGamesDB[gameID][CGI_Money]));
                PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][3], Text_Prize);

                new Oponent[50];
                format(Oponent, 50, "Varzovas: ~g~%s", CartGamesDB[gameID][CGI_P2_Name]);

                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_P2_Points])
                {
                    PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][2], "Pirmauja: ~y~NIEKAS");
                }
                else
                {
                    if(CartGamesDB[gameID][CGI_P1_Points] > CartGamesDB[gameID][CGI_P2_Points])
                    {
                        PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][2], "Pirmauja: ~g~JUS");
                    }
                    else
                    {
                        PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][2], "Pirmauja: ~r~OPONENTAS");
                    }
                }

                PlayerTextDrawSetString(FirstPlayer, KartsStatsDraw[FirstPlayer][5], Oponent);
            }
            else
            {
                new Text_Laps[24];
                format(Text_Laps, 24, "Ratu skaicius: ~r~%d/%d", floatround(CartGamesDB[gameID][CGI_P1_Points] / 10, floatround_floor) , CartGamesDB[gameID][CGI_Laps]);
                new Text_Prize[40];
                format(Text_Prize, 40, "Prizas: ~p~%se", AddPoints(CartGamesDB[gameID][CGI_Money]));

                KartsStatsDraw[FirstPlayer][0] = CreatePlayerTextDraw(FirstPlayer,141.000000, 260.000000, "  ");
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 0.380000, 7.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][0], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 1);
                PlayerTextDrawUseBox(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 1);
                PlayerTextDrawBoxColor(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 125);
                PlayerTextDrawTextSize(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 15.000000, 0.000000);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][0], 0);

                KartsStatsDraw[FirstPlayer][1] = CreatePlayerTextDraw(FirstPlayer,30.000000, 289.000000, Text_Laps);
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 0.180000, 1.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][1], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 1);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][1], 0);
                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_P2_Points])
                {
                    KartsStatsDraw[FirstPlayer][2] = CreatePlayerTextDraw(FirstPlayer,30.000000, 299.000000, "Pirmauja: ~y~NIEKAS");
                }
                else
                {
                    if(CartGamesDB[gameID][CGI_P1_Points] > CartGamesDB[gameID][CGI_P2_Points])
                    {
                        KartsStatsDraw[FirstPlayer][2] = CreatePlayerTextDraw(FirstPlayer,30.000000, 299.000000, "Pirmauja: ~g~JUS");
                    }
                    else
                    {
                        KartsStatsDraw[FirstPlayer][2] = CreatePlayerTextDraw(FirstPlayer,30.000000, 299.000000, "Pirmauja: ~r~OPONENTAS");
                    }
                }
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 0.180000, 1.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][2], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 1);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][2], 0);

                KartsStatsDraw[FirstPlayer][3] = CreatePlayerTextDraw(FirstPlayer,30.000000, 309.000000, Text_Prize);
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 0.180000, 1.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][3], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 1);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][3], 0);

                KartsStatsDraw[FirstPlayer][4] = CreatePlayerTextDraw(FirstPlayer,32.000000, 261.000000, "Lenktyniu informacija:");
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 0.180000, 1.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][4], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 1);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][4], 0);

                new Oponent[50];
                format(Oponent, 50, "Varzovas: ~g~%s", CartGamesDB[gameID][CGI_P2_Name]);

                KartsStatsDraw[FirstPlayer][5] = CreatePlayerTextDraw(FirstPlayer,30.000000, 278.000000, Oponent);
                PlayerTextDrawBackgroundColor(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 255);
                PlayerTextDrawFont(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 2);
                PlayerTextDrawLetterSize(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 0.180000, 1.199999);
                PlayerTextDrawColor(FirstPlayer,KartsStatsDraw[FirstPlayer][5], -1);
                PlayerTextDrawSetOutline(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 1);
                PlayerTextDrawSetProportional(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 1);
                PlayerTextDrawSetSelectable(FirstPlayer,KartsStatsDraw[FirstPlayer][5], 0);

                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][0]);
                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][1]);
                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][2]);
                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][3]);
                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][4]);
                PlayerTextDrawShow(FirstPlayer, KartsStatsDraw[FirstPlayer][5]);

                CartsGameDrawIsVisible[FirstPlayer] = true;

            }
        }
        else
        {
            if(CartsGameDrawIsVisible[FirstPlayer] == true)
            {
                CartsGameDrawIsVisible[FirstPlayer] = false;
            }
        }


//

        if(IsPlayerConnected(SecondPlayer) == 1 && PlayerDB[SecondPlayer][Loaded] == 1)
        {
            if(CartsGameDrawIsVisible[SecondPlayer] == true)
            {
                new Text_Laps[24];
                format(Text_Laps, 24, "Ratu skaicius: ~r~%d/%d", floatround(CartGamesDB[gameID][CGI_P2_Points] / 10, floatround_floor) , CartGamesDB[gameID][CGI_Laps]);
                PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][1], Text_Laps);
                new Text_Prize[40];
                format(Text_Prize, 40, "Prizas: ~p~%se", AddPoints(CartGamesDB[gameID][CGI_Money]));
                PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][3], Text_Prize);

                new Oponent[50];
                format(Oponent, 50, "Varzovas: ~g~%s", CartGamesDB[gameID][CGI_P2_Name]);

                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_P2_Points])
                {
                    PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][2], "Pirmauja: ~y~NIEKAS");
                }
                else
                {
                    if(CartGamesDB[gameID][CGI_P1_Points] < CartGamesDB[gameID][CGI_P2_Points])
                    {
                        PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][2], "Pirmauja: ~g~JUS");
                    }
                    else
                    {
                        PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][2], "Pirmauja: ~r~OPONENTAS");
                    }
                }

                PlayerTextDrawSetString(SecondPlayer, KartsStatsDraw[SecondPlayer][5], Oponent);
            }
            else
            {
                new Text_Laps[24];
                format(Text_Laps, 24, "Ratu skaicius: ~r~%d/%d", floatround(CartGamesDB[gameID][CGI_P2_Points] / 10, floatround_floor) , CartGamesDB[gameID][CGI_Laps]);
                new Text_Prize[40];
                format(Text_Prize, 40, "Prizas: ~p~%se", AddPoints(CartGamesDB[gameID][CGI_Money]));

                KartsStatsDraw[SecondPlayer][0] = CreatePlayerTextDraw(SecondPlayer,141.000000, 260.000000, "  ");
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 0.380000, 7.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][0], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 1);
                PlayerTextDrawUseBox(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 1);
                PlayerTextDrawBoxColor(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 125);
                PlayerTextDrawTextSize(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 15.000000, 0.000000);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][0], 0);

                KartsStatsDraw[SecondPlayer][1] = CreatePlayerTextDraw(SecondPlayer,30.000000, 289.000000, Text_Laps);
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 0.180000, 1.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][1], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 1);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][1], 0);
                if(CartGamesDB[gameID][CGI_P1_Points] == CartGamesDB[gameID][CGI_P2_Points])
                {
                    KartsStatsDraw[SecondPlayer][2] = CreatePlayerTextDraw(SecondPlayer,30.000000, 299.000000, "Pirmauja: ~y~NIEKAS");
                }
                else
                {
                    if(CartGamesDB[gameID][CGI_P1_Points] < CartGamesDB[gameID][CGI_P2_Points])
                    {
                        KartsStatsDraw[SecondPlayer][2] = CreatePlayerTextDraw(SecondPlayer,30.000000, 299.000000, "Pirmauja: ~g~JUS");
                    }
                    else
                    {
                        KartsStatsDraw[SecondPlayer][2] = CreatePlayerTextDraw(SecondPlayer,30.000000, 299.000000, "Pirmauja: ~r~OPONENTAS");
                    }
                }
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 0.180000, 1.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][2], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 1);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][2], 0);

                KartsStatsDraw[SecondPlayer][3] = CreatePlayerTextDraw(SecondPlayer,30.000000, 309.000000, Text_Prize);
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 0.180000, 1.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][3], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 1);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][3], 0);

                KartsStatsDraw[SecondPlayer][4] = CreatePlayerTextDraw(SecondPlayer,32.000000, 261.000000, "Lenktyniu informacija:");
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 0.180000, 1.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][4], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 1);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][4], 0);

                new Oponent[50];
                format(Oponent, 50, "Varzovas: ~g~%s", CartGamesDB[gameID][CGI_P1_Name]);

                KartsStatsDraw[SecondPlayer][5] = CreatePlayerTextDraw(SecondPlayer,30.000000, 278.000000, Oponent);
                PlayerTextDrawBackgroundColor(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 255);
                PlayerTextDrawFont(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 2);
                PlayerTextDrawLetterSize(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 0.180000, 1.199999);
                PlayerTextDrawColor(SecondPlayer,KartsStatsDraw[SecondPlayer][5], -1);
                PlayerTextDrawSetOutline(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 1);
                PlayerTextDrawSetProportional(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 1);
                PlayerTextDrawSetSelectable(SecondPlayer,KartsStatsDraw[SecondPlayer][5], 0);

                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][0]);
                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][1]);
                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][2]);
                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][3]);
                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][4]);
                PlayerTextDrawShow(SecondPlayer, KartsStatsDraw[SecondPlayer][5]);

                CartsGameDrawIsVisible[SecondPlayer] = true;
            }
        }
        else
        {
            if(CartsGameDrawIsVisible[SecondPlayer] == true)
            {
                CartsGameDrawIsVisible[SecondPlayer] = false;
            }
        }
    }
    return 1;
}
CMD:saugumas(playerid,params[])
{
    new IPstr[24];
    GetPlayerIp(playerid, IPstr, 24);
    if(strlen(PlayerDB[playerid][IPAddress]) < 4)
    {
        format(PlayerDB[playerid][IPAddress], 24, "%s", IPstr);
        new QueryString[128];
        mysql_format(connectionHandle, QueryString, sizeof(QueryString), "UPDATE `players` SET `IPAddress` = '%e' WHERE `id` = '%i' LIMIT 1;", IPstr,PlayerDB[playerid][SQLID]);
        mysql_function_query(connectionHandle, QueryString, false, "SendQuery","");
    }
    if(strcmp(PlayerDB[playerid][IPAddress], IPstr, false) == 0)
    {
        new info[1024];
        new string[128];
        format(string, sizeof(string), "{FFC200}• {FFFFFF}Registracijos IP adresas: {FFC200}%s\n",IPstr);
        strcat(info, string);
        strcat(info, "        \n");
        if(PlayerDB[playerid][IPApsauga] == 0)
        {
            strcat(info, "{FFC200}• {FFFFFF}IP apsauga [{FF0000}Iðjungta{FFFFFF}]\n");
        }
        else
        {
            strcat(info, "{FFC200}• {FFFFFF}IP apsauga [{00FF00}Ájungta{FFFFFF}]\n");
        }
        if(PlayerDB[playerid][SecurityCodeCheck] == 0)
        {
            strcat(info, "{FFC200}• {FFFFFF}Antro slaptaþodþio apsauga [{FF0000}Iðjungta{FFFFFF}]\n");
        }
        else
        {
            strcat(info, "{FFC200}• {FFFFFF}Antro slaptaþodþio apsauga [{00FF00}Ájungta{FFFFFF}]\n");
        }
        strcat(info, "        \n");
        strcat(info, "{FFC200}• {FFFFFF}Slaptaþodþio keitimas\n");
        format(string, sizeof(string), "Dabartinis slaptaþodis: {FFC200}%s\n", PlayerDB[playerid][Password]);
        strcat(info, string);
        format(string, sizeof(string), "Dabartinis PIN kodas: {FFC200}%d\n", PlayerDB[playerid][BankoSaskaitosPin]);
        strcat(info, string);


        /*
    {FFC200}• {FFFFFF}Skype keitimas
    {FFFFFF}Skype: {FFC200}san-andreas-informacija
    {FFC200}• {FFFFFF}Registracijos el.paðtas: {FFC200}noreply@san-andreas.lt
    >> Jei þaidëjo IP skiriasi nuo uþsiregistravimo IP /saugumas neleis atidaryti.

    {FFC200}• {FFFFFF}Praðyti leidimo keisti duomenis

    Leidimà suteiks vyr.adminai
    /leidimai gui dialogas V_P ir koks praðymas (prieþastis).
    */
        ShowPlayerDialog(playerid, 266, DIALOG_STYLE_LIST,"{AFAFAF}Saugumas", info, "Rinktis", "Atðaukti");
    }
    else
    {
        ErrorMsg(playerid,"• Dabartinis IP adresas nesutampa su ðio vartotojo registracijos ip adresu, todël ði komanda neveikia.");
    }

    return 1;
}



forward OnPlayerRequestTopByKartsToday(playerid);
public OnPlayerRequestTopByKartsToday(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai ðiandien laimëje daugiausiai kartingø lenktyniø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}laimëjo {FFFF00}%i{FFFFFF} lenktynes(-iø).\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][KartsLaimejoSiandien];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal ðiandien laimëtas kartingø lenktynes jums reikia laimëti dar{FFFF00} %i {FFFFFF}lenktyniø.", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][KartsLaimejoSiandien];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal ðiandien laimëtas kartingø lenktynes jums reikia laimëti dar{FFFF00} %i {FFFFFF}lenktyniø.",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal ðiandien laimëtas kartingø lenktynes", info, "Gerai", "");
    return 1;
}

//

forward OnPlayerRequestTopByKartsTotal(playerid);
public OnPlayerRequestTopByKartsTotal(playerid)
{
    new info[2048];
    new string[156];
    info = "{FFFFFF}Þaidëjai laimëje daugiausiai kartingø lenktyniø: \n\n";
    new bool:PlayerInTop = false;
    new PlayerInTopPlace = 0;
    new rows = cache_get_row_count();
    for(new i = 0;i< rows;i++)
    {
        new PlayerNickName[24];
        cache_get_row(i, 0, PlayerNickName);
        format(string, 156, "{FFFFFF}%i. {FFFF00}%s {FFFFFF}laimëjo {FFFF00}%i{FFFFFF} lenktynes(-iø).\n", i+1,PlayerNickName,cache_get_row_int(i, 1));
        strcat(info, string);
        if(strcmp(PlayerNickName, Vardas(playerid), false) == 0)
        {
            PlayerInTop = true;
            PlayerInTopPlace = i+1;
        }
    }
    if(PlayerInTop == false)
    {
        new PlayerStat = PlayerDB[playerid][KartsLaimejoTotal];
        new Gap = cache_get_row_int(9, 1) - PlayerStat +1;
        format(string, 156, "\n{FFFFFF}Patekimui á TOP 10 pagal laimëtas kartingø lenktynes jums reikia laimëti dar{FFFF00} %i {FFFFFF}lenktyniø.", Gap);
        strcat(info, string);
    }
    else
    {
        if(PlayerInTopPlace != 1)
        {
            new PlayerStat = PlayerDB[playerid][KartsLaimejoTotal];
            new Gap = cache_get_row_int(PlayerInTopPlace-2, 1) - PlayerStat + 1;
            format(string, 156, "\n{FFFFFF}Kad pakiltumëte á {FFFF00}%i{FFFFFF} pozicijà pagal laimëtas kartingø lenktynes jums reikia laimëti dar{FFFF00} %i {FFFFFF}lenktyniø.",PlayerInTopPlace - 1,Gap);
            strcat(info, string);
        }
    }

    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Þaidëjø topas pagal laimëtas kartingø lenktynes", info, "Gerai", "");
    return 1;
}

stock VarzybosConstruction()
{
    DienosVarzybos = random(5);
    DienosPrizas = random(3);
}
CMD:varzybos(playerid,params[])
{
    switch(DienosVarzybos)
    {
        case TOP_BY_TIME:
        {
            mysql_function_query(connectionHandle,"SELECT `Name`,`SiandienZaista` FROM `players` ORDER BY `SiandienZaista` DESC LIMIT 5;",true,"VarzybosByXP","d",playerid);
        }
        case TOP_BY_Uzdarbis:
        {
            mysql_function_query(connectionHandle,"SELECT `Name`,`UzdarbisSiandien` FROM `players` ORDER BY `UzdarbisSiandien` DESC LIMIT 5;",true,"VarzybosByUzdarbis","d",playerid);
        }
        case TOP_BY_Math:
        {
            mysql_function_query(connectionHandle,"SELECT `Name`,`MathToday` FROM `players` ORDER BY `MathToday` DESC LIMIT 5;",true,"VarzybosByMath","d",playerid);
        }
        case TOP_BY_Fruits:
        {
            mysql_function_query(connectionHandle,"SELECT `Name`,`UogosToday` FROM `players` ORDER BY `UogosToday` DESC LIMIT 5;",true,"VarzybosByUogos","d",playerid);
        }
        case TOP_BY_Carts:
        {
            mysql_function_query(connectionHandle,"SELECT `Name`,`KartsLaimejoSiandien` FROM `players` ORDER BY `KartsLaimejoSiandien` DESC LIMIT 5;",true,"VarzybosByKarts","d",playerid);
        }
    }
    return 1;
}
forward VarzybosByXP(playerid);
public VarzybosByXP(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new info[1250];

        strcat(info, "• {FFFFFF}Kiekvienà dienà {33AA33}00:00 {FFFFFF}yra skiriama uþduotys, þaidëjas esantis pirmoje vietoje pagal tos dienos uþduotá laimi prizà.\n\n");

        strcat(info, "{FFFFFF}Ðiandienos uþduotis: {33AA33}Kuo daugiau praþaisti serveryje(min).\n\n");

        new Name[24];
        new string[128];
        for(new i = 0;i<5;i++)
        {
            cache_get_row(i, 0, Name);
            format(string, sizeof(string), "\t{FFFFFF}%d. {33AA33}%s {FFFFFF}praþaidæs {33AA33}%d min{FFFFFF}.\n",i+1,Name,cache_get_row_int(i, 1));
            strcat(info, string);
        }

        switch(DienosPrizas)
        {
            case XP_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}XP\n\n");
            }
            case EUR_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Eurai\n\n");
            }
            case CRED_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Kreditai\n\n");
            }
        }
        strcat(info, "{FF0000}INFORMACIJA: Kiekvienà parà 00:00 bus renkamas vienas laimëtojas, ir kas parà keisis dienos uþduotis !");
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Varþybos", info, "Gerai", "");
    }
    return 1;
}

forward VarzybosByUzdarbis(playerid);
public VarzybosByUzdarbis(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new info[1250];

        strcat(info, "• {FFFFFF}Kiekvienà dienà {33AA33}00:00 {FFFFFF}yra skiriama uþduotys, þaidëjas esantis pirmoje vietoje pagal tos dienos uþduotá laimi prizà.\n\n");

        strcat(info, "{FFFFFF}Ðiandienos uþduotis: {33AA33}Kuo daugiau uþdirbti.\n\n");

        new Name[24];
        new string[128];
        for(new i = 0;i<5;i++)
        {
            cache_get_row(i, 0, Name);
            format(string, sizeof(string), "\t{FFFFFF}%d. {33AA33}%s {FFFFFF}uþdirbo {33AA33}%d €{FFFFFF}.\n",i+1,Name,cache_get_row_int(i, 1));
            strcat(info, string);
        }

        switch(DienosPrizas)
        {
            case XP_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}XP\n\n");
            }
            case EUR_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Eurai\n\n");
            }
            case CRED_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Kreditai\n\n");
            }
        }
        strcat(info, "{FF0000}INFORMACIJA: Kiekvienà parà 00:00 bus renkamas vienas laimëtojas, ir kas parà keisis dienos uþduotis !");
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Varþybos", info, "Gerai", "");
    }
    return 1;
}


//

forward VarzybosByMath(playerid);
public VarzybosByMath(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new info[1250];

        strcat(info, "• {FFFFFF}Kiekvienà dienà {33AA33}00:00 {FFFFFF}yra skiriama uþduotys, þaidëjas esantis pirmoje vietoje pagal tos dienos uþduotá laimi prizà.\n\n");

        strcat(info, "{FFFFFF}Ðiandienos uþduotis: {33AA33}Kuo daugiau iðspræsti matematiniø uþduoèiø.\n\n");

        new Name[24];

        new string[128];
        for(new i = 0;i<5;i++)
        {
            cache_get_row(i, 0, Name);
            format(string, sizeof(string), "\t{FFFFFF}%d. {33AA33}%s {FFFFFF}iðsprendë {33AA33}%d uþdavinius{FFFFFF}.\n",i+1,Name,cache_get_row_int(i, 1));
            strcat(info, string);
        }

        switch(DienosPrizas)
        {
            case XP_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}XP\n\n");
            }
            case EUR_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Eurai\n\n");
            }
            case CRED_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Kreditai\n\n");
            }
        }
        strcat(info, "{FF0000}INFORMACIJA: Kiekvienà parà 00:00 bus renkamas vienas laimëtojas, ir kas parà keisis dienos uþduotis !");
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Varþybos", info, "Gerai", "");
    }
    return 1;
}
//


forward VarzybosByUogos(playerid);
public VarzybosByUogos(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new info[1250];

        strcat(info, "• {FFFFFF}Kiekvienà dienà {33AA33}00:00 {FFFFFF}yra skiriama uþduotys, þaidëjas esantis pirmoje vietoje pagal tos dienos uþduotá laimi prizà.\n\n");

        strcat(info, "{FFFFFF}Ðiandienos uþduotis: {33AA33}Parduoti kuo daugiau uogø.\n\n");

        new Name[24];
        new string[128];
        for(new i = 0;i<5;i++)
        {
            cache_get_row(i, 0, Name);
            format(string, sizeof(string), "\t{FFFFFF}%d. {33AA33}%s {FFFFFF}pardavë {33AA33}%d uogø{FFFFFF}.\n",i+1,Name,cache_get_row_int(i, 1));
            strcat(info, string);
        }

        switch(DienosPrizas)
        {
            case XP_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}XP\n\n");
            }
            case EUR_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Eurai\n\n");
            }
            case CRED_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Kreditai\n\n");
            }
        }
        strcat(info, "{FF0000}INFORMACIJA: Kiekvienà parà 00:00 bus renkamas vienas laimëtojas, ir kas parà keisis dienos uþduotis !");
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Varþybos", info, "Gerai", "");
    }
    return 1;
}
//


forward VarzybosByKarts(playerid);
public VarzybosByKarts(playerid)
{
    if(cache_get_row_count() > 0)
    {
        new info[1250];

        strcat(info, "• {FFFFFF}Kiekvienà dienà {33AA33}00:00 {FFFFFF}yra skiriama uþduotys, þaidëjas esantis pirmoje vietoje pagal tos dienos uþduotá laimi prizà.\n\n");

        strcat(info, "{FFFFFF}Ðiandienos uþduotis: {33AA33}laimëti kuo daugiau kartingø lenktyniø.\n\n");

        new Name[24];
        new string[128];
        for(new i = 0;i<5;i++)
        {
            cache_get_row(i, 0, Name);
            format(string, sizeof(string), "\t{FFFFFF}%d. {33AA33}%s {FFFFFF}laimëjo {33AA33}%d lenktyniø{FFFFFF}.\n",i+1,Name,cache_get_row_int(i, 1));
            strcat(info, string);
        }

        switch(DienosPrizas)
        {
            case XP_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}XP\n\n");
            }
            case EUR_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Eurai\n\n");
            }
            case CRED_PRIZE:
            {
                strcat(info, "\n{FFFFFF}Prizas: {33AA33}Kreditai\n\n");
            }
        }
        strcat(info, "{FF0000}INFORMACIJA: Kiekvienà parà 00:00 bus renkamas vienas laimëtojas, ir kas parà keisis dienos uþduotis !");
        ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "{AFAFAF}Varþybos", info, "Gerai", "");
    }
    return 1;
}

//
forward VarzybosPrize();
public VarzybosPrize()
{
    new bool:Found = false;
    for(new i = 0;i<=GetPlayerPoolSize();i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerDB[i][Loaded] == 1)
            {
                if(PlayerDB[i][SQLID] == cache_get_row_int(0, 0))
                {
                    switch(DienosPrizas)
                    {
                        case EUR_PRIZE:
                        {
                            new prize_size = 10000+random(40000);
                            PlayerDB[i][MoneyInPocket]+=prize_size;
                            new string[128];
                            format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}€ !", Vardas(i),prize_size);
                            SendClientMessageToAll(0xFFC200FF, string);
                        }
                        case CRED_PRIZE:
                        {
                            new prize_size = 20+random(20);
                            PlayerDB[i][Credits]+=prize_size;
                            new string[128];
                            format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}kreditø !", Vardas(i),prize_size);
                            SendClientMessageToAll(0xFFC200FF, string);
                        }
                        case XP_PRIZE:
                        {
                            new prize_size = 1000+random(2000);
                            PlusPlayerScore(i,prize_size);
                            new string[128];
                            format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}XP !", Vardas(i),prize_size);
                            SendClientMessageToAll(0xFFC200FF, string);
                        }
                    }
                    Found = true;
                    break;
                }
            }
        }
    }
    if(Found == false)
    {
        new Name[24];
        cache_get_row(0, 1, Name);
        switch(DienosPrizas)
        {
            case EUR_PRIZE:
            {
                new prize_size = 10000+random(40000);
                new string[128];
                format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}€ !", Name,prize_size);
                SendClientMessageToAll(0xFFC200FF, string);
                mysql_format(connectionHandle, string, sizeof(string), "UPDATE `players` SET `MoneyInPocket` = (`MoneyInPocket` + %d) WHERE `id` = '%i' LIMIT 1;", prize_size,cache_get_row_int(0, 0));
                mysql_function_query(connectionHandle, string, false, "SendQuery","");
            }
            case CRED_PRIZE:
            {
                new prize_size = 20+random(20);
                new string[128];
                format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}kreditø !", Name,prize_size);
                SendClientMessageToAll(0xFFC200FF, string);
                mysql_format(connectionHandle, string, sizeof(string), "UPDATE `players` SET `Credits` = (`Credits` + %d) WHERE `id` = '%i' LIMIT 1;", prize_size,cache_get_row_int(0, 0));
                mysql_function_query(connectionHandle, string, false, "SendQuery","");
            }
            case XP_PRIZE:
            {
                new prize_size = 1000+random(2000);
                new string[128];
                format(string, sizeof(string), "• {FFFFFF}Ðiandienos varþybas laimëjo {FFC200}%s{FFFFFF}, ir laimëjo: {FFC200}%i {FFFFFF}XP !", Name,prize_size);
                SendClientMessageToAll(0xFFC200FF, string);
                mysql_format(connectionHandle, string, sizeof(string), "UPDATE `players` SET `XP` = (`XP` + %d) WHERE `id` = '%i' LIMIT 1;", prize_size,cache_get_row_int(0, 0));
                mysql_function_query(connectionHandle, string, false, "SendQuery","");
            }
        }
    }
    return 1;
}
